
Projekt_dyplomowy_regulatorV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dde8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800df78  0800df78  0001df78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e404  0800e404  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e404  0800e404  0001e404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e40c  0800e40c  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e40c  0800e40c  0001e40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e410  0800e410  0001e410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800e414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  200002d4  0800e6e8  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  0800e6e8  00020978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dcb2  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000435e  00000000  00000000  0003dff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00042358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013fe  00000000  00000000  00043d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c16e  00000000  00000000  00045126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000223be  00000000  00000000  00071294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b55b  00000000  00000000  00093652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e5c  00000000  00000000  0019ebb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001a6a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df60 	.word	0x0800df60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800df60 	.word	0x0800df60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <CircBuffInit>:

#include "main.h"
#include "CircularBuffer.h"

void CircBuffInit(CircularBuffer *buff)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	buff->head = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c
	buff->size = BUFFER_SIZE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	220f      	movs	r2, #15
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40

	for (uint32_t i=0; i < buff->size; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e007      	b.n	8000f6e <CircBuffInit+0x2a>
	{
		buff->data[i] = 0;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	2100      	movs	r1, #0
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint32_t i=0; i < buff->size; i++)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3f2      	bcc.n	8000f5e <CircBuffInit+0x1a>
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <CircBuffUpdate>:

void CircBuffUpdate(CircularBuffer *buff, int32_t new_data)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
	buff->data[buff->head] = new_data;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	buff->head++;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c
	buff->head = buff->head % buff->size;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fb2:	fb01 f202 	mul.w	r2, r1, r2
 8000fb6:	1a9a      	subs	r2, r3, r2
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <FilterMedianInit>:
int32_t get_median(int32_t *array, int32_t size);


// Median Filter
void FilterMedianInit(CircularBuffer *buff)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	CircBuffInit(buff);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ffb7 	bl	8000f44 <CircBuffInit>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <FilterMedianUpdate>:

int32_t FilterMedianUpdate(CircularBuffer *buff, int32_t new_data)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b092      	sub	sp, #72	; 0x48
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
	int32_t tmp_array[BUFFER_SIZE];
	int32_t out = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44

	CircBuffUpdate(buff, new_data);
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffc9 	bl	8000f86 <CircBuffUpdate>

	memcpy(tmp_array, buff->data, sizeof(tmp_array));
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	223c      	movs	r2, #60	; 0x3c
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00a ff32 	bl	800be66 <memcpy>

	quickSort(tmp_array, 0,BUFFER_SIZE - 1);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	220e      	movs	r2, #14
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f84d 	bl	80010aa <quickSort>

	out = get_median(tmp_array, BUFFER_SIZE);
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	210f      	movs	r1, #15
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f87e 	bl	8001118 <get_median>
 800101c:	6478      	str	r0, [r7, #68]	; 0x44

	return out;
 800101e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001020:	4618      	mov	r0, r3
 8001022:	3748      	adds	r7, #72	; 0x48
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <partition>:
//			}
//		}
//	}
//}

static int32_t partition(int32_t arr[], int32_t low, int32_t high) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
    int32_t pivot = arr[high]; // Wybieramy ostatni element jako pivot
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	617b      	str	r3, [r7, #20]
    int32_t i = (low - 1); // Indeks mniejszego elementu
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3b01      	subs	r3, #1
 8001044:	61fb      	str	r3, [r7, #28]

    for (int32_t j = low; j <= high - 1; j++) {
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	e018      	b.n	800107e <partition+0x56>
        // Jeśli aktualny element jest mniejszy lub równy pivotowi
        if (arr[j] <= pivot) {
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	db0d      	blt.n	8001078 <partition+0x50>
            i++; // Inkrementujemy indeks mniejszego elementu
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	3301      	adds	r3, #1
 8001060:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	18d0      	adds	r0, r2, r3
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f000 f83b 	bl	80010ee <swap>
    for (int32_t j = low; j <= high - 1; j++) {
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	3301      	adds	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	429a      	cmp	r2, r3
 8001084:	dce2      	bgt.n	800104c <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	18d0      	adds	r0, r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f000 f828 	bl	80010ee <swap>
    return (i + 1);
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <quickSort>:

// Główna funkcja sortująca używająca quicksort
static void quickSort(int32_t arr[], int32_t low, int32_t high) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
    if (low < high) {
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	da13      	bge.n	80010e6 <quickSort+0x3c>
        // pi to indeks partition
        int32_t pi = partition(arr, low, high);
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff ffb0 	bl	8001028 <partition>
 80010c8:	6178      	str	r0, [r7, #20]

        // Separatne wywołania quickSort dla przedziałów przed i po partition
        quickSort(arr, low, pi - 1);
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	461a      	mov	r2, r3
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff ffe9 	bl	80010aa <quickSort>
        quickSort(arr, pi + 1, high);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4619      	mov	r1, r3
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff ffe2 	bl	80010aa <quickSort>
    }
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <swap>:

static void swap(int32_t *xp, int32_t *yp)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
    int32_t temp = *xp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]

    *xp = *yp;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
    *yp = temp;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <get_median>:

int32_t get_median(int32_t *array, int32_t size)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	int32_t median;

	if ((size % 2) == 0)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d118      	bne.n	800115e <get_median+0x46>
	{
		median = (array[size/2-1] + array[size/2]) / 2;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	0fda      	lsrs	r2, r3, #31
 8001130:	4413      	add	r3, r2
 8001132:	105b      	asrs	r3, r3, #1
 8001134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001138:	3b01      	subs	r3, #1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	0fd9      	lsrs	r1, r3, #31
 8001146:	440b      	add	r3, r1
 8001148:	105b      	asrs	r3, r3, #1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	440b      	add	r3, r1
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	0fda      	lsrs	r2, r3, #31
 8001156:	4413      	add	r3, r2
 8001158:	105b      	asrs	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e00b      	b.n	8001176 <get_median+0x5e>
	}
	else
	{
		median = array[size/2-1];
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	0fda      	lsrs	r2, r3, #31
 8001162:	4413      	add	r3, r2
 8001164:	105b      	asrs	r3, r3, #1
 8001166:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800116a:	3b01      	subs	r3, #1
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
	}

	return median;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <FilterMovingAverageInit>:

// Moving Average Filter
static int32_t average(int32_t *array, uint32_t size);

void FilterMovingAverageInit(CircularBuffer *buff)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	CircBuffInit(buff);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fed9 	bl	8000f44 <CircBuffInit>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <FilterLowPassInit>:

	return (sum/size);
}
// Lowpass
void FilterLowPassInit(FilterLowPass *lpf, float alpha)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	ed87 0a00 	vstr	s0, [r7]
	lpf->out = 0.0f;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
	lpf->alpha = alpha;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	605a      	str	r2, [r3, #4]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <FilterLowPassUpdate>:

int32_t FilterLowPassUpdate(FilterLowPass *lpf, int32_t new_data)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	lpf->out = lpf->alpha * new_data + (1.0f-(lpf->alpha)) * lpf->out;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120a:	ee17 3a90 	vmov	r3, s15
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PIDInit>:
 */

#include "PID.h"

void PIDInit(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 800121a:	b480      	push	{r7}
 800121c:	b087      	sub	sp, #28
 800121e:	af00      	add	r7, sp, #0
 8001220:	6178      	str	r0, [r7, #20]
 8001222:	ed87 0a04 	vstr	s0, [r7, #16]
 8001226:	edc7 0a03 	vstr	s1, [r7, #12]
 800122a:	ed87 1a02 	vstr	s2, [r7, #8]
 800122e:	6079      	str	r1, [r7, #4]
	pid_data->error_previous = 0;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
	pid_data->error_total = 0;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	b21a      	sxth	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	829a      	strh	r2, [r3, #20]
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PIDReset>:

void PIDReset(PID *pid_data)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	pid_data->error_total = 0;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
	pid_data->error_previous = 0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012b0:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <MX_ADC1_Init+0x11c>)
 80012b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012cc:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012da:	2201      	movs	r2, #1
 80012dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <MX_ADC1_Init+0x118>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <MX_ADC1_Init+0x118>)
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001306:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <MX_ADC1_Init+0x118>)
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <MX_ADC1_Init+0x118>)
 8001310:	221c      	movs	r2, #28
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <MX_ADC1_Init+0x118>)
 8001316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <MX_ADC1_Init+0x118>)
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_ADC1_Init+0x118>)
 8001324:	2201      	movs	r2, #1
 8001326:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001328:	481e      	ldr	r0, [pc, #120]	; (80013a4 <MX_ADC1_Init+0x118>)
 800132a:	f002 fe41 	bl	8003fb0 <HAL_ADC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001334:	f001 fb08 	bl	8002948 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4818      	ldr	r0, [pc, #96]	; (80013a4 <MX_ADC1_Init+0x118>)
 8001344:	f004 f8c8 	bl	80054d8 <HAL_ADCEx_MultiModeConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800134e:	f001 fafb 	bl	8002948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_ADC1_Init+0x120>)
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001356:	2306      	movs	r3, #6
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800135a:	2307      	movs	r3, #7
 800135c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135e:	237f      	movs	r3, #127	; 0x7f
 8001360:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001362:	2304      	movs	r3, #4
 8001364:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_ADC1_Init+0x118>)
 8001370:	f003 fa62 	bl	8004838 <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800137a:	f001 fae5 	bl	8002948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_ADC1_Init+0x124>)
 8001380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001382:	230c      	movs	r3, #12
 8001384:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_ADC1_Init+0x118>)
 800138c:	f003 fa54 	bl	8004838 <HAL_ADC_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8001396:	f001 fad7 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002f0 	.word	0x200002f0
 80013a8:	50040000 	.word	0x50040000
 80013ac:	36902000 	.word	0x36902000
 80013b0:	3ac04000 	.word	0x3ac04000

080013b4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013cc:	4a3d      	ldr	r2, [pc, #244]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013d0:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013e2:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013ea:	2204      	movs	r2, #4
 80013ec:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013f4:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 3;
 80013fa:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80013fc:	2203      	movs	r2, #3
 80013fe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <MX_ADC3_Init+0x10c>)
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <MX_ADC3_Init+0x10c>)
 800140a:	2200      	movs	r2, #0
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <MX_ADC3_Init+0x10c>)
 8001410:	2200      	movs	r2, #0
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_ADC3_Init+0x10c>)
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <MX_ADC3_Init+0x10c>)
 800141e:	2200      	movs	r2, #0
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <MX_ADC3_Init+0x10c>)
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <MX_ADC3_Init+0x10c>)
 800142c:	220c      	movs	r2, #12
 800142e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_ADC3_Init+0x10c>)
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_ADC3_Init+0x10c>)
 8001438:	2200      	movs	r2, #0
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <MX_ADC3_Init+0x10c>)
 800143e:	2201      	movs	r2, #1
 8001440:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001442:	481f      	ldr	r0, [pc, #124]	; (80014c0 <MX_ADC3_Init+0x10c>)
 8001444:	f002 fdb4 	bl	8003fb0 <HAL_ADC_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 800144e:	f001 fa7b 	bl	8002948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_ADC3_Init+0x114>)
 8001454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001456:	2306      	movs	r3, #6
 8001458:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800145a:	2307      	movs	r3, #7
 800145c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145e:	237f      	movs	r3, #127	; 0x7f
 8001460:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001462:	2304      	movs	r3, #4
 8001464:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_ADC3_Init+0x10c>)
 8001470:	f003 f9e2 	bl	8004838 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 800147a:	f001 fa65 	bl	8002948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_ADC3_Init+0x118>)
 8001480:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001482:	230c      	movs	r3, #12
 8001484:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_ADC3_Init+0x10c>)
 800148c:	f003 f9d4 	bl	8004838 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 8001496:	f001 fa57 	bl	8002948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_ADC3_Init+0x11c>)
 800149c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800149e:	2312      	movs	r3, #18
 80014a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <MX_ADC3_Init+0x10c>)
 80014a8:	f003 f9c6 	bl	8004838 <HAL_ADC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC3_Init+0x102>
  {
    Error_Handler();
 80014b2:	f001 fa49 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000354 	.word	0x20000354
 80014c4:	50040200 	.word	0x50040200
 80014c8:	04300002 	.word	0x04300002
 80014cc:	08600004 	.word	0x08600004
 80014d0:	0c900008 	.word	0x0c900008

080014d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a5e      	ldr	r2, [pc, #376]	; (800166c <HAL_ADC_MspInit+0x198>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d158      	bne.n	80015a8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80014f6:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <HAL_ADC_MspInit+0x19c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a5c      	ldr	r2, [pc, #368]	; (8001670 <HAL_ADC_MspInit+0x19c>)
 80014fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001500:	4b5b      	ldr	r3, [pc, #364]	; (8001670 <HAL_ADC_MspInit+0x19c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10b      	bne.n	8001520 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001508:	4b5a      	ldr	r3, [pc, #360]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	4a59      	ldr	r2, [pc, #356]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 800150e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001514:	4b57      	ldr	r3, [pc, #348]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b54      	ldr	r3, [pc, #336]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	4a53      	ldr	r2, [pc, #332]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152c:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = H1_CURRENT_Pin|H2_CURRENT_Pin;
 8001538:	2330      	movs	r3, #48	; 0x30
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800153c:	230b      	movs	r3, #11
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	484b      	ldr	r0, [pc, #300]	; (8001678 <HAL_ADC_MspInit+0x1a4>)
 800154c:	f004 fbfc 	bl	8005d48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 8001552:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <HAL_ADC_MspInit+0x1ac>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155c:	4b47      	ldr	r3, [pc, #284]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b44      	ldr	r3, [pc, #272]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800158a:	483c      	ldr	r0, [pc, #240]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 800158c:	f004 f966 	bl	800585c <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001596:	f001 f9d7 	bl	8002948 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a37      	ldr	r2, [pc, #220]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 800159e:	64da      	str	r2, [r3, #76]	; 0x4c
 80015a0:	4a36      	ldr	r2, [pc, #216]	; (800167c <HAL_ADC_MspInit+0x1a8>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80015a6:	e05c      	b.n	8001662 <HAL_ADC_MspInit+0x18e>
  else if(adcHandle->Instance==ADC3)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a35      	ldr	r2, [pc, #212]	; (8001684 <HAL_ADC_MspInit+0x1b0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d157      	bne.n	8001662 <HAL_ADC_MspInit+0x18e>
    HAL_RCC_ADC_CLK_ENABLED++;
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_ADC_MspInit+0x19c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <HAL_ADC_MspInit+0x19c>)
 80015ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_ADC_MspInit+0x19c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10b      	bne.n	80015dc <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	4a2a      	ldr	r2, [pc, #168]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 80015ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_ADC_MspInit+0x1a0>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HALL1_Pin|HALL2_Pin|HALL3_Pin;
 80015f4:	2307      	movs	r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f8:	230b      	movs	r3, #11
 80015fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	481c      	ldr	r0, [pc, #112]	; (8001678 <HAL_ADC_MspInit+0x1a4>)
 8001608:	f004 fb9e 	bl	8005d48 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 800160e:	4a1f      	ldr	r2, [pc, #124]	; (800168c <HAL_ADC_MspInit+0x1b8>)
 8001610:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_0;
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 800162c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001630:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 8001634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001638:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 800163c:	2220      	movs	r2, #32
 800163e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001646:	4810      	ldr	r0, [pc, #64]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 8001648:	f004 f908 	bl	800585c <HAL_DMA_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_ADC_MspInit+0x182>
      Error_Handler();
 8001652:	f001 f979 	bl	8002948 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 800165a:	64da      	str	r2, [r3, #76]	; 0x4c
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_ADC_MspInit+0x1b4>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	; 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	50040000 	.word	0x50040000
 8001670:	20000448 	.word	0x20000448
 8001674:	40021000 	.word	0x40021000
 8001678:	48000800 	.word	0x48000800
 800167c:	200003b8 	.word	0x200003b8
 8001680:	40020008 	.word	0x40020008
 8001684:	50040200 	.word	0x50040200
 8001688:	20000400 	.word	0x20000400
 800168c:	40020030 	.word	0x40020030

08001690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_DMA_Init+0x2c>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <MX_DMA_Init+0x2c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6493      	str	r3, [r2, #72]	; 0x48
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_DMA_Init+0x2c>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000

080016c0 <send_cmd>:
	else
		return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
  int i;

  if (OW_Reset() != HAL_OK)
 80016cc:	f001 ff88 	bl	80035e0 <OW_Reset>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <send_cmd+0x1a>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e01e      	b.n	8001718 <send_cmd+0x58>

  if (!rom_code) {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d103      	bne.n	80016e8 <send_cmd+0x28>
    OW_Write_Byte(DS18B20_SKIP_ROM);
 80016e0:	20cc      	movs	r0, #204	; 0xcc
 80016e2:	f002 f807 	bl	80036f4 <OW_Write_Byte>
 80016e6:	e012      	b.n	800170e <send_cmd+0x4e>
  } else {
	  OW_Write_Byte(DS18B20_MATCH_ROM);
 80016e8:	2055      	movs	r0, #85	; 0x55
 80016ea:	f002 f803 	bl	80036f4 <OW_Write_Byte>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e009      	b.n	8001708 <send_cmd+0x48>
      OW_Write_Byte(rom_code[i]);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 fff9 	bl	80036f4 <OW_Write_Byte>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b07      	cmp	r3, #7
 800170c:	ddf2      	ble.n	80016f4 <send_cmd+0x34>
  }
  OW_Write_Byte(cmd);
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	4618      	mov	r0, r3
 8001712:	f001 ffef 	bl	80036f4 <OW_Write_Byte>
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8001728:	2144      	movs	r1, #68	; 0x44
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffc8 	bl	80016c0 <send_cmd>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 800173a:	b590      	push	{r4, r7, lr}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8001744:	21be      	movs	r1, #190	; 0xbe
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffba 	bl	80016c0 <send_cmd>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e01e      	b.n	8001794 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e009      	b.n	8001770 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = OW_Read_Byte();
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	18d4      	adds	r4, r2, r3
 8001762:	f001 ff85 	bl	8003670 <OW_Read_Byte>
 8001766:	4603      	mov	r3, r0
 8001768:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b08      	cmp	r3, #8
 8001774:	ddf2      	ble.n	800175c <ds18b20_read_scratchpad+0x22>

  crc = OW_CRC(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8001776:	2108      	movs	r1, #8
 8001778:	6838      	ldr	r0, [r7, #0]
 800177a:	f002 f803 	bl	8003784 <OW_CRC>
 800177e:	4603      	mov	r3, r0
 8001780:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3308      	adds	r3, #8
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	7afa      	ldrb	r2, [r7, #11]
 800178a:	429a      	cmp	r2, r3
 800178c:	d101      	bne.n	8001792 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}

0800179c <ds18b20_get_temp>:

int16_t ds18b20_get_temp(const uint8_t* rom_code)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffc5 	bl	800173a <ds18b20_read_scratchpad>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <ds18b20_get_temp+0x1e>
    return 85;
 80017b6:	2355      	movs	r3, #85	; 0x55
 80017b8:	e003      	b.n	80017c2 <ds18b20_get_temp+0x26>
 80017ba:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 80017bc:	817b      	strh	r3, [r7, #10]

  return temp;
 80017be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <MX_GPIO_Init+0xe4>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <MX_GPIO_Init+0xe4>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <MX_GPIO_Init+0xe4>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <MX_GPIO_Init+0xe4>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <MX_GPIO_Init+0xe4>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <MX_GPIO_Init+0xe4>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <MX_GPIO_Init+0xe4>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <MX_GPIO_Init+0xe4>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <MX_GPIO_Init+0xe4>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_GPIO_Init+0xe4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <MX_GPIO_Init+0xe4>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_GPIO_Init+0xe4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR2_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f004 fc26 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001856:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4813      	ldr	r0, [pc, #76]	; (80018b4 <MX_GPIO_Init+0xe8>)
 8001868:	f004 fa6e 	bl	8005d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800186c:	2308      	movs	r3, #8
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001870:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <MX_GPIO_Init+0xe8>)
 8001882:	f004 fa61 	bl	8005d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR2_Pin|DIR1_Pin;
 8001886:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f004 fa51 	bl	8005d48 <HAL_GPIO_Init>

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000800 	.word	0x48000800

080018b8 <HBridgeInit>:


void HBridgeInit(HBridge *hb, GPIO_TypeDef *dir_port,
		uint16_t dir_pin, TIM_HandleTypeDef *PwmTim,
		uint8_t TimChannel)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	80fb      	strh	r3, [r7, #6]
	hb->DIR_PORT = dir_port;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	601a      	str	r2, [r3, #0]

	hb->DIR_GPIO_PIN = dir_pin;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	88fa      	ldrh	r2, [r7, #6]
 80018d2:	809a      	strh	r2, [r3, #4]

	hb->PWM_TIM = PwmTim;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	609a      	str	r2, [r3, #8]
	hb->TIM_CHANNEL = TimChannel;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	7e3a      	ldrb	r2, [r7, #24]
 80018de:	731a      	strb	r2, [r3, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HBridgeControl>:

void HBridgeControl(HBridge *hb, int16_t pwm_val)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
	if(pwm_val > 0)
 80018f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dd7c      	ble.n	80019fa <HBridgeControl+0x10e>
	{
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7b1b      	ldrb	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HBridgeControl+0x28>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
 8001912:	e02c      	b.n	800196e <HBridgeControl+0x82>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7b1b      	ldrb	r3, [r3, #12]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d105      	bne.n	8001928 <HBridgeControl+0x3c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	6393      	str	r3, [r2, #56]	; 0x38
 8001926:	e022      	b.n	800196e <HBridgeControl+0x82>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7b1b      	ldrb	r3, [r3, #12]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d105      	bne.n	800193c <HBridgeControl+0x50>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2300      	movs	r3, #0
 8001938:	63d3      	str	r3, [r2, #60]	; 0x3c
 800193a:	e018      	b.n	800196e <HBridgeControl+0x82>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7b1b      	ldrb	r3, [r3, #12]
 8001940:	2b0c      	cmp	r3, #12
 8001942:	d105      	bne.n	8001950 <HBridgeControl+0x64>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2300      	movs	r3, #0
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	e00e      	b.n	800196e <HBridgeControl+0x82>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7b1b      	ldrb	r3, [r3, #12]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d105      	bne.n	8001964 <HBridgeControl+0x78>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2300      	movs	r3, #0
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	e004      	b.n	800196e <HBridgeControl+0x82>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	65d3      	str	r3, [r2, #92]	; 0x5c
		HAL_GPIO_WritePin(hb->DIR_PORT,hb->DIR_GPIO_PIN, GPIO_PIN_SET);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	889b      	ldrh	r3, [r3, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	4619      	mov	r1, r3
 800197a:	f004 fb8f 	bl	800609c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7b1b      	ldrb	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HBridgeControl+0xa8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001990:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
	}
}
 8001992:	e0f0      	b.n	8001b76 <HBridgeControl+0x28a>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	2b04      	cmp	r3, #4
 800199a:	d106      	bne.n	80019aa <HBridgeControl+0xbe>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019a6:	6393      	str	r3, [r2, #56]	; 0x38
 80019a8:	e0e5      	b.n	8001b76 <HBridgeControl+0x28a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7b1b      	ldrb	r3, [r3, #12]
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d106      	bne.n	80019c0 <HBridgeControl+0xd4>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019bc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80019be:	e0da      	b.n	8001b76 <HBridgeControl+0x28a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7b1b      	ldrb	r3, [r3, #12]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d106      	bne.n	80019d6 <HBridgeControl+0xea>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	e0cf      	b.n	8001b76 <HBridgeControl+0x28a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7b1b      	ldrb	r3, [r3, #12]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d106      	bne.n	80019ec <HBridgeControl+0x100>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ea:	e0c4      	b.n	8001b76 <HBridgeControl+0x28a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019f6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80019f8:	e0bd      	b.n	8001b76 <HBridgeControl+0x28a>
	else if(pwm_val < 0)
 80019fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f280 8081 	bge.w	8001b06 <HBridgeControl+0x21a>
		pwm_val *= -1;
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	425b      	negs	r3, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7b1b      	ldrb	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <HBridgeControl+0x134>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1e:	e02c      	b.n	8001a7a <HBridgeControl+0x18e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7b1b      	ldrb	r3, [r3, #12]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d105      	bne.n	8001a34 <HBridgeControl+0x148>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	6393      	str	r3, [r2, #56]	; 0x38
 8001a32:	e022      	b.n	8001a7a <HBridgeControl+0x18e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7b1b      	ldrb	r3, [r3, #12]
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d105      	bne.n	8001a48 <HBridgeControl+0x15c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a46:	e018      	b.n	8001a7a <HBridgeControl+0x18e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7b1b      	ldrb	r3, [r3, #12]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d105      	bne.n	8001a5c <HBridgeControl+0x170>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	e00e      	b.n	8001a7a <HBridgeControl+0x18e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	2b10      	cmp	r3, #16
 8001a62:	d105      	bne.n	8001a70 <HBridgeControl+0x184>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6e:	e004      	b.n	8001a7a <HBridgeControl+0x18e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	65d3      	str	r3, [r2, #92]	; 0x5c
		HAL_GPIO_WritePin(hb->DIR_PORT,hb->DIR_GPIO_PIN, GPIO_PIN_RESET);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	889b      	ldrh	r3, [r3, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	f004 fb09 	bl	800609c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7b1b      	ldrb	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HBridgeControl+0x1b4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a9e:	e06a      	b.n	8001b76 <HBridgeControl+0x28a>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d106      	bne.n	8001ab6 <HBridgeControl+0x1ca>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ab2:	6393      	str	r3, [r2, #56]	; 0x38
 8001ab4:	e05f      	b.n	8001b76 <HBridgeControl+0x28a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7b1b      	ldrb	r3, [r3, #12]
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d106      	bne.n	8001acc <HBridgeControl+0x1e0>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ac8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001aca:	e054      	b.n	8001b76 <HBridgeControl+0x28a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7b1b      	ldrb	r3, [r3, #12]
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d106      	bne.n	8001ae2 <HBridgeControl+0x1f6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ade:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae0:	e049      	b.n	8001b76 <HBridgeControl+0x28a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7b1b      	ldrb	r3, [r3, #12]
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d106      	bne.n	8001af8 <HBridgeControl+0x20c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
 8001af6:	e03e      	b.n	8001b76 <HBridgeControl+0x28a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b02:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001b04:	e037      	b.n	8001b76 <HBridgeControl+0x28a>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7b1b      	ldrb	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <HBridgeControl+0x22e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b18:	e02d      	b.n	8001b76 <HBridgeControl+0x28a>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7b1b      	ldrb	r3, [r3, #12]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d105      	bne.n	8001b2e <HBridgeControl+0x242>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b2c:	e023      	b.n	8001b76 <HBridgeControl+0x28a>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7b1b      	ldrb	r3, [r3, #12]
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d105      	bne.n	8001b42 <HBridgeControl+0x256>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001b40:	e019      	b.n	8001b76 <HBridgeControl+0x28a>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7b1b      	ldrb	r3, [r3, #12]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d105      	bne.n	8001b56 <HBridgeControl+0x26a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2300      	movs	r3, #0
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b54:	e00f      	b.n	8001b76 <HBridgeControl+0x28a>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7b1b      	ldrb	r3, [r3, #12]
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d105      	bne.n	8001b6a <HBridgeControl+0x27e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001b68:	e005      	b.n	8001b76 <HBridgeControl+0x28a>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001b74:	e7ff      	b.n	8001b76 <HBridgeControl+0x28a>
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001b86:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <MX_I2C1_Init+0x78>)
 8001b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <MX_I2C1_Init+0x7c>)
 8001b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bba:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001bbc:	f004 faa0 	bl	8006100 <HAL_I2C_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bc6:	f000 febf 	bl	8002948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001bce:	f004 fb32 	bl	8006236 <HAL_I2CEx_ConfigAnalogFilter>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bd8:	f000 feb6 	bl	8002948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_I2C1_Init+0x74>)
 8001be0:	f004 fb74 	bl	80062cc <HAL_I2CEx_ConfigDigitalFilter>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bea:	f000 fead 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000044c 	.word	0x2000044c
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	10909cec 	.word	0x10909cec

08001c00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0ac      	sub	sp, #176	; 0xb0
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2288      	movs	r2, #136	; 0x88
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f00a f8a0 	bl	800bd66 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a21      	ldr	r2, [pc, #132]	; (8001cb0 <HAL_I2C_MspInit+0xb0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d13b      	bne.n	8001ca8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c30:	2340      	movs	r3, #64	; 0x40
 8001c32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 f9f5 	bl	800702c <HAL_RCCEx_PeriphCLKConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c48:	f000 fe7e 	bl	8002948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c64:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6c:	2312      	movs	r3, #18
 8001c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <HAL_I2C_MspInit+0xb8>)
 8001c8c:	f004 f85c 	bl	8005d48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ca8:	bf00      	nop
 8001caa:	37b0      	adds	r7, #176	; 0xb0
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000400 	.word	0x48000400

08001cbc <CalculateSoundSpeed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static float CalculateSoundSpeed(float temp)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	ed87 0a01 	vstr	s0, [r7, #4]
	return 331.8f + 0.6f * temp;
 8001cc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cca:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ce8 <CalculateSoundSpeed+0x2c>
 8001cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001cec <CalculateSoundSpeed+0x30>
 8001cd6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001cda:	eeb0 0a67 	vmov.f32	s0, s15
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	3f19999a 	.word	0x3f19999a
 8001cec:	43a5e666 	.word	0x43a5e666

08001cf0 <CalculateCurrent>:

float CalculateCurrent(int16_t ADC_CURRENT)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
	return (ADC_CURRENT * VREF / ADC_MAX_VALUE) / SENSITIVITY_CURRENT;
 8001cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc10 	bl	8000524 <__aeabi_i2d>
 8001d04:	a312      	add	r3, pc, #72	; (adr r3, 8001d50 <CalculateCurrent+0x60>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fc75 	bl	80005f8 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	a310      	add	r3, pc, #64	; (adr r3, 8001d58 <CalculateCurrent+0x68>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fd96 	bl	800084c <__aeabi_ddiv>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	a30d      	add	r3, pc, #52	; (adr r3, 8001d60 <CalculateCurrent+0x70>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fd8d 	bl	800084c <__aeabi_ddiv>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff35 	bl	8000ba8 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	ee07 3a90 	vmov	s15, r3
}
 8001d44:	eeb0 0a67 	vmov.f32	s0, s15
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	66666666 	.word	0x66666666
 8001d54:	400a6666 	.word	0x400a6666
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	40affe00 	.word	0x40affe00
 8001d60:	9999999a 	.word	0x9999999a
 8001d64:	3fc99999 	.word	0x3fc99999

08001d68 <HallCalculateTesla>:

float HallCalculateTesla(uint16_t ADC_val)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
	return (float) ((ADC_val - ADC_OFFSET_HALL) * VREF / ADC_MAX_VALUE * 1000
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbd3 	bl	8000524 <__aeabi_i2d>
 8001d7e:	a320      	add	r3, pc, #128	; (adr r3, 8001e00 <HallCalculateTesla+0x98>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fc38 	bl	80005f8 <__aeabi_dmul>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	a31d      	add	r3, pc, #116	; (adr r3, 8001e08 <HallCalculateTesla+0xa0>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fd59 	bl	800084c <__aeabi_ddiv>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HallCalculateTesla+0x90>)
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
			/ SENSITIVITY_HALL * GAUSS_TO_TESLA);
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HallCalculateTesla+0x94>)
 8001dba:	f7fe fd47 	bl	800084c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	a30a      	add	r3, pc, #40	; (adr r3, 8001df0 <HallCalculateTesla+0x88>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc14 	bl	80005f8 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
	return (float) ((ADC_val - ADC_OFFSET_HALL) * VREF / ADC_MAX_VALUE * 1000
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fee6 	bl	8000ba8 <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	ee07 3a90 	vmov	s15, r3
}
 8001de2:	eeb0 0a67 	vmov.f32	s0, s15
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	eb1c432d 	.word	0xeb1c432d
 8001df4:	3f1a36e2 	.word	0x3f1a36e2
 8001df8:	408f4000 	.word	0x408f4000
 8001dfc:	40090000 	.word	0x40090000
 8001e00:	66666666 	.word	0x66666666
 8001e04:	400a6666 	.word	0x400a6666
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40affe00 	.word	0x40affe00

08001e10 <HBridgeCalculatePWM_max>:

int16_t HBridgeCalculatePWM_max(int32_t HALL)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if (HALL < DEAD_ZONE && HALL > -DEAD_ZONE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e1e:	da05      	bge.n	8001e2c <HBridgeCalculatePWM_max+0x1c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8001e26:	dd01      	ble.n	8001e2c <HBridgeCalculatePWM_max+0x1c>
		return 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e007      	b.n	8001e3c <HBridgeCalculatePWM_max+0x2c>
	else if (HALL > DEAD_ZONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e32:	dd01      	ble.n	8001e38 <HBridgeCalculatePWM_max+0x28>
		return MAX_PWM;
 8001e34:	2332      	movs	r3, #50	; 0x32
 8001e36:	e001      	b.n	8001e3c <HBridgeCalculatePWM_max+0x2c>
	else
		return -MAX_PWM;
 8001e38:	f06f 0331 	mvn.w	r3, #49	; 0x31
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LineAppend>:
	else
		return 0.125 * HALL - 250;
}

void LineAppend(uint8_t value)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n')
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b0d      	cmp	r3, #13
 8001e56:	d002      	beq.n	8001e5e <LineAppend+0x16>
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b0a      	cmp	r3, #10
 8001e5c:	d119      	bne.n	8001e92 <LineAppend+0x4a>
	{
		// odebraliśmy znak końca linii
		if (line_length > 0)
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <LineAppend+0x74>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d025      	beq.n	8001eb2 <LineAppend+0x6a>
		{
			// dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <LineAppend+0x74>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <LineAppend+0x78>)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			xset = atoi(line_buffer);
 8001e70:	4813      	ldr	r0, [pc, #76]	; (8001ec0 <LineAppend+0x78>)
 8001e72:	f009 f94b 	bl	800b10c <atoi>
 8001e76:	ee07 0a90 	vmov	s15, r0
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <LineAppend+0x7c>)
 8001e80:	edc3 7a00 	vstr	s15, [r3]
			input_done = 1;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <LineAppend+0x80>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <LineAppend+0x74>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
		if (line_length > 0)
 8001e90:	e00f      	b.n	8001eb2 <LineAppend+0x6a>
		}
	}
	else
	{
		if (line_length >= LINE_MAX_LENGTH)
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <LineAppend+0x74>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d902      	bls.n	8001ea0 <LineAppend+0x58>
		{
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <LineAppend+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <LineAppend+0x74>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	4905      	ldr	r1, [pc, #20]	; (8001ebc <LineAppend+0x74>)
 8001ea8:	600a      	str	r2, [r1, #0]
 8001eaa:	4905      	ldr	r1, [pc, #20]	; (8001ec0 <LineAppend+0x78>)
 8001eac:	79fa      	ldrb	r2, [r7, #7]
 8001eae:	54ca      	strb	r2, [r1, r3]
	}
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000057c 	.word	0x2000057c
 8001ec0:	20000574 	.word	0x20000574
 8001ec4:	200004c4 	.word	0x200004c4
 8001ec8:	20000571 	.word	0x20000571
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	b0c1      	sub	sp, #260	; 0x104
 8001ed6:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ed8:	f001 fdae 	bl	8003a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001edc:	f000 fc50 	bl	8002780 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001ee0:	f000 fc9f 	bl	8002822 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ee4:	f7ff fc72 	bl	80017cc <MX_GPIO_Init>
	MX_DMA_Init();
 8001ee8:	f7ff fbd2 	bl	8001690 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001eec:	f001 fa0e 	bl	800330c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001ef0:	f7ff f9cc 	bl	800128c <MX_ADC1_Init>
	MX_ADC3_Init();
 8001ef4:	f7ff fa5e 	bl	80013b4 <MX_ADC3_Init>
	MX_TIM2_Init();
 8001ef8:	f000 fea2 	bl	8002c40 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001efc:	f000 ff4c 	bl	8002d98 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8001f00:	f001 fa34 	bl	800336c <MX_USART3_UART_Init>
	MX_TIM4_Init();
 8001f04:	f000 ffbe 	bl	8002e84 <MX_TIM4_Init>
	MX_TIM8_Init();
 8001f08:	f001 f832 	bl	8002f70 <MX_TIM8_Init>
	MX_I2C1_Init();
 8001f0c:	f7ff fe38 	bl	8001b80 <MX_I2C1_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001f10:	f000 fcb2 	bl	8002878 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	// UART
	// ADC
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001f14:	217f      	movs	r1, #127	; 0x7f
 8001f16:	48a5      	ldr	r0, [pc, #660]	; (80021ac <main+0x2dc>)
 8001f18:	f003 fa4c 	bl	80053b4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_HALL, 3);
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	49a4      	ldr	r1, [pc, #656]	; (80021b0 <main+0x2e0>)
 8001f20:	48a2      	ldr	r0, [pc, #648]	; (80021ac <main+0x2dc>)
 8001f22:	f002 f995 	bl	8004250 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001f26:	217f      	movs	r1, #127	; 0x7f
 8001f28:	48a2      	ldr	r0, [pc, #648]	; (80021b4 <main+0x2e4>)
 8001f2a:	f003 fa43 	bl	80053b4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_CURRENT, 2);
 8001f2e:	2202      	movs	r2, #2
 8001f30:	49a1      	ldr	r1, [pc, #644]	; (80021b8 <main+0x2e8>)
 8001f32:	48a0      	ldr	r0, [pc, #640]	; (80021b4 <main+0x2e4>)
 8001f34:	f002 f98c 	bl	8004250 <HAL_ADC_Start_DMA>

//	float HALL[3] = { 0 };

	// H-Bridge
	HBridge coil1, coil2;
	int16_t coil1_PWM = 0, coil2_PWM = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	HBridgeInit(&coil1, DIR1_GPIO_Port, DIR1_Pin, &htim3, TIM_CHANNEL_2);
 8001f44:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001f48:	2304      	movs	r3, #4
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4b9b      	ldr	r3, [pc, #620]	; (80021bc <main+0x2ec>)
 8001f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f52:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001f56:	f7ff fcaf 	bl	80018b8 <HBridgeInit>
	HBridgeInit(&coil2, DIR2_GPIO_Port, DIR2_Pin, &htim4, TIM_CHANNEL_1);
 8001f5a:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	4b97      	ldr	r3, [pc, #604]	; (80021c0 <main+0x2f0>)
 8001f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f68:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001f6c:	f7ff fca4 	bl	80018b8 <HBridgeInit>

	// PI Regulator
	PID pid;
	PIDInit(&pid, PID_Kp, PID_Ki, PID_Kd, PID_WIND_UP);
 8001f70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f74:	2132      	movs	r1, #50	; 0x32
 8001f76:	ed9f 1a93 	vldr	s2, [pc, #588]	; 80021c4 <main+0x2f4>
 8001f7a:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8001f7e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f949 	bl	800121a <PIDInit>
	int16_t PID_output = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	// Measure temperature for USonic Sensors
	uint8_t ds[2][8] =
 8001f8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
	{ 0 };
	int16_t rslt = OW_Search_First();
 8001f9c:	f001 fc14 	bl	80037c8 <OW_Search_First>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
	uint8_t i = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
	while (rslt)
 8001fac:	e028      	b.n	8002000 <main+0x130>
	{
		// print device found
		for (int j = 0; j < 8; j++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fb4:	e016      	b.n	8001fe4 <main+0x114>
		{
			ds[i][j] = ROM_NO[j];
 8001fb6:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8001fba:	4983      	ldr	r1, [pc, #524]	; (80021c8 <main+0x2f8>)
 8001fbc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001fc0:	440a      	add	r2, r1
 8001fc2:	7811      	ldrb	r1, [r2, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	33c8      	adds	r3, #200	; 0xc8
 8001fc8:	f107 0210 	add.w	r2, r7, #16
 8001fcc:	189a      	adds	r2, r3, r2
 8001fce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b88      	subs	r3, #136	; 0x88
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8001fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	dde4      	ble.n	8001fb6 <main+0xe6>
		}
		i++;
 8001fec:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
		rslt = OW_Search_Next();
 8001ff6:	f001 fbfd 	bl	80037f4 <OW_Search_Next>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
	while (rslt)
 8002000:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1d2      	bne.n	8001fae <main+0xde>
	}
	ds18b20_start_measure(ds[0]);
 8002008:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fb87 	bl	8001720 <ds18b20_start_measure>
	ds18b20_start_measure(ds[1]);
 8002012:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002016:	3308      	adds	r3, #8
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fb81 	bl	8001720 <ds18b20_start_measure>
	HAL_Delay(750);
 800201e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002022:	f001 fd85 	bl	8003b30 <HAL_Delay>
	float temp_coils = ds18b20_get_temp(ds[0]) / 16.0f;
 8002026:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fbb6 	bl	800179c <ds18b20_get_temp>
 8002030:	4603      	mov	r3, r0
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800203e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002042:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	float temp_air = ds18b20_get_temp(ds[1]) / 16.0f;
 8002046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800204a:	3308      	adds	r3, #8
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fba5 	bl	800179c <ds18b20_get_temp>
 8002052:	4603      	mov	r3, r0
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800205c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002064:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	sonic_speed = CalculateSoundSpeed(temp_air) / 20000.0f;
 8002068:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 800206c:	f7ff fe26 	bl	8001cbc <CalculateSoundSpeed>
 8002070:	eeb0 7a40 	vmov.f32	s14, s0
 8002074:	eddf 6a55 	vldr	s13, [pc, #340]	; 80021cc <main+0x2fc>
 8002078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207c:	4b54      	ldr	r3, [pc, #336]	; (80021d0 <main+0x300>)
 800207e:	edc3 7a00 	vstr	s15, [r3]

	uint8_t wait_or_get = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	uint8_t critical_temp = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	uint8_t send_once = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	uint8_t x_calculate = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4

	// Start the Timers
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 800209a:	2100      	movs	r1, #0
 800209c:	484d      	ldr	r0, [pc, #308]	; (80021d4 <main+0x304>)
 800209e:	f005 fea1 	bl	8007de4 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80020a2:	2104      	movs	r1, #4
 80020a4:	484b      	ldr	r0, [pc, #300]	; (80021d4 <main+0x304>)
 80020a6:	f005 fe9d 	bl	8007de4 <HAL_TIM_IC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80020aa:	2108      	movs	r1, #8
 80020ac:	4849      	ldr	r0, [pc, #292]	; (80021d4 <main+0x304>)
 80020ae:	f005 fd31 	bl	8007b14 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80020b2:	2104      	movs	r1, #4
 80020b4:	4841      	ldr	r0, [pc, #260]	; (80021bc <main+0x2ec>)
 80020b6:	f005 fd2d 	bl	8007b14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80020ba:	2100      	movs	r1, #0
 80020bc:	4840      	ldr	r0, [pc, #256]	; (80021c0 <main+0x2f0>)
 80020be:	f005 fd29 	bl	8007b14 <HAL_TIM_PWM_Start>
	HAL_Delay(100);
 80020c2:	2064      	movs	r0, #100	; 0x64
 80020c4:	f001 fd34 	bl	8003b30 <HAL_Delay>

	// Init the moving average filters
	FilterMedianInit(&filter_median);
 80020c8:	4843      	ldr	r0, [pc, #268]	; (80021d8 <main+0x308>)
 80020ca:	f7fe ff7d 	bl	8000fc8 <FilterMedianInit>
	FilterMovingAverageInit(&filter_moving_average);
 80020ce:	4843      	ldr	r0, [pc, #268]	; (80021dc <main+0x30c>)
 80020d0:	f7ff f858 	bl	8001184 <FilterMovingAverageInit>
	FilterLowPassInit(&lpf_position, 0.01);
 80020d4:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80021e0 <main+0x310>
 80020d8:	4842      	ldr	r0, [pc, #264]	; (80021e4 <main+0x314>)
 80020da:	f7ff f85e 	bl	800119a <FilterLowPassInit>
	FilterLowPassInit(&lpf_velocity, 0.05);
 80020de:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80021e8 <main+0x318>
 80020e2:	4842      	ldr	r0, [pc, #264]	; (80021ec <main+0x31c>)
 80020e4:	f7ff f859 	bl	800119a <FilterLowPassInit>

	// Software Timers
	uint32_t TimerHeartBeat = HAL_GetTick();
 80020e8:	f001 fd16 	bl	8003b18 <HAL_GetTick>
 80020ec:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	uint32_t TimerControl = HAL_GetTick();
 80020f0:	f001 fd12 	bl	8003b18 <HAL_GetTick>
 80020f4:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	uint32_t TimerTempCoils = HAL_GetTick();
 80020f8:	f001 fd0e 	bl	8003b18 <HAL_GetTick>
 80020fc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	uint32_t TimerShowTemp = HAL_GetTick();
 8002100:	f001 fd0a 	bl	8003b18 <HAL_GetTick>
 8002104:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	uint32_t TimerUCSample = HAL_GetTick();
 8002108:	f001 fd06 	bl	8003b18 <HAL_GetTick>
 800210c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	uint32_t TimerVelocity = HAL_GetTick();
 8002110:	f001 fd02 	bl	8003b18 <HAL_GetTick>
 8002114:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	// Start UART to receive user input
	HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 8002118:	2201      	movs	r2, #1
 800211a:	4935      	ldr	r1, [pc, #212]	; (80021f0 <main+0x320>)
 800211c:	4835      	ldr	r0, [pc, #212]	; (80021f4 <main+0x324>)
 800211e:	f007 fbbf 	bl	80098a0 <HAL_UART_Receive_IT>
	uint8_t Message[64];
	uint8_t Length;
//	int32_t x_int = 0, x_int_prev = 0;
	int vel_set = VELOCITY_SET;
 8002122:	231e      	movs	r3, #30
 8002124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float x_prev = 0;
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		if ((HAL_GetTick() - TimerUCSample) > UC_SAMPLE_PERIOD)
 8002130:	f001 fcf2 	bl	8003b18 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d96d      	bls.n	800221c <main+0x34c>
		{

			static uint16_t start_message = 0;
			start1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8002140:	2100      	movs	r1, #0
 8002142:	4824      	ldr	r0, [pc, #144]	; (80021d4 <main+0x304>)
 8002144:	f006 fac6 	bl	80086d4 <HAL_TIM_ReadCapturedValue>
 8002148:	4603      	mov	r3, r0
 800214a:	4a2b      	ldr	r2, [pc, #172]	; (80021f8 <main+0x328>)
 800214c:	6013      	str	r3, [r2, #0]
			stop1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800214e:	2104      	movs	r1, #4
 8002150:	4820      	ldr	r0, [pc, #128]	; (80021d4 <main+0x304>)
 8002152:	f006 fabf 	bl	80086d4 <HAL_TIM_ReadCapturedValue>
 8002156:	4603      	mov	r3, r0
 8002158:	4a28      	ldr	r2, [pc, #160]	; (80021fc <main+0x32c>)
 800215a:	6013      	str	r3, [r2, #0]
			uint16_t input1 = FilterMedianUpdate(&filter_median,
					(stop1 - start1));
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <main+0x32c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <main+0x328>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	1ad3      	subs	r3, r2, r3
			uint16_t input1 = FilterMedianUpdate(&filter_median,
 8002166:	4619      	mov	r1, r3
 8002168:	481b      	ldr	r0, [pc, #108]	; (80021d8 <main+0x308>)
 800216a:	f7fe ff38 	bl	8000fde <FilterMedianUpdate>
 800216e:	4603      	mov	r3, r0
 8002170:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			//uint16_t input2 = FilterMovingAverageUpdate(&filter_moving_average, input1);
			//uint16_t input2 = FilterMovingAverageUpdate(&filter_moving_average, input1);
			x = FilterLowPassUpdate(&lpf_position, input1) * sonic_speed;
 8002174:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002178:	4619      	mov	r1, r3
 800217a:	481a      	ldr	r0, [pc, #104]	; (80021e4 <main+0x314>)
 800217c:	f7ff f820 	bl	80011c0 <FilterLowPassUpdate>
 8002180:	ee07 0a90 	vmov	s15, r0
 8002184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <main+0x300>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <main+0x330>)
 8002194:	edc3 7a00 	vstr	s15, [r3]

			if (start_message > 1000)
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <main+0x334>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a0:	d932      	bls.n	8002208 <main+0x338>
			{
				x_calculate = 1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 80021a8:	e034      	b.n	8002214 <main+0x344>
 80021aa:	bf00      	nop
 80021ac:	20000354 	.word	0x20000354
 80021b0:	200004a4 	.word	0x200004a4
 80021b4:	200002f0 	.word	0x200002f0
 80021b8:	200004a0 	.word	0x200004a0
 80021bc:	200005d4 	.word	0x200005d4
 80021c0:	20000620 	.word	0x20000620
 80021c4:	00000000 	.word	0x00000000
 80021c8:	20000810 	.word	0x20000810
 80021cc:	469c4000 	.word	0x469c4000
 80021d0:	200004bc 	.word	0x200004bc
 80021d4:	20000588 	.word	0x20000588
 80021d8:	200004d8 	.word	0x200004d8
 80021dc:	2000051c 	.word	0x2000051c
 80021e0:	3c23d70a 	.word	0x3c23d70a
 80021e4:	20000560 	.word	0x20000560
 80021e8:	3d4ccccd 	.word	0x3d4ccccd
 80021ec:	20000568 	.word	0x20000568
 80021f0:	20000570 	.word	0x20000570
 80021f4:	200006b8 	.word	0x200006b8
 80021f8:	200004b8 	.word	0x200004b8
 80021fc:	200004b4 	.word	0x200004b4
 8002200:	200004c0 	.word	0x200004c0
 8002204:	20000580 	.word	0x20000580
			}
			else
			{
				start_message++;
 8002208:	4b85      	ldr	r3, [pc, #532]	; (8002420 <main+0x550>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b83      	ldr	r3, [pc, #524]	; (8002420 <main+0x550>)
 8002212:	801a      	strh	r2, [r3, #0]
			}

			TimerUCSample = HAL_GetTick();
 8002214:	f001 fc80 	bl	8003b18 <HAL_GetTick>
 8002218:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		}

		if ((HAL_GetTick() - TimerVelocity) > VELOCITY_PERIOD)
 800221c:	f001 fc7c 	bl	8003b18 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d970      	bls.n	800230e <main+0x43e>
		{
			velocity = abs(
					FilterLowPassUpdate(&lpf_velocity,
							(x - x_prev) / (0.001 * VELOCITY_PERIOD)));
 800222c:	4b7d      	ldr	r3, [pc, #500]	; (8002424 <main+0x554>)
 800222e:	ed93 7a00 	vldr	s14, [r3]
 8002232:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	ee17 0a90 	vmov	r0, s15
 800223e:	f7fe f983 	bl	8000548 <__aeabi_f2d>
 8002242:	a375      	add	r3, pc, #468	; (adr r3, 8002418 <main+0x548>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fe fb00 	bl	800084c <__aeabi_ddiv>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
					FilterLowPassUpdate(&lpf_velocity,
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fc80 	bl	8000b58 <__aeabi_d2iz>
 8002258:	4603      	mov	r3, r0
 800225a:	4619      	mov	r1, r3
 800225c:	4872      	ldr	r0, [pc, #456]	; (8002428 <main+0x558>)
 800225e:	f7fe ffaf 	bl	80011c0 <FilterLowPassUpdate>
 8002262:	4603      	mov	r3, r0
			velocity = abs(
 8002264:	2b00      	cmp	r3, #0
 8002266:	bfb8      	it	lt
 8002268:	425b      	neglt	r3, r3
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002272:	4b6e      	ldr	r3, [pc, #440]	; (800242c <main+0x55c>)
 8002274:	edc3 7a00 	vstr	s15, [r3]
			x_prev = x;
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <main+0x554>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			CURRENT[0] = CalculateCurrent(ADC_CURRENT[0] - ADC_OFFSET_CURRENT_1)
 8002280:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <main+0x560>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 800228a:	b29b      	uxth	r3, r3
 800228c:	b21b      	sxth	r3, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fd2e 	bl	8001cf0 <CalculateCurrent>
 8002294:	eef0 7a40 	vmov.f32	s15, s0
					* 2;
 8002298:	ee77 7aa7 	vadd.f32	s15, s15, s15
			CURRENT[0] = CalculateCurrent(ADC_CURRENT[0] - ADC_OFFSET_CURRENT_1)
 800229c:	4b65      	ldr	r3, [pc, #404]	; (8002434 <main+0x564>)
 800229e:	edc3 7a00 	vstr	s15, [r3]
			CURRENT[1] = CalculateCurrent(ADC_CURRENT[1] - ADC_OFFSET_CURRENT_2)
 80022a2:	4b63      	ldr	r3, [pc, #396]	; (8002430 <main+0x560>)
 80022a4:	885b      	ldrh	r3, [r3, #2]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f2a3 53e5 	subw	r3, r3, #1509	; 0x5e5
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b21b      	sxth	r3, r3
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fd1d 	bl	8001cf0 <CalculateCurrent>
 80022b6:	eef0 7a40 	vmov.f32	s15, s0
					* 2;
 80022ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
			CURRENT[1] = CalculateCurrent(ADC_CURRENT[1] - ADC_OFFSET_CURRENT_2)
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <main+0x564>)
 80022c0:	edc3 7a01 	vstr	s15, [r3, #4]
			HALL[0] = HallCalculateTesla(ADC_HALL[0]);
 80022c4:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <main+0x568>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fd4c 	bl	8001d68 <HallCalculateTesla>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <main+0x56c>)
 80022d6:	edc3 7a00 	vstr	s15, [r3]
			HALL[1] = HallCalculateTesla(ADC_HALL[1]);
 80022da:	4b57      	ldr	r3, [pc, #348]	; (8002438 <main+0x568>)
 80022dc:	885b      	ldrh	r3, [r3, #2]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fd41 	bl	8001d68 <HallCalculateTesla>
 80022e6:	eef0 7a40 	vmov.f32	s15, s0
 80022ea:	4b54      	ldr	r3, [pc, #336]	; (800243c <main+0x56c>)
 80022ec:	edc3 7a01 	vstr	s15, [r3, #4]
			HALL[2] = HallCalculateTesla(ADC_HALL[2]);
 80022f0:	4b51      	ldr	r3, [pc, #324]	; (8002438 <main+0x568>)
 80022f2:	889b      	ldrh	r3, [r3, #4]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fd36 	bl	8001d68 <HallCalculateTesla>
 80022fc:	eef0 7a40 	vmov.f32	s15, s0
 8002300:	4b4e      	ldr	r3, [pc, #312]	; (800243c <main+0x56c>)
 8002302:	edc3 7a02 	vstr	s15, [r3, #8]
			TimerVelocity = HAL_GetTick();
 8002306:	f001 fc07 	bl	8003b18 <HAL_GetTick>
 800230a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
		}

		if (!send_once && !critical_temp && x_calculate)
 800230e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8002312:	2b00      	cmp	r3, #0
 8002314:	d12c      	bne.n	8002370 <main+0x4a0>
 8002316:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800231a:	2b00      	cmp	r3, #0
 800231c:	d128      	bne.n	8002370 <main+0x4a0>
 800231e:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d024      	beq.n	8002370 <main+0x4a0>
		{
			Length = sprintf((char*) Message,
 8002326:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <main+0x554>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f90c 	bl	8000548 <__aeabi_f2d>
 8002330:	4604      	mov	r4, r0
 8002332:	460d      	mov	r5, r1
 8002334:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002338:	f7fe f906 	bl	8000548 <__aeabi_f2d>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	f107 0010 	add.w	r0, r7, #16
 8002344:	e9cd 2300 	strd	r2, r3, [sp]
 8002348:	4622      	mov	r2, r4
 800234a:	462b      	mov	r3, r5
 800234c:	493c      	ldr	r1, [pc, #240]	; (8002440 <main+0x570>)
 800234e:	f009 fca7 	bl	800bca0 <siprintf>
 8002352:	4603      	mov	r3, r0
 8002354:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
					"Actual x = %.1f Temp: %.1f\n\rGive x:\n\r", x, temp_coils);
			HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8002358:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800235c:	b29a      	uxth	r2, r3
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	4619      	mov	r1, r3
 8002364:	4837      	ldr	r0, [pc, #220]	; (8002444 <main+0x574>)
 8002366:	f007 fae7 	bl	8009938 <HAL_UART_Transmit_DMA>
			send_once = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
		}
		// Main Control
		if (((HAL_GetTick() - TimerControl) > CONTROL_TIMER_PERIOD)
 8002370:	f001 fbd2 	bl	8003b18 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	f240 810f 	bls.w	80025a0 <main+0x6d0>
				&& input_done && !critical_temp)
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <main+0x578>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 810a 	beq.w	80025a0 <main+0x6d0>
 800238c:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 8105 	bne.w	80025a0 <main+0x6d0>
		{
			if (abs(xset - x) >= POSITION_TOLERANCE)
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <main+0x57c>)
 8002398:	ed93 7a00 	vldr	s14, [r3]
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <main+0x554>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023aa:	ee17 3a90 	vmov	r3, s15
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bfb8      	it	lt
 80023b2:	425b      	neglt	r3, r3
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80023c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	f2c0 80cf 	blt.w	800256a <main+0x69a>
			{

//				PID_output = abs(PIDCalculate(&pid, (int) vel_set, (int) velocity));
				PID_output = 1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

				// Go left
				if (x > xset)
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <main+0x554>)
 80023d4:	ed93 7a00 	vldr	s14, [r3]
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <main+0x57c>)
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	dd33      	ble.n	8002450 <main+0x580>
				{
					coil1_PWM = HBridgeCalculatePWM_max(
							(ADC_HALL[0] - ADC_OFFSET_HALL));
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <main+0x568>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
					coil1_PWM = HBridgeCalculatePWM_max(
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fd0c 	bl	8001e10 <HBridgeCalculatePWM_max>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
					coil2_PWM = HBridgeCalculatePWM_max(
							-(ADC_HALL[2] - ADC_OFFSET_HALL));
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <main+0x568>)
 8002400:	889b      	ldrh	r3, [r3, #4]
 8002402:	b29b      	uxth	r3, r3
 8002404:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002408:	3304      	adds	r3, #4
					coil2_PWM = HBridgeCalculatePWM_max(
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fd00 	bl	8001e10 <HBridgeCalculatePWM_max>
 8002410:	4603      	mov	r3, r0
 8002412:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 8002416:	e03d      	b.n	8002494 <main+0x5c4>
 8002418:	d2f1a9fc 	.word	0xd2f1a9fc
 800241c:	3f60624d 	.word	0x3f60624d
 8002420:	20000580 	.word	0x20000580
 8002424:	200004c0 	.word	0x200004c0
 8002428:	20000568 	.word	0x20000568
 800242c:	200004c8 	.word	0x200004c8
 8002430:	200004a0 	.word	0x200004a0
 8002434:	200004ac 	.word	0x200004ac
 8002438:	200004a4 	.word	0x200004a4
 800243c:	200004cc 	.word	0x200004cc
 8002440:	0800df78 	.word	0x0800df78
 8002444:	200006b8 	.word	0x200006b8
 8002448:	20000571 	.word	0x20000571
 800244c:	200004c4 	.word	0x200004c4
//							(ADC_HALL[0]));
//					coil2_PWM = HBridgeCalculatePWM_prop(
//							(ADC_HALL[2]));
				}
				// Go right
				else if (x < xset)
 8002450:	4bbe      	ldr	r3, [pc, #760]	; (800274c <main+0x87c>)
 8002452:	ed93 7a00 	vldr	s14, [r3]
 8002456:	4bbe      	ldr	r3, [pc, #760]	; (8002750 <main+0x880>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	d516      	bpl.n	8002494 <main+0x5c4>
				{
					coil1_PWM = HBridgeCalculatePWM_max(
							-(ADC_HALL[0] - ADC_OFFSET_HALL));
 8002466:	4bbb      	ldr	r3, [pc, #748]	; (8002754 <main+0x884>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002470:	3304      	adds	r3, #4
					coil1_PWM = HBridgeCalculatePWM_max(
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fccc 	bl	8001e10 <HBridgeCalculatePWM_max>
 8002478:	4603      	mov	r3, r0
 800247a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
					coil2_PWM = HBridgeCalculatePWM_max(
							(ADC_HALL[2] - ADC_OFFSET_HALL));
 800247e:	4bb5      	ldr	r3, [pc, #724]	; (8002754 <main+0x884>)
 8002480:	889b      	ldrh	r3, [r3, #4]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
					coil2_PWM = HBridgeCalculatePWM_max(
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fcc1 	bl	8001e10 <HBridgeCalculatePWM_max>
 800248e:	4603      	mov	r3, r0
 8002490:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
//					coil1_PWM = HBridgeCalculatePWM_prop(
//							(ADC_HALL[0]));
//					coil2_PWM = HBridgeCalculatePWM_prop(
//							(ADC_HALL[2]));
				}
				HBridgeControl(&coil1, PID_output * coil1_PWM);
 8002494:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8002498:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800249c:	fb12 f303 	smulbb	r3, r2, r3
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fa1e 	bl	80018ec <HBridgeControl>
				HBridgeControl(&coil2, PID_output * coil2_PWM);
 80024b0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80024b4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80024b8:	fb12 f303 	smulbb	r3, r2, r3
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b21a      	sxth	r2, r3
 80024c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fa10 	bl	80018ec <HBridgeControl>

				Length =
						sprintf((char*) Message,
 80024cc:	4b9f      	ldr	r3, [pc, #636]	; (800274c <main+0x87c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f839 	bl	8000548 <__aeabi_f2d>
 80024d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80024da:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80024de:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 80024e2:	fb02 f603 	mul.w	r6, r2, r3
 80024e6:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80024ea:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	607b      	str	r3, [r7, #4]
								"x: %.1f PWM1: %d PWM2: %d I1: %.1f I2: %.1f B1: %.4f B2: %.4f\n\r",
								x, coil1_PWM * PID_output,
								coil2_PWM * PID_output, CURRENT[0], CURRENT[1],
 80024f4:	4b98      	ldr	r3, [pc, #608]	; (8002758 <main+0x888>)
 80024f6:	681b      	ldr	r3, [r3, #0]
						sprintf((char*) Message,
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f825 	bl	8000548 <__aeabi_f2d>
 80024fe:	4604      	mov	r4, r0
 8002500:	460d      	mov	r5, r1
								coil2_PWM * PID_output, CURRENT[0], CURRENT[1],
 8002502:	4b95      	ldr	r3, [pc, #596]	; (8002758 <main+0x888>)
 8002504:	685b      	ldr	r3, [r3, #4]
						sprintf((char*) Message,
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f81e 	bl	8000548 <__aeabi_f2d>
 800250c:	4680      	mov	r8, r0
 800250e:	4689      	mov	r9, r1
								HALL[0], HALL[2]);
 8002510:	4b92      	ldr	r3, [pc, #584]	; (800275c <main+0x88c>)
 8002512:	681b      	ldr	r3, [r3, #0]
						sprintf((char*) Message,
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f817 	bl	8000548 <__aeabi_f2d>
 800251a:	4682      	mov	sl, r0
 800251c:	468b      	mov	fp, r1
								HALL[0], HALL[2]);
 800251e:	4b8f      	ldr	r3, [pc, #572]	; (800275c <main+0x88c>)
 8002520:	689b      	ldr	r3, [r3, #8]
						sprintf((char*) Message,
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f810 	bl	8000548 <__aeabi_f2d>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	f107 0010 	add.w	r0, r7, #16
 8002530:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002534:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002538:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800253c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	9600      	str	r6, [sp, #0]
 8002546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800254a:	4985      	ldr	r1, [pc, #532]	; (8002760 <main+0x890>)
 800254c:	f009 fba8 	bl	800bca0 <siprintf>
 8002550:	4603      	mov	r3, r0
				Length =
 8002552:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
				HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8002556:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800255a:	b29a      	uxth	r2, r3
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	4619      	mov	r1, r3
 8002562:	4880      	ldr	r0, [pc, #512]	; (8002764 <main+0x894>)
 8002564:	f007 f9e8 	bl	8009938 <HAL_UART_Transmit_DMA>
 8002568:	e016      	b.n	8002598 <main+0x6c8>

			}
			else
			{
				// Stop
				PIDReset(&pid);
 800256a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fe79 	bl	8001266 <PIDReset>
				HBridgeControl(&coil1, 0);
 8002574:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f9b6 	bl	80018ec <HBridgeControl>
				HBridgeControl(&coil2, 0);
 8002580:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f9b0 	bl	80018ec <HBridgeControl>

//				Length = sprintf((char*)Message, "Done!\n\r");
//				HAL_UART_Transmit_DMA(&huart2, Message, Length);

				input_done = 0;
 800258c:	4b76      	ldr	r3, [pc, #472]	; (8002768 <main+0x898>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
				send_once = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			}
			TimerControl = HAL_GetTick();
 8002598:	f001 fabe 	bl	8003b18 <HAL_GetTick>
 800259c:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
		}

		// Termometers
		if ((HAL_GetTick() - TimerTempCoils) > TEMP_COILS_PERIOD)
 80025a0:	f001 faba 	bl	8003b18 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f240 22ed 	movw	r2, #749	; 0x2ed
 80025b0:	4293      	cmp	r3, r2
 80025b2:	f240 8084 	bls.w	80026be <main+0x7ee>
		{
			// Start the measure
			if (wait_or_get)
 80025b6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <main+0x700>
			{
				ds18b20_start_measure(ds[0]);
 80025be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f8ac 	bl	8001720 <ds18b20_start_measure>
				wait_or_get = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80025ce:	e072      	b.n	80026b6 <main+0x7e6>
			}
			// Get the value
			else if (!wait_or_get)
 80025d0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d16e      	bne.n	80026b6 <main+0x7e6>
			{
				temp_coils = ds18b20_get_temp(ds[0]) / 16.0f;
 80025d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f8dd 	bl	800179c <ds18b20_get_temp>
 80025e2:	4603      	mov	r3, r0
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ec:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80025f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f4:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
				wait_or_get = 1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
				//Check if the coils are not too hot
				// If so, disable the control
				if (temp_coils > 45.0f && !critical_temp)
 80025fe:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002602:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800276c <main+0x89c>
 8002606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	dd2a      	ble.n	8002666 <main+0x796>
 8002610:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8002614:	2b00      	cmp	r3, #0
 8002616:	d126      	bne.n	8002666 <main+0x796>
				{
					critical_temp = 1;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
					HBridgeControl(&coil1, 0);
 800261e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff f961 	bl	80018ec <HBridgeControl>
					HBridgeControl(&coil2, 0);
 800262a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff f95b 	bl	80018ec <HBridgeControl>
					Length = sprintf((char*) Message,
 8002636:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800263a:	f7fd ff85 	bl	8000548 <__aeabi_f2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	f107 0010 	add.w	r0, r7, #16
 8002646:	494a      	ldr	r1, [pc, #296]	; (8002770 <main+0x8a0>)
 8002648:	f009 fb2a 	bl	800bca0 <siprintf>
 800264c:	4603      	mov	r3, r0
 800264e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
							"Coils' temperature is too high: %.1f\n\r",
							temp_coils);
					HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8002652:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8002656:	b29a      	uxth	r2, r3
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	4619      	mov	r1, r3
 800265e:	4841      	ldr	r0, [pc, #260]	; (8002764 <main+0x894>)
 8002660:	f007 f96a 	bl	8009938 <HAL_UART_Transmit_DMA>
 8002664:	e027      	b.n	80026b6 <main+0x7e6>
				}
				// After cooling enable the control
				else if (critical_temp && temp_coils < 35.0f)
 8002666:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800266a:	2b00      	cmp	r3, #0
 800266c:	d023      	beq.n	80026b6 <main+0x7e6>
 800266e:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002672:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002774 <main+0x8a4>
 8002676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	d51a      	bpl.n	80026b6 <main+0x7e6>
				{
					critical_temp = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
					Length = sprintf((char*) Message,
 8002686:	f107 0310 	add.w	r3, r7, #16
 800268a:	493b      	ldr	r1, [pc, #236]	; (8002778 <main+0x8a8>)
 800268c:	4618      	mov	r0, r3
 800268e:	f009 fb07 	bl	800bca0 <siprintf>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
							"Coils cooled down and are ready to use!\n\r");
					HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8002698:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800269c:	b29a      	uxth	r2, r3
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	4619      	mov	r1, r3
 80026a4:	482f      	ldr	r0, [pc, #188]	; (8002764 <main+0x894>)
 80026a6:	f007 f947 	bl	8009938 <HAL_UART_Transmit_DMA>

					input_done = 0;
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <main+0x898>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
					send_once = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
				}

			}
			TimerTempCoils = HAL_GetTick();
 80026b6:	f001 fa2f 	bl	8003b18 <HAL_GetTick>
 80026ba:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
		}

		if (((HAL_GetTick() - TimerShowTemp) > SHOW_TEMP) && critical_temp)
 80026be:	f001 fa2b 	bl	8003b18 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d927      	bls.n	8002722 <main+0x852>
 80026d2:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d023      	beq.n	8002722 <main+0x852>
		{
			Length = sprintf((char*) Message, "Actual T: %.1f\n\r", temp_coils);
 80026da:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80026de:	f7fd ff33 	bl	8000548 <__aeabi_f2d>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	f107 0010 	add.w	r0, r7, #16
 80026ea:	4924      	ldr	r1, [pc, #144]	; (800277c <main+0x8ac>)
 80026ec:	f009 fad8 	bl	800bca0 <siprintf>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			HAL_UART_Transmit_DMA(&huart2, Message, Length);
 80026f6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4619      	mov	r1, r3
 8002702:	4818      	ldr	r0, [pc, #96]	; (8002764 <main+0x894>)
 8002704:	f007 f918 	bl	8009938 <HAL_UART_Transmit_DMA>
			printf("Actual T: %.1f\n\r", temp_coils);
 8002708:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800270c:	f7fd ff1c 	bl	8000548 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4819      	ldr	r0, [pc, #100]	; (800277c <main+0x8ac>)
 8002716:	f009 fab1 	bl	800bc7c <iprintf>
			TimerShowTemp = HAL_GetTick();
 800271a:	f001 f9fd 	bl	8003b18 <HAL_GetTick>
 800271e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		}

		// Blinking LD2 to show correct flow of the program
		if ((HAL_GetTick() - TimerHeartBeat) > HEART_BEAT_TIMER_PERIOD)
 8002722:	f001 f9f9 	bl	8003b18 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002732:	f67f acfd 	bls.w	8002130 <main+0x260>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002736:	2120      	movs	r1, #32
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f003 fcc6 	bl	80060cc <HAL_GPIO_TogglePin>
			TimerHeartBeat = HAL_GetTick();
 8002740:	f001 f9ea 	bl	8003b18 <HAL_GetTick>
 8002744:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
		if ((HAL_GetTick() - TimerUCSample) > UC_SAMPLE_PERIOD)
 8002748:	e4f2      	b.n	8002130 <main+0x260>
 800274a:	bf00      	nop
 800274c:	200004c0 	.word	0x200004c0
 8002750:	200004c4 	.word	0x200004c4
 8002754:	200004a4 	.word	0x200004a4
 8002758:	200004ac 	.word	0x200004ac
 800275c:	200004cc 	.word	0x200004cc
 8002760:	0800dfa0 	.word	0x0800dfa0
 8002764:	200006b8 	.word	0x200006b8
 8002768:	20000571 	.word	0x20000571
 800276c:	42340000 	.word	0x42340000
 8002770:	0800dfe0 	.word	0x0800dfe0
 8002774:	420c0000 	.word	0x420c0000
 8002778:	0800e008 	.word	0x0800e008
 800277c:	0800e034 	.word	0x0800e034

08002780 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b096      	sub	sp, #88	; 0x58
 8002784:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	2244      	movs	r2, #68	; 0x44
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f009 fae9 	bl	800bd66 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002794:	463b      	mov	r3, r7
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027a6:	f003 fdeb 	bl	8006380 <HAL_PWREx_ControlVoltageScaling>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80027b0:	f000 f8ca 	bl	8002948 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027b4:	2302      	movs	r3, #2
 80027b6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027bc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027be:	2310      	movs	r3, #16
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c2:	2302      	movs	r3, #2
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027c6:	2302      	movs	r3, #2
 80027c8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80027ce:	230a      	movs	r3, #10
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027d2:	2307      	movs	r3, #7
 80027d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027d6:	2302      	movs	r3, #2
 80027d8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027da:	2302      	movs	r3, #2
 80027dc:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fe22 	bl	800642c <HAL_RCC_OscConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80027ee:	f000 f8ab 	bl	8002948 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80027f2:	230f      	movs	r3, #15
 80027f4:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f6:	2303      	movs	r3, #3
 80027f8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002806:	463b      	mov	r3, r7
 8002808:	2104      	movs	r1, #4
 800280a:	4618      	mov	r0, r3
 800280c:	f004 f9ea 	bl	8006be4 <HAL_RCC_ClockConfig>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8002816:	f000 f897 	bl	8002948 <Error_Handler>
	}
}
 800281a:	bf00      	nop
 800281c:	3758      	adds	r7, #88	; 0x58
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b0a2      	sub	sp, #136	; 0x88
 8002826:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8002828:	463b      	mov	r3, r7
 800282a:	2288      	movs	r2, #136	; 0x88
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f009 fa99 	bl	800bd66 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002834:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002838:	603b      	str	r3, [r7, #0]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800283a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800283e:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002840:	2302      	movs	r3, #2
 8002842:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002844:	2301      	movs	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002848:	2308      	movs	r3, #8
 800284a:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800284c:	2307      	movs	r3, #7
 800284e:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002850:	2302      	movs	r3, #2
 8002852:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002854:	2302      	movs	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800285c:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800285e:	463b      	mov	r3, r7
 8002860:	4618      	mov	r0, r3
 8002862:	f004 fbe3 	bl	800702c <HAL_RCCEx_PeriphCLKConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <PeriphCommonClock_Config+0x4e>
	{
		Error_Handler();
 800286c:	f000 f86c 	bl	8002948 <Error_Handler>
	}
}
 8002870:	bf00      	nop
 8002872:	3788      	adds	r7, #136	; 0x88
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	/* ADC3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2101      	movs	r1, #1
 8002880:	202f      	movs	r0, #47	; 0x2f
 8002882:	f002 ffb4 	bl	80057ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002886:	202f      	movs	r0, #47	; 0x2f
 8002888:	f002 ffcd 	bl	8005826 <HAL_NVIC_EnableIRQ>
	/* ADC1_2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2105      	movs	r1, #5
 8002890:	2012      	movs	r0, #18
 8002892:	f002 ffac 	bl	80057ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002896:	2012      	movs	r0, #18
 8002898:	f002 ffc5 	bl	8005826 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2102      	movs	r1, #2
 80028a0:	201d      	movs	r0, #29
 80028a2:	f002 ffa4 	bl	80057ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028a6:	201d      	movs	r0, #29
 80028a8:	f002 ffbd 	bl	8005826 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2102      	movs	r1, #2
 80028b0:	201e      	movs	r0, #30
 80028b2:	f002 ff9c 	bl	80057ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028b6:	201e      	movs	r0, #30
 80028b8:	f002 ffb5 	bl	8005826 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	200d      	movs	r0, #13
 80028c2:	f002 ff94 	bl	80057ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80028c6:	200d      	movs	r0, #13
 80028c8:	f002 ffad 	bl	8005826 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	200b      	movs	r0, #11
 80028d2:	f002 ff8c 	bl	80057ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028d6:	200b      	movs	r0, #11
 80028d8:	f002 ffa5 	bl	8005826 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	2100      	movs	r1, #0
 80028e0:	2011      	movs	r0, #17
 80028e2:	f002 ff84 	bl	80057ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80028e6:	2011      	movs	r0, #17
 80028e8:	f002 ff9d 	bl	8005826 <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2106      	movs	r1, #6
 80028f0:	2026      	movs	r0, #38	; 0x26
 80028f2:	f002 ff7c 	bl	80057ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028f6:	2026      	movs	r0, #38	; 0x26
 80028f8:	f002 ff95 	bl	8005826 <HAL_NVIC_EnableIRQ>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_UART_RxCpltCallback+0x2c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d109      	bne.n	8002924 <HAL_UART_RxCpltCallback+0x24>
	{
		LineAppend(uart_rx_buffer);
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_UART_RxCpltCallback+0x30>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fa97 	bl	8001e48 <LineAppend>
		HAL_UART_Receive_IT(huart, &uart_rx_buffer, 1);
 800291a:	2201      	movs	r2, #1
 800291c:	4904      	ldr	r1, [pc, #16]	; (8002930 <HAL_UART_RxCpltCallback+0x30>)
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f006 ffbe 	bl	80098a0 <HAL_UART_Receive_IT>
	}
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200006b8 	.word	0x200006b8
 8002930:	20000570 	.word	0x20000570

08002934 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002950:	e7fe      	b.n	8002950 <Error_Handler+0x8>
	...

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_MspInit+0x44>)
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_MspInit+0x44>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6613      	str	r3, [r2, #96]	; 0x60
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_MspInit+0x44>)
 8002968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_MspInit+0x44>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_MspInit+0x44>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6593      	str	r3, [r2, #88]	; 0x58
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_MspInit+0x44>)
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000

0800299c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <NMI_Handler+0x4>

080029a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a6:	e7fe      	b.n	80029a6 <HardFault_Handler+0x4>

080029a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <MemManage_Handler+0x4>

080029ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <UsageFault_Handler+0x4>

080029ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e8:	f001 f882 	bl	8003af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <DMA1_Channel1_IRQHandler+0x10>)
 80029f6:	f003 f8c8 	bl	8005b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200003b8 	.word	0x200003b8

08002a04 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <DMA1_Channel3_IRQHandler+0x10>)
 8002a0a:	f003 f8be 	bl	8005b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000400 	.word	0x20000400

08002a18 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <DMA1_Channel7_IRQHandler+0x10>)
 8002a1e:	f003 f8b4 	bl	8005b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200007c8 	.word	0x200007c8

08002a2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <ADC1_2_IRQHandler+0x10>)
 8002a32:	f001 fcc9 	bl	80043c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200002f0 	.word	0x200002f0

08002a40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <TIM3_IRQHandler+0x10>)
 8002a46:	f005 fac9 	bl	8007fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200005d4 	.word	0x200005d4

08002a54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <TIM4_IRQHandler+0x10>)
 8002a5a:	f005 fabf 	bl	8007fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000620 	.word	0x20000620

08002a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <USART2_IRQHandler+0x10>)
 8002a6e:	f006 ffdf 	bl	8009a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200006b8 	.word	0x200006b8

08002a7c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <ADC3_IRQHandler+0x10>)
 8002a82:	f001 fca1 	bl	80043c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000354 	.word	0x20000354

08002a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return 1;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_kill>:

int _kill(int pid, int sig)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aaa:	f009 f9af 	bl	800be0c <__errno>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2216      	movs	r2, #22
 8002ab2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_exit>:

void _exit (int status)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ffe7 	bl	8002aa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ad2:	e7fe      	b.n	8002ad2 <_exit+0x12>

08002ad4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e00a      	b.n	8002afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae6:	f3af 8000 	nop.w
 8002aea:	4601      	mov	r1, r0
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	60ba      	str	r2, [r7, #8]
 8002af2:	b2ca      	uxtb	r2, r1
 8002af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dbf0      	blt.n	8002ae6 <_read+0x12>
  }

  return len;
 8002b04:	687b      	ldr	r3, [r7, #4]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e009      	b.n	8002b34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	60ba      	str	r2, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	dbf1      	blt.n	8002b20 <_write+0x12>
  }
  return len;
 8002b3c:	687b      	ldr	r3, [r7, #4]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <_close>:

int _close(int file)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_isatty>:

int _isatty(int file)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb8:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <_sbrk+0x5c>)
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <_sbrk+0x60>)
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <_sbrk+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <_sbrk+0x64>)
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <_sbrk+0x68>)
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <_sbrk+0x64>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d207      	bcs.n	8002bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be0:	f009 f914 	bl	800be0c <__errno>
 8002be4:	4603      	mov	r3, r0
 8002be6:	220c      	movs	r2, #12
 8002be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e009      	b.n	8002c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <_sbrk+0x64>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf6:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <_sbrk+0x64>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <_sbrk+0x64>)
 8002c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20018000 	.word	0x20018000
 8002c10:	00000400 	.word	0x00000400
 8002c14:	20000584 	.word	0x20000584
 8002c18:	20000978 	.word	0x20000978

08002c1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <SystemInit+0x20>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <SystemInit+0x20>)
 8002c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b092      	sub	sp, #72	; 0x48
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
 8002c7c:	615a      	str	r2, [r3, #20]
 8002c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002c88:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002c8a:	224f      	movs	r2, #79	; 0x4f
 8002c8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8002c94:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002c96:	4a3f      	ldr	r2, [pc, #252]	; (8002d94 <MX_TIM2_Init+0x154>)
 8002c98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca0:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ca6:	483a      	ldr	r0, [pc, #232]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002ca8:	f004 fe7c 	bl	80079a4 <HAL_TIM_Base_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002cb2:	f7ff fe49 	bl	8002948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4833      	ldr	r0, [pc, #204]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002cc4:	f005 fc3c 	bl	8008540 <HAL_TIM_ConfigClockSource>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002cce:	f7ff fe3b 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002cd2:	482f      	ldr	r0, [pc, #188]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002cd4:	f005 f824 	bl	8007d20 <HAL_TIM_IC_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002cde:	f7ff fe33 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ce2:	482b      	ldr	r0, [pc, #172]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002ce4:	f004 feb5 	bl	8007a52 <HAL_TIM_PWM_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002cee:	f7ff fe2b 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4823      	ldr	r0, [pc, #140]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002d02:	f006 fab1 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8002d0c:	f7ff fe1c 	bl	8002948 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d14:	2301      	movs	r3, #1
 8002d16:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 1;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	2200      	movs	r2, #0
 8002d26:	4619      	mov	r1, r3
 8002d28:	4819      	ldr	r0, [pc, #100]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002d2a:	f005 fa59 	bl	80081e0 <HAL_TIM_IC_ConfigChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8002d34:	f7ff fe08 	bl	8002948 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	623b      	str	r3, [r7, #32]
  sConfigIC.ICFilter = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	2204      	movs	r2, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4810      	ldr	r0, [pc, #64]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002d4e:	f005 fa47 	bl	80081e0 <HAL_TIM_IC_ConfigChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002d58:	f7ff fdf6 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d5c:	2360      	movs	r3, #96	; 0x60
 8002d5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8002d60:	230a      	movs	r3, #10
 8002d62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	2208      	movs	r2, #8
 8002d70:	4619      	mov	r1, r3
 8002d72:	4807      	ldr	r0, [pc, #28]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002d74:	f005 fad0 	bl	8008318 <HAL_TIM_PWM_ConfigChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM2_Init+0x142>
  {
    Error_Handler();
 8002d7e:	f7ff fde3 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d82:	4803      	ldr	r0, [pc, #12]	; (8002d90 <MX_TIM2_Init+0x150>)
 8002d84:	f000 fa1e 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002d88:	bf00      	nop
 8002d8a:	3748      	adds	r7, #72	; 0x48
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000588 	.word	0x20000588
 8002d94:	0001869f 	.word	0x0001869f

08002d98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	; 0x38
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db8:	463b      	mov	r3, r7
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dca:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002dcc:	4a2c      	ldr	r2, [pc, #176]	; (8002e80 <MX_TIM3_Init+0xe8>)
 8002dce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8002dd0:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002dd2:	224f      	movs	r2, #79	; 0x4f
 8002dd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002dde:	2263      	movs	r2, #99	; 0x63
 8002de0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dee:	4823      	ldr	r0, [pc, #140]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002df0:	f004 fdd8 	bl	80079a4 <HAL_TIM_Base_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002dfa:	f7ff fda5 	bl	8002948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e08:	4619      	mov	r1, r3
 8002e0a:	481c      	ldr	r0, [pc, #112]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002e0c:	f005 fb98 	bl	8008540 <HAL_TIM_ConfigClockSource>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002e16:	f7ff fd97 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e1a:	4818      	ldr	r0, [pc, #96]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002e1c:	f004 fe19 	bl	8007a52 <HAL_TIM_PWM_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e26:	f7ff fd8f 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	4810      	ldr	r0, [pc, #64]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002e3a:	f006 fa15 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e44:	f7ff fd80 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e48:	2360      	movs	r3, #96	; 0x60
 8002e4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e58:	463b      	mov	r3, r7
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4807      	ldr	r0, [pc, #28]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002e60:	f005 fa5a 	bl	8008318 <HAL_TIM_PWM_ConfigChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002e6a:	f7ff fd6d 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e6e:	4803      	ldr	r0, [pc, #12]	; (8002e7c <MX_TIM3_Init+0xe4>)
 8002e70:	f000 f9a8 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002e74:	bf00      	nop
 8002e76:	3738      	adds	r7, #56	; 0x38
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200005d4 	.word	0x200005d4
 8002e80:	40000400 	.word	0x40000400

08002e84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08e      	sub	sp, #56	; 0x38
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	611a      	str	r2, [r3, #16]
 8002eb2:	615a      	str	r2, [r3, #20]
 8002eb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002eb8:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <MX_TIM4_Init+0xe8>)
 8002eba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002ebe:	224f      	movs	r2, #79	; 0x4f
 8002ec0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002ec8:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002eca:	2263      	movs	r2, #99	; 0x63
 8002ecc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed4:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002eda:	4823      	ldr	r0, [pc, #140]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002edc:	f004 fd62 	bl	80079a4 <HAL_TIM_Base_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002ee6:	f7ff fd2f 	bl	8002948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	481c      	ldr	r0, [pc, #112]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002ef8:	f005 fb22 	bl	8008540 <HAL_TIM_ConfigClockSource>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002f02:	f7ff fd21 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f06:	4818      	ldr	r0, [pc, #96]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002f08:	f004 fda3 	bl	8007a52 <HAL_TIM_PWM_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002f12:	f7ff fd19 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	4619      	mov	r1, r3
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002f26:	f006 f99f 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002f30:	f7ff fd0a 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f34:	2360      	movs	r3, #96	; 0x60
 8002f36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f44:	463b      	mov	r3, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4807      	ldr	r0, [pc, #28]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002f4c:	f005 f9e4 	bl	8008318 <HAL_TIM_PWM_ConfigChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002f56:	f7ff fcf7 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f5a:	4803      	ldr	r0, [pc, #12]	; (8002f68 <MX_TIM4_Init+0xe4>)
 8002f5c:	f000 f932 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002f60:	bf00      	nop
 8002f62:	3738      	adds	r7, #56	; 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000620 	.word	0x20000620
 8002f6c:	40000800 	.word	0x40000800

08002f70 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b09a      	sub	sp, #104	; 0x68
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
 8002fa0:	615a      	str	r2, [r3, #20]
 8002fa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	222c      	movs	r2, #44	; 0x2c
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f008 fedb 	bl	800bd66 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002fb2:	4a44      	ldr	r2, [pc, #272]	; (80030c4 <MX_TIM8_Init+0x154>)
 8002fb4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8002fb6:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002fb8:	224f      	movs	r2, #79	; 0x4f
 8002fba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbc:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49999;
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002fc4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002fc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fca:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002fdc:	4838      	ldr	r0, [pc, #224]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002fde:	f004 fce1 	bl	80079a4 <HAL_TIM_Base_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002fe8:	f7ff fcae 	bl	8002948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ff2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4831      	ldr	r0, [pc, #196]	; (80030c0 <MX_TIM8_Init+0x150>)
 8002ffa:	f005 faa1 	bl	8008540 <HAL_TIM_ConfigClockSource>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003004:	f7ff fca0 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003008:	482d      	ldr	r0, [pc, #180]	; (80030c0 <MX_TIM8_Init+0x150>)
 800300a:	f004 fd22 	bl	8007a52 <HAL_TIM_PWM_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003014:	f7ff fc98 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800301c:	2300      	movs	r3, #0
 800301e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003024:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003028:	4619      	mov	r1, r3
 800302a:	4825      	ldr	r0, [pc, #148]	; (80030c0 <MX_TIM8_Init+0x150>)
 800302c:	f006 f91c 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003036:	f7ff fc87 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800303a:	2360      	movs	r3, #96	; 0x60
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 10;
 800303e:	230a      	movs	r3, #10
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003042:	2300      	movs	r3, #0
 8003044:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003046:	2300      	movs	r3, #0
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800304e:	2300      	movs	r3, #0
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003056:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800305a:	2200      	movs	r2, #0
 800305c:	4619      	mov	r1, r3
 800305e:	4818      	ldr	r0, [pc, #96]	; (80030c0 <MX_TIM8_Init+0x150>)
 8003060:	f005 f95a 	bl	8008318 <HAL_TIM_PWM_ConfigChannel>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800306a:	f7ff fc6d 	bl	8002948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003086:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4807      	ldr	r0, [pc, #28]	; (80030c0 <MX_TIM8_Init+0x150>)
 80030a4:	f006 f968 	bl	8009378 <HAL_TIMEx_ConfigBreakDeadTime>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80030ae:	f7ff fc4b 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80030b2:	4803      	ldr	r0, [pc, #12]	; (80030c0 <MX_TIM8_Init+0x150>)
 80030b4:	f000 f886 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 80030b8:	bf00      	nop
 80030ba:	3768      	adds	r7, #104	; 0x68
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2000066c 	.word	0x2000066c
 80030c4:	40013400 	.word	0x40013400

080030c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	; 0x30
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 031c 	add.w	r3, r7, #28
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e8:	d12a      	bne.n	8003140 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ea:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6593      	str	r3, [r2, #88]	; 0x58
 80030f6:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	4b2c      	ldr	r3, [pc, #176]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800310e:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = USONIC2_Pin;
 800311a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800312c:	2301      	movs	r3, #1
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USONIC2_GPIO_Port, &GPIO_InitStruct);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800313a:	f002 fe05 	bl	8005d48 <HAL_GPIO_Init>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800313e:	e034      	b.n	80031aa <HAL_TIM_Base_MspInit+0xe2>
  else if(tim_baseHandle->Instance==TIM3)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_TIM_Base_MspInit+0xf0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10c      	bne.n	8003164 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	6593      	str	r3, [r2, #88]	; 0x58
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
}
 8003162:	e022      	b.n	80031aa <HAL_TIM_Base_MspInit+0xe2>
  else if(tim_baseHandle->Instance==TIM4)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_TIM_Base_MspInit+0xf4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10c      	bne.n	8003188 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6593      	str	r3, [r2, #88]	; 0x58
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
}
 8003186:	e010      	b.n	80031aa <HAL_TIM_Base_MspInit+0xe2>
  else if(tim_baseHandle->Instance==TIM8)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <HAL_TIM_Base_MspInit+0xf8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10b      	bne.n	80031aa <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 8003198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800319c:	6613      	str	r3, [r2, #96]	; 0x60
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_TIM_Base_MspInit+0xec>)
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
}
 80031aa:	bf00      	nop
 80031ac:	3730      	adds	r7, #48	; 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40013400 	.word	0x40013400

080031c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08c      	sub	sp, #48	; 0x30
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 031c 	add.w	r3, r7, #28
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d11d      	bne.n	8003222 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e6:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	4a42      	ldr	r2, [pc, #264]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031f2:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = USONIC1_PWM_Pin;
 80031fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003210:	2301      	movs	r3, #1
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USONIC1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	4837      	ldr	r0, [pc, #220]	; (80032f8 <HAL_TIM_MspPostInit+0x134>)
 800321c:	f002 fd94 	bl	8005d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003220:	e064      	b.n	80032ec <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM3)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a35      	ldr	r2, [pc, #212]	; (80032fc <HAL_TIM_MspPostInit+0x138>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d11c      	bne.n	8003266 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003238:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM1_Pin;
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003250:	2300      	movs	r3, #0
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003254:	2302      	movs	r3, #2
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	4619      	mov	r1, r3
 800325e:	4828      	ldr	r0, [pc, #160]	; (8003300 <HAL_TIM_MspPostInit+0x13c>)
 8003260:	f002 fd72 	bl	8005d48 <HAL_GPIO_Init>
}
 8003264:	e042      	b.n	80032ec <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM4)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_TIM_MspPostInit+0x140>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d11c      	bne.n	80032aa <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM2_Pin;
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003298:	2302      	movs	r3, #2
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4815      	ldr	r0, [pc, #84]	; (80032f8 <HAL_TIM_MspPostInit+0x134>)
 80032a4:	f002 fd50 	bl	8005d48 <HAL_GPIO_Init>
}
 80032a8:	e020      	b.n	80032ec <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM8)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_TIM_MspPostInit+0x144>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b8:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_TIM_MspPostInit+0x130>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032cc:	2340      	movs	r3, #64	; 0x40
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032dc:	2303      	movs	r3, #3
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	4806      	ldr	r0, [pc, #24]	; (8003300 <HAL_TIM_MspPostInit+0x13c>)
 80032e8:	f002 fd2e 	bl	8005d48 <HAL_GPIO_Init>
}
 80032ec:	bf00      	nop
 80032ee:	3730      	adds	r7, #48	; 0x30
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	48000400 	.word	0x48000400
 80032fc:	40000400 	.word	0x40000400
 8003300:	48000800 	.word	0x48000800
 8003304:	40000800 	.word	0x40000800
 8003308:	40013400 	.word	0x40013400

0800330c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <MX_USART2_UART_Init+0x58>)
 8003312:	4a15      	ldr	r2, [pc, #84]	; (8003368 <MX_USART2_UART_Init+0x5c>)
 8003314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <MX_USART2_UART_Init+0x58>)
 8003318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800331c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <MX_USART2_UART_Init+0x58>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <MX_USART2_UART_Init+0x58>)
 8003326:	2200      	movs	r2, #0
 8003328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800332a:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <MX_USART2_UART_Init+0x58>)
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <MX_USART2_UART_Init+0x58>)
 8003332:	220c      	movs	r2, #12
 8003334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <MX_USART2_UART_Init+0x58>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <MX_USART2_UART_Init+0x58>)
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <MX_USART2_UART_Init+0x58>)
 8003344:	2200      	movs	r2, #0
 8003346:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <MX_USART2_UART_Init+0x58>)
 800334a:	2200      	movs	r2, #0
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800334e:	4805      	ldr	r0, [pc, #20]	; (8003364 <MX_USART2_UART_Init+0x58>)
 8003350:	f006 f8ae 	bl	80094b0 <HAL_UART_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800335a:	f7ff faf5 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200006b8 	.word	0x200006b8
 8003368:	40004400 	.word	0x40004400

0800336c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <MX_USART3_UART_Init+0x60>)
 8003372:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <MX_USART3_UART_Init+0x64>)
 8003374:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <MX_USART3_UART_Init+0x60>)
 8003378:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800337c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <MX_USART3_UART_Init+0x60>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <MX_USART3_UART_Init+0x60>)
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <MX_USART3_UART_Init+0x60>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_USART3_UART_Init+0x60>)
 8003392:	220c      	movs	r2, #12
 8003394:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <MX_USART3_UART_Init+0x60>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_USART3_UART_Init+0x60>)
 800339e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033a2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_USART3_UART_Init+0x60>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <MX_USART3_UART_Init+0x60>)
 80033ac:	2210      	movs	r2, #16
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <MX_USART3_UART_Init+0x60>)
 80033b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80033b8:	4804      	ldr	r0, [pc, #16]	; (80033cc <MX_USART3_UART_Init+0x60>)
 80033ba:	f006 f8c7 	bl	800954c <HAL_HalfDuplex_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 80033c4:	f7ff fac0 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000740 	.word	0x20000740
 80033d0:	40004800 	.word	0x40004800

080033d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0ae      	sub	sp, #184	; 0xb8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033ec:	f107 031c 	add.w	r3, r7, #28
 80033f0:	2288      	movs	r2, #136	; 0x88
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f008 fcb6 	bl	800bd66 <memset>
  if(uartHandle->Instance==USART2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_UART_MspInit+0x188>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d165      	bne.n	80034d0 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003404:	2302      	movs	r3, #2
 8003406:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003408:	2300      	movs	r3, #0
 800340a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fe0b 	bl	800702c <HAL_RCCEx_PeriphCLKConfig>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800341c:	f7ff fa94 	bl	8002948 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003420:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <HAL_UART_MspInit+0x18c>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_UART_MspInit+0x18c>)
 8003426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342a:	6593      	str	r3, [r2, #88]	; 0x58
 800342c:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <HAL_UART_MspInit+0x18c>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003438:	4b49      	ldr	r3, [pc, #292]	; (8003560 <HAL_UART_MspInit+0x18c>)
 800343a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343c:	4a48      	ldr	r2, [pc, #288]	; (8003560 <HAL_UART_MspInit+0x18c>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <HAL_UART_MspInit+0x18c>)
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003450:	230c      	movs	r3, #12
 8003452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003462:	2303      	movs	r3, #3
 8003464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003468:	2307      	movs	r3, #7
 800346a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003472:	4619      	mov	r1, r3
 8003474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003478:	f002 fc66 	bl	8005d48 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_UART_MspInit+0x190>)
 800347e:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <HAL_UART_MspInit+0x194>)
 8003480:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_UART_MspInit+0x190>)
 8003484:	2202      	movs	r2, #2
 8003486:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003488:	4b36      	ldr	r3, [pc, #216]	; (8003564 <HAL_UART_MspInit+0x190>)
 800348a:	2210      	movs	r2, #16
 800348c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800348e:	4b35      	ldr	r3, [pc, #212]	; (8003564 <HAL_UART_MspInit+0x190>)
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003494:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_UART_MspInit+0x190>)
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800349a:	4b32      	ldr	r3, [pc, #200]	; (8003564 <HAL_UART_MspInit+0x190>)
 800349c:	2200      	movs	r2, #0
 800349e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034a0:	4b30      	ldr	r3, [pc, #192]	; (8003564 <HAL_UART_MspInit+0x190>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_UART_MspInit+0x190>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034ac:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <HAL_UART_MspInit+0x190>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034b2:	482c      	ldr	r0, [pc, #176]	; (8003564 <HAL_UART_MspInit+0x190>)
 80034b4:	f002 f9d2 	bl	800585c <HAL_DMA_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80034be:	f7ff fa43 	bl	8002948 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a27      	ldr	r2, [pc, #156]	; (8003564 <HAL_UART_MspInit+0x190>)
 80034c6:	671a      	str	r2, [r3, #112]	; 0x70
 80034c8:	4a26      	ldr	r2, [pc, #152]	; (8003564 <HAL_UART_MspInit+0x190>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034ce:	e040      	b.n	8003552 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a25      	ldr	r2, [pc, #148]	; (800356c <HAL_UART_MspInit+0x198>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d13b      	bne.n	8003552 <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80034da:	2304      	movs	r3, #4
 80034dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80034de:	2300      	movs	r3, #0
 80034e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fda0 	bl	800702c <HAL_RCCEx_PeriphCLKConfig>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_UART_MspInit+0x122>
      Error_Handler();
 80034f2:	f7ff fa29 	bl	8002948 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_UART_MspInit+0x18c>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_UART_MspInit+0x18c>)
 80034fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003500:	6593      	str	r3, [r2, #88]	; 0x58
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <HAL_UART_MspInit+0x18c>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <HAL_UART_MspInit+0x18c>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	4a13      	ldr	r2, [pc, #76]	; (8003560 <HAL_UART_MspInit+0x18c>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_UART_MspInit+0x18c>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800352e:	2312      	movs	r3, #18
 8003530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003534:	2301      	movs	r3, #1
 8003536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353a:	2303      	movs	r3, #3
 800353c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003540:	2307      	movs	r3, #7
 8003542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003546:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800354a:	4619      	mov	r1, r3
 800354c:	4808      	ldr	r0, [pc, #32]	; (8003570 <HAL_UART_MspInit+0x19c>)
 800354e:	f002 fbfb 	bl	8005d48 <HAL_GPIO_Init>
}
 8003552:	bf00      	nop
 8003554:	37b8      	adds	r7, #184	; 0xb8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40004400 	.word	0x40004400
 8003560:	40021000 	.word	0x40021000
 8003564:	200007c8 	.word	0x200007c8
 8003568:	40020080 	.word	0x40020080
 800356c:	40004800 	.word	0x40004800
 8003570:	48000800 	.word	0x48000800

08003574 <OW_Set_Baudrate>:
uint8_t crc8;



void OW_Set_Baudrate(uint32_t baudrate)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	 USART_INSTANCE.Instance = USART_USED;
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <OW_Set_Baudrate+0x64>)
 800357e:	4a17      	ldr	r2, [pc, #92]	; (80035dc <OW_Set_Baudrate+0x68>)
 8003580:	601a      	str	r2, [r3, #0]
	 USART_INSTANCE.Init.BaudRate = baudrate;
 8003582:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <OW_Set_Baudrate+0x64>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6053      	str	r3, [r2, #4]
	 USART_INSTANCE.Init.WordLength = UART_WORDLENGTH_8B;
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <OW_Set_Baudrate+0x64>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
	 USART_INSTANCE.Init.StopBits = UART_STOPBITS_1;
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <OW_Set_Baudrate+0x64>)
 8003590:	2200      	movs	r2, #0
 8003592:	60da      	str	r2, [r3, #12]
	 USART_INSTANCE.Init.Parity = UART_PARITY_NONE;
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <OW_Set_Baudrate+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
	 USART_INSTANCE.Init.Mode = UART_MODE_TX_RX;
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <OW_Set_Baudrate+0x64>)
 800359c:	220c      	movs	r2, #12
 800359e:	615a      	str	r2, [r3, #20]
	 USART_INSTANCE.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <OW_Set_Baudrate+0x64>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]
	 USART_INSTANCE.Init.OverSampling = UART_OVERSAMPLING_16;
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <OW_Set_Baudrate+0x64>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	61da      	str	r2, [r3, #28]
	 USART_INSTANCE.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <OW_Set_Baudrate+0x64>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	621a      	str	r2, [r3, #32]
	 USART_INSTANCE.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <OW_Set_Baudrate+0x64>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24
	 USART_INSTANCE.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80035b8:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <OW_Set_Baudrate+0x64>)
 80035ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035be:	639a      	str	r2, [r3, #56]	; 0x38

	 if (HAL_HalfDuplex_Init(&USART_INSTANCE) != HAL_OK)
 80035c0:	4805      	ldr	r0, [pc, #20]	; (80035d8 <OW_Set_Baudrate+0x64>)
 80035c2:	f005 ffc3 	bl	800954c <HAL_HalfDuplex_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <OW_Set_Baudrate+0x5c>
	 {
	   Error_Handler();
 80035cc:	f7ff f9bc 	bl	8002948 <Error_Handler>
	 }
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000740 	.word	0x20000740
 80035dc:	40004800 	.word	0x40004800

080035e0 <OW_Reset>:

HAL_StatusTypeDef OW_Reset(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
	  uint8_t data_out = 0xF0;
 80035e6:	23f0      	movs	r3, #240	; 0xf0
 80035e8:	71fb      	strb	r3, [r7, #7]
	  uint8_t data_in = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	71bb      	strb	r3, [r7, #6]

	  OW_Set_Baudrate(9600);
 80035ee:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80035f2:	f7ff ffbf 	bl	8003574 <OW_Set_Baudrate>
	  HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 80035f6:	1df9      	adds	r1, r7, #7
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	2201      	movs	r2, #1
 80035fe:	480c      	ldr	r0, [pc, #48]	; (8003630 <OW_Reset+0x50>)
 8003600:	f005 fffa 	bl	80095f8 <HAL_UART_Transmit>
	  HAL_UART_Receive(&USART_INSTANCE, &data_in, 1, HAL_MAX_DELAY);
 8003604:	1db9      	adds	r1, r7, #6
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	2201      	movs	r2, #1
 800360c:	4808      	ldr	r0, [pc, #32]	; (8003630 <OW_Reset+0x50>)
 800360e:	f006 f87d 	bl	800970c <HAL_UART_Receive>
	  OW_Set_Baudrate(115200);
 8003612:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003616:	f7ff ffad 	bl	8003574 <OW_Set_Baudrate>

	  if (data_in != 0xF0)
 800361a:	79bb      	ldrb	r3, [r7, #6]
 800361c:	2bf0      	cmp	r3, #240	; 0xf0
 800361e:	d001      	beq.n	8003624 <OW_Reset+0x44>
	    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <OW_Reset+0x46>
	  else
	    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000740 	.word	0x20000740

08003634 <OW_Read_Bit>:

int OW_Read_Bit(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xFF;
 800363a:	23ff      	movs	r3, #255	; 0xff
 800363c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8003642:	1df9      	adds	r1, r7, #7
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	2201      	movs	r2, #1
 800364a:	4808      	ldr	r0, [pc, #32]	; (800366c <OW_Read_Bit+0x38>)
 800364c:	f005 ffd4 	bl	80095f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&USART_INSTANCE, &data_in, 1, HAL_MAX_DELAY);
 8003650:	1db9      	adds	r1, r7, #6
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	2201      	movs	r2, #1
 8003658:	4804      	ldr	r0, [pc, #16]	; (800366c <OW_Read_Bit+0x38>)
 800365a:	f006 f857 	bl	800970c <HAL_UART_Receive>

	return data_in & 0x01;
 800365e:	79bb      	ldrb	r3, [r7, #6]
 8003660:	f003 0301 	and.w	r3, r3, #1
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000740 	.word	0x20000740

08003670 <OW_Read_Byte>:

uint8_t OW_Read_Byte(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800367a:	2300      	movs	r3, #0
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	e00e      	b.n	800369e <OW_Read_Byte+0x2e>
    value >>= 1;
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	71fb      	strb	r3, [r7, #7]
    if (OW_Read_Bit())
 8003686:	f7ff ffd5 	bl	8003634 <OW_Read_Bit>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <OW_Read_Byte+0x28>
      value |= 0x80;
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003696:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b07      	cmp	r3, #7
 80036a2:	dded      	ble.n	8003680 <OW_Read_Byte+0x10>
  }
  return value;
 80036a4:	79fb      	ldrb	r3, [r7, #7]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <OW_Write_Bit>:

void OW_Write_Bit(int value)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	if (value) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <OW_Write_Bit+0x24>
	      uint8_t data_out = 0xff;
 80036be:	23ff      	movs	r3, #255	; 0xff
 80036c0:	73fb      	strb	r3, [r7, #15]
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 80036c2:	f107 010f 	add.w	r1, r7, #15
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	2201      	movs	r2, #1
 80036cc:	4808      	ldr	r0, [pc, #32]	; (80036f0 <OW_Write_Bit+0x40>)
 80036ce:	f005 ff93 	bl	80095f8 <HAL_UART_Transmit>
	  } else {
	      uint8_t data_out = 0x0;
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
	  }
}
 80036d2:	e009      	b.n	80036e8 <OW_Write_Bit+0x38>
	      uint8_t data_out = 0x0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73bb      	strb	r3, [r7, #14]
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 80036d8:	f107 010e 	add.w	r1, r7, #14
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	2201      	movs	r2, #1
 80036e2:	4803      	ldr	r0, [pc, #12]	; (80036f0 <OW_Write_Bit+0x40>)
 80036e4:	f005 ff88 	bl	80095f8 <HAL_UART_Transmit>
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000740 	.word	0x20000740

080036f4 <OW_Write_Byte>:

void OW_Write_Byte(uint8_t byte)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e00b      	b.n	800371c <OW_Write_Byte+0x28>
    OW_Write_Bit(byte & 0x01);
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ffd0 	bl	80036b0 <OW_Write_Bit>
    byte >>= 1;
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b07      	cmp	r3, #7
 8003720:	ddf0      	ble.n	8003704 <OW_Write_Byte+0x10>
  }
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <OW_CRC_BYTE>:

static uint8_t OW_CRC_BYTE(uint8_t crc, uint8_t byte)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	460a      	mov	r2, r1
 8003736:	71fb      	strb	r3, [r7, #7]
 8003738:	4613      	mov	r3, r2
 800373a:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e016      	b.n	8003770 <OW_CRC_BYTE+0x44>
    uint8_t b = crc ^ byte;
 8003742:	79fa      	ldrb	r2, [r7, #7]
 8003744:	79bb      	ldrb	r3, [r7, #6]
 8003746:	4053      	eors	r3, r2
 8003748:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8003750:	7afb      	ldrb	r3, [r7, #11]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <OW_CRC_BYTE+0x38>
      crc ^= 0x8c;
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003760:	43db      	mvns	r3, r3
 8003762:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8003764:	79bb      	ldrb	r3, [r7, #6]
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3301      	adds	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b07      	cmp	r3, #7
 8003774:	dde5      	ble.n	8003742 <OW_CRC_BYTE+0x16>
  }
  return crc;
 8003776:	79fb      	ldrb	r3, [r7, #7]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <OW_CRC>:

uint8_t OW_CRC(const uint8_t* data, int len)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	e00d      	b.n	80037b4 <OW_CRC+0x30>
      crc = OW_CRC_BYTE(crc, data[i]);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	7afb      	ldrb	r3, [r7, #11]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ffc1 	bl	800372c <OW_CRC_BYTE>
 80037aa:	4603      	mov	r3, r0
 80037ac:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbed      	blt.n	8003798 <OW_CRC+0x14>

    return crc;
 80037bc:	7afb      	ldrb	r3, [r7, #11]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <OW_Search_First>:
//--------------------------------------------------------------------------
// Find the 'first' devices on the 1-Wire bus
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : no device present
//
int OW_Search_First() {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
	// reset the search state
	LastDiscrepancy = 0;
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <OW_Search_First+0x20>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
	LastDeviceFlag = FALSE;
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <OW_Search_First+0x24>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
	LastFamilyDiscrepancy = 0;
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <OW_Search_First+0x28>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

	return OW_Search();
 80037de:	f000 f811 	bl	8003804 <OW_Search>
 80037e2:	4603      	mov	r3, r0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000818 	.word	0x20000818
 80037ec:	20000820 	.word	0x20000820
 80037f0:	2000081c 	.word	0x2000081c

080037f4 <OW_Search_Next>:
//--------------------------------------------------------------------------
// Find the 'next' devices on the 1-Wire bus
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
int OW_Search_Next() {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
	// leave the search state alone
	return OW_Search();
 80037f8:	f000 f804 	bl	8003804 <OW_Search>
 80037fc:	4603      	mov	r3, r0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <OW_Search>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
int OW_Search() {
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
	int last_zero, rom_byte_number, search_result;
	int id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	// initialize for search
	id_bit_number = 1;
 800380a:	2301      	movs	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
	last_zero = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
	rom_byte_number = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
	rom_byte_mask = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
	search_result = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
	crc8 = 0;
 800381e:	4b5e      	ldr	r3, [pc, #376]	; (8003998 <OW_Search+0x194>)
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]

	// if the last call was not the last one
	if (!LastDeviceFlag) {
 8003824:	4b5d      	ldr	r3, [pc, #372]	; (800399c <OW_Search+0x198>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f040 809d 	bne.w	8003968 <OW_Search+0x164>
		// 1-Wire reset
		if (OW_Reset() != HAL_OK) {
 800382e:	f7ff fed7 	bl	80035e0 <OW_Reset>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <OW_Search+0x4a>
			// reset the search
			LastDiscrepancy = 0;
 8003838:	4b59      	ldr	r3, [pc, #356]	; (80039a0 <OW_Search+0x19c>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
			LastDeviceFlag = FALSE;
 800383e:	4b57      	ldr	r3, [pc, #348]	; (800399c <OW_Search+0x198>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
			LastFamilyDiscrepancy = 0;
 8003844:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <OW_Search+0x1a0>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
			return FALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	e09f      	b.n	800398e <OW_Search+0x18a>
		}

		// issue the search command
		OW_Write_Byte(0xF0);
 800384e:	20f0      	movs	r0, #240	; 0xf0
 8003850:	f7ff ff50 	bl	80036f4 <OW_Write_Byte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OW_Read_Bit();
 8003854:	f7ff feee 	bl	8003634 <OW_Read_Bit>
 8003858:	60b8      	str	r0, [r7, #8]
			cmp_id_bit = OW_Read_Bit();
 800385a:	f7ff feeb 	bl	8003634 <OW_Read_Bit>
 800385e:	6078      	str	r0, [r7, #4]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <OW_Search+0x68>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d06a      	beq.n	8003942 <OW_Search+0x13e>
				break;
			else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit)
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	d002      	beq.n	800387a <OW_Search+0x76>
					search_direction = id_bit;  // bit write value for search
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	73bb      	strb	r3, [r7, #14]
 8003878:	e026      	b.n	80038c8 <OW_Search+0xc4>
				else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < LastDiscrepancy)
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <OW_Search+0x19c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	429a      	cmp	r2, r3
 8003882:	da0d      	bge.n	80038a0 <OW_Search+0x9c>
						search_direction = ((ROM_NO[rom_byte_number]
 8003884:	4a48      	ldr	r2, [pc, #288]	; (80039a8 <OW_Search+0x1a4>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	4413      	add	r3, r2
 800388a:	781a      	ldrb	r2, [r3, #0]
								& rom_byte_mask) > 0);
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	4013      	ands	r3, r2
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
						search_direction = ((ROM_NO[rom_byte_number]
 800389c:	73bb      	strb	r3, [r7, #14]
 800389e:	e008      	b.n	80038b2 <OW_Search+0xae>
					else
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == LastDiscrepancy);
 80038a0:	4b3f      	ldr	r3, [pc, #252]	; (80039a0 <OW_Search+0x19c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	73bb      	strb	r3, [r7, #14]

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <OW_Search+0xc4>
						last_zero = id_bit_number;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	61bb      	str	r3, [r7, #24]

						// check for Last discrepancy in family
						if (last_zero < 9)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b08      	cmp	r3, #8
 80038c0:	dc02      	bgt.n	80038c8 <OW_Search+0xc4>
							LastFamilyDiscrepancy = last_zero;
 80038c2:	4a38      	ldr	r2, [pc, #224]	; (80039a4 <OW_Search+0x1a0>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6013      	str	r3, [r2, #0]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1)
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10c      	bne.n	80038e8 <OW_Search+0xe4>
					ROM_NO[rom_byte_number] |= rom_byte_mask;
 80038ce:	4a36      	ldr	r2, [pc, #216]	; (80039a8 <OW_Search+0x1a4>)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	4413      	add	r3, r2
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	4313      	orrs	r3, r2
 80038da:	b2d9      	uxtb	r1, r3
 80038dc:	4a32      	ldr	r2, [pc, #200]	; (80039a8 <OW_Search+0x1a4>)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4413      	add	r3, r2
 80038e2:	460a      	mov	r2, r1
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e010      	b.n	800390a <OW_Search+0x106>
				else
					ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80038e8:	4a2f      	ldr	r2, [pc, #188]	; (80039a8 <OW_Search+0x1a4>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4413      	add	r3, r2
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b25a      	sxtb	r2, r3
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	b25b      	sxtb	r3, r3
 80038fa:	4013      	ands	r3, r2
 80038fc:	b25b      	sxtb	r3, r3
 80038fe:	b2d9      	uxtb	r1, r3
 8003900:	4a29      	ldr	r2, [pc, #164]	; (80039a8 <OW_Search+0x1a4>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4413      	add	r3, r2
 8003906:	460a      	mov	r2, r1
 8003908:	701a      	strb	r2, [r3, #0]

				// serial number search direction write bit
				OW_Write_Bit(search_direction);
 800390a:	7bbb      	ldrb	r3, [r7, #14]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fecf 	bl	80036b0 <OW_Write_Bit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3301      	adds	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
				rom_byte_mask <<= 1;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <OW_Search+0x138>
					OW_Crc_LUT(ROM_NO[rom_byte_number]);  // accumulate the CRC
 8003924:	4a20      	ldr	r2, [pc, #128]	; (80039a8 <OW_Search+0x1a4>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	4413      	add	r3, r2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f83d 	bl	80039ac <OW_Crc_LUT>
					rom_byte_number++;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3301      	adds	r3, #1
 8003936:	617b      	str	r3, [r7, #20]
					rom_byte_mask = 1;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b07      	cmp	r3, #7
 8003940:	dd88      	ble.n	8003854 <OW_Search+0x50>

		// if the search was successful then
		if (!((id_bit_number < 65) || (crc8 != 0))) {
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	dd0f      	ble.n	8003968 <OW_Search+0x164>
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <OW_Search+0x194>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <OW_Search+0x164>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			LastDiscrepancy = last_zero;
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <OW_Search+0x19c>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	6013      	str	r3, [r2, #0]

			// check for last device
			if (LastDiscrepancy == 0)
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <OW_Search+0x19c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <OW_Search+0x160>
				LastDeviceFlag = TRUE;
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <OW_Search+0x198>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

			search_result = TRUE;
 8003964:	2301      	movs	r3, #1
 8003966:	613b      	str	r3, [r7, #16]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !ROM_NO[0]) {
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <OW_Search+0x172>
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <OW_Search+0x1a4>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <OW_Search+0x188>
		LastDiscrepancy = 0;
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <OW_Search+0x19c>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
		LastDeviceFlag = FALSE;
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <OW_Search+0x198>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
		LastFamilyDiscrepancy = 0;
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <OW_Search+0x1a0>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
		search_result = FALSE;
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
	}

	return search_result;
 800398c:	693b      	ldr	r3, [r7, #16]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000824 	.word	0x20000824
 800399c:	20000820 	.word	0x20000820
 80039a0:	20000818 	.word	0x20000818
 80039a4:	2000081c 	.word	0x2000081c
 80039a8:	20000810 	.word	0x20000810

080039ac <OW_Crc_LUT>:
//--------------------------------------------------------------------------
// Calculate the CRC8 of the byte value provided with the current
// global 'crc8' value.
// Returns current global crc8 value
//
uint8_t OW_Crc_LUT(uint8_t value) {
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
	// See Application Note 27

	// TEST BUILD
	crc8 = dscrc_table[crc8 ^ value];
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <OW_Crc_LUT+0x30>)
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	4053      	eors	r3, r2
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <OW_Crc_LUT+0x34>)
 80039c4:	5c9a      	ldrb	r2, [r3, r2]
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <OW_Crc_LUT+0x30>)
 80039c8:	701a      	strb	r2, [r3, #0]
	return crc8;
 80039ca:	4b04      	ldr	r3, [pc, #16]	; (80039dc <OW_Crc_LUT+0x30>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000824 	.word	0x20000824
 80039e0:	20000004 	.word	0x20000004

080039e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80039e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039e8:	f7ff f918 	bl	8002c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039ec:	480c      	ldr	r0, [pc, #48]	; (8003a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80039ee:	490d      	ldr	r1, [pc, #52]	; (8003a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <LoopForever+0xe>)
  movs r3, #0
 80039f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039f4:	e002      	b.n	80039fc <LoopCopyDataInit>

080039f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039fa:	3304      	adds	r3, #4

080039fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a00:	d3f9      	bcc.n	80039f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a04:	4c0a      	ldr	r4, [pc, #40]	; (8003a30 <LoopForever+0x16>)
  movs r3, #0
 8003a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a08:	e001      	b.n	8003a0e <LoopFillZerobss>

08003a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a0c:	3204      	adds	r2, #4

08003a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a10:	d3fb      	bcc.n	8003a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a12:	f008 fa01 	bl	800be18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a16:	f7fe fa5b 	bl	8001ed0 <main>

08003a1a <LoopForever>:

LoopForever:
    b LoopForever
 8003a1a:	e7fe      	b.n	8003a1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a24:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003a28:	0800e414 	.word	0x0800e414
  ldr r2, =_sbss
 8003a2c:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003a30:	20000978 	.word	0x20000978

08003a34 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a34:	e7fe      	b.n	8003a34 <CAN1_RX0_IRQHandler>
	...

08003a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <HAL_Init+0x3c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <HAL_Init+0x3c>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a4e:	2003      	movs	r0, #3
 8003a50:	f001 fec2 	bl	80057d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a54:	2000      	movs	r0, #0
 8003a56:	f000 f80f 	bl	8003a78 <HAL_InitTick>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	71fb      	strb	r3, [r7, #7]
 8003a64:	e001      	b.n	8003a6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a66:	f7fe ff75 	bl	8002954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40022000 	.word	0x40022000

08003a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <HAL_InitTick+0x6c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_InitTick+0x70>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <HAL_InitTick+0x6c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 fecd 	bl	8005842 <HAL_SYSTICK_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d809      	bhi.n	8003ac8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	f001 fe97 	bl	80057ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_InitTick+0x74>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e007      	b.n	8003ad8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
 8003acc:	e004      	b.n	8003ad8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	e001      	b.n	8003ad8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000108 	.word	0x20000108
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	20000104 	.word	0x20000104

08003af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_IncTick+0x20>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_IncTick+0x24>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_IncTick+0x24>)
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000108 	.word	0x20000108
 8003b14:	20000828 	.word	0x20000828

08003b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_GetTick+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000828 	.word	0x20000828

08003b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7ff ffee 	bl	8003b18 <HAL_GetTick>
 8003b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d005      	beq.n	8003b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_Delay+0x44>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b56:	bf00      	nop
 8003b58:	f7ff ffde 	bl	8003b18 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d8f7      	bhi.n	8003b58 <HAL_Delay+0x28>
  {
  }
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000108 	.word	0x20000108

08003b78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3360      	adds	r3, #96	; 0x60
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <LL_ADC_SetOffset+0x44>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	03fff000 	.word	0x03fff000

08003c28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3360      	adds	r3, #96	; 0x60
 8003c36:	461a      	mov	r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3360      	adds	r3, #96	; 0x60
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3330      	adds	r3, #48	; 0x30
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	211f      	movs	r1, #31
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0e9b      	lsrs	r3, r3, #26
 8003ce8:	f003 011f 	and.w	r1, r3, #31
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	0e5b      	lsrs	r3, r3, #25
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	4413      	add	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	0d1b      	lsrs	r3, r3, #20
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	2107      	movs	r1, #7
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	401a      	ands	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	0d1b      	lsrs	r3, r3, #20
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	431a      	orrs	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	401a      	ands	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f003 0318 	and.w	r3, r3, #24
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003da8:	40d9      	lsrs	r1, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	400b      	ands	r3, r1
 8003dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	0007ffff 	.word	0x0007ffff

08003dcc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6093      	str	r3, [r2, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3c:	d101      	bne.n	8003e42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e8c:	d101      	bne.n	8003e92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003eb4:	f043 0201 	orr.w	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003edc:	f043 0202 	orr.w	r2, r3, #2
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <LL_ADC_IsEnabled+0x18>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <LL_ADC_IsEnabled+0x1a>
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d101      	bne.n	8003f2e <LL_ADC_IsDisableOngoing+0x18>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <LL_ADC_IsDisableOngoing+0x1a>
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d101      	bne.n	8003f7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d101      	bne.n	8003fa2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e130      	b.n	800422c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fd fa7b 	bl	80014d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ff19 	bl	8003e28 <LL_ADC_IsDeepPowerDownEnabled>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff feff 	bl	8003e04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff34 	bl	8003e78 <LL_ADC_IsInternalRegulatorEnabled>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d115      	bne.n	8004042 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff18 	bl	8003e50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004020:	4b84      	ldr	r3, [pc, #528]	; (8004234 <HAL_ADC_Init+0x284>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	4a84      	ldr	r2, [pc, #528]	; (8004238 <HAL_ADC_Init+0x288>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	3301      	adds	r3, #1
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004034:	e002      	b.n	800403c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b01      	subs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f9      	bne.n	8004036 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ff16 	bl	8003e78 <LL_ADC_IsInternalRegulatorEnabled>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff76 	bl	8003f64 <LL_ADC_REG_IsConversionOngoing>
 8004078:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 80c9 	bne.w	800421a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 80c5 	bne.w	800421a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004098:	f043 0202 	orr.w	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff23 	bl	8003ef0 <LL_ADC_IsEnabled>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d115      	bne.n	80040dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b0:	4862      	ldr	r0, [pc, #392]	; (800423c <HAL_ADC_Init+0x28c>)
 80040b2:	f7ff ff1d 	bl	8003ef0 <LL_ADC_IsEnabled>
 80040b6:	4604      	mov	r4, r0
 80040b8:	4861      	ldr	r0, [pc, #388]	; (8004240 <HAL_ADC_Init+0x290>)
 80040ba:	f7ff ff19 	bl	8003ef0 <LL_ADC_IsEnabled>
 80040be:	4603      	mov	r3, r0
 80040c0:	431c      	orrs	r4, r3
 80040c2:	4860      	ldr	r0, [pc, #384]	; (8004244 <HAL_ADC_Init+0x294>)
 80040c4:	f7ff ff14 	bl	8003ef0 <LL_ADC_IsEnabled>
 80040c8:	4603      	mov	r3, r0
 80040ca:	4323      	orrs	r3, r4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4619      	mov	r1, r3
 80040d6:	485c      	ldr	r0, [pc, #368]	; (8004248 <HAL_ADC_Init+0x298>)
 80040d8:	f7ff fd4e 	bl	8003b78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7e5b      	ldrb	r3, [r3, #25]
 80040e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80040ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80040f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d106      	bne.n	8004118 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	3b01      	subs	r3, #1
 8004110:	045b      	lsls	r3, r3, #17
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	4b44      	ldr	r3, [pc, #272]	; (800424c <HAL_ADC_Init+0x29c>)
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	69b9      	ldr	r1, [r7, #24]
 8004144:	430b      	orrs	r3, r1
 8004146:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff1c 	bl	8003f8a <LL_ADC_INJ_IsConversionOngoing>
 8004152:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d13d      	bne.n	80041d6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d13a      	bne.n	80041d6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004164:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800416c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800417c:	f023 0302 	bic.w	r3, r3, #2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	430b      	orrs	r3, r1
 8004188:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004190:	2b01      	cmp	r3, #1
 8004192:	d118      	bne.n	80041c6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800419e:	f023 0304 	bic.w	r3, r3, #4
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041b0:	4311      	orrs	r1, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041b6:	430a      	orrs	r2, r1
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	611a      	str	r2, [r3, #16]
 80041c4:	e007      	b.n	80041d6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10c      	bne.n	80041f8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	f023 010f 	bic.w	r1, r3, #15
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
 80041f6:	e007      	b.n	8004208 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 020f 	bic.w	r2, r2, #15
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f023 0303 	bic.w	r3, r3, #3
 8004210:	f043 0201 	orr.w	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
 8004218:	e007      	b.n	800422a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f043 0210 	orr.w	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800422a:	7ffb      	ldrb	r3, [r7, #31]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3724      	adds	r7, #36	; 0x24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd90      	pop	{r4, r7, pc}
 8004234:	20000000 	.word	0x20000000
 8004238:	053e2d63 	.word	0x053e2d63
 800423c:	50040000 	.word	0x50040000
 8004240:	50040100 	.word	0x50040100
 8004244:	50040200 	.word	0x50040200
 8004248:	50040300 	.word	0x50040300
 800424c:	fff0c007 	.word	0xfff0c007

08004250 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800425c:	4853      	ldr	r0, [pc, #332]	; (80043ac <HAL_ADC_Start_DMA+0x15c>)
 800425e:	f7ff fdb5 	bl	8003dcc <LL_ADC_GetMultimode>
 8004262:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fe7b 	bl	8003f64 <LL_ADC_REG_IsConversionOngoing>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 8093 	bne.w	800439c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_ADC_Start_DMA+0x34>
 8004280:	2302      	movs	r3, #2
 8004282:	e08e      	b.n	80043a2 <HAL_ADC_Start_DMA+0x152>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a47      	ldr	r2, [pc, #284]	; (80043b0 <HAL_ADC_Start_DMA+0x160>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d008      	beq.n	80042a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d002      	beq.n	80042a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b09      	cmp	r3, #9
 80042a6:	d172      	bne.n	800438e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 feb7 	bl	800501c <ADC_Enable>
 80042ae:	4603      	mov	r3, r0
 80042b0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d165      	bne.n	8004384 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <HAL_ADC_Start_DMA+0x164>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d002      	beq.n	80042dc <HAL_ADC_Start_DMA+0x8c>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	e000      	b.n	80042de <HAL_ADC_Start_DMA+0x8e>
 80042dc:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <HAL_ADC_Start_DMA+0x168>)
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d002      	beq.n	80042ec <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f023 0206 	bic.w	r2, r3, #6
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	659a      	str	r2, [r3, #88]	; 0x58
 8004310:	e002      	b.n	8004318 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	4a27      	ldr	r2, [pc, #156]	; (80043bc <HAL_ADC_Start_DMA+0x16c>)
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004324:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <HAL_ADC_Start_DMA+0x170>)
 8004326:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432c:	4a25      	ldr	r2, [pc, #148]	; (80043c4 <HAL_ADC_Start_DMA+0x174>)
 800432e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	221c      	movs	r2, #28
 8004336:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0210 	orr.w	r2, r2, #16
 800434e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3340      	adds	r3, #64	; 0x40
 800436a:	4619      	mov	r1, r3
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f001 fb2c 	bl	80059cc <HAL_DMA_Start_IT>
 8004374:	4603      	mov	r3, r0
 8004376:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fddd 	bl	8003f3c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004382:	e00d      	b.n	80043a0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800438c:	e008      	b.n	80043a0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800439a:	e001      	b.n	80043a0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800439c:	2302      	movs	r3, #2
 800439e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	50040300 	.word	0x50040300
 80043b0:	50040200 	.word	0x50040200
 80043b4:	50040100 	.word	0x50040100
 80043b8:	50040000 	.word	0x50040000
 80043bc:	080051e7 	.word	0x080051e7
 80043c0:	080052bf 	.word	0x080052bf
 80043c4:	080052db 	.word	0x080052db

080043c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	; 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80043d0:	2300      	movs	r3, #0
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e4:	4882      	ldr	r0, [pc, #520]	; (80045f0 <HAL_ADC_IRQHandler+0x228>)
 80043e6:	f7ff fcf1 	bl	8003dcc <LL_ADC_GetMultimode>
 80043ea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <HAL_ADC_IRQHandler+0x5e>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d012      	beq.n	8004426 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f853 	bl	80054c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2202      	movs	r2, #2
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <HAL_ADC_IRQHandler+0x72>
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8083 	beq.w	800454c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d07d      	beq.n	800454c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fc0c 	bl	8003c8a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d062      	beq.n	800453e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5d      	ldr	r2, [pc, #372]	; (80045f4 <HAL_ADC_IRQHandler+0x22c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d002      	beq.n	8004488 <HAL_ADC_IRQHandler+0xc0>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	e000      	b.n	800448a <HAL_ADC_IRQHandler+0xc2>
 8004488:	4b5b      	ldr	r3, [pc, #364]	; (80045f8 <HAL_ADC_IRQHandler+0x230>)
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	4293      	cmp	r3, r2
 8004490:	d008      	beq.n	80044a4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b05      	cmp	r3, #5
 800449c:	d002      	beq.n	80044a4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b09      	cmp	r3, #9
 80044a2:	d104      	bne.n	80044ae <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	e00c      	b.n	80044c8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a50      	ldr	r2, [pc, #320]	; (80045f4 <HAL_ADC_IRQHandler+0x22c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d002      	beq.n	80044be <HAL_ADC_IRQHandler+0xf6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	e000      	b.n	80044c0 <HAL_ADC_IRQHandler+0xf8>
 80044be:	4b4e      	ldr	r3, [pc, #312]	; (80045f8 <HAL_ADC_IRQHandler+0x230>)
 80044c0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d135      	bne.n	800453e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d12e      	bne.n	800453e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fd3d 	bl	8003f64 <LL_ADC_REG_IsConversionOngoing>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11a      	bne.n	8004526 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 020c 	bic.w	r2, r2, #12
 80044fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d112      	bne.n	800453e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	f043 0201 	orr.w	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
 8004524:	e00b      	b.n	800453e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	f043 0210 	orr.w	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fe f9f8 	bl	8002934 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	220c      	movs	r2, #12
 800454a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <HAL_ADC_IRQHandler+0x198>
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 809f 	beq.w	80046aa <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8099 	beq.w	80046aa <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fbb7 	bl	8003d08 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800459a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fb72 	bl	8003c8a <LL_ADC_REG_IsTriggerSourceSWStart>
 80045a6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <HAL_ADC_IRQHandler+0x22c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d002      	beq.n	80045b8 <HAL_ADC_IRQHandler+0x1f0>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	e000      	b.n	80045ba <HAL_ADC_IRQHandler+0x1f2>
 80045b8:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <HAL_ADC_IRQHandler+0x230>)
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	4293      	cmp	r3, r2
 80045c0:	d008      	beq.n	80045d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d002      	beq.n	80045d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b07      	cmp	r3, #7
 80045d2:	d104      	bne.n	80045de <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	623b      	str	r3, [r7, #32]
 80045dc:	e013      	b.n	8004606 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <HAL_ADC_IRQHandler+0x22c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d009      	beq.n	80045fc <HAL_ADC_IRQHandler+0x234>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	e007      	b.n	80045fe <HAL_ADC_IRQHandler+0x236>
 80045ee:	bf00      	nop
 80045f0:	50040300 	.word	0x50040300
 80045f4:	50040100 	.word	0x50040100
 80045f8:	50040000 	.word	0x50040000
 80045fc:	4b7d      	ldr	r3, [pc, #500]	; (80047f4 <HAL_ADC_IRQHandler+0x42c>)
 80045fe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d047      	beq.n	800469c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_ADC_IRQHandler+0x25e>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d03f      	beq.n	800469c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004622:	2b00      	cmp	r3, #0
 8004624:	d13a      	bne.n	800469c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d133      	bne.n	800469c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d12e      	bne.n	800469c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fca1 	bl	8003f8a <LL_ADC_INJ_IsConversionOngoing>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11a      	bne.n	8004684 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800465c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d112      	bne.n	800469c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f043 0201 	orr.w	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
 8004682:	e00b      	b.n	800469c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f043 0210 	orr.w	r2, r3, #16
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004694:	f043 0201 	orr.w	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fee9 	bl	8005474 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2260      	movs	r2, #96	; 0x60
 80046a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d011      	beq.n	80046d8 <HAL_ADC_IRQHandler+0x310>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00c      	beq.n	80046d8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f8a0 	bl	8004810 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2280      	movs	r2, #128	; 0x80
 80046d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <HAL_ADC_IRQHandler+0x340>
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fecf 	bl	800549c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004706:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470e:	2b00      	cmp	r3, #0
 8004710:	d012      	beq.n	8004738 <HAL_ADC_IRQHandler+0x370>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fec1 	bl	80054b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004736:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	d036      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x3e8>
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d031      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8004754:	2301      	movs	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
 8004758:	e014      	b.n	8004784 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004760:	4825      	ldr	r0, [pc, #148]	; (80047f8 <HAL_ADC_IRQHandler+0x430>)
 8004762:	f7ff fb41 	bl	8003de8 <LL_ADC_GetMultiDMATransfer>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800476c:	2301      	movs	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	e008      	b.n	8004784 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004780:	2301      	movs	r3, #1
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	2b01      	cmp	r3, #1
 8004788:	d10e      	bne.n	80047a8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f83e 	bl	8004824 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2210      	movs	r2, #16
 80047ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d018      	beq.n	80047ec <HAL_ADC_IRQHandler+0x424>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d013      	beq.n	80047ec <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	f043 0208 	orr.w	r2, r3, #8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047e4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fe4e 	bl	8005488 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80047ec:	bf00      	nop
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	50040000 	.word	0x50040000
 80047f8:	50040300 	.word	0x50040300

080047fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b0b6      	sub	sp, #216	; 0xd8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004848:	2300      	movs	r3, #0
 800484a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_ADC_ConfigChannel+0x22>
 8004856:	2302      	movs	r3, #2
 8004858:	e3c9      	b.n	8004fee <HAL_ADC_ConfigChannel+0x7b6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fb7c 	bl	8003f64 <LL_ADC_REG_IsConversionOngoing>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	f040 83aa 	bne.w	8004fc8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b05      	cmp	r3, #5
 8004882:	d824      	bhi.n	80048ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	3b02      	subs	r3, #2
 800488a:	2b03      	cmp	r3, #3
 800488c:	d81b      	bhi.n	80048c6 <HAL_ADC_ConfigChannel+0x8e>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <HAL_ADC_ConfigChannel+0x5c>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048a5 	.word	0x080048a5
 8004898:	080048ad 	.word	0x080048ad
 800489c:	080048b5 	.word	0x080048b5
 80048a0:	080048bd 	.word	0x080048bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80048a4:	230c      	movs	r3, #12
 80048a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048aa:	e010      	b.n	80048ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80048ac:	2312      	movs	r3, #18
 80048ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048b2:	e00c      	b.n	80048ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80048b4:	2318      	movs	r3, #24
 80048b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048ba:	e008      	b.n	80048ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80048bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048c4:	e003      	b.n	80048ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80048c6:	2306      	movs	r3, #6
 80048c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80048dc:	f7ff f9e8 	bl	8003cb0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fb3d 	bl	8003f64 <LL_ADC_REG_IsConversionOngoing>
 80048ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fb49 	bl	8003f8a <LL_ADC_INJ_IsConversionOngoing>
 80048f8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004900:	2b00      	cmp	r3, #0
 8004902:	f040 81a4 	bne.w	8004c4e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 819f 	bne.w	8004c4e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	461a      	mov	r2, r3
 800491e:	f7ff fa06 	bl	8003d2e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	08db      	lsrs	r3, r3, #3
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d00a      	beq.n	800495a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6919      	ldr	r1, [r3, #16]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004954:	f7ff f944 	bl	8003be0 <LL_ADC_SetOffset>
 8004958:	e179      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff f961 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004966:	4603      	mov	r3, r0
 8004968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x14e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff f956 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 800497c:	4603      	mov	r3, r0
 800497e:	0e9b      	lsrs	r3, r3, #26
 8004980:	f003 021f 	and.w	r2, r3, #31
 8004984:	e01e      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x18c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff f94b 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004992:	4603      	mov	r3, r0
 8004994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800499c:	fa93 f3a3 	rbit	r3, r3
 80049a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80049ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80049b4:	2320      	movs	r3, #32
 80049b6:	e004      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80049b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049bc:	fab3 f383 	clz	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x1a4>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0e9b      	lsrs	r3, r3, #26
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	e018      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x1d6>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80049f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80049f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004a00:	2320      	movs	r3, #32
 8004a02:	e004      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a08:	fab3 f383 	clz	r3, r3
 8004a0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d106      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff f91a 	bl	8003c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2101      	movs	r1, #1
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff f8fe 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x214>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff f8f3 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004a42:	4603      	mov	r3, r0
 8004a44:	0e9b      	lsrs	r3, r3, #26
 8004a46:	f003 021f 	and.w	r2, r3, #31
 8004a4a:	e01e      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x252>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff f8e8 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004a7a:	2320      	movs	r3, #32
 8004a7c:	e004      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x26a>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0e9b      	lsrs	r3, r3, #26
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	e018      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x29c>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004abe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004ac6:	2320      	movs	r3, #32
 8004ac8:	e004      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d106      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff f8b7 	bl	8003c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2102      	movs	r1, #2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff f89b 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x2da>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2102      	movs	r1, #2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff f890 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	0e9b      	lsrs	r3, r3, #26
 8004b0c:	f003 021f 	and.w	r2, r3, #31
 8004b10:	e01e      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x318>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2102      	movs	r1, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff f885 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b28:	fa93 f3a3 	rbit	r3, r3
 8004b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004b40:	2320      	movs	r3, #32
 8004b42:	e004      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b48:	fab3 f383 	clz	r3, r3
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x330>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	0e9b      	lsrs	r3, r3, #26
 8004b62:	f003 031f 	and.w	r3, r3, #31
 8004b66:	e014      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x35a>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004b84:	2320      	movs	r3, #32
 8004b86:	e004      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d106      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff f858 	bl	8003c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2103      	movs	r1, #3
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff f83c 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x398>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2103      	movs	r1, #3
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff f831 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	0e9b      	lsrs	r3, r3, #26
 8004bca:	f003 021f 	and.w	r2, r3, #31
 8004bce:	e017      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x3c8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2103      	movs	r1, #3
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f826 	bl	8003c28 <LL_ADC_GetOffsetChannel>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be2:	fa93 f3a3 	rbit	r3, r3
 8004be6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bea:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004bf2:	2320      	movs	r3, #32
 8004bf4:	e003      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x3e0>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	0e9b      	lsrs	r3, r3, #26
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	e011      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x404>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c28:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004c30:	2320      	movs	r3, #32
 8004c32:	e003      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d106      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2200      	movs	r2, #0
 8004c46:	2103      	movs	r1, #3
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff f803 	bl	8003c54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff f94c 	bl	8003ef0 <LL_ADC_IsEnabled>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 8140 	bne.w	8004ee0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f7ff f889 	bl	8003d84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	4a8f      	ldr	r2, [pc, #572]	; (8004eb4 <HAL_ADC_ConfigChannel+0x67c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	f040 8131 	bne.w	8004ee0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x46e>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	0e9b      	lsrs	r3, r3, #26
 8004c94:	3301      	adds	r3, #1
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	bf94      	ite	ls
 8004c9e:	2301      	movls	r3, #1
 8004ca0:	2300      	movhi	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	e019      	b.n	8004cda <HAL_ADC_ConfigChannel+0x4a2>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004cbe:	2320      	movs	r3, #32
 8004cc0:	e003      	b.n	8004cca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	2b09      	cmp	r3, #9
 8004cd2:	bf94      	ite	ls
 8004cd4:	2301      	movls	r3, #1
 8004cd6:	2300      	movhi	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d079      	beq.n	8004dd2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d107      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x4c2>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	0e9b      	lsrs	r3, r3, #26
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	069b      	lsls	r3, r3, #26
 8004cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cf8:	e015      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x4ee>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d02:	fa93 f3a3 	rbit	r3, r3
 8004d06:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004d12:	2320      	movs	r3, #32
 8004d14:	e003      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d18:	fab3 f383 	clz	r3, r3
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	069b      	lsls	r3, r3, #26
 8004d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_ADC_ConfigChannel+0x50e>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	0e9b      	lsrs	r3, r3, #26
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2101      	movs	r1, #1
 8004d40:	fa01 f303 	lsl.w	r3, r1, r3
 8004d44:	e017      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x53e>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d56:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004d5e:	2320      	movs	r3, #32
 8004d60:	e003      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d64:	fab3 f383 	clz	r3, r3
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	2101      	movs	r1, #1
 8004d72:	fa01 f303 	lsl.w	r3, r1, r3
 8004d76:	ea42 0103 	orr.w	r1, r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x564>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	0e9b      	lsrs	r3, r3, #26
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	f003 021f 	and.w	r2, r3, #31
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	051b      	lsls	r3, r3, #20
 8004d9a:	e018      	b.n	8004dce <HAL_ADC_ConfigChannel+0x596>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004db4:	2320      	movs	r3, #32
 8004db6:	e003      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f003 021f 	and.w	r2, r3, #31
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	4413      	add	r3, r2
 8004dcc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	e081      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x5b6>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	0e9b      	lsrs	r3, r3, #26
 8004de4:	3301      	adds	r3, #1
 8004de6:	069b      	lsls	r3, r3, #26
 8004de8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dec:	e015      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x5e2>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	fa93 f3a3 	rbit	r3, r3
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004e06:	2320      	movs	r3, #32
 8004e08:	e003      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	fab3 f383 	clz	r3, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	3301      	adds	r3, #1
 8004e14:	069b      	lsls	r3, r3, #26
 8004e16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x602>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	0e9b      	lsrs	r3, r3, #26
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2101      	movs	r1, #1
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	e017      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x632>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	fa93 f3a3 	rbit	r3, r3
 8004e46:	61bb      	str	r3, [r7, #24]
  return result;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004e52:	2320      	movs	r3, #32
 8004e54:	e003      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	fab3 f383 	clz	r3, r3
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	ea42 0103 	orr.w	r1, r2, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x65e>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	0e9b      	lsrs	r3, r3, #26
 8004e80:	3301      	adds	r3, #1
 8004e82:	f003 021f 	and.w	r2, r3, #31
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3b1e      	subs	r3, #30
 8004e8e:	051b      	lsls	r3, r3, #20
 8004e90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e94:	e01e      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x69c>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	fa93 f3a3 	rbit	r3, r3
 8004ea2:	60fb      	str	r3, [r7, #12]
  return result;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004eae:	2320      	movs	r3, #32
 8004eb0:	e006      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x688>
 8004eb2:	bf00      	nop
 8004eb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	f003 021f 	and.w	r2, r3, #31
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	3b1e      	subs	r3, #30
 8004ece:	051b      	lsls	r3, r3, #20
 8004ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ed4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eda:	4619      	mov	r1, r3
 8004edc:	f7fe ff27 	bl	8003d2e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b44      	ldr	r3, [pc, #272]	; (8004ff8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d07a      	beq.n	8004fe2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eec:	4843      	ldr	r0, [pc, #268]	; (8004ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8004eee:	f7fe fe69 	bl	8003bc4 <LL_ADC_GetCommonPathInternalCh>
 8004ef2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a41      	ldr	r2, [pc, #260]	; (8005000 <HAL_ADC_ConfigChannel+0x7c8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d12c      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d126      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <HAL_ADC_ConfigChannel+0x7cc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_ADC_ConfigChannel+0x6e8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <HAL_ADC_ConfigChannel+0x7d0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d15d      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4834      	ldr	r0, [pc, #208]	; (8004ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8004f2c:	f7fe fe37 	bl	8003b9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f30:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_ADC_ConfigChannel+0x7d4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	099b      	lsrs	r3, r3, #6
 8004f36:	4a36      	ldr	r2, [pc, #216]	; (8005010 <HAL_ADC_ConfigChannel+0x7d8>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004f4a:	e002      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f9      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f58:	e040      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2d      	ldr	r2, [pc, #180]	; (8005014 <HAL_ADC_ConfigChannel+0x7dc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d118      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d112      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a23      	ldr	r2, [pc, #140]	; (8005004 <HAL_ADC_ConfigChannel+0x7cc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_ADC_ConfigChannel+0x74c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a22      	ldr	r2, [pc, #136]	; (8005008 <HAL_ADC_ConfigChannel+0x7d0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d12d      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	481b      	ldr	r0, [pc, #108]	; (8004ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8004f90:	f7fe fe05 	bl	8003b9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f94:	e024      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_ADC_ConfigChannel+0x7e0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d120      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d11a      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a14      	ldr	r2, [pc, #80]	; (8005004 <HAL_ADC_ConfigChannel+0x7cc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d115      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	480e      	ldr	r0, [pc, #56]	; (8004ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8004fc2:	f7fe fdec 	bl	8003b9e <LL_ADC_SetCommonPathInternalCh>
 8004fc6:	e00c      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004fda:	e002      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fdc:	bf00      	nop
 8004fde:	e000      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004fea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	37d8      	adds	r7, #216	; 0xd8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	80080000 	.word	0x80080000
 8004ffc:	50040300 	.word	0x50040300
 8005000:	c7520000 	.word	0xc7520000
 8005004:	50040000 	.word	0x50040000
 8005008:	50040200 	.word	0x50040200
 800500c:	20000000 	.word	0x20000000
 8005010:	053e2d63 	.word	0x053e2d63
 8005014:	cb840000 	.word	0xcb840000
 8005018:	80000001 	.word	0x80000001

0800501c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe ff5f 	bl	8003ef0 <LL_ADC_IsEnabled>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d169      	bne.n	800510c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	4b36      	ldr	r3, [pc, #216]	; (8005118 <ADC_Enable+0xfc>)
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	f043 0210 	orr.w	r2, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	f043 0201 	orr.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e055      	b.n	800510e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe ff1a 	bl	8003ea0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800506c:	482b      	ldr	r0, [pc, #172]	; (800511c <ADC_Enable+0x100>)
 800506e:	f7fe fda9 	bl	8003bc4 <LL_ADC_GetCommonPathInternalCh>
 8005072:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005078:	2b00      	cmp	r3, #0
 800507a:	d013      	beq.n	80050a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800507c:	4b28      	ldr	r3, [pc, #160]	; (8005120 <ADC_Enable+0x104>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	4a28      	ldr	r2, [pc, #160]	; (8005124 <ADC_Enable+0x108>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	4613      	mov	r3, r2
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005096:	e002      	b.n	800509e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	3b01      	subs	r3, #1
 800509c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f9      	bne.n	8005098 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050a4:	f7fe fd38 	bl	8003b18 <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050aa:	e028      	b.n	80050fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe ff1d 	bl	8003ef0 <LL_ADC_IsEnabled>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe feed 	bl	8003ea0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050c6:	f7fe fd27 	bl	8003b18 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d914      	bls.n	80050fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d00d      	beq.n	80050fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f043 0210 	orr.w	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e007      	b.n	800510e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d1cf      	bne.n	80050ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	8000003f 	.word	0x8000003f
 800511c:	50040300 	.word	0x50040300
 8005120:	20000000 	.word	0x20000000
 8005124:	053e2d63 	.word	0x053e2d63

08005128 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe feee 	bl	8003f16 <LL_ADC_IsDisableOngoing>
 800513a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fed5 	bl	8003ef0 <LL_ADC_IsEnabled>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d047      	beq.n	80051dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d144      	bne.n	80051dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 030d 	and.w	r3, r3, #13
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10c      	bne.n	800517a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f7fe feaf 	bl	8003ec8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2203      	movs	r2, #3
 8005170:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005172:	f7fe fcd1 	bl	8003b18 <HAL_GetTick>
 8005176:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005178:	e029      	b.n	80051ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f043 0210 	orr.w	r2, r3, #16
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	f043 0201 	orr.w	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e023      	b.n	80051de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005196:	f7fe fcbf 	bl	8003b18 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d914      	bls.n	80051ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f043 0210 	orr.w	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	f043 0201 	orr.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e007      	b.n	80051de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1dc      	bne.n	8005196 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d14b      	bne.n	8005298 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d021      	beq.n	800525e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe fd33 	bl	8003c8a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d032      	beq.n	8005290 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d12b      	bne.n	8005290 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d11f      	bne.n	8005290 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f043 0201 	orr.w	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	655a      	str	r2, [r3, #84]	; 0x54
 800525c:	e018      	b.n	8005290 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d111      	bne.n	8005290 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	f043 0201 	orr.w	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7fd fb4f 	bl	8002934 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005296:	e00e      	b.n	80052b6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fabd 	bl	8004824 <HAL_ADC_ErrorCallback>
}
 80052aa:	e004      	b.n	80052b6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff fa95 	bl	80047fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff fa8f 	bl	8004824 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <LL_ADC_IsEnabled>:
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <LL_ADC_IsEnabled+0x18>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <LL_ADC_IsEnabled+0x1a>
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <LL_ADC_StartCalibration>:
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005346:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005350:	4313      	orrs	r3, r2
 8005352:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	609a      	str	r2, [r3, #8]
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <LL_ADC_IsCalibrationOnGoing>:
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537a:	d101      	bne.n	8005380 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <LL_ADC_REG_IsConversionOngoing>:
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d101      	bne.n	80053a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_ADCEx_Calibration_Start+0x1c>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e04d      	b.n	800546c <HAL_ADCEx_Calibration_Start+0xb8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fea5 	bl	8005128 <ADC_Disable>
 80053de:	4603      	mov	r3, r0
 80053e0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d136      	bne.n	8005456 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053f0:	f023 0302 	bic.w	r3, r3, #2
 80053f4:	f043 0202 	orr.w	r2, r3, #2
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff ff96 	bl	8005334 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005408:	e014      	b.n	8005434 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	3301      	adds	r3, #1
 800540e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005416:	d30d      	bcc.n	8005434 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	f023 0312 	bic.w	r3, r3, #18
 8005420:	f043 0210 	orr.w	r2, r3, #16
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e01b      	b.n	800546c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff ff94 	bl	8005366 <LL_ADC_IsCalibrationOnGoing>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e2      	bne.n	800540a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f023 0303 	bic.w	r3, r3, #3
 800544c:	f043 0201 	orr.w	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
 8005454:	e005      	b.n	8005462 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f043 0210 	orr.w	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800546a:	7bfb      	ldrb	r3, [r7, #15]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b09f      	sub	sp, #124	; 0x7c
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e093      	b.n	800561e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80054fe:	2300      	movs	r3, #0
 8005500:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005502:	2300      	movs	r3, #0
 8005504:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a47      	ldr	r2, [pc, #284]	; (8005628 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d102      	bne.n	8005516 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005510:	4b46      	ldr	r3, [pc, #280]	; (800562c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005512:	60bb      	str	r3, [r7, #8]
 8005514:	e001      	b.n	800551a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e072      	b.n	800561e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ff27 	bl	800538e <LL_ADC_REG_IsConversionOngoing>
 8005540:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff ff21 	bl	800538e <LL_ADC_REG_IsConversionOngoing>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d154      	bne.n	80055fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005554:	2b00      	cmp	r3, #0
 8005556:	d151      	bne.n	80055fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005558:	4b35      	ldr	r3, [pc, #212]	; (8005630 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800555a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02c      	beq.n	80055be <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005576:	035b      	lsls	r3, r3, #13
 8005578:	430b      	orrs	r3, r1
 800557a:	431a      	orrs	r2, r3
 800557c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005580:	4829      	ldr	r0, [pc, #164]	; (8005628 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005582:	f7ff fec4 	bl	800530e <LL_ADC_IsEnabled>
 8005586:	4604      	mov	r4, r0
 8005588:	4828      	ldr	r0, [pc, #160]	; (800562c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800558a:	f7ff fec0 	bl	800530e <LL_ADC_IsEnabled>
 800558e:	4603      	mov	r3, r0
 8005590:	431c      	orrs	r4, r3
 8005592:	4828      	ldr	r0, [pc, #160]	; (8005634 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005594:	f7ff febb 	bl	800530e <LL_ADC_IsEnabled>
 8005598:	4603      	mov	r3, r0
 800559a:	4323      	orrs	r3, r4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d137      	bne.n	8005610 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055a8:	f023 030f 	bic.w	r3, r3, #15
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	6811      	ldr	r1, [r2, #0]
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	6892      	ldr	r2, [r2, #8]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	431a      	orrs	r2, r3
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80055bc:	e028      	b.n	8005610 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055ca:	4817      	ldr	r0, [pc, #92]	; (8005628 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80055cc:	f7ff fe9f 	bl	800530e <LL_ADC_IsEnabled>
 80055d0:	4604      	mov	r4, r0
 80055d2:	4816      	ldr	r0, [pc, #88]	; (800562c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80055d4:	f7ff fe9b 	bl	800530e <LL_ADC_IsEnabled>
 80055d8:	4603      	mov	r3, r0
 80055da:	431c      	orrs	r4, r3
 80055dc:	4815      	ldr	r0, [pc, #84]	; (8005634 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80055de:	f7ff fe96 	bl	800530e <LL_ADC_IsEnabled>
 80055e2:	4603      	mov	r3, r0
 80055e4:	4323      	orrs	r3, r4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d112      	bne.n	8005610 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055f2:	f023 030f 	bic.w	r3, r3, #15
 80055f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80055fa:	e009      	b.n	8005610 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800560e:	e000      	b.n	8005612 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800561a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800561e:	4618      	mov	r0, r3
 8005620:	377c      	adds	r7, #124	; 0x7c
 8005622:	46bd      	mov	sp, r7
 8005624:	bd90      	pop	{r4, r7, pc}
 8005626:	bf00      	nop
 8005628:	50040000 	.word	0x50040000
 800562c:	50040100 	.word	0x50040100
 8005630:	50040300 	.word	0x50040300
 8005634:	50040200 	.word	0x50040200

08005638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <__NVIC_SetPriorityGrouping+0x44>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005654:	4013      	ands	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800566a:	4a04      	ldr	r2, [pc, #16]	; (800567c <__NVIC_SetPriorityGrouping+0x44>)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	60d3      	str	r3, [r2, #12]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	e000ed00 	.word	0xe000ed00

08005680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005684:	4b04      	ldr	r3, [pc, #16]	; (8005698 <__NVIC_GetPriorityGrouping+0x18>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	f003 0307 	and.w	r3, r3, #7
}
 800568e:	4618      	mov	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	db0b      	blt.n	80056c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	f003 021f 	and.w	r2, r3, #31
 80056b4:	4907      	ldr	r1, [pc, #28]	; (80056d4 <__NVIC_EnableIRQ+0x38>)
 80056b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2001      	movs	r0, #1
 80056be:	fa00 f202 	lsl.w	r2, r0, r2
 80056c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	e000e100 	.word	0xe000e100

080056d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	6039      	str	r1, [r7, #0]
 80056e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	db0a      	blt.n	8005702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	490c      	ldr	r1, [pc, #48]	; (8005724 <__NVIC_SetPriority+0x4c>)
 80056f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f6:	0112      	lsls	r2, r2, #4
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	440b      	add	r3, r1
 80056fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005700:	e00a      	b.n	8005718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	4908      	ldr	r1, [pc, #32]	; (8005728 <__NVIC_SetPriority+0x50>)
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	3b04      	subs	r3, #4
 8005710:	0112      	lsls	r2, r2, #4
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	440b      	add	r3, r1
 8005716:	761a      	strb	r2, [r3, #24]
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000e100 	.word	0xe000e100
 8005728:	e000ed00 	.word	0xe000ed00

0800572c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800572c:	b480      	push	{r7}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f1c3 0307 	rsb	r3, r3, #7
 8005746:	2b04      	cmp	r3, #4
 8005748:	bf28      	it	cs
 800574a:	2304      	movcs	r3, #4
 800574c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	3304      	adds	r3, #4
 8005752:	2b06      	cmp	r3, #6
 8005754:	d902      	bls.n	800575c <NVIC_EncodePriority+0x30>
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3b03      	subs	r3, #3
 800575a:	e000      	b.n	800575e <NVIC_EncodePriority+0x32>
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005760:	f04f 32ff 	mov.w	r2, #4294967295
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43da      	mvns	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	401a      	ands	r2, r3
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005774:	f04f 31ff 	mov.w	r1, #4294967295
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	43d9      	mvns	r1, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005784:	4313      	orrs	r3, r2
         );
}
 8005786:	4618      	mov	r0, r3
 8005788:	3724      	adds	r7, #36	; 0x24
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3b01      	subs	r3, #1
 80057a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057a4:	d301      	bcc.n	80057aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057a6:	2301      	movs	r3, #1
 80057a8:	e00f      	b.n	80057ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057aa:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <SysTick_Config+0x40>)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057b2:	210f      	movs	r1, #15
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	f7ff ff8e 	bl	80056d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <SysTick_Config+0x40>)
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057c2:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <SysTick_Config+0x40>)
 80057c4:	2207      	movs	r2, #7
 80057c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	e000e010 	.word	0xe000e010

080057d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff ff29 	bl	8005638 <__NVIC_SetPriorityGrouping>
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	4603      	mov	r3, r0
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005800:	f7ff ff3e 	bl	8005680 <__NVIC_GetPriorityGrouping>
 8005804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7ff ff8e 	bl	800572c <NVIC_EncodePriority>
 8005810:	4602      	mov	r2, r0
 8005812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005816:	4611      	mov	r1, r2
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff5d 	bl	80056d8 <__NVIC_SetPriority>
}
 800581e:	bf00      	nop
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	4603      	mov	r3, r0
 800582e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ff31 	bl	800569c <__NVIC_EnableIRQ>
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff ffa2 	bl	8005794 <SysTick_Config>
 8005850:	4603      	mov	r3, r0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e098      	b.n	80059a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <HAL_DMA_Init+0x150>)
 8005876:	429a      	cmp	r2, r3
 8005878:	d80f      	bhi.n	800589a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <HAL_DMA_Init+0x154>)
 8005882:	4413      	add	r3, r2
 8005884:	4a4b      	ldr	r2, [pc, #300]	; (80059b4 <HAL_DMA_Init+0x158>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	091b      	lsrs	r3, r3, #4
 800588c:	009a      	lsls	r2, r3, #2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a48      	ldr	r2, [pc, #288]	; (80059b8 <HAL_DMA_Init+0x15c>)
 8005896:	641a      	str	r2, [r3, #64]	; 0x40
 8005898:	e00e      	b.n	80058b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	4b46      	ldr	r3, [pc, #280]	; (80059bc <HAL_DMA_Init+0x160>)
 80058a2:	4413      	add	r3, r2
 80058a4:	4a43      	ldr	r2, [pc, #268]	; (80059b4 <HAL_DMA_Init+0x158>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	091b      	lsrs	r3, r3, #4
 80058ac:	009a      	lsls	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a42      	ldr	r2, [pc, #264]	; (80059c0 <HAL_DMA_Init+0x164>)
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005912:	d039      	beq.n	8005988 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	4a27      	ldr	r2, [pc, #156]	; (80059b8 <HAL_DMA_Init+0x15c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d11a      	bne.n	8005954 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800591e:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <HAL_DMA_Init+0x168>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	f003 031c 	and.w	r3, r3, #28
 800592a:	210f      	movs	r1, #15
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	4924      	ldr	r1, [pc, #144]	; (80059c4 <HAL_DMA_Init+0x168>)
 8005934:	4013      	ands	r3, r2
 8005936:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005938:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <HAL_DMA_Init+0x168>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	f003 031c 	and.w	r3, r3, #28
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	491d      	ldr	r1, [pc, #116]	; (80059c4 <HAL_DMA_Init+0x168>)
 800594e:	4313      	orrs	r3, r2
 8005950:	600b      	str	r3, [r1, #0]
 8005952:	e019      	b.n	8005988 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005954:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <HAL_DMA_Init+0x16c>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	f003 031c 	and.w	r3, r3, #28
 8005960:	210f      	movs	r1, #15
 8005962:	fa01 f303 	lsl.w	r3, r1, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	4917      	ldr	r1, [pc, #92]	; (80059c8 <HAL_DMA_Init+0x16c>)
 800596a:	4013      	ands	r3, r2
 800596c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800596e:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <HAL_DMA_Init+0x16c>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6859      	ldr	r1, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597a:	f003 031c 	and.w	r3, r3, #28
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	4911      	ldr	r1, [pc, #68]	; (80059c8 <HAL_DMA_Init+0x16c>)
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	40020407 	.word	0x40020407
 80059b0:	bffdfff8 	.word	0xbffdfff8
 80059b4:	cccccccd 	.word	0xcccccccd
 80059b8:	40020000 	.word	0x40020000
 80059bc:	bffdfbf8 	.word	0xbffdfbf8
 80059c0:	40020400 	.word	0x40020400
 80059c4:	400200a8 	.word	0x400200a8
 80059c8:	400204a8 	.word	0x400204a8

080059cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_DMA_Start_IT+0x20>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e04b      	b.n	8005a84 <HAL_DMA_Start_IT+0xb8>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d13a      	bne.n	8005a76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f95f 	bl	8005ce8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 020e 	orr.w	r2, r2, #14
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e00f      	b.n	8005a64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0204 	bic.w	r2, r2, #4
 8005a52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 020a 	orr.w	r2, r2, #10
 8005a62:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e005      	b.n	8005a82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d008      	beq.n	8005ab6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e022      	b.n	8005afc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 020e 	bic.w	r2, r2, #14
 8005ac4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	f003 021c 	and.w	r2, r3, #28
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ae8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d005      	beq.n	8005b2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2204      	movs	r2, #4
 8005b24:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
 8005b2a:	e029      	b.n	8005b80 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 020e 	bic.w	r2, r2, #14
 8005b3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b50:	f003 021c 	and.w	r2, r3, #28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b5e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
    }
  }
  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f003 031c 	and.w	r3, r3, #28
 8005baa:	2204      	movs	r2, #4
 8005bac:	409a      	lsls	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d026      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x7a>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d021      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0204 	bic.w	r2, r2, #4
 8005bdc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	f003 021c 	and.w	r2, r3, #28
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	2104      	movs	r1, #4
 8005bec:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d071      	beq.n	8005cde <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005c02:	e06c      	b.n	8005cde <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c08:	f003 031c 	and.w	r3, r3, #28
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02e      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xec>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d029      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 020a 	bic.w	r2, r2, #10
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	f003 021c 	and.w	r2, r3, #28
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2102      	movs	r1, #2
 8005c56:	fa01 f202 	lsl.w	r2, r1, r2
 8005c5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d038      	beq.n	8005cde <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005c74:	e033      	b.n	8005cde <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	f003 031c 	and.w	r3, r3, #28
 8005c7e:	2208      	movs	r2, #8
 8005c80:	409a      	lsls	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d02a      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x156>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d025      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 020e 	bic.w	r2, r2, #14
 8005ca2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	f003 021c 	and.w	r2, r3, #28
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
}
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	f003 021c 	and.w	r2, r3, #28
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	2101      	movs	r1, #1
 8005d04:	fa01 f202 	lsl.w	r2, r1, r2
 8005d08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b10      	cmp	r3, #16
 8005d18:	d108      	bne.n	8005d2c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d2a:	e007      	b.n	8005d3c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d56:	e17f      	b.n	8006058 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	fa01 f303 	lsl.w	r3, r1, r3
 8005d64:	4013      	ands	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8171 	beq.w	8006052 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d005      	beq.n	8005d88 <HAL_GPIO_Init+0x40>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d130      	bne.n	8005dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	2203      	movs	r2, #3
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	091b      	lsrs	r3, r3, #4
 8005dd4:	f003 0201 	and.w	r2, r3, #1
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d118      	bne.n	8005e28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	43db      	mvns	r3, r3
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	08db      	lsrs	r3, r3, #3
 8005e12:	f003 0201 	and.w	r2, r3, #1
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d017      	beq.n	8005e64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	2203      	movs	r2, #3
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d123      	bne.n	8005eb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	08da      	lsrs	r2, r3, #3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3208      	adds	r2, #8
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	220f      	movs	r2, #15
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4013      	ands	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	08da      	lsrs	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3208      	adds	r2, #8
 8005eb2:	6939      	ldr	r1, [r7, #16]
 8005eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 0203 	and.w	r2, r3, #3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80ac 	beq.w	8006052 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005efa:	4b5f      	ldr	r3, [pc, #380]	; (8006078 <HAL_GPIO_Init+0x330>)
 8005efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efe:	4a5e      	ldr	r2, [pc, #376]	; (8006078 <HAL_GPIO_Init+0x330>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	6613      	str	r3, [r2, #96]	; 0x60
 8005f06:	4b5c      	ldr	r3, [pc, #368]	; (8006078 <HAL_GPIO_Init+0x330>)
 8005f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	60bb      	str	r3, [r7, #8]
 8005f10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f12:	4a5a      	ldr	r2, [pc, #360]	; (800607c <HAL_GPIO_Init+0x334>)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	3302      	adds	r3, #2
 8005f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	220f      	movs	r2, #15
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4013      	ands	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f3c:	d025      	beq.n	8005f8a <HAL_GPIO_Init+0x242>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a4f      	ldr	r2, [pc, #316]	; (8006080 <HAL_GPIO_Init+0x338>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d01f      	beq.n	8005f86 <HAL_GPIO_Init+0x23e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a4e      	ldr	r2, [pc, #312]	; (8006084 <HAL_GPIO_Init+0x33c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d019      	beq.n	8005f82 <HAL_GPIO_Init+0x23a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a4d      	ldr	r2, [pc, #308]	; (8006088 <HAL_GPIO_Init+0x340>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <HAL_GPIO_Init+0x236>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a4c      	ldr	r2, [pc, #304]	; (800608c <HAL_GPIO_Init+0x344>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00d      	beq.n	8005f7a <HAL_GPIO_Init+0x232>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a4b      	ldr	r2, [pc, #300]	; (8006090 <HAL_GPIO_Init+0x348>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <HAL_GPIO_Init+0x22e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a4a      	ldr	r2, [pc, #296]	; (8006094 <HAL_GPIO_Init+0x34c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d101      	bne.n	8005f72 <HAL_GPIO_Init+0x22a>
 8005f6e:	2306      	movs	r3, #6
 8005f70:	e00c      	b.n	8005f8c <HAL_GPIO_Init+0x244>
 8005f72:	2307      	movs	r3, #7
 8005f74:	e00a      	b.n	8005f8c <HAL_GPIO_Init+0x244>
 8005f76:	2305      	movs	r3, #5
 8005f78:	e008      	b.n	8005f8c <HAL_GPIO_Init+0x244>
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	e006      	b.n	8005f8c <HAL_GPIO_Init+0x244>
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e004      	b.n	8005f8c <HAL_GPIO_Init+0x244>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e002      	b.n	8005f8c <HAL_GPIO_Init+0x244>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_GPIO_Init+0x244>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	f002 0203 	and.w	r2, r2, #3
 8005f92:	0092      	lsls	r2, r2, #2
 8005f94:	4093      	lsls	r3, r2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f9c:	4937      	ldr	r1, [pc, #220]	; (800607c <HAL_GPIO_Init+0x334>)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	089b      	lsrs	r3, r3, #2
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005faa:	4b3b      	ldr	r3, [pc, #236]	; (8006098 <HAL_GPIO_Init+0x350>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fce:	4a32      	ldr	r2, [pc, #200]	; (8006098 <HAL_GPIO_Init+0x350>)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fd4:	4b30      	ldr	r3, [pc, #192]	; (8006098 <HAL_GPIO_Init+0x350>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ff8:	4a27      	ldr	r2, [pc, #156]	; (8006098 <HAL_GPIO_Init+0x350>)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005ffe:	4b26      	ldr	r3, [pc, #152]	; (8006098 <HAL_GPIO_Init+0x350>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	43db      	mvns	r3, r3
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4013      	ands	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006022:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <HAL_GPIO_Init+0x350>)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006028:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <HAL_GPIO_Init+0x350>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	43db      	mvns	r3, r3
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4013      	ands	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800604c:	4a12      	ldr	r2, [pc, #72]	; (8006098 <HAL_GPIO_Init+0x350>)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	3301      	adds	r3, #1
 8006056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	fa22 f303 	lsr.w	r3, r2, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	f47f ae78 	bne.w	8005d58 <HAL_GPIO_Init+0x10>
  }
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40021000 	.word	0x40021000
 800607c:	40010000 	.word	0x40010000
 8006080:	48000400 	.word	0x48000400
 8006084:	48000800 	.word	0x48000800
 8006088:	48000c00 	.word	0x48000c00
 800608c:	48001000 	.word	0x48001000
 8006090:	48001400 	.word	0x48001400
 8006094:	48001800 	.word	0x48001800
 8006098:	40010400 	.word	0x40010400

0800609c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	807b      	strh	r3, [r7, #2]
 80060a8:	4613      	mov	r3, r2
 80060aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060ac:	787b      	ldrb	r3, [r7, #1]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060b2:	887a      	ldrh	r2, [r7, #2]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060b8:	e002      	b.n	80060c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060ba:	887a      	ldrh	r2, [r7, #2]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060de:	887a      	ldrh	r2, [r7, #2]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4013      	ands	r3, r2
 80060e4:	041a      	lsls	r2, r3, #16
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	43d9      	mvns	r1, r3
 80060ea:	887b      	ldrh	r3, [r7, #2]
 80060ec:	400b      	ands	r3, r1
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	619a      	str	r2, [r3, #24]
}
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e08d      	b.n	800622e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fb fd6a 	bl	8001c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2224      	movs	r2, #36	; 0x24
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006150:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006160:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d107      	bne.n	800617a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	e006      	b.n	8006188 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006186:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d108      	bne.n	80061a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	e007      	b.n	80061b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69d9      	ldr	r1, [r3, #28]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b20      	cmp	r3, #32
 800624a:	d138      	bne.n	80062be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006256:	2302      	movs	r3, #2
 8006258:	e032      	b.n	80062c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2224      	movs	r2, #36	; 0x24
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0201 	bic.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006288:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e000      	b.n	80062c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
  }
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d139      	bne.n	8006356 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e033      	b.n	8006358 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2224      	movs	r2, #36	; 0x24
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800631e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e000      	b.n	8006358 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006368:	4b04      	ldr	r3, [pc, #16]	; (800637c <HAL_PWREx_GetVoltageRange+0x18>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006370:	4618      	mov	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40007000 	.word	0x40007000

08006380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800638e:	d130      	bne.n	80063f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006390:	4b23      	ldr	r3, [pc, #140]	; (8006420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639c:	d038      	beq.n	8006410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800639e:	4b20      	ldr	r3, [pc, #128]	; (8006420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063a6:	4a1e      	ldr	r2, [pc, #120]	; (8006420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063ae:	4b1d      	ldr	r3, [pc, #116]	; (8006424 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2232      	movs	r2, #50	; 0x32
 80063b4:	fb02 f303 	mul.w	r3, r2, r3
 80063b8:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	0c9b      	lsrs	r3, r3, #18
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063c4:	e002      	b.n	80063cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063cc:	4b14      	ldr	r3, [pc, #80]	; (8006420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d8:	d102      	bne.n	80063e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f2      	bne.n	80063c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063e0:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	d110      	bne.n	8006410 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e00f      	b.n	8006412 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80063f2:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fe:	d007      	beq.n	8006410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006408:	4a05      	ldr	r2, [pc, #20]	; (8006420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800640a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800640e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40007000 	.word	0x40007000
 8006424:	20000000 	.word	0x20000000
 8006428:	431bde83 	.word	0x431bde83

0800642c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e3ca      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643e:	4b97      	ldr	r3, [pc, #604]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
 8006446:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006448:	4b94      	ldr	r3, [pc, #592]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80e4 	beq.w	8006628 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <HAL_RCC_OscConfig+0x4a>
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b0c      	cmp	r3, #12
 800646a:	f040 808b 	bne.w	8006584 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b01      	cmp	r3, #1
 8006472:	f040 8087 	bne.w	8006584 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006476:	4b89      	ldr	r3, [pc, #548]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_RCC_OscConfig+0x62>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e3a2      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	4b82      	ldr	r3, [pc, #520]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <HAL_RCC_OscConfig+0x7c>
 800649e:	4b7f      	ldr	r3, [pc, #508]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064a6:	e005      	b.n	80064b4 <HAL_RCC_OscConfig+0x88>
 80064a8:	4b7c      	ldr	r3, [pc, #496]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80064aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d223      	bcs.n	8006500 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fd55 	bl	8006f6c <RCC_SetFlashLatencyFromMSIRange>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e383      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064cc:	4b73      	ldr	r3, [pc, #460]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a72      	ldr	r2, [pc, #456]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80064d2:	f043 0308 	orr.w	r3, r3, #8
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	4b70      	ldr	r3, [pc, #448]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	496d      	ldr	r1, [pc, #436]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064ea:	4b6c      	ldr	r3, [pc, #432]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	4968      	ldr	r1, [pc, #416]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	604b      	str	r3, [r1, #4]
 80064fe:	e025      	b.n	800654c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006500:	4b66      	ldr	r3, [pc, #408]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a65      	ldr	r2, [pc, #404]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006506:	f043 0308 	orr.w	r3, r3, #8
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b63      	ldr	r3, [pc, #396]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	4960      	ldr	r1, [pc, #384]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800651e:	4b5f      	ldr	r3, [pc, #380]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	495b      	ldr	r1, [pc, #364]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800652e:	4313      	orrs	r3, r2
 8006530:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fd15 	bl	8006f6c <RCC_SetFlashLatencyFromMSIRange>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e343      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800654c:	f000 fc4a 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8006550:	4602      	mov	r2, r0
 8006552:	4b52      	ldr	r3, [pc, #328]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	091b      	lsrs	r3, r3, #4
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	4950      	ldr	r1, [pc, #320]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 800655e:	5ccb      	ldrb	r3, [r1, r3]
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	fa22 f303 	lsr.w	r3, r2, r3
 8006568:	4a4e      	ldr	r2, [pc, #312]	; (80066a4 <HAL_RCC_OscConfig+0x278>)
 800656a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800656c:	4b4e      	ldr	r3, [pc, #312]	; (80066a8 <HAL_RCC_OscConfig+0x27c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd fa81 	bl	8003a78 <HAL_InitTick>
 8006576:	4603      	mov	r3, r0
 8006578:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d052      	beq.n	8006626 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	e327      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d032      	beq.n	80065f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800658c:	4b43      	ldr	r3, [pc, #268]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a42      	ldr	r2, [pc, #264]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006598:	f7fd fabe 	bl	8003b18 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065a0:	f7fd faba 	bl	8003b18 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e310      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065b2:	4b3a      	ldr	r3, [pc, #232]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065be:	4b37      	ldr	r3, [pc, #220]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a36      	ldr	r2, [pc, #216]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065c4:	f043 0308 	orr.w	r3, r3, #8
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	4b34      	ldr	r3, [pc, #208]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	4931      	ldr	r1, [pc, #196]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065dc:	4b2f      	ldr	r3, [pc, #188]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	492c      	ldr	r1, [pc, #176]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	604b      	str	r3, [r1, #4]
 80065f0:	e01a      	b.n	8006628 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065f2:	4b2a      	ldr	r3, [pc, #168]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a29      	ldr	r2, [pc, #164]	; (800669c <HAL_RCC_OscConfig+0x270>)
 80065f8:	f023 0301 	bic.w	r3, r3, #1
 80065fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065fe:	f7fd fa8b 	bl	8003b18 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006606:	f7fd fa87 	bl	8003b18 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e2dd      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006618:	4b20      	ldr	r3, [pc, #128]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x1da>
 8006624:	e000      	b.n	8006628 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006626:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d074      	beq.n	800671e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b08      	cmp	r3, #8
 8006638:	d005      	beq.n	8006646 <HAL_RCC_OscConfig+0x21a>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b0c      	cmp	r3, #12
 800663e:	d10e      	bne.n	800665e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2b03      	cmp	r3, #3
 8006644:	d10b      	bne.n	800665e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006646:	4b15      	ldr	r3, [pc, #84]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d064      	beq.n	800671c <HAL_RCC_OscConfig+0x2f0>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d160      	bne.n	800671c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e2ba      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006666:	d106      	bne.n	8006676 <HAL_RCC_OscConfig+0x24a>
 8006668:	4b0c      	ldr	r3, [pc, #48]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a0b      	ldr	r2, [pc, #44]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800666e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	e026      	b.n	80066c4 <HAL_RCC_OscConfig+0x298>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800667e:	d115      	bne.n	80066ac <HAL_RCC_OscConfig+0x280>
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a05      	ldr	r2, [pc, #20]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <HAL_RCC_OscConfig+0x270>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a02      	ldr	r2, [pc, #8]	; (800669c <HAL_RCC_OscConfig+0x270>)
 8006692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	e014      	b.n	80066c4 <HAL_RCC_OscConfig+0x298>
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000
 80066a0:	0800e048 	.word	0x0800e048
 80066a4:	20000000 	.word	0x20000000
 80066a8:	20000104 	.word	0x20000104
 80066ac:	4ba0      	ldr	r3, [pc, #640]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a9f      	ldr	r2, [pc, #636]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80066b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	4b9d      	ldr	r3, [pc, #628]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a9c      	ldr	r2, [pc, #624]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80066be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fd fa24 	bl	8003b18 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fd fa20 	bl	8003b18 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	; 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e276      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066e6:	4b92      	ldr	r3, [pc, #584]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x2a8>
 80066f2:	e014      	b.n	800671e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fd fa10 	bl	8003b18 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066fc:	f7fd fa0c 	bl	8003b18 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b64      	cmp	r3, #100	; 0x64
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e262      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800670e:	4b88      	ldr	r3, [pc, #544]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0x2d0>
 800671a:	e000      	b.n	800671e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800671c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d060      	beq.n	80067ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b04      	cmp	r3, #4
 800672e:	d005      	beq.n	800673c <HAL_RCC_OscConfig+0x310>
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b0c      	cmp	r3, #12
 8006734:	d119      	bne.n	800676a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d116      	bne.n	800676a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800673c:	4b7c      	ldr	r3, [pc, #496]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_RCC_OscConfig+0x328>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e23f      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006754:	4b76      	ldr	r3, [pc, #472]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	4973      	ldr	r1, [pc, #460]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006764:	4313      	orrs	r3, r2
 8006766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006768:	e040      	b.n	80067ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d023      	beq.n	80067ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006772:	4b6f      	ldr	r3, [pc, #444]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a6e      	ldr	r2, [pc, #440]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fd f9cb 	bl	8003b18 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006786:	f7fd f9c7 	bl	8003b18 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e21d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006798:	4b65      	ldr	r3, [pc, #404]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a4:	4b62      	ldr	r3, [pc, #392]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	061b      	lsls	r3, r3, #24
 80067b2:	495f      	ldr	r1, [pc, #380]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	604b      	str	r3, [r1, #4]
 80067b8:	e018      	b.n	80067ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ba:	4b5d      	ldr	r3, [pc, #372]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a5c      	ldr	r2, [pc, #368]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80067c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c6:	f7fd f9a7 	bl	8003b18 <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ce:	f7fd f9a3 	bl	8003b18 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e1f9      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067e0:	4b53      	ldr	r3, [pc, #332]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f0      	bne.n	80067ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0308 	and.w	r3, r3, #8
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d03c      	beq.n	8006872 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01c      	beq.n	800683a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006800:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006806:	4a4a      	ldr	r2, [pc, #296]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006810:	f7fd f982 	bl	8003b18 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006818:	f7fd f97e 	bl	8003b18 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e1d4      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800682a:	4b41      	ldr	r3, [pc, #260]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0ef      	beq.n	8006818 <HAL_RCC_OscConfig+0x3ec>
 8006838:	e01b      	b.n	8006872 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800683a:	4b3d      	ldr	r3, [pc, #244]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 800683c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006840:	4a3b      	ldr	r2, [pc, #236]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684a:	f7fd f965 	bl	8003b18 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006852:	f7fd f961 	bl	8003b18 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e1b7      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006864:	4b32      	ldr	r3, [pc, #200]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1ef      	bne.n	8006852 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80a6 	beq.w	80069cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006880:	2300      	movs	r3, #0
 8006882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006884:	4b2a      	ldr	r3, [pc, #168]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10d      	bne.n	80068ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	4a26      	ldr	r2, [pc, #152]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689a:	6593      	str	r3, [r2, #88]	; 0x58
 800689c:	4b24      	ldr	r3, [pc, #144]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068a8:	2301      	movs	r3, #1
 80068aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <HAL_RCC_OscConfig+0x508>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d118      	bne.n	80068ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068b8:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <HAL_RCC_OscConfig+0x508>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <HAL_RCC_OscConfig+0x508>)
 80068be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068c4:	f7fd f928 	bl	8003b18 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068cc:	f7fd f924 	bl	8003b18 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e17a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068de:	4b15      	ldr	r3, [pc, #84]	; (8006934 <HAL_RCC_OscConfig+0x508>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0f0      	beq.n	80068cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d108      	bne.n	8006904 <HAL_RCC_OscConfig+0x4d8>
 80068f2:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80068f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f8:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006902:	e029      	b.n	8006958 <HAL_RCC_OscConfig+0x52c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b05      	cmp	r3, #5
 800690a:	d115      	bne.n	8006938 <HAL_RCC_OscConfig+0x50c>
 800690c:	4b08      	ldr	r3, [pc, #32]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006912:	4a07      	ldr	r2, [pc, #28]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006914:	f043 0304 	orr.w	r3, r3, #4
 8006918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006922:	4a03      	ldr	r2, [pc, #12]	; (8006930 <HAL_RCC_OscConfig+0x504>)
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800692c:	e014      	b.n	8006958 <HAL_RCC_OscConfig+0x52c>
 800692e:	bf00      	nop
 8006930:	40021000 	.word	0x40021000
 8006934:	40007000 	.word	0x40007000
 8006938:	4b9c      	ldr	r3, [pc, #624]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693e:	4a9b      	ldr	r2, [pc, #620]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006948:	4b98      	ldr	r3, [pc, #608]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	4a97      	ldr	r2, [pc, #604]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006950:	f023 0304 	bic.w	r3, r3, #4
 8006954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d016      	beq.n	800698e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006960:	f7fd f8da 	bl	8003b18 <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006966:	e00a      	b.n	800697e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006968:	f7fd f8d6 	bl	8003b18 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	f241 3288 	movw	r2, #5000	; 0x1388
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e12a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800697e:	4b8b      	ldr	r3, [pc, #556]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0ed      	beq.n	8006968 <HAL_RCC_OscConfig+0x53c>
 800698c:	e015      	b.n	80069ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800698e:	f7fd f8c3 	bl	8003b18 <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006994:	e00a      	b.n	80069ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006996:	f7fd f8bf 	bl	8003b18 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e113      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069ac:	4b7f      	ldr	r3, [pc, #508]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1ed      	bne.n	8006996 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ba:	7ffb      	ldrb	r3, [r7, #31]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d105      	bne.n	80069cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c0:	4b7a      	ldr	r3, [pc, #488]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 80069c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c4:	4a79      	ldr	r2, [pc, #484]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 80069c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80fe 	beq.w	8006bd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	2b02      	cmp	r3, #2
 80069dc:	f040 80d0 	bne.w	8006b80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80069e0:	4b72      	ldr	r3, [pc, #456]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f003 0203 	and.w	r2, r3, #3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d130      	bne.n	8006a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	3b01      	subs	r3, #1
 8006a00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d127      	bne.n	8006a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d11f      	bne.n	8006a56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a20:	2a07      	cmp	r2, #7
 8006a22:	bf14      	ite	ne
 8006a24:	2201      	movne	r2, #1
 8006a26:	2200      	moveq	r2, #0
 8006a28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d113      	bne.n	8006a56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d109      	bne.n	8006a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d06e      	beq.n	8006b34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b0c      	cmp	r3, #12
 8006a5a:	d069      	beq.n	8006b30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a5c:	4b53      	ldr	r3, [pc, #332]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d105      	bne.n	8006a74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006a68:	4b50      	ldr	r3, [pc, #320]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0ad      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a78:	4b4c      	ldr	r3, [pc, #304]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a4b      	ldr	r2, [pc, #300]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a84:	f7fd f848 	bl	8003b18 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a8c:	f7fd f844 	bl	8003b18 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e09a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a9e:	4b43      	ldr	r3, [pc, #268]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aaa:	4b40      	ldr	r3, [pc, #256]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	4b40      	ldr	r3, [pc, #256]	; (8006bb0 <HAL_RCC_OscConfig+0x784>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006aba:	3a01      	subs	r2, #1
 8006abc:	0112      	lsls	r2, r2, #4
 8006abe:	4311      	orrs	r1, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ac4:	0212      	lsls	r2, r2, #8
 8006ac6:	4311      	orrs	r1, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006acc:	0852      	lsrs	r2, r2, #1
 8006ace:	3a01      	subs	r2, #1
 8006ad0:	0552      	lsls	r2, r2, #21
 8006ad2:	4311      	orrs	r1, r2
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ad8:	0852      	lsrs	r2, r2, #1
 8006ada:	3a01      	subs	r2, #1
 8006adc:	0652      	lsls	r2, r2, #25
 8006ade:	4311      	orrs	r1, r2
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ae4:	0912      	lsrs	r2, r2, #4
 8006ae6:	0452      	lsls	r2, r2, #17
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	4930      	ldr	r1, [pc, #192]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006af0:	4b2e      	ldr	r3, [pc, #184]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a2d      	ldr	r2, [pc, #180]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006afc:	4b2b      	ldr	r3, [pc, #172]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	4a2a      	ldr	r2, [pc, #168]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b08:	f7fd f806 	bl	8003b18 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b10:	f7fd f802 	bl	8003b18 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e058      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b22:	4b22      	ldr	r3, [pc, #136]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b2e:	e050      	b.n	8006bd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e04f      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b34:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d148      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b40:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a19      	ldr	r2, [pc, #100]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b4c:	4b17      	ldr	r3, [pc, #92]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	4a16      	ldr	r2, [pc, #88]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b58:	f7fc ffde 	bl	8003b18 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b60:	f7fc ffda 	bl	8003b18 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e030      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b72:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <HAL_RCC_OscConfig+0x734>
 8006b7e:	e028      	b.n	8006bd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b0c      	cmp	r3, #12
 8006b84:	d023      	beq.n	8006bce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b86:	4b09      	ldr	r3, [pc, #36]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a08      	ldr	r2, [pc, #32]	; (8006bac <HAL_RCC_OscConfig+0x780>)
 8006b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b92:	f7fc ffc1 	bl	8003b18 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b98:	e00c      	b.n	8006bb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b9a:	f7fc ffbd 	bl	8003b18 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d905      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e013      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb4:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <HAL_RCC_OscConfig+0x7b0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1ec      	bne.n	8006b9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006bc0:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <HAL_RCC_OscConfig+0x7b0>)
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	4905      	ldr	r1, [pc, #20]	; (8006bdc <HAL_RCC_OscConfig+0x7b0>)
 8006bc6:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <HAL_RCC_OscConfig+0x7b4>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60cb      	str	r3, [r1, #12]
 8006bcc:	e001      	b.n	8006bd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	feeefffc 	.word	0xfeeefffc

08006be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0e7      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b75      	ldr	r3, [pc, #468]	; (8006dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d910      	bls.n	8006c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b72      	ldr	r3, [pc, #456]	; (8006dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 0207 	bic.w	r2, r3, #7
 8006c0e:	4970      	ldr	r1, [pc, #448]	; (8006dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b6e      	ldr	r3, [pc, #440]	; (8006dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e0cf      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d010      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	4b66      	ldr	r3, [pc, #408]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d908      	bls.n	8006c56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c44:	4b63      	ldr	r3, [pc, #396]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	4960      	ldr	r1, [pc, #384]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d04c      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d107      	bne.n	8006c7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c6a:	4b5a      	ldr	r3, [pc, #360]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d121      	bne.n	8006cba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e0a6      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d107      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c82:	4b54      	ldr	r3, [pc, #336]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d115      	bne.n	8006cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e09a      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d107      	bne.n	8006caa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c9a:	4b4e      	ldr	r3, [pc, #312]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e08e      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006caa:	4b4a      	ldr	r3, [pc, #296]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e086      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cba:	4b46      	ldr	r3, [pc, #280]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f023 0203 	bic.w	r2, r3, #3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	4943      	ldr	r1, [pc, #268]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ccc:	f7fc ff24 	bl	8003b18 <HAL_GetTick>
 8006cd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd2:	e00a      	b.n	8006cea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cd4:	f7fc ff20 	bl	8003b18 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e06e      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cea:	4b3a      	ldr	r3, [pc, #232]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 020c 	and.w	r2, r3, #12
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d1eb      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d010      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d208      	bcs.n	8006d2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d18:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	492b      	ldr	r1, [pc, #172]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d2a:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d210      	bcs.n	8006d5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d38:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f023 0207 	bic.w	r2, r3, #7
 8006d40:	4923      	ldr	r1, [pc, #140]	; (8006dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d48:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d001      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e036      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d008      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d66:	4b1b      	ldr	r3, [pc, #108]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	4918      	ldr	r1, [pc, #96]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d84:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	4910      	ldr	r1, [pc, #64]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d98:	f000 f824 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	490b      	ldr	r1, [pc, #44]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8006daa:	5ccb      	ldrb	r3, [r1, r3]
 8006dac:	f003 031f 	and.w	r3, r3, #31
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
 8006db4:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <HAL_RCC_ClockConfig+0x1f8>)
 8006db6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006db8:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <HAL_RCC_ClockConfig+0x1fc>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fc fe5b 	bl	8003a78 <HAL_InitTick>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40022000 	.word	0x40022000
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	0800e048 	.word	0x0800e048
 8006ddc:	20000000 	.word	0x20000000
 8006de0:	20000104 	.word	0x20000104

08006de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b089      	sub	sp, #36	; 0x24
 8006de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	2300      	movs	r3, #0
 8006df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006df2:	4b3e      	ldr	r3, [pc, #248]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dfc:	4b3b      	ldr	r3, [pc, #236]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCC_GetSysClockFreq+0x34>
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	2b0c      	cmp	r3, #12
 8006e10:	d121      	bne.n	8006e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d11e      	bne.n	8006e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e18:	4b34      	ldr	r3, [pc, #208]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d107      	bne.n	8006e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e24:	4b31      	ldr	r3, [pc, #196]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e2a:	0a1b      	lsrs	r3, r3, #8
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	e005      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e34:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	091b      	lsrs	r3, r3, #4
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e40:	4a2b      	ldr	r2, [pc, #172]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10d      	bne.n	8006e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e54:	e00a      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d102      	bne.n	8006e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e5c:	4b25      	ldr	r3, [pc, #148]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e004      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d101      	bne.n	8006e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e68:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b0c      	cmp	r3, #12
 8006e70:	d134      	bne.n	8006edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e72:	4b1e      	ldr	r3, [pc, #120]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d003      	beq.n	8006e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d003      	beq.n	8006e90 <HAL_RCC_GetSysClockFreq+0xac>
 8006e88:	e005      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e8c:	617b      	str	r3, [r7, #20]
      break;
 8006e8e:	e005      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006e90:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006e92:	617b      	str	r3, [r7, #20]
      break;
 8006e94:	e002      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	617b      	str	r3, [r7, #20]
      break;
 8006e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e9c:	4b13      	ldr	r3, [pc, #76]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	091b      	lsrs	r3, r3, #4
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	fb03 f202 	mul.w	r2, r3, r2
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	0e5b      	lsrs	r3, r3, #25
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	3301      	adds	r3, #1
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006edc:	69bb      	ldr	r3, [r7, #24]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3724      	adds	r7, #36	; 0x24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	0800e060 	.word	0x0800e060
 8006ef4:	00f42400 	.word	0x00f42400
 8006ef8:	007a1200 	.word	0x007a1200

08006efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f00:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f02:	681b      	ldr	r3, [r3, #0]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000000 	.word	0x20000000

08006f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f18:	f7ff fff0 	bl	8006efc <HAL_RCC_GetHCLKFreq>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	0a1b      	lsrs	r3, r3, #8
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	4904      	ldr	r1, [pc, #16]	; (8006f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f2a:	5ccb      	ldrb	r3, [r1, r3]
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	0800e058 	.word	0x0800e058

08006f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f44:	f7ff ffda 	bl	8006efc <HAL_RCC_GetHCLKFreq>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	0adb      	lsrs	r3, r3, #11
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	4904      	ldr	r1, [pc, #16]	; (8006f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f56:	5ccb      	ldrb	r3, [r1, r3]
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40021000 	.word	0x40021000
 8006f68:	0800e058 	.word	0x0800e058

08006f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f74:	2300      	movs	r3, #0
 8006f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f78:	4b2a      	ldr	r3, [pc, #168]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f84:	f7ff f9ee 	bl	8006364 <HAL_PWREx_GetVoltageRange>
 8006f88:	6178      	str	r0, [r7, #20]
 8006f8a:	e014      	b.n	8006fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f8c:	4b25      	ldr	r3, [pc, #148]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	4a24      	ldr	r2, [pc, #144]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f96:	6593      	str	r3, [r2, #88]	; 0x58
 8006f98:	4b22      	ldr	r3, [pc, #136]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006fa4:	f7ff f9de 	bl	8006364 <HAL_PWREx_GetVoltageRange>
 8006fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006faa:	4b1e      	ldr	r3, [pc, #120]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fbc:	d10b      	bne.n	8006fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b80      	cmp	r3, #128	; 0x80
 8006fc2:	d919      	bls.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8006fc8:	d902      	bls.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fca:	2302      	movs	r3, #2
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	e013      	b.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	e010      	b.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b80      	cmp	r3, #128	; 0x80
 8006fda:	d902      	bls.n	8006fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006fdc:	2303      	movs	r3, #3
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	e00a      	b.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b80      	cmp	r3, #128	; 0x80
 8006fe6:	d102      	bne.n	8006fee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fe8:	2302      	movs	r3, #2
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	e004      	b.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b70      	cmp	r3, #112	; 0x70
 8006ff2:	d101      	bne.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f023 0207 	bic.w	r2, r3, #7
 8007000:	4909      	ldr	r1, [pc, #36]	; (8007028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007008:	4b07      	ldr	r3, [pc, #28]	; (8007028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	d001      	beq.n	800701a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40021000 	.word	0x40021000
 8007028:	40022000 	.word	0x40022000

0800702c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007034:	2300      	movs	r3, #0
 8007036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007038:	2300      	movs	r3, #0
 800703a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007044:	2b00      	cmp	r3, #0
 8007046:	d041      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800704c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007050:	d02a      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007052:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007056:	d824      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800705c:	d008      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800705e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007062:	d81e      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800706c:	d010      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800706e:	e018      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007070:	4b86      	ldr	r3, [pc, #536]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4a85      	ldr	r2, [pc, #532]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800707c:	e015      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3304      	adds	r3, #4
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fabb 	bl	8007600 <RCCEx_PLLSAI1_Config>
 800708a:	4603      	mov	r3, r0
 800708c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800708e:	e00c      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3320      	adds	r3, #32
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fba6 	bl	80077e8 <RCCEx_PLLSAI2_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070a0:	e003      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	74fb      	strb	r3, [r7, #19]
      break;
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070aa:	7cfb      	ldrb	r3, [r7, #19]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10b      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070b0:	4b76      	ldr	r3, [pc, #472]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070be:	4973      	ldr	r1, [pc, #460]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070c6:	e001      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	7cfb      	ldrb	r3, [r7, #19]
 80070ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d041      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070e0:	d02a      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80070e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070e6:	d824      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80070e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ec:	d008      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80070ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070f2:	d81e      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80070f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070fc:	d010      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80070fe:	e018      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007100:	4b62      	ldr	r3, [pc, #392]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4a61      	ldr	r2, [pc, #388]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800710a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800710c:	e015      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3304      	adds	r3, #4
 8007112:	2100      	movs	r1, #0
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fa73 	bl	8007600 <RCCEx_PLLSAI1_Config>
 800711a:	4603      	mov	r3, r0
 800711c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800711e:	e00c      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3320      	adds	r3, #32
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fb5e 	bl	80077e8 <RCCEx_PLLSAI2_Config>
 800712c:	4603      	mov	r3, r0
 800712e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007130:	e003      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	74fb      	strb	r3, [r7, #19]
      break;
 8007136:	e000      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800713a:	7cfb      	ldrb	r3, [r7, #19]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007140:	4b52      	ldr	r3, [pc, #328]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800714e:	494f      	ldr	r1, [pc, #316]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007156:	e001      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007158:	7cfb      	ldrb	r3, [r7, #19]
 800715a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80a0 	beq.w	80072aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800716a:	2300      	movs	r3, #0
 800716c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800716e:	4b47      	ldr	r3, [pc, #284]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00d      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007184:	4b41      	ldr	r3, [pc, #260]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007188:	4a40      	ldr	r2, [pc, #256]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800718a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800718e:	6593      	str	r3, [r2, #88]	; 0x58
 8007190:	4b3e      	ldr	r3, [pc, #248]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007198:	60bb      	str	r3, [r7, #8]
 800719a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800719c:	2301      	movs	r3, #1
 800719e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071a0:	4b3b      	ldr	r3, [pc, #236]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a3a      	ldr	r2, [pc, #232]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ac:	f7fc fcb4 	bl	8003b18 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071b2:	e009      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b4:	f7fc fcb0 	bl	8003b18 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d902      	bls.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	74fb      	strb	r3, [r7, #19]
        break;
 80071c6:	e005      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071c8:	4b31      	ldr	r3, [pc, #196]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0ef      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80071d4:	7cfb      	ldrb	r3, [r7, #19]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d15c      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071da:	4b2c      	ldr	r3, [pc, #176]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01f      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d019      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071f8:	4b24      	ldr	r3, [pc, #144]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007204:	4b21      	ldr	r3, [pc, #132]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720a:	4a20      	ldr	r2, [pc, #128]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800720c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	4a1c      	ldr	r2, [pc, #112]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800721c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007224:	4a19      	ldr	r2, [pc, #100]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d016      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fc fc6f 	bl	8003b18 <HAL_GetTick>
 800723a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723c:	e00b      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723e:	f7fc fc6b 	bl	8003b18 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	f241 3288 	movw	r2, #5000	; 0x1388
 800724c:	4293      	cmp	r3, r2
 800724e:	d902      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	74fb      	strb	r3, [r7, #19]
            break;
 8007254:	e006      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007256:	4b0d      	ldr	r3, [pc, #52]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ec      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10c      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800726a:	4b08      	ldr	r3, [pc, #32]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727a:	4904      	ldr	r1, [pc, #16]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007282:	e009      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007284:	7cfb      	ldrb	r3, [r7, #19]
 8007286:	74bb      	strb	r3, [r7, #18]
 8007288:	e006      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800728a:	bf00      	nop
 800728c:	40021000 	.word	0x40021000
 8007290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	7cfb      	ldrb	r3, [r7, #19]
 8007296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007298:	7c7b      	ldrb	r3, [r7, #17]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d105      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800729e:	4b9e      	ldr	r3, [pc, #632]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a2:	4a9d      	ldr	r2, [pc, #628]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072b6:	4b98      	ldr	r3, [pc, #608]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072bc:	f023 0203 	bic.w	r2, r3, #3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	4994      	ldr	r1, [pc, #592]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072d8:	4b8f      	ldr	r3, [pc, #572]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072de:	f023 020c 	bic.w	r2, r3, #12
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	498c      	ldr	r1, [pc, #560]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072fa:	4b87      	ldr	r3, [pc, #540]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007300:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	4983      	ldr	r1, [pc, #524]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800731c:	4b7e      	ldr	r3, [pc, #504]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732a:	497b      	ldr	r1, [pc, #492]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800733e:	4b76      	ldr	r3, [pc, #472]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734c:	4972      	ldr	r1, [pc, #456]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007360:	4b6d      	ldr	r3, [pc, #436]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736e:	496a      	ldr	r1, [pc, #424]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007370:	4313      	orrs	r3, r2
 8007372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007382:	4b65      	ldr	r3, [pc, #404]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007388:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007390:	4961      	ldr	r1, [pc, #388]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073a4:	4b5c      	ldr	r3, [pc, #368]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b2:	4959      	ldr	r1, [pc, #356]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073c6:	4b54      	ldr	r3, [pc, #336]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d4:	4950      	ldr	r1, [pc, #320]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00a      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073e8:	4b4b      	ldr	r3, [pc, #300]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	4948      	ldr	r1, [pc, #288]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800740a:	4b43      	ldr	r3, [pc, #268]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	493f      	ldr	r1, [pc, #252]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800741a:	4313      	orrs	r3, r2
 800741c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d028      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800742c:	4b3a      	ldr	r3, [pc, #232]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743a:	4937      	ldr	r1, [pc, #220]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800744a:	d106      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800744c:	4b32      	ldr	r3, [pc, #200]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	4a31      	ldr	r2, [pc, #196]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007456:	60d3      	str	r3, [r2, #12]
 8007458:	e011      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007462:	d10c      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3304      	adds	r3, #4
 8007468:	2101      	movs	r1, #1
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f8c8 	bl	8007600 <RCCEx_PLLSAI1_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007474:	7cfb      	ldrb	r3, [r7, #19]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800747a:	7cfb      	ldrb	r3, [r7, #19]
 800747c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d028      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800748a:	4b23      	ldr	r3, [pc, #140]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007498:	491f      	ldr	r1, [pc, #124]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074a8:	d106      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074aa:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	4a1a      	ldr	r2, [pc, #104]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074b4:	60d3      	str	r3, [r2, #12]
 80074b6:	e011      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074c0:	d10c      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2101      	movs	r1, #1
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 f899 	bl	8007600 <RCCEx_PLLSAI1_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074d2:	7cfb      	ldrb	r3, [r7, #19]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02b      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074e8:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f6:	4908      	ldr	r1, [pc, #32]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007506:	d109      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007508:	4b03      	ldr	r3, [pc, #12]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	4a02      	ldr	r2, [pc, #8]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800750e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007512:	60d3      	str	r3, [r2, #12]
 8007514:	e014      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007516:	bf00      	nop
 8007518:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007524:	d10c      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3304      	adds	r3, #4
 800752a:	2101      	movs	r1, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f867 	bl	8007600 <RCCEx_PLLSAI1_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007536:	7cfb      	ldrb	r3, [r7, #19]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800753c:	7cfb      	ldrb	r3, [r7, #19]
 800753e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d02f      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800754c:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007552:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800755a:	4928      	ldr	r1, [pc, #160]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800755c:	4313      	orrs	r3, r2
 800755e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800756a:	d10d      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	2102      	movs	r1, #2
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f844 	bl	8007600 <RCCEx_PLLSAI1_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800757c:	7cfb      	ldrb	r3, [r7, #19]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d014      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007582:	7cfb      	ldrb	r3, [r7, #19]
 8007584:	74bb      	strb	r3, [r7, #18]
 8007586:	e011      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800758c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007590:	d10c      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3320      	adds	r3, #32
 8007596:	2102      	movs	r1, #2
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f925 	bl	80077e8 <RCCEx_PLLSAI2_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075a2:	7cfb      	ldrb	r3, [r7, #19]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80075a8:	7cfb      	ldrb	r3, [r7, #19]
 80075aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c6:	490d      	ldr	r1, [pc, #52]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00b      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075da:	4b08      	ldr	r3, [pc, #32]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ea:	4904      	ldr	r1, [pc, #16]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80075f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40021000 	.word	0x40021000

08007600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800760e:	4b75      	ldr	r3, [pc, #468]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d018      	beq.n	800764c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800761a:	4b72      	ldr	r3, [pc, #456]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f003 0203 	and.w	r2, r3, #3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d10d      	bne.n	8007646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
       ||
 800762e:	2b00      	cmp	r3, #0
 8007630:	d009      	beq.n	8007646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007632:	4b6c      	ldr	r3, [pc, #432]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	091b      	lsrs	r3, r3, #4
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
       ||
 8007642:	429a      	cmp	r2, r3
 8007644:	d047      	beq.n	80076d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
 800764a:	e044      	b.n	80076d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b03      	cmp	r3, #3
 8007652:	d018      	beq.n	8007686 <RCCEx_PLLSAI1_Config+0x86>
 8007654:	2b03      	cmp	r3, #3
 8007656:	d825      	bhi.n	80076a4 <RCCEx_PLLSAI1_Config+0xa4>
 8007658:	2b01      	cmp	r3, #1
 800765a:	d002      	beq.n	8007662 <RCCEx_PLLSAI1_Config+0x62>
 800765c:	2b02      	cmp	r3, #2
 800765e:	d009      	beq.n	8007674 <RCCEx_PLLSAI1_Config+0x74>
 8007660:	e020      	b.n	80076a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007662:	4b60      	ldr	r3, [pc, #384]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d11d      	bne.n	80076aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007672:	e01a      	b.n	80076aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007674:	4b5b      	ldr	r3, [pc, #364]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800767c:	2b00      	cmp	r3, #0
 800767e:	d116      	bne.n	80076ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007684:	e013      	b.n	80076ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007686:	4b57      	ldr	r3, [pc, #348]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10f      	bne.n	80076b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007692:	4b54      	ldr	r3, [pc, #336]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076a2:	e006      	b.n	80076b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
      break;
 80076a8:	e004      	b.n	80076b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076aa:	bf00      	nop
 80076ac:	e002      	b.n	80076b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076ae:	bf00      	nop
 80076b0:	e000      	b.n	80076b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10d      	bne.n	80076d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076ba:	4b4a      	ldr	r3, [pc, #296]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6819      	ldr	r1, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	430b      	orrs	r3, r1
 80076d0:	4944      	ldr	r1, [pc, #272]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d17d      	bne.n	80077d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80076dc:	4b41      	ldr	r3, [pc, #260]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a40      	ldr	r2, [pc, #256]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076e8:	f7fc fa16 	bl	8003b18 <HAL_GetTick>
 80076ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076ee:	e009      	b.n	8007704 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076f0:	f7fc fa12 	bl	8003b18 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d902      	bls.n	8007704 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	73fb      	strb	r3, [r7, #15]
        break;
 8007702:	e005      	b.n	8007710 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007704:	4b37      	ldr	r3, [pc, #220]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1ef      	bne.n	80076f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d160      	bne.n	80077d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d111      	bne.n	8007740 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800771c:	4b31      	ldr	r3, [pc, #196]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6892      	ldr	r2, [r2, #8]
 800772c:	0211      	lsls	r1, r2, #8
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	68d2      	ldr	r2, [r2, #12]
 8007732:	0912      	lsrs	r2, r2, #4
 8007734:	0452      	lsls	r2, r2, #17
 8007736:	430a      	orrs	r2, r1
 8007738:	492a      	ldr	r1, [pc, #168]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800773a:	4313      	orrs	r3, r2
 800773c:	610b      	str	r3, [r1, #16]
 800773e:	e027      	b.n	8007790 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d112      	bne.n	800776c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007746:	4b27      	ldr	r3, [pc, #156]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800774e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6892      	ldr	r2, [r2, #8]
 8007756:	0211      	lsls	r1, r2, #8
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6912      	ldr	r2, [r2, #16]
 800775c:	0852      	lsrs	r2, r2, #1
 800775e:	3a01      	subs	r2, #1
 8007760:	0552      	lsls	r2, r2, #21
 8007762:	430a      	orrs	r2, r1
 8007764:	491f      	ldr	r1, [pc, #124]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007766:	4313      	orrs	r3, r2
 8007768:	610b      	str	r3, [r1, #16]
 800776a:	e011      	b.n	8007790 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800776c:	4b1d      	ldr	r3, [pc, #116]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007774:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6892      	ldr	r2, [r2, #8]
 800777c:	0211      	lsls	r1, r2, #8
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6952      	ldr	r2, [r2, #20]
 8007782:	0852      	lsrs	r2, r2, #1
 8007784:	3a01      	subs	r2, #1
 8007786:	0652      	lsls	r2, r2, #25
 8007788:	430a      	orrs	r2, r1
 800778a:	4916      	ldr	r1, [pc, #88]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800778c:	4313      	orrs	r3, r2
 800778e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007790:	4b14      	ldr	r3, [pc, #80]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a13      	ldr	r2, [pc, #76]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800779a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800779c:	f7fc f9bc 	bl	8003b18 <HAL_GetTick>
 80077a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077a2:	e009      	b.n	80077b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077a4:	f7fc f9b8 	bl	8003b18 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d902      	bls.n	80077b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	73fb      	strb	r3, [r7, #15]
          break;
 80077b6:	e005      	b.n	80077c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0ef      	beq.n	80077a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80077ca:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077cc:	691a      	ldr	r2, [r3, #16]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	4904      	ldr	r1, [pc, #16]	; (80077e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	40021000 	.word	0x40021000

080077e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80077f6:	4b6a      	ldr	r3, [pc, #424]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d018      	beq.n	8007834 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007802:	4b67      	ldr	r3, [pc, #412]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f003 0203 	and.w	r2, r3, #3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d10d      	bne.n	800782e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
       ||
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800781a:	4b61      	ldr	r3, [pc, #388]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	091b      	lsrs	r3, r3, #4
 8007820:	f003 0307 	and.w	r3, r3, #7
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
       ||
 800782a:	429a      	cmp	r2, r3
 800782c:	d047      	beq.n	80078be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	73fb      	strb	r3, [r7, #15]
 8007832:	e044      	b.n	80078be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d018      	beq.n	800786e <RCCEx_PLLSAI2_Config+0x86>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d825      	bhi.n	800788c <RCCEx_PLLSAI2_Config+0xa4>
 8007840:	2b01      	cmp	r3, #1
 8007842:	d002      	beq.n	800784a <RCCEx_PLLSAI2_Config+0x62>
 8007844:	2b02      	cmp	r3, #2
 8007846:	d009      	beq.n	800785c <RCCEx_PLLSAI2_Config+0x74>
 8007848:	e020      	b.n	800788c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800784a:	4b55      	ldr	r3, [pc, #340]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d11d      	bne.n	8007892 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800785a:	e01a      	b.n	8007892 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800785c:	4b50      	ldr	r3, [pc, #320]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007864:	2b00      	cmp	r3, #0
 8007866:	d116      	bne.n	8007896 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800786c:	e013      	b.n	8007896 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800786e:	4b4c      	ldr	r3, [pc, #304]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10f      	bne.n	800789a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800787a:	4b49      	ldr	r3, [pc, #292]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800788a:	e006      	b.n	800789a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
      break;
 8007890:	e004      	b.n	800789c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007892:	bf00      	nop
 8007894:	e002      	b.n	800789c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007896:	bf00      	nop
 8007898:	e000      	b.n	800789c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800789a:	bf00      	nop
    }

    if(status == HAL_OK)
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10d      	bne.n	80078be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80078a2:	4b3f      	ldr	r3, [pc, #252]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6819      	ldr	r1, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	430b      	orrs	r3, r1
 80078b8:	4939      	ldr	r1, [pc, #228]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d167      	bne.n	8007994 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80078c4:	4b36      	ldr	r3, [pc, #216]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a35      	ldr	r2, [pc, #212]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d0:	f7fc f922 	bl	8003b18 <HAL_GetTick>
 80078d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078d6:	e009      	b.n	80078ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078d8:	f7fc f91e 	bl	8003b18 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d902      	bls.n	80078ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
        break;
 80078ea:	e005      	b.n	80078f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078ec:	4b2c      	ldr	r3, [pc, #176]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1ef      	bne.n	80078d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d14a      	bne.n	8007994 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d111      	bne.n	8007928 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007904:	4b26      	ldr	r3, [pc, #152]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800790c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6892      	ldr	r2, [r2, #8]
 8007914:	0211      	lsls	r1, r2, #8
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	68d2      	ldr	r2, [r2, #12]
 800791a:	0912      	lsrs	r2, r2, #4
 800791c:	0452      	lsls	r2, r2, #17
 800791e:	430a      	orrs	r2, r1
 8007920:	491f      	ldr	r1, [pc, #124]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007922:	4313      	orrs	r3, r2
 8007924:	614b      	str	r3, [r1, #20]
 8007926:	e011      	b.n	800794c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007928:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6892      	ldr	r2, [r2, #8]
 8007938:	0211      	lsls	r1, r2, #8
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6912      	ldr	r2, [r2, #16]
 800793e:	0852      	lsrs	r2, r2, #1
 8007940:	3a01      	subs	r2, #1
 8007942:	0652      	lsls	r2, r2, #25
 8007944:	430a      	orrs	r2, r1
 8007946:	4916      	ldr	r1, [pc, #88]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007948:	4313      	orrs	r3, r2
 800794a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800794c:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007958:	f7fc f8de 	bl	8003b18 <HAL_GetTick>
 800795c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800795e:	e009      	b.n	8007974 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007960:	f7fc f8da 	bl	8003b18 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d902      	bls.n	8007974 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	73fb      	strb	r3, [r7, #15]
          break;
 8007972:	e005      	b.n	8007980 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007974:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0ef      	beq.n	8007960 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007986:	4b06      	ldr	r3, [pc, #24]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	4904      	ldr	r1, [pc, #16]	; (80079a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007990:	4313      	orrs	r3, r2
 8007992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40021000 	.word	0x40021000

080079a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e049      	b.n	8007a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fb fb7c 	bl	80030c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f000 feec 	bl	80087c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e049      	b.n	8007af8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f841 	bl	8007b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f000 fe95 	bl	80087c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <HAL_TIM_PWM_Start+0x24>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	bf14      	ite	ne
 8007b30:	2301      	movne	r3, #1
 8007b32:	2300      	moveq	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	e03c      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d109      	bne.n	8007b52 <HAL_TIM_PWM_Start+0x3e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	bf14      	ite	ne
 8007b4a:	2301      	movne	r3, #1
 8007b4c:	2300      	moveq	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	e02f      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d109      	bne.n	8007b6c <HAL_TIM_PWM_Start+0x58>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	bf14      	ite	ne
 8007b64:	2301      	movne	r3, #1
 8007b66:	2300      	moveq	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	e022      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d109      	bne.n	8007b86 <HAL_TIM_PWM_Start+0x72>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	bf14      	ite	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	2300      	moveq	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	e015      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b10      	cmp	r3, #16
 8007b8a:	d109      	bne.n	8007ba0 <HAL_TIM_PWM_Start+0x8c>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	bf14      	ite	ne
 8007b98:	2301      	movne	r3, #1
 8007b9a:	2300      	moveq	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	e008      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	bf14      	ite	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e09c      	b.n	8007cf4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <HAL_TIM_PWM_Start+0xb6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bc8:	e023      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_PWM_Start+0xc6>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bd8:	e01b      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_PWM_Start+0xd6>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007be8:	e013      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b0c      	cmp	r3, #12
 8007bee:	d104      	bne.n	8007bfa <HAL_TIM_PWM_Start+0xe6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bf8:	e00b      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d104      	bne.n	8007c0a <HAL_TIM_PWM_Start+0xf6>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c08:	e003      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2201      	movs	r2, #1
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fafe 	bl	800921c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a35      	ldr	r2, [pc, #212]	; (8007cfc <HAL_TIM_PWM_Start+0x1e8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d013      	beq.n	8007c52 <HAL_TIM_PWM_Start+0x13e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a34      	ldr	r2, [pc, #208]	; (8007d00 <HAL_TIM_PWM_Start+0x1ec>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00e      	beq.n	8007c52 <HAL_TIM_PWM_Start+0x13e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a32      	ldr	r2, [pc, #200]	; (8007d04 <HAL_TIM_PWM_Start+0x1f0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d009      	beq.n	8007c52 <HAL_TIM_PWM_Start+0x13e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a31      	ldr	r2, [pc, #196]	; (8007d08 <HAL_TIM_PWM_Start+0x1f4>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d004      	beq.n	8007c52 <HAL_TIM_PWM_Start+0x13e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a2f      	ldr	r2, [pc, #188]	; (8007d0c <HAL_TIM_PWM_Start+0x1f8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d101      	bne.n	8007c56 <HAL_TIM_PWM_Start+0x142>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <HAL_TIM_PWM_Start+0x144>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a22      	ldr	r2, [pc, #136]	; (8007cfc <HAL_TIM_PWM_Start+0x1e8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d01d      	beq.n	8007cb2 <HAL_TIM_PWM_Start+0x19e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7e:	d018      	beq.n	8007cb2 <HAL_TIM_PWM_Start+0x19e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a22      	ldr	r2, [pc, #136]	; (8007d10 <HAL_TIM_PWM_Start+0x1fc>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d013      	beq.n	8007cb2 <HAL_TIM_PWM_Start+0x19e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a21      	ldr	r2, [pc, #132]	; (8007d14 <HAL_TIM_PWM_Start+0x200>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00e      	beq.n	8007cb2 <HAL_TIM_PWM_Start+0x19e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1f      	ldr	r2, [pc, #124]	; (8007d18 <HAL_TIM_PWM_Start+0x204>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_TIM_PWM_Start+0x19e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <HAL_TIM_PWM_Start+0x1ec>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_TIM_PWM_Start+0x19e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <HAL_TIM_PWM_Start+0x1f0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d115      	bne.n	8007cde <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	4b18      	ldr	r3, [pc, #96]	; (8007d1c <HAL_TIM_PWM_Start+0x208>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b06      	cmp	r3, #6
 8007cc2:	d015      	beq.n	8007cf0 <HAL_TIM_PWM_Start+0x1dc>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cca:	d011      	beq.n	8007cf0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0201 	orr.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cdc:	e008      	b.n	8007cf0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f042 0201 	orr.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	e000      	b.n	8007cf2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	40013400 	.word	0x40013400
 8007d04:	40014000 	.word	0x40014000
 8007d08:	40014400 	.word	0x40014400
 8007d0c:	40014800 	.word	0x40014800
 8007d10:	40000400 	.word	0x40000400
 8007d14:	40000800 	.word	0x40000800
 8007d18:	40000c00 	.word	0x40000c00
 8007d1c:	00010007 	.word	0x00010007

08007d20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e049      	b.n	8007dc6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f841 	bl	8007dce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f000 fd2e 	bl	80087c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <HAL_TIM_IC_Start+0x1a>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	e023      	b.n	8007e46 <HAL_TIM_IC_Start+0x62>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_IC_Start+0x2a>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	e01b      	b.n	8007e46 <HAL_TIM_IC_Start+0x62>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_IC_Start+0x3a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	e013      	b.n	8007e46 <HAL_TIM_IC_Start+0x62>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_IC_Start+0x4a>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	e00b      	b.n	8007e46 <HAL_TIM_IC_Start+0x62>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_IC_Start+0x5a>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	e003      	b.n	8007e46 <HAL_TIM_IC_Start+0x62>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <HAL_TIM_IC_Start+0x74>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	e013      	b.n	8007e80 <HAL_TIM_IC_Start+0x9c>
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d104      	bne.n	8007e68 <HAL_TIM_IC_Start+0x84>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	e00b      	b.n	8007e80 <HAL_TIM_IC_Start+0x9c>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d104      	bne.n	8007e78 <HAL_TIM_IC_Start+0x94>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	e003      	b.n	8007e80 <HAL_TIM_IC_Start+0x9c>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d102      	bne.n	8007e8e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d001      	beq.n	8007e92 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e092      	b.n	8007fb8 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIM_IC_Start+0xbe>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ea0:	e023      	b.n	8007eea <HAL_TIM_IC_Start+0x106>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d104      	bne.n	8007eb2 <HAL_TIM_IC_Start+0xce>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eb0:	e01b      	b.n	8007eea <HAL_TIM_IC_Start+0x106>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIM_IC_Start+0xde>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ec0:	e013      	b.n	8007eea <HAL_TIM_IC_Start+0x106>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b0c      	cmp	r3, #12
 8007ec6:	d104      	bne.n	8007ed2 <HAL_TIM_IC_Start+0xee>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ed0:	e00b      	b.n	8007eea <HAL_TIM_IC_Start+0x106>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b10      	cmp	r3, #16
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIM_IC_Start+0xfe>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ee0:	e003      	b.n	8007eea <HAL_TIM_IC_Start+0x106>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <HAL_TIM_IC_Start+0x116>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ef8:	e013      	b.n	8007f22 <HAL_TIM_IC_Start+0x13e>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d104      	bne.n	8007f0a <HAL_TIM_IC_Start+0x126>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f08:	e00b      	b.n	8007f22 <HAL_TIM_IC_Start+0x13e>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d104      	bne.n	8007f1a <HAL_TIM_IC_Start+0x136>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f18:	e003      	b.n	8007f22 <HAL_TIM_IC_Start+0x13e>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2201      	movs	r2, #1
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f976 	bl	800921c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <HAL_TIM_IC_Start+0x1dc>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d01d      	beq.n	8007f76 <HAL_TIM_IC_Start+0x192>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f42:	d018      	beq.n	8007f76 <HAL_TIM_IC_Start+0x192>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <HAL_TIM_IC_Start+0x1e0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d013      	beq.n	8007f76 <HAL_TIM_IC_Start+0x192>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <HAL_TIM_IC_Start+0x1e4>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d00e      	beq.n	8007f76 <HAL_TIM_IC_Start+0x192>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <HAL_TIM_IC_Start+0x1e8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d009      	beq.n	8007f76 <HAL_TIM_IC_Start+0x192>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1a      	ldr	r2, [pc, #104]	; (8007fd0 <HAL_TIM_IC_Start+0x1ec>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d004      	beq.n	8007f76 <HAL_TIM_IC_Start+0x192>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a18      	ldr	r2, [pc, #96]	; (8007fd4 <HAL_TIM_IC_Start+0x1f0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d115      	bne.n	8007fa2 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <HAL_TIM_IC_Start+0x1f4>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b06      	cmp	r3, #6
 8007f86:	d015      	beq.n	8007fb4 <HAL_TIM_IC_Start+0x1d0>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f8e:	d011      	beq.n	8007fb4 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa0:	e008      	b.n	8007fb4 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	e000      	b.n	8007fb6 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	40012c00 	.word	0x40012c00
 8007fc4:	40000400 	.word	0x40000400
 8007fc8:	40000800 	.word	0x40000800
 8007fcc:	40000c00 	.word	0x40000c00
 8007fd0:	40013400 	.word	0x40013400
 8007fd4:	40014000 	.word	0x40014000
 8007fd8:	00010007 	.word	0x00010007

08007fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d020      	beq.n	8008040 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01b      	beq.n	8008040 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0202 	mvn.w	r2, #2
 8008010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fbac 	bl	8008784 <HAL_TIM_IC_CaptureCallback>
 800802c:	e005      	b.n	800803a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fb9e 	bl	8008770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fbaf 	bl	8008798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 0304 	and.w	r3, r3, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	d020      	beq.n	800808c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01b      	beq.n	800808c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f06f 0204 	mvn.w	r2, #4
 800805c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2202      	movs	r2, #2
 8008062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fb86 	bl	8008784 <HAL_TIM_IC_CaptureCallback>
 8008078:	e005      	b.n	8008086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fb78 	bl	8008770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb89 	bl	8008798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f003 0308 	and.w	r3, r3, #8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d020      	beq.n	80080d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0208 	mvn.w	r2, #8
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2204      	movs	r2, #4
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fb60 	bl	8008784 <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fb52 	bl	8008770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb63 	bl	8008798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d020      	beq.n	8008124 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01b      	beq.n	8008124 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0210 	mvn.w	r2, #16
 80080f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2208      	movs	r2, #8
 80080fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fb3a 	bl	8008784 <HAL_TIM_IC_CaptureCallback>
 8008110:	e005      	b.n	800811e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fb2c 	bl	8008770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fb3d 	bl	8008798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0201 	mvn.w	r2, #1
 8008140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fb0a 	bl	800875c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f98e 	bl	8009488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00c      	beq.n	8008190 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 f986 	bl	800949c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00c      	beq.n	80081b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fafc 	bl	80087ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00c      	beq.n	80081d8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0220 	mvn.w	r2, #32
 80081d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 f94e 	bl	8009474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e088      	b.n	8008310 <HAL_TIM_IC_ConfigChannel+0x130>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d11b      	bne.n	8008244 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800821c:	f000 fe40 	bl	8008ea0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 020c 	bic.w	r2, r2, #12
 800822e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6999      	ldr	r1, [r3, #24]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	619a      	str	r2, [r3, #24]
 8008242:	e060      	b.n	8008306 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b04      	cmp	r3, #4
 8008248:	d11c      	bne.n	8008284 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800825a:	f000 febe 	bl	8008fda <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699a      	ldr	r2, [r3, #24]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800826c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6999      	ldr	r1, [r3, #24]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	021a      	lsls	r2, r3, #8
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	619a      	str	r2, [r3, #24]
 8008282:	e040      	b.n	8008306 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b08      	cmp	r3, #8
 8008288:	d11b      	bne.n	80082c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800829a:	f000 ff0b 	bl	80090b4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 020c 	bic.w	r2, r2, #12
 80082ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69d9      	ldr	r1, [r3, #28]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	61da      	str	r2, [r3, #28]
 80082c0:	e021      	b.n	8008306 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b0c      	cmp	r3, #12
 80082c6:	d11c      	bne.n	8008302 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80082d8:	f000 ff28 	bl	800912c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69da      	ldr	r2, [r3, #28]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	69d9      	ldr	r1, [r3, #28]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	61da      	str	r2, [r3, #28]
 8008300:	e001      	b.n	8008306 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800830e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800832e:	2b01      	cmp	r3, #1
 8008330:	d101      	bne.n	8008336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008332:	2302      	movs	r3, #2
 8008334:	e0ff      	b.n	8008536 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b14      	cmp	r3, #20
 8008342:	f200 80f0 	bhi.w	8008526 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	080083a1 	.word	0x080083a1
 8008350:	08008527 	.word	0x08008527
 8008354:	08008527 	.word	0x08008527
 8008358:	08008527 	.word	0x08008527
 800835c:	080083e1 	.word	0x080083e1
 8008360:	08008527 	.word	0x08008527
 8008364:	08008527 	.word	0x08008527
 8008368:	08008527 	.word	0x08008527
 800836c:	08008423 	.word	0x08008423
 8008370:	08008527 	.word	0x08008527
 8008374:	08008527 	.word	0x08008527
 8008378:	08008527 	.word	0x08008527
 800837c:	08008463 	.word	0x08008463
 8008380:	08008527 	.word	0x08008527
 8008384:	08008527 	.word	0x08008527
 8008388:	08008527 	.word	0x08008527
 800838c:	080084a5 	.word	0x080084a5
 8008390:	08008527 	.word	0x08008527
 8008394:	08008527 	.word	0x08008527
 8008398:	08008527 	.word	0x08008527
 800839c:	080084e5 	.word	0x080084e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68b9      	ldr	r1, [r7, #8]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 faa4 	bl	80088f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699a      	ldr	r2, [r3, #24]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0208 	orr.w	r2, r2, #8
 80083ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699a      	ldr	r2, [r3, #24]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0204 	bic.w	r2, r2, #4
 80083ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6999      	ldr	r1, [r3, #24]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	691a      	ldr	r2, [r3, #16]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	619a      	str	r2, [r3, #24]
      break;
 80083de:	e0a5      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68b9      	ldr	r1, [r7, #8]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fb14 	bl	8008a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800840a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6999      	ldr	r1, [r3, #24]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	021a      	lsls	r2, r3, #8
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	619a      	str	r2, [r3, #24]
      break;
 8008420:	e084      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fb7d 	bl	8008b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0208 	orr.w	r2, r2, #8
 800843c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69da      	ldr	r2, [r3, #28]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0204 	bic.w	r2, r2, #4
 800844c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69d9      	ldr	r1, [r3, #28]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	691a      	ldr	r2, [r3, #16]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	61da      	str	r2, [r3, #28]
      break;
 8008460:	e064      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68b9      	ldr	r1, [r7, #8]
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fbe5 	bl	8008c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69da      	ldr	r2, [r3, #28]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800847c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69da      	ldr	r2, [r3, #28]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800848c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69d9      	ldr	r1, [r3, #28]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	021a      	lsls	r2, r3, #8
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	61da      	str	r2, [r3, #28]
      break;
 80084a2:	e043      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fc2e 	bl	8008d0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0204 	bic.w	r2, r2, #4
 80084ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	691a      	ldr	r2, [r3, #16]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084e2:	e023      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fc72 	bl	8008dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800850e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	021a      	lsls	r2, r3, #8
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008524:	e002      	b.n	800852c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	75fb      	strb	r3, [r7, #23]
      break;
 800852a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop

08008540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_TIM_ConfigClockSource+0x1c>
 8008558:	2302      	movs	r3, #2
 800855a:	e0b6      	b.n	80086ca <HAL_TIM_ConfigClockSource+0x18a>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800857a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800857e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008598:	d03e      	beq.n	8008618 <HAL_TIM_ConfigClockSource+0xd8>
 800859a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800859e:	f200 8087 	bhi.w	80086b0 <HAL_TIM_ConfigClockSource+0x170>
 80085a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a6:	f000 8086 	beq.w	80086b6 <HAL_TIM_ConfigClockSource+0x176>
 80085aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ae:	d87f      	bhi.n	80086b0 <HAL_TIM_ConfigClockSource+0x170>
 80085b0:	2b70      	cmp	r3, #112	; 0x70
 80085b2:	d01a      	beq.n	80085ea <HAL_TIM_ConfigClockSource+0xaa>
 80085b4:	2b70      	cmp	r3, #112	; 0x70
 80085b6:	d87b      	bhi.n	80086b0 <HAL_TIM_ConfigClockSource+0x170>
 80085b8:	2b60      	cmp	r3, #96	; 0x60
 80085ba:	d050      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x11e>
 80085bc:	2b60      	cmp	r3, #96	; 0x60
 80085be:	d877      	bhi.n	80086b0 <HAL_TIM_ConfigClockSource+0x170>
 80085c0:	2b50      	cmp	r3, #80	; 0x50
 80085c2:	d03c      	beq.n	800863e <HAL_TIM_ConfigClockSource+0xfe>
 80085c4:	2b50      	cmp	r3, #80	; 0x50
 80085c6:	d873      	bhi.n	80086b0 <HAL_TIM_ConfigClockSource+0x170>
 80085c8:	2b40      	cmp	r3, #64	; 0x40
 80085ca:	d058      	beq.n	800867e <HAL_TIM_ConfigClockSource+0x13e>
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	d86f      	bhi.n	80086b0 <HAL_TIM_ConfigClockSource+0x170>
 80085d0:	2b30      	cmp	r3, #48	; 0x30
 80085d2:	d064      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x15e>
 80085d4:	2b30      	cmp	r3, #48	; 0x30
 80085d6:	d86b      	bhi.n	80086b0 <HAL_TIM_ConfigClockSource+0x170>
 80085d8:	2b20      	cmp	r3, #32
 80085da:	d060      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x15e>
 80085dc:	2b20      	cmp	r3, #32
 80085de:	d867      	bhi.n	80086b0 <HAL_TIM_ConfigClockSource+0x170>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d05c      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x15e>
 80085e4:	2b10      	cmp	r3, #16
 80085e6:	d05a      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x15e>
 80085e8:	e062      	b.n	80086b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085fa:	f000 fdef 	bl	80091dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800860c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	609a      	str	r2, [r3, #8]
      break;
 8008616:	e04f      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008628:	f000 fdd8 	bl	80091dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800863a:	609a      	str	r2, [r3, #8]
      break;
 800863c:	e03c      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800864a:	461a      	mov	r2, r3
 800864c:	f000 fc96 	bl	8008f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2150      	movs	r1, #80	; 0x50
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fda5 	bl	80091a6 <TIM_ITRx_SetConfig>
      break;
 800865c:	e02c      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800866a:	461a      	mov	r2, r3
 800866c:	f000 fcf2 	bl	8009054 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2160      	movs	r1, #96	; 0x60
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fd95 	bl	80091a6 <TIM_ITRx_SetConfig>
      break;
 800867c:	e01c      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800868a:	461a      	mov	r2, r3
 800868c:	f000 fc76 	bl	8008f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2140      	movs	r1, #64	; 0x40
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fd85 	bl	80091a6 <TIM_ITRx_SetConfig>
      break;
 800869c:	e00c      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4619      	mov	r1, r3
 80086a8:	4610      	mov	r0, r2
 80086aa:	f000 fd7c 	bl	80091a6 <TIM_ITRx_SetConfig>
      break;
 80086ae:	e003      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
      break;
 80086b4:	e000      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80086b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b0c      	cmp	r3, #12
 80086e6:	d831      	bhi.n	800874c <HAL_TIM_ReadCapturedValue+0x78>
 80086e8:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	08008725 	.word	0x08008725
 80086f4:	0800874d 	.word	0x0800874d
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	0800874d 	.word	0x0800874d
 8008700:	0800872f 	.word	0x0800872f
 8008704:	0800874d 	.word	0x0800874d
 8008708:	0800874d 	.word	0x0800874d
 800870c:	0800874d 	.word	0x0800874d
 8008710:	08008739 	.word	0x08008739
 8008714:	0800874d 	.word	0x0800874d
 8008718:	0800874d 	.word	0x0800874d
 800871c:	0800874d 	.word	0x0800874d
 8008720:	08008743 	.word	0x08008743
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	60fb      	str	r3, [r7, #12]

      break;
 800872c:	e00f      	b.n	800874e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	60fb      	str	r3, [r7, #12]

      break;
 8008736:	e00a      	b.n	800874e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873e:	60fb      	str	r3, [r7, #12]

      break;
 8008740:	e005      	b.n	800874e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	60fb      	str	r3, [r7, #12]

      break;
 800874a:	e000      	b.n	800874e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800874c:	bf00      	nop
  }

  return tmpreg;
 800874e:	68fb      	ldr	r3, [r7, #12]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a40      	ldr	r2, [pc, #256]	; (80088d4 <TIM_Base_SetConfig+0x114>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d013      	beq.n	8008800 <TIM_Base_SetConfig+0x40>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087de:	d00f      	beq.n	8008800 <TIM_Base_SetConfig+0x40>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a3d      	ldr	r2, [pc, #244]	; (80088d8 <TIM_Base_SetConfig+0x118>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00b      	beq.n	8008800 <TIM_Base_SetConfig+0x40>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a3c      	ldr	r2, [pc, #240]	; (80088dc <TIM_Base_SetConfig+0x11c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d007      	beq.n	8008800 <TIM_Base_SetConfig+0x40>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a3b      	ldr	r2, [pc, #236]	; (80088e0 <TIM_Base_SetConfig+0x120>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d003      	beq.n	8008800 <TIM_Base_SetConfig+0x40>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a3a      	ldr	r2, [pc, #232]	; (80088e4 <TIM_Base_SetConfig+0x124>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d108      	bne.n	8008812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a2f      	ldr	r2, [pc, #188]	; (80088d4 <TIM_Base_SetConfig+0x114>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d01f      	beq.n	800885a <TIM_Base_SetConfig+0x9a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008820:	d01b      	beq.n	800885a <TIM_Base_SetConfig+0x9a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a2c      	ldr	r2, [pc, #176]	; (80088d8 <TIM_Base_SetConfig+0x118>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d017      	beq.n	800885a <TIM_Base_SetConfig+0x9a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a2b      	ldr	r2, [pc, #172]	; (80088dc <TIM_Base_SetConfig+0x11c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d013      	beq.n	800885a <TIM_Base_SetConfig+0x9a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a2a      	ldr	r2, [pc, #168]	; (80088e0 <TIM_Base_SetConfig+0x120>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00f      	beq.n	800885a <TIM_Base_SetConfig+0x9a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a29      	ldr	r2, [pc, #164]	; (80088e4 <TIM_Base_SetConfig+0x124>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d00b      	beq.n	800885a <TIM_Base_SetConfig+0x9a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a28      	ldr	r2, [pc, #160]	; (80088e8 <TIM_Base_SetConfig+0x128>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d007      	beq.n	800885a <TIM_Base_SetConfig+0x9a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a27      	ldr	r2, [pc, #156]	; (80088ec <TIM_Base_SetConfig+0x12c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d003      	beq.n	800885a <TIM_Base_SetConfig+0x9a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a26      	ldr	r2, [pc, #152]	; (80088f0 <TIM_Base_SetConfig+0x130>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d108      	bne.n	800886c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a10      	ldr	r2, [pc, #64]	; (80088d4 <TIM_Base_SetConfig+0x114>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00f      	beq.n	80088b8 <TIM_Base_SetConfig+0xf8>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a12      	ldr	r2, [pc, #72]	; (80088e4 <TIM_Base_SetConfig+0x124>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00b      	beq.n	80088b8 <TIM_Base_SetConfig+0xf8>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a11      	ldr	r2, [pc, #68]	; (80088e8 <TIM_Base_SetConfig+0x128>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d007      	beq.n	80088b8 <TIM_Base_SetConfig+0xf8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a10      	ldr	r2, [pc, #64]	; (80088ec <TIM_Base_SetConfig+0x12c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d003      	beq.n	80088b8 <TIM_Base_SetConfig+0xf8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a0f      	ldr	r2, [pc, #60]	; (80088f0 <TIM_Base_SetConfig+0x130>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d103      	bne.n	80088c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	615a      	str	r2, [r3, #20]
}
 80088c6:	bf00      	nop
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	40012c00 	.word	0x40012c00
 80088d8:	40000400 	.word	0x40000400
 80088dc:	40000800 	.word	0x40000800
 80088e0:	40000c00 	.word	0x40000c00
 80088e4:	40013400 	.word	0x40013400
 80088e8:	40014000 	.word	0x40014000
 80088ec:	40014400 	.word	0x40014400
 80088f0:	40014800 	.word	0x40014800

080088f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	f023 0201 	bic.w	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0303 	bic.w	r3, r3, #3
 800892e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f023 0302 	bic.w	r3, r3, #2
 8008940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a2c      	ldr	r2, [pc, #176]	; (8008a00 <TIM_OC1_SetConfig+0x10c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00f      	beq.n	8008974 <TIM_OC1_SetConfig+0x80>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a2b      	ldr	r2, [pc, #172]	; (8008a04 <TIM_OC1_SetConfig+0x110>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00b      	beq.n	8008974 <TIM_OC1_SetConfig+0x80>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a2a      	ldr	r2, [pc, #168]	; (8008a08 <TIM_OC1_SetConfig+0x114>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d007      	beq.n	8008974 <TIM_OC1_SetConfig+0x80>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <TIM_OC1_SetConfig+0x118>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d003      	beq.n	8008974 <TIM_OC1_SetConfig+0x80>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a28      	ldr	r2, [pc, #160]	; (8008a10 <TIM_OC1_SetConfig+0x11c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d10c      	bne.n	800898e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f023 0308 	bic.w	r3, r3, #8
 800897a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f023 0304 	bic.w	r3, r3, #4
 800898c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a1b      	ldr	r2, [pc, #108]	; (8008a00 <TIM_OC1_SetConfig+0x10c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00f      	beq.n	80089b6 <TIM_OC1_SetConfig+0xc2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1a      	ldr	r2, [pc, #104]	; (8008a04 <TIM_OC1_SetConfig+0x110>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00b      	beq.n	80089b6 <TIM_OC1_SetConfig+0xc2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a19      	ldr	r2, [pc, #100]	; (8008a08 <TIM_OC1_SetConfig+0x114>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d007      	beq.n	80089b6 <TIM_OC1_SetConfig+0xc2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a18      	ldr	r2, [pc, #96]	; (8008a0c <TIM_OC1_SetConfig+0x118>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d003      	beq.n	80089b6 <TIM_OC1_SetConfig+0xc2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a17      	ldr	r2, [pc, #92]	; (8008a10 <TIM_OC1_SetConfig+0x11c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d111      	bne.n	80089da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	621a      	str	r2, [r3, #32]
}
 80089f4:	bf00      	nop
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	40012c00 	.word	0x40012c00
 8008a04:	40013400 	.word	0x40013400
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	40014400 	.word	0x40014400
 8008a10:	40014800 	.word	0x40014800

08008a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	f023 0210 	bic.w	r2, r3, #16
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0320 	bic.w	r3, r3, #32
 8008a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a28      	ldr	r2, [pc, #160]	; (8008b14 <TIM_OC2_SetConfig+0x100>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d003      	beq.n	8008a80 <TIM_OC2_SetConfig+0x6c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a27      	ldr	r2, [pc, #156]	; (8008b18 <TIM_OC2_SetConfig+0x104>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d10d      	bne.n	8008a9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1d      	ldr	r2, [pc, #116]	; (8008b14 <TIM_OC2_SetConfig+0x100>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00f      	beq.n	8008ac4 <TIM_OC2_SetConfig+0xb0>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a1c      	ldr	r2, [pc, #112]	; (8008b18 <TIM_OC2_SetConfig+0x104>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00b      	beq.n	8008ac4 <TIM_OC2_SetConfig+0xb0>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a1b      	ldr	r2, [pc, #108]	; (8008b1c <TIM_OC2_SetConfig+0x108>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d007      	beq.n	8008ac4 <TIM_OC2_SetConfig+0xb0>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a1a      	ldr	r2, [pc, #104]	; (8008b20 <TIM_OC2_SetConfig+0x10c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d003      	beq.n	8008ac4 <TIM_OC2_SetConfig+0xb0>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a19      	ldr	r2, [pc, #100]	; (8008b24 <TIM_OC2_SetConfig+0x110>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d113      	bne.n	8008aec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40012c00 	.word	0x40012c00
 8008b18:	40013400 	.word	0x40013400
 8008b1c:	40014000 	.word	0x40014000
 8008b20:	40014400 	.word	0x40014400
 8008b24:	40014800 	.word	0x40014800

08008b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 0303 	bic.w	r3, r3, #3
 8008b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a27      	ldr	r2, [pc, #156]	; (8008c24 <TIM_OC3_SetConfig+0xfc>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d003      	beq.n	8008b92 <TIM_OC3_SetConfig+0x6a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <TIM_OC3_SetConfig+0x100>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d10d      	bne.n	8008bae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	021b      	lsls	r3, r3, #8
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a1c      	ldr	r2, [pc, #112]	; (8008c24 <TIM_OC3_SetConfig+0xfc>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d00f      	beq.n	8008bd6 <TIM_OC3_SetConfig+0xae>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a1b      	ldr	r2, [pc, #108]	; (8008c28 <TIM_OC3_SetConfig+0x100>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d00b      	beq.n	8008bd6 <TIM_OC3_SetConfig+0xae>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a1a      	ldr	r2, [pc, #104]	; (8008c2c <TIM_OC3_SetConfig+0x104>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d007      	beq.n	8008bd6 <TIM_OC3_SetConfig+0xae>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a19      	ldr	r2, [pc, #100]	; (8008c30 <TIM_OC3_SetConfig+0x108>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d003      	beq.n	8008bd6 <TIM_OC3_SetConfig+0xae>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a18      	ldr	r2, [pc, #96]	; (8008c34 <TIM_OC3_SetConfig+0x10c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d113      	bne.n	8008bfe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	011b      	lsls	r3, r3, #4
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	621a      	str	r2, [r3, #32]
}
 8008c18:	bf00      	nop
 8008c1a:	371c      	adds	r7, #28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	40012c00 	.word	0x40012c00
 8008c28:	40013400 	.word	0x40013400
 8008c2c:	40014000 	.word	0x40014000
 8008c30:	40014400 	.word	0x40014400
 8008c34:	40014800 	.word	0x40014800

08008c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	031b      	lsls	r3, r3, #12
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a18      	ldr	r2, [pc, #96]	; (8008cf8 <TIM_OC4_SetConfig+0xc0>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00f      	beq.n	8008cbc <TIM_OC4_SetConfig+0x84>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <TIM_OC4_SetConfig+0xc4>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00b      	beq.n	8008cbc <TIM_OC4_SetConfig+0x84>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a16      	ldr	r2, [pc, #88]	; (8008d00 <TIM_OC4_SetConfig+0xc8>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d007      	beq.n	8008cbc <TIM_OC4_SetConfig+0x84>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <TIM_OC4_SetConfig+0xcc>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_OC4_SetConfig+0x84>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a14      	ldr	r2, [pc, #80]	; (8008d08 <TIM_OC4_SetConfig+0xd0>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d109      	bne.n	8008cd0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	019b      	lsls	r3, r3, #6
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40012c00 	.word	0x40012c00
 8008cfc:	40013400 	.word	0x40013400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400
 8008d08:	40014800 	.word	0x40014800

08008d0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	041b      	lsls	r3, r3, #16
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a17      	ldr	r2, [pc, #92]	; (8008dc0 <TIM_OC5_SetConfig+0xb4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00f      	beq.n	8008d86 <TIM_OC5_SetConfig+0x7a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a16      	ldr	r2, [pc, #88]	; (8008dc4 <TIM_OC5_SetConfig+0xb8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00b      	beq.n	8008d86 <TIM_OC5_SetConfig+0x7a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a15      	ldr	r2, [pc, #84]	; (8008dc8 <TIM_OC5_SetConfig+0xbc>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d007      	beq.n	8008d86 <TIM_OC5_SetConfig+0x7a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a14      	ldr	r2, [pc, #80]	; (8008dcc <TIM_OC5_SetConfig+0xc0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_OC5_SetConfig+0x7a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a13      	ldr	r2, [pc, #76]	; (8008dd0 <TIM_OC5_SetConfig+0xc4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d109      	bne.n	8008d9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	621a      	str	r2, [r3, #32]
}
 8008db4:	bf00      	nop
 8008db6:	371c      	adds	r7, #28
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	40012c00 	.word	0x40012c00
 8008dc4:	40013400 	.word	0x40013400
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40014400 	.word	0x40014400
 8008dd0:	40014800 	.word	0x40014800

08008dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	051b      	lsls	r3, r3, #20
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a18      	ldr	r2, [pc, #96]	; (8008e8c <TIM_OC6_SetConfig+0xb8>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00f      	beq.n	8008e50 <TIM_OC6_SetConfig+0x7c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a17      	ldr	r2, [pc, #92]	; (8008e90 <TIM_OC6_SetConfig+0xbc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00b      	beq.n	8008e50 <TIM_OC6_SetConfig+0x7c>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a16      	ldr	r2, [pc, #88]	; (8008e94 <TIM_OC6_SetConfig+0xc0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d007      	beq.n	8008e50 <TIM_OC6_SetConfig+0x7c>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a15      	ldr	r2, [pc, #84]	; (8008e98 <TIM_OC6_SetConfig+0xc4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_OC6_SetConfig+0x7c>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a14      	ldr	r2, [pc, #80]	; (8008e9c <TIM_OC6_SetConfig+0xc8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d109      	bne.n	8008e64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	029b      	lsls	r3, r3, #10
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	621a      	str	r2, [r3, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40012c00 	.word	0x40012c00
 8008e90:	40013400 	.word	0x40013400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f023 0201 	bic.w	r2, r3, #1
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4a26      	ldr	r2, [pc, #152]	; (8008f64 <TIM_TI1_SetConfig+0xc4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d017      	beq.n	8008efe <TIM_TI1_SetConfig+0x5e>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed4:	d013      	beq.n	8008efe <TIM_TI1_SetConfig+0x5e>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	4a23      	ldr	r2, [pc, #140]	; (8008f68 <TIM_TI1_SetConfig+0xc8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00f      	beq.n	8008efe <TIM_TI1_SetConfig+0x5e>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4a22      	ldr	r2, [pc, #136]	; (8008f6c <TIM_TI1_SetConfig+0xcc>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d00b      	beq.n	8008efe <TIM_TI1_SetConfig+0x5e>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4a21      	ldr	r2, [pc, #132]	; (8008f70 <TIM_TI1_SetConfig+0xd0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d007      	beq.n	8008efe <TIM_TI1_SetConfig+0x5e>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	4a20      	ldr	r2, [pc, #128]	; (8008f74 <TIM_TI1_SetConfig+0xd4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d003      	beq.n	8008efe <TIM_TI1_SetConfig+0x5e>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	4a1f      	ldr	r2, [pc, #124]	; (8008f78 <TIM_TI1_SetConfig+0xd8>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d101      	bne.n	8008f02 <TIM_TI1_SetConfig+0x62>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <TIM_TI1_SetConfig+0x64>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d008      	beq.n	8008f1a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0303 	bic.w	r3, r3, #3
 8008f0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e003      	b.n	8008f22 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f023 030a 	bic.w	r3, r3, #10
 8008f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f003 030a 	and.w	r3, r3, #10
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	621a      	str	r2, [r3, #32]
}
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	40012c00 	.word	0x40012c00
 8008f68:	40000400 	.word	0x40000400
 8008f6c:	40000800 	.word	0x40000800
 8008f70:	40000c00 	.word	0x40000c00
 8008f74:	40013400 	.word	0x40013400
 8008f78:	40014000 	.word	0x40014000

08008f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	f023 0201 	bic.w	r2, r3, #1
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f023 030a 	bic.w	r3, r3, #10
 8008fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	621a      	str	r2, [r3, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b087      	sub	sp, #28
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	607a      	str	r2, [r7, #4]
 8008fe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	f023 0210 	bic.w	r2, r3, #16
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	031b      	lsls	r3, r3, #12
 800901e:	b29b      	uxth	r3, r3
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800902c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	4313      	orrs	r3, r2
 800903a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	621a      	str	r2, [r3, #32]
}
 8009048:	bf00      	nop
 800904a:	371c      	adds	r7, #28
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f023 0210 	bic.w	r2, r3, #16
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800907e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	031b      	lsls	r3, r3, #12
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	4313      	orrs	r3, r2
 8009088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009090:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	011b      	lsls	r3, r3, #4
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	4313      	orrs	r3, r2
 800909a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	621a      	str	r2, [r3, #32]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
 80090c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f023 0303 	bic.w	r3, r3, #3
 80090e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009104:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	621a      	str	r2, [r3, #32]
}
 8009120:	bf00      	nop
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009158:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	4313      	orrs	r3, r2
 8009162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800916a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	031b      	lsls	r3, r3, #12
 8009170:	b29b      	uxth	r3, r3
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	4313      	orrs	r3, r2
 8009176:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800917e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	031b      	lsls	r3, r3, #12
 8009184:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	621a      	str	r2, [r3, #32]
}
 800919a:	bf00      	nop
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f043 0307 	orr.w	r3, r3, #7
 80091c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	609a      	str	r2, [r3, #8]
}
 80091d0:	bf00      	nop
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	021a      	lsls	r2, r3, #8
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	431a      	orrs	r2, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4313      	orrs	r3, r2
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	609a      	str	r2, [r3, #8]
}
 8009210:	bf00      	nop
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f003 031f 	and.w	r3, r3, #31
 800922e:	2201      	movs	r2, #1
 8009230:	fa02 f303 	lsl.w	r3, r2, r3
 8009234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a1a      	ldr	r2, [r3, #32]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	43db      	mvns	r3, r3
 800923e:	401a      	ands	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a1a      	ldr	r2, [r3, #32]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	fa01 f303 	lsl.w	r3, r1, r3
 8009254:	431a      	orrs	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	621a      	str	r2, [r3, #32]
}
 800925a:	bf00      	nop
 800925c:	371c      	adds	r7, #28
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
	...

08009268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800927c:	2302      	movs	r3, #2
 800927e:	e068      	b.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a2e      	ldr	r2, [pc, #184]	; (8009360 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d004      	beq.n	80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a2d      	ldr	r2, [pc, #180]	; (8009364 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d108      	bne.n	80092c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a1e      	ldr	r2, [pc, #120]	; (8009360 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d01d      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f2:	d018      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1b      	ldr	r2, [pc, #108]	; (8009368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d013      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1a      	ldr	r2, [pc, #104]	; (800936c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d00e      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a18      	ldr	r2, [pc, #96]	; (8009370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d009      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a13      	ldr	r2, [pc, #76]	; (8009364 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d004      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a14      	ldr	r2, [pc, #80]	; (8009374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d10c      	bne.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800932c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	4313      	orrs	r3, r2
 8009336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40012c00 	.word	0x40012c00
 8009364:	40013400 	.word	0x40013400
 8009368:	40000400 	.word	0x40000400
 800936c:	40000800 	.word	0x40000800
 8009370:	40000c00 	.word	0x40000c00
 8009374:	40014000 	.word	0x40014000

08009378 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009390:	2302      	movs	r3, #2
 8009392:	e065      	b.n	8009460 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	041b      	lsls	r3, r3, #16
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a16      	ldr	r2, [pc, #88]	; (800946c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d004      	beq.n	8009422 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a14      	ldr	r2, [pc, #80]	; (8009470 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d115      	bne.n	800944e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942c:	051b      	lsls	r3, r3, #20
 800942e:	4313      	orrs	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	4313      	orrs	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	4313      	orrs	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	40012c00 	.word	0x40012c00
 8009470:	40013400 	.word	0x40013400

08009474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e040      	b.n	8009544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7f9 ff7e 	bl	80033d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2224      	movs	r2, #36	; 0x24
 80094dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0201 	bic.w	r2, r2, #1
 80094ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 f866 	bl	800a5c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fdab 	bl	800a058 <UART_SetConfig>
 8009502:	4603      	mov	r3, r0
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e01b      	b.n	8009544 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800951a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800952a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 f8e5 	bl	800a70c <UART_CheckIdleState>
 8009542:	4603      	mov	r3, r0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e048      	b.n	80095f0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7f9 ff30 	bl	80033d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2224      	movs	r2, #36	; 0x24
 8009578:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f022 0201 	bic.w	r2, r2, #1
 8009588:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 f818 	bl	800a5c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fd5d 	bl	800a058 <UART_SetConfig>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e023      	b.n	80095f0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80095c6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689a      	ldr	r2, [r3, #8]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0208 	orr.w	r2, r2, #8
 80095d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 0201 	orr.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f88f 	bl	800a70c <UART_CheckIdleState>
 80095ee:	4603      	mov	r3, r0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08a      	sub	sp, #40	; 0x28
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	4613      	mov	r3, r2
 8009606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800960c:	2b20      	cmp	r3, #32
 800960e:	d178      	bne.n	8009702 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <HAL_UART_Transmit+0x24>
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e071      	b.n	8009704 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2221      	movs	r2, #33	; 0x21
 800962c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800962e:	f7fa fa73 	bl	8003b18 <HAL_GetTick>
 8009632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	88fa      	ldrh	r2, [r7, #6]
 8009640:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800964c:	d108      	bne.n	8009660 <HAL_UART_Transmit+0x68>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d104      	bne.n	8009660 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	61bb      	str	r3, [r7, #24]
 800965e:	e003      	b.n	8009668 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009664:	2300      	movs	r3, #0
 8009666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009668:	e030      	b.n	80096cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2200      	movs	r2, #0
 8009672:	2180      	movs	r1, #128	; 0x80
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f001 f8f1 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d004      	beq.n	800968a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2220      	movs	r2, #32
 8009684:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e03c      	b.n	8009704 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10b      	bne.n	80096a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	881a      	ldrh	r2, [r3, #0]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800969c:	b292      	uxth	r2, r2
 800969e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	3302      	adds	r3, #2
 80096a4:	61bb      	str	r3, [r7, #24]
 80096a6:	e008      	b.n	80096ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	781a      	ldrb	r2, [r3, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	b292      	uxth	r2, r2
 80096b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	3301      	adds	r3, #1
 80096b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1c8      	bne.n	800966a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2200      	movs	r2, #0
 80096e0:	2140      	movs	r1, #64	; 0x40
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f001 f8ba 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e005      	b.n	8009704 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2220      	movs	r2, #32
 80096fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	e000      	b.n	8009704 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009702:	2302      	movs	r3, #2
  }
}
 8009704:	4618      	mov	r0, r3
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	; 0x28
 8009710:	af02      	add	r7, sp, #8
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	4613      	mov	r3, r2
 800971a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009722:	2b20      	cmp	r3, #32
 8009724:	f040 80b6 	bne.w	8009894 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_UART_Receive+0x28>
 800972e:	88fb      	ldrh	r3, [r7, #6]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e0ae      	b.n	8009896 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2222      	movs	r2, #34	; 0x22
 8009744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800974e:	f7fa f9e3 	bl	8003b18 <HAL_GetTick>
 8009752:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	88fa      	ldrh	r2, [r7, #6]
 8009758:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	88fa      	ldrh	r2, [r7, #6]
 8009760:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976c:	d10e      	bne.n	800978c <HAL_UART_Receive+0x80>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d105      	bne.n	8009782 <HAL_UART_Receive+0x76>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f240 12ff 	movw	r2, #511	; 0x1ff
 800977c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009780:	e02d      	b.n	80097de <HAL_UART_Receive+0xd2>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	22ff      	movs	r2, #255	; 0xff
 8009786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800978a:	e028      	b.n	80097de <HAL_UART_Receive+0xd2>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10d      	bne.n	80097b0 <HAL_UART_Receive+0xa4>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <HAL_UART_Receive+0x9a>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	22ff      	movs	r2, #255	; 0xff
 80097a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097a4:	e01b      	b.n	80097de <HAL_UART_Receive+0xd2>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	227f      	movs	r2, #127	; 0x7f
 80097aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097ae:	e016      	b.n	80097de <HAL_UART_Receive+0xd2>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b8:	d10d      	bne.n	80097d6 <HAL_UART_Receive+0xca>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <HAL_UART_Receive+0xc0>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	227f      	movs	r2, #127	; 0x7f
 80097c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097ca:	e008      	b.n	80097de <HAL_UART_Receive+0xd2>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	223f      	movs	r2, #63	; 0x3f
 80097d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097d4:	e003      	b.n	80097de <HAL_UART_Receive+0xd2>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ee:	d108      	bne.n	8009802 <HAL_UART_Receive+0xf6>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d104      	bne.n	8009802 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	e003      	b.n	800980a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800980a:	e037      	b.n	800987c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	2120      	movs	r1, #32
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f001 f820 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2220      	movs	r2, #32
 8009826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e033      	b.n	8009896 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10c      	bne.n	800984e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800983a:	b29a      	uxth	r2, r3
 800983c:	8a7b      	ldrh	r3, [r7, #18]
 800983e:	4013      	ands	r3, r2
 8009840:	b29a      	uxth	r2, r3
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	3302      	adds	r3, #2
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	e00d      	b.n	800986a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009854:	b29b      	uxth	r3, r3
 8009856:	b2da      	uxtb	r2, r3
 8009858:	8a7b      	ldrh	r3, [r7, #18]
 800985a:	b2db      	uxtb	r3, r3
 800985c:	4013      	ands	r3, r2
 800985e:	b2da      	uxtb	r2, r3
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	3301      	adds	r3, #1
 8009868:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009870:	b29b      	uxth	r3, r3
 8009872:	3b01      	subs	r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009882:	b29b      	uxth	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1c1      	bne.n	800980c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2220      	movs	r2, #32
 800988c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	e000      	b.n	8009896 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8009894:	2302      	movs	r3, #2
  }
}
 8009896:	4618      	mov	r0, r3
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08a      	sub	sp, #40	; 0x28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	4613      	mov	r3, r2
 80098ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098b4:	2b20      	cmp	r3, #32
 80098b6:	d137      	bne.n	8009928 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <HAL_UART_Receive_IT+0x24>
 80098be:	88fb      	ldrh	r3, [r7, #6]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e030      	b.n	800992a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a18      	ldr	r2, [pc, #96]	; (8009934 <HAL_UART_Receive_IT+0x94>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d01f      	beq.n	8009918 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d018      	beq.n	8009918 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	e853 3f00 	ldrex	r3, [r3]
 80098f2:	613b      	str	r3, [r7, #16]
   return(result);
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	623b      	str	r3, [r7, #32]
 8009906:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	69f9      	ldr	r1, [r7, #28]
 800990a:	6a3a      	ldr	r2, [r7, #32]
 800990c:	e841 2300 	strex	r3, r2, [r1]
 8009910:	61bb      	str	r3, [r7, #24]
   return(result);
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e6      	bne.n	80098e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009918:	88fb      	ldrh	r3, [r7, #6]
 800991a:	461a      	mov	r2, r3
 800991c:	68b9      	ldr	r1, [r7, #8]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f001 f804 	bl	800a92c <UART_Start_Receive_IT>
 8009924:	4603      	mov	r3, r0
 8009926:	e000      	b.n	800992a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009928:	2302      	movs	r3, #2
  }
}
 800992a:	4618      	mov	r0, r3
 800992c:	3728      	adds	r7, #40	; 0x28
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	40008000 	.word	0x40008000

08009938 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	; 0x28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800994a:	2b20      	cmp	r3, #32
 800994c:	d165      	bne.n	8009a1a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <HAL_UART_Transmit_DMA+0x22>
 8009954:	88fb      	ldrh	r3, [r7, #6]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e05e      	b.n	8009a1c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	88fa      	ldrh	r2, [r7, #6]
 8009968:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	88fa      	ldrh	r2, [r7, #6]
 8009970:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2221      	movs	r2, #33	; 0x21
 8009980:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009986:	2b00      	cmp	r3, #0
 8009988:	d027      	beq.n	80099da <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998e:	4a25      	ldr	r2, [pc, #148]	; (8009a24 <HAL_UART_Transmit_DMA+0xec>)
 8009990:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	4a24      	ldr	r2, [pc, #144]	; (8009a28 <HAL_UART_Transmit_DMA+0xf0>)
 8009998:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999e:	4a23      	ldr	r2, [pc, #140]	; (8009a2c <HAL_UART_Transmit_DMA+0xf4>)
 80099a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a6:	2200      	movs	r2, #0
 80099a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b2:	4619      	mov	r1, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3328      	adds	r3, #40	; 0x28
 80099ba:	461a      	mov	r2, r3
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	f7fc f805 	bl	80059cc <HAL_DMA_Start_IT>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2210      	movs	r2, #16
 80099cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2220      	movs	r2, #32
 80099d4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e020      	b.n	8009a1c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2240      	movs	r2, #64	; 0x40
 80099e0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3308      	adds	r3, #8
 80099e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	e853 3f00 	ldrex	r3, [r3]
 80099f0:	613b      	str	r3, [r7, #16]
   return(result);
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3308      	adds	r3, #8
 8009a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a02:	623a      	str	r2, [r7, #32]
 8009a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	69f9      	ldr	r1, [r7, #28]
 8009a08:	6a3a      	ldr	r2, [r7, #32]
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e5      	bne.n	80099e2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	e000      	b.n	8009a1c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009a1a:	2302      	movs	r3, #2
  }
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3728      	adds	r7, #40	; 0x28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	0800abcd 	.word	0x0800abcd
 8009a28:	0800ac67 	.word	0x0800ac67
 8009a2c:	0800ac83 	.word	0x0800ac83

08009a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b0ba      	sub	sp, #232	; 0xe8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a5e:	4013      	ands	r3, r2
 8009a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d115      	bne.n	8009a98 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00f      	beq.n	8009a98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a7c:	f003 0320 	and.w	r3, r3, #32
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d009      	beq.n	8009a98 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 82ae 	beq.w	8009fea <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	4798      	blx	r3
      }
      return;
 8009a96:	e2a8      	b.n	8009fea <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8117 	beq.w	8009cd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009ab2:	4b85      	ldr	r3, [pc, #532]	; (8009cc8 <HAL_UART_IRQHandler+0x298>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 810a 	beq.w	8009cd0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d011      	beq.n	8009aec <HAL_UART_IRQHandler+0xbc>
 8009ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae2:	f043 0201 	orr.w	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d011      	beq.n	8009b1c <HAL_UART_IRQHandler+0xec>
 8009af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b12:	f043 0204 	orr.w	r2, r3, #4
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d011      	beq.n	8009b4c <HAL_UART_IRQHandler+0x11c>
 8009b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2204      	movs	r2, #4
 8009b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b42:	f043 0202 	orr.w	r2, r3, #2
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b50:	f003 0308 	and.w	r3, r3, #8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d017      	beq.n	8009b88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d105      	bne.n	8009b70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2208      	movs	r2, #8
 8009b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b7e:	f043 0208 	orr.w	r2, r3, #8
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d012      	beq.n	8009bba <HAL_UART_IRQHandler+0x18a>
 8009b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00c      	beq.n	8009bba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bb0:	f043 0220 	orr.w	r2, r3, #32
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8214 	beq.w	8009fee <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00d      	beq.n	8009bee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bd6:	f003 0320 	and.w	r3, r3, #32
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d007      	beq.n	8009bee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c02:	2b40      	cmp	r3, #64	; 0x40
 8009c04:	d005      	beq.n	8009c12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d04f      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 ff76 	bl	800ab04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c22:	2b40      	cmp	r3, #64	; 0x40
 8009c24:	d141      	bne.n	8009caa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1d9      	bne.n	8009c26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d013      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c7e:	4a13      	ldr	r2, [pc, #76]	; (8009ccc <HAL_UART_IRQHandler+0x29c>)
 8009c80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fb ff3e 	bl	8005b08 <HAL_DMA_Abort_IT>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d017      	beq.n	8009cc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca0:	e00f      	b.n	8009cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9c2 	bl	800a02c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca8:	e00b      	b.n	8009cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f9be 	bl	800a02c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb0:	e007      	b.n	8009cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f9ba 	bl	800a02c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009cc0:	e195      	b.n	8009fee <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc2:	bf00      	nop
    return;
 8009cc4:	e193      	b.n	8009fee <HAL_UART_IRQHandler+0x5be>
 8009cc6:	bf00      	nop
 8009cc8:	04000120 	.word	0x04000120
 8009ccc:	0800ad01 	.word	0x0800ad01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	f040 814e 	bne.w	8009f76 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cde:	f003 0310 	and.w	r3, r3, #16
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 8147 	beq.w	8009f76 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cec:	f003 0310 	and.w	r3, r3, #16
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 8140 	beq.w	8009f76 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2210      	movs	r2, #16
 8009cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d08:	2b40      	cmp	r3, #64	; 0x40
 8009d0a:	f040 80b8 	bne.w	8009e7e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 8167 	beq.w	8009ff2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	f080 815f 	bcs.w	8009ff2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f040 8086 	bne.w	8009e5c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	461a      	mov	r2, r3
 8009d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d8a:	e841 2300 	strex	r3, r2, [r1]
 8009d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1da      	bne.n	8009d50 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3308      	adds	r3, #8
 8009da0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dac:	f023 0301 	bic.w	r3, r3, #1
 8009db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3308      	adds	r3, #8
 8009dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009dbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e1      	bne.n	8009d9a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3308      	adds	r3, #8
 8009ddc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009dfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e02:	e841 2300 	strex	r3, r2, [r1]
 8009e06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1e3      	bne.n	8009dd6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e2c:	f023 0310 	bic.w	r3, r3, #16
 8009e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e40:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e4      	bne.n	8009e1c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fb fe18 	bl	8005a8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f8e2 	bl	800a040 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e7c:	e0b9      	b.n	8009ff2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 80ab 	beq.w	8009ff6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8009ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 80a6 	beq.w	8009ff6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	e853 3f00 	ldrex	r3, [r3]
 8009eb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8009ece:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e4      	bne.n	8009eaa <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	623b      	str	r3, [r7, #32]
   return(result);
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	f023 0301 	bic.w	r3, r3, #1
 8009ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3308      	adds	r3, #8
 8009f00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f04:	633a      	str	r2, [r7, #48]	; 0x30
 8009f06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f0c:	e841 2300 	strex	r3, r2, [r1]
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e3      	bne.n	8009ee0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f023 0310 	bic.w	r3, r3, #16
 8009f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f4e:	61fb      	str	r3, [r7, #28]
 8009f50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	69b9      	ldr	r1, [r7, #24]
 8009f54:	69fa      	ldr	r2, [r7, #28]
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e4      	bne.n	8009f2c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2202      	movs	r2, #2
 8009f66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f866 	bl	800a040 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f74:	e03f      	b.n	8009ff6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00e      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x570>
 8009f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d008      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 f8ad 	bl	800b0f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f9e:	e02d      	b.n	8009ffc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00e      	beq.n	8009fca <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d008      	beq.n	8009fca <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01c      	beq.n	8009ffa <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	4798      	blx	r3
    }
    return;
 8009fc8:	e017      	b.n	8009ffa <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d012      	beq.n	8009ffc <HAL_UART_IRQHandler+0x5cc>
 8009fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00c      	beq.n	8009ffc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fea2 	bl	800ad2c <UART_EndTransmit_IT>
    return;
 8009fe8:	e008      	b.n	8009ffc <HAL_UART_IRQHandler+0x5cc>
      return;
 8009fea:	bf00      	nop
 8009fec:	e006      	b.n	8009ffc <HAL_UART_IRQHandler+0x5cc>
    return;
 8009fee:	bf00      	nop
 8009ff0:	e004      	b.n	8009ffc <HAL_UART_IRQHandler+0x5cc>
      return;
 8009ff2:	bf00      	nop
 8009ff4:	e002      	b.n	8009ffc <HAL_UART_IRQHandler+0x5cc>
      return;
 8009ff6:	bf00      	nop
 8009ff8:	e000      	b.n	8009ffc <HAL_UART_IRQHandler+0x5cc>
    return;
 8009ffa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009ffc:	37e8      	adds	r7, #232	; 0xe8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop

0800a004 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a05c:	b08a      	sub	sp, #40	; 0x28
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	431a      	orrs	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	431a      	orrs	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	4ba4      	ldr	r3, [pc, #656]	; (800a318 <UART_SetConfig+0x2c0>)
 800a088:	4013      	ands	r3, r2
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	6812      	ldr	r2, [r2, #0]
 800a08e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a090:	430b      	orrs	r3, r1
 800a092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a99      	ldr	r2, [pc, #612]	; (800a31c <UART_SetConfig+0x2c4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d004      	beq.n	800a0c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a90      	ldr	r2, [pc, #576]	; (800a320 <UART_SetConfig+0x2c8>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d126      	bne.n	800a130 <UART_SetConfig+0xd8>
 800a0e2:	4b90      	ldr	r3, [pc, #576]	; (800a324 <UART_SetConfig+0x2cc>)
 800a0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d81b      	bhi.n	800a128 <UART_SetConfig+0xd0>
 800a0f0:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <UART_SetConfig+0xa0>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	0800a111 	.word	0x0800a111
 800a104:	0800a121 	.word	0x0800a121
 800a108:	2301      	movs	r3, #1
 800a10a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a10e:	e116      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a110:	2302      	movs	r3, #2
 800a112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a116:	e112      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a118:	2304      	movs	r3, #4
 800a11a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a11e:	e10e      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a120:	2308      	movs	r3, #8
 800a122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a126:	e10a      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a128:	2310      	movs	r3, #16
 800a12a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a12e:	e106      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a7c      	ldr	r2, [pc, #496]	; (800a328 <UART_SetConfig+0x2d0>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d138      	bne.n	800a1ac <UART_SetConfig+0x154>
 800a13a:	4b7a      	ldr	r3, [pc, #488]	; (800a324 <UART_SetConfig+0x2cc>)
 800a13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a140:	f003 030c 	and.w	r3, r3, #12
 800a144:	2b0c      	cmp	r3, #12
 800a146:	d82d      	bhi.n	800a1a4 <UART_SetConfig+0x14c>
 800a148:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <UART_SetConfig+0xf8>)
 800a14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14e:	bf00      	nop
 800a150:	0800a185 	.word	0x0800a185
 800a154:	0800a1a5 	.word	0x0800a1a5
 800a158:	0800a1a5 	.word	0x0800a1a5
 800a15c:	0800a1a5 	.word	0x0800a1a5
 800a160:	0800a195 	.word	0x0800a195
 800a164:	0800a1a5 	.word	0x0800a1a5
 800a168:	0800a1a5 	.word	0x0800a1a5
 800a16c:	0800a1a5 	.word	0x0800a1a5
 800a170:	0800a18d 	.word	0x0800a18d
 800a174:	0800a1a5 	.word	0x0800a1a5
 800a178:	0800a1a5 	.word	0x0800a1a5
 800a17c:	0800a1a5 	.word	0x0800a1a5
 800a180:	0800a19d 	.word	0x0800a19d
 800a184:	2300      	movs	r3, #0
 800a186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a18a:	e0d8      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a18c:	2302      	movs	r3, #2
 800a18e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a192:	e0d4      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a194:	2304      	movs	r3, #4
 800a196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a19a:	e0d0      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a19c:	2308      	movs	r3, #8
 800a19e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1a2:	e0cc      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1aa:	e0c8      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a5e      	ldr	r2, [pc, #376]	; (800a32c <UART_SetConfig+0x2d4>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d125      	bne.n	800a202 <UART_SetConfig+0x1aa>
 800a1b6:	4b5b      	ldr	r3, [pc, #364]	; (800a324 <UART_SetConfig+0x2cc>)
 800a1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1c0:	2b30      	cmp	r3, #48	; 0x30
 800a1c2:	d016      	beq.n	800a1f2 <UART_SetConfig+0x19a>
 800a1c4:	2b30      	cmp	r3, #48	; 0x30
 800a1c6:	d818      	bhi.n	800a1fa <UART_SetConfig+0x1a2>
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d00a      	beq.n	800a1e2 <UART_SetConfig+0x18a>
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d814      	bhi.n	800a1fa <UART_SetConfig+0x1a2>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <UART_SetConfig+0x182>
 800a1d4:	2b10      	cmp	r3, #16
 800a1d6:	d008      	beq.n	800a1ea <UART_SetConfig+0x192>
 800a1d8:	e00f      	b.n	800a1fa <UART_SetConfig+0x1a2>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1e0:	e0ad      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1e8:	e0a9      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1ea:	2304      	movs	r3, #4
 800a1ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1f0:	e0a5      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1f2:	2308      	movs	r3, #8
 800a1f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1f8:	e0a1      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1fa:	2310      	movs	r3, #16
 800a1fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a200:	e09d      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a4a      	ldr	r2, [pc, #296]	; (800a330 <UART_SetConfig+0x2d8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d125      	bne.n	800a258 <UART_SetConfig+0x200>
 800a20c:	4b45      	ldr	r3, [pc, #276]	; (800a324 <UART_SetConfig+0x2cc>)
 800a20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a212:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a216:	2bc0      	cmp	r3, #192	; 0xc0
 800a218:	d016      	beq.n	800a248 <UART_SetConfig+0x1f0>
 800a21a:	2bc0      	cmp	r3, #192	; 0xc0
 800a21c:	d818      	bhi.n	800a250 <UART_SetConfig+0x1f8>
 800a21e:	2b80      	cmp	r3, #128	; 0x80
 800a220:	d00a      	beq.n	800a238 <UART_SetConfig+0x1e0>
 800a222:	2b80      	cmp	r3, #128	; 0x80
 800a224:	d814      	bhi.n	800a250 <UART_SetConfig+0x1f8>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <UART_SetConfig+0x1d8>
 800a22a:	2b40      	cmp	r3, #64	; 0x40
 800a22c:	d008      	beq.n	800a240 <UART_SetConfig+0x1e8>
 800a22e:	e00f      	b.n	800a250 <UART_SetConfig+0x1f8>
 800a230:	2300      	movs	r3, #0
 800a232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a236:	e082      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a238:	2302      	movs	r3, #2
 800a23a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a23e:	e07e      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a240:	2304      	movs	r3, #4
 800a242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a246:	e07a      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a248:	2308      	movs	r3, #8
 800a24a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a24e:	e076      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a250:	2310      	movs	r3, #16
 800a252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a256:	e072      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a35      	ldr	r2, [pc, #212]	; (800a334 <UART_SetConfig+0x2dc>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d12a      	bne.n	800a2b8 <UART_SetConfig+0x260>
 800a262:	4b30      	ldr	r3, [pc, #192]	; (800a324 <UART_SetConfig+0x2cc>)
 800a264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a26c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a270:	d01a      	beq.n	800a2a8 <UART_SetConfig+0x250>
 800a272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a276:	d81b      	bhi.n	800a2b0 <UART_SetConfig+0x258>
 800a278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a27c:	d00c      	beq.n	800a298 <UART_SetConfig+0x240>
 800a27e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a282:	d815      	bhi.n	800a2b0 <UART_SetConfig+0x258>
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <UART_SetConfig+0x238>
 800a288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a28c:	d008      	beq.n	800a2a0 <UART_SetConfig+0x248>
 800a28e:	e00f      	b.n	800a2b0 <UART_SetConfig+0x258>
 800a290:	2300      	movs	r3, #0
 800a292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a296:	e052      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a298:	2302      	movs	r3, #2
 800a29a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a29e:	e04e      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2a6:	e04a      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2ae:	e046      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2b6:	e042      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a17      	ldr	r2, [pc, #92]	; (800a31c <UART_SetConfig+0x2c4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d13a      	bne.n	800a338 <UART_SetConfig+0x2e0>
 800a2c2:	4b18      	ldr	r3, [pc, #96]	; (800a324 <UART_SetConfig+0x2cc>)
 800a2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2d0:	d01a      	beq.n	800a308 <UART_SetConfig+0x2b0>
 800a2d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2d6:	d81b      	bhi.n	800a310 <UART_SetConfig+0x2b8>
 800a2d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2dc:	d00c      	beq.n	800a2f8 <UART_SetConfig+0x2a0>
 800a2de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2e2:	d815      	bhi.n	800a310 <UART_SetConfig+0x2b8>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <UART_SetConfig+0x298>
 800a2e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2ec:	d008      	beq.n	800a300 <UART_SetConfig+0x2a8>
 800a2ee:	e00f      	b.n	800a310 <UART_SetConfig+0x2b8>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2f6:	e022      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2fe:	e01e      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a300:	2304      	movs	r3, #4
 800a302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a306:	e01a      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a308:	2308      	movs	r3, #8
 800a30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a30e:	e016      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a310:	2310      	movs	r3, #16
 800a312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a316:	e012      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a318:	efff69f3 	.word	0xefff69f3
 800a31c:	40008000 	.word	0x40008000
 800a320:	40013800 	.word	0x40013800
 800a324:	40021000 	.word	0x40021000
 800a328:	40004400 	.word	0x40004400
 800a32c:	40004800 	.word	0x40004800
 800a330:	40004c00 	.word	0x40004c00
 800a334:	40005000 	.word	0x40005000
 800a338:	2310      	movs	r3, #16
 800a33a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a9f      	ldr	r2, [pc, #636]	; (800a5c0 <UART_SetConfig+0x568>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d17a      	bne.n	800a43e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d824      	bhi.n	800a39a <UART_SetConfig+0x342>
 800a350:	a201      	add	r2, pc, #4	; (adr r2, 800a358 <UART_SetConfig+0x300>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a37d 	.word	0x0800a37d
 800a35c:	0800a39b 	.word	0x0800a39b
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a39b 	.word	0x0800a39b
 800a368:	0800a38b 	.word	0x0800a38b
 800a36c:	0800a39b 	.word	0x0800a39b
 800a370:	0800a39b 	.word	0x0800a39b
 800a374:	0800a39b 	.word	0x0800a39b
 800a378:	0800a393 	.word	0x0800a393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a37c:	f7fc fdca 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 800a380:	61f8      	str	r0, [r7, #28]
        break;
 800a382:	e010      	b.n	800a3a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a384:	4b8f      	ldr	r3, [pc, #572]	; (800a5c4 <UART_SetConfig+0x56c>)
 800a386:	61fb      	str	r3, [r7, #28]
        break;
 800a388:	e00d      	b.n	800a3a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a38a:	f7fc fd2b 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 800a38e:	61f8      	str	r0, [r7, #28]
        break;
 800a390:	e009      	b.n	800a3a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a396:	61fb      	str	r3, [r7, #28]
        break;
 800a398:	e005      	b.n	800a3a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a3a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80fb 	beq.w	800a5a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d305      	bcc.n	800a3ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d903      	bls.n	800a3d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a3d0:	e0e8      	b.n	800a5a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	461c      	mov	r4, r3
 800a3d8:	4615      	mov	r5, r2
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	f04f 0300 	mov.w	r3, #0
 800a3e2:	022b      	lsls	r3, r5, #8
 800a3e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a3e8:	0222      	lsls	r2, r4, #8
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	6849      	ldr	r1, [r1, #4]
 800a3ee:	0849      	lsrs	r1, r1, #1
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	4688      	mov	r8, r1
 800a3f4:	4681      	mov	r9, r0
 800a3f6:	eb12 0a08 	adds.w	sl, r2, r8
 800a3fa:	eb43 0b09 	adc.w	fp, r3, r9
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	607a      	str	r2, [r7, #4]
 800a408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a40c:	4650      	mov	r0, sl
 800a40e:	4659      	mov	r1, fp
 800a410:	f7f6 fc1a 	bl	8000c48 <__aeabi_uldivmod>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4613      	mov	r3, r2
 800a41a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a422:	d308      	bcc.n	800a436 <UART_SetConfig+0x3de>
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a42a:	d204      	bcs.n	800a436 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	60da      	str	r2, [r3, #12]
 800a434:	e0b6      	b.n	800a5a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a43c:	e0b2      	b.n	800a5a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a446:	d15e      	bne.n	800a506 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d828      	bhi.n	800a4a2 <UART_SetConfig+0x44a>
 800a450:	a201      	add	r2, pc, #4	; (adr r2, 800a458 <UART_SetConfig+0x400>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a48d 	.word	0x0800a48d
 800a464:	0800a4a3 	.word	0x0800a4a3
 800a468:	0800a493 	.word	0x0800a493
 800a46c:	0800a4a3 	.word	0x0800a4a3
 800a470:	0800a4a3 	.word	0x0800a4a3
 800a474:	0800a4a3 	.word	0x0800a4a3
 800a478:	0800a49b 	.word	0x0800a49b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a47c:	f7fc fd4a 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 800a480:	61f8      	str	r0, [r7, #28]
        break;
 800a482:	e014      	b.n	800a4ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a484:	f7fc fd5c 	bl	8006f40 <HAL_RCC_GetPCLK2Freq>
 800a488:	61f8      	str	r0, [r7, #28]
        break;
 800a48a:	e010      	b.n	800a4ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a48c:	4b4d      	ldr	r3, [pc, #308]	; (800a5c4 <UART_SetConfig+0x56c>)
 800a48e:	61fb      	str	r3, [r7, #28]
        break;
 800a490:	e00d      	b.n	800a4ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a492:	f7fc fca7 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 800a496:	61f8      	str	r0, [r7, #28]
        break;
 800a498:	e009      	b.n	800a4ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49e:	61fb      	str	r3, [r7, #28]
        break;
 800a4a0:	e005      	b.n	800a4ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a4ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d077      	beq.n	800a5a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	005a      	lsls	r2, r3, #1
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	085b      	lsrs	r3, r3, #1
 800a4be:	441a      	add	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b0f      	cmp	r3, #15
 800a4ce:	d916      	bls.n	800a4fe <UART_SetConfig+0x4a6>
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4d6:	d212      	bcs.n	800a4fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f023 030f 	bic.w	r3, r3, #15
 800a4e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	f003 0307 	and.w	r3, r3, #7
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	8afb      	ldrh	r3, [r7, #22]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	8afa      	ldrh	r2, [r7, #22]
 800a4fa:	60da      	str	r2, [r3, #12]
 800a4fc:	e052      	b.n	800a5a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a504:	e04e      	b.n	800a5a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a50a:	2b08      	cmp	r3, #8
 800a50c:	d827      	bhi.n	800a55e <UART_SetConfig+0x506>
 800a50e:	a201      	add	r2, pc, #4	; (adr r2, 800a514 <UART_SetConfig+0x4bc>)
 800a510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a514:	0800a539 	.word	0x0800a539
 800a518:	0800a541 	.word	0x0800a541
 800a51c:	0800a549 	.word	0x0800a549
 800a520:	0800a55f 	.word	0x0800a55f
 800a524:	0800a54f 	.word	0x0800a54f
 800a528:	0800a55f 	.word	0x0800a55f
 800a52c:	0800a55f 	.word	0x0800a55f
 800a530:	0800a55f 	.word	0x0800a55f
 800a534:	0800a557 	.word	0x0800a557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a538:	f7fc fcec 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 800a53c:	61f8      	str	r0, [r7, #28]
        break;
 800a53e:	e014      	b.n	800a56a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a540:	f7fc fcfe 	bl	8006f40 <HAL_RCC_GetPCLK2Freq>
 800a544:	61f8      	str	r0, [r7, #28]
        break;
 800a546:	e010      	b.n	800a56a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a548:	4b1e      	ldr	r3, [pc, #120]	; (800a5c4 <UART_SetConfig+0x56c>)
 800a54a:	61fb      	str	r3, [r7, #28]
        break;
 800a54c:	e00d      	b.n	800a56a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a54e:	f7fc fc49 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 800a552:	61f8      	str	r0, [r7, #28]
        break;
 800a554:	e009      	b.n	800a56a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a55a:	61fb      	str	r3, [r7, #28]
        break;
 800a55c:	e005      	b.n	800a56a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a568:	bf00      	nop
    }

    if (pclk != 0U)
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d019      	beq.n	800a5a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	085a      	lsrs	r2, r3, #1
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	441a      	add	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a582:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	2b0f      	cmp	r3, #15
 800a588:	d909      	bls.n	800a59e <UART_SetConfig+0x546>
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a590:	d205      	bcs.n	800a59e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	b29a      	uxth	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60da      	str	r2, [r3, #12]
 800a59c:	e002      	b.n	800a5a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a5b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3728      	adds	r7, #40	; 0x28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5be:	bf00      	nop
 800a5c0:	40008000 	.word	0x40008000
 800a5c4:	00f42400 	.word	0x00f42400

0800a5c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	f003 0308 	and.w	r3, r3, #8
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00a      	beq.n	800a5f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	f003 0302 	and.w	r3, r3, #2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00a      	beq.n	800a636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63a:	f003 0304 	and.w	r3, r3, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00a      	beq.n	800a658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01a      	beq.n	800a6de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6c6:	d10a      	bne.n	800a6de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00a      	beq.n	800a700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	430a      	orrs	r2, r1
 800a6fe:	605a      	str	r2, [r3, #4]
  }
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b098      	sub	sp, #96	; 0x60
 800a710:	af02      	add	r7, sp, #8
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a71c:	f7f9 f9fc 	bl	8003b18 <HAL_GetTick>
 800a720:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0308 	and.w	r3, r3, #8
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d12e      	bne.n	800a78e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a738:	2200      	movs	r2, #0
 800a73a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f88c 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d021      	beq.n	800a78e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a75e:	653b      	str	r3, [r7, #80]	; 0x50
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	461a      	mov	r2, r3
 800a766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a768:	647b      	str	r3, [r7, #68]	; 0x44
 800a76a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a76e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a770:	e841 2300 	strex	r3, r2, [r1]
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e6      	bne.n	800a74a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2220      	movs	r2, #32
 800a780:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e062      	b.n	800a854 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d149      	bne.n	800a830 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a79c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f856 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d03c      	beq.n	800a830 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	e853 3f00 	ldrex	r3, [r3]
 800a7c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d4:	633b      	str	r3, [r7, #48]	; 0x30
 800a7d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7dc:	e841 2300 	strex	r3, r2, [r1]
 800a7e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e6      	bne.n	800a7b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	e853 3f00 	ldrex	r3, [r3]
 800a7f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f023 0301 	bic.w	r3, r3, #1
 800a7fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3308      	adds	r3, #8
 800a806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a808:	61fa      	str	r2, [r7, #28]
 800a80a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	69b9      	ldr	r1, [r7, #24]
 800a80e:	69fa      	ldr	r2, [r7, #28]
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	617b      	str	r3, [r7, #20]
   return(result);
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e5      	bne.n	800a7e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2220      	movs	r2, #32
 800a820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e011      	b.n	800a854 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2220      	movs	r2, #32
 800a83a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3758      	adds	r7, #88	; 0x58
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	4613      	mov	r3, r2
 800a86a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a86c:	e049      	b.n	800a902 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a874:	d045      	beq.n	800a902 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a876:	f7f9 f94f 	bl	8003b18 <HAL_GetTick>
 800a87a:	4602      	mov	r2, r0
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	69ba      	ldr	r2, [r7, #24]
 800a882:	429a      	cmp	r2, r3
 800a884:	d302      	bcc.n	800a88c <UART_WaitOnFlagUntilTimeout+0x30>
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e048      	b.n	800a922 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 0304 	and.w	r3, r3, #4
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d031      	beq.n	800a902 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	f003 0308 	and.w	r3, r3, #8
 800a8a8:	2b08      	cmp	r3, #8
 800a8aa:	d110      	bne.n	800a8ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2208      	movs	r2, #8
 800a8b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f000 f925 	bl	800ab04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2208      	movs	r2, #8
 800a8be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e029      	b.n	800a922 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8dc:	d111      	bne.n	800a902 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 f90b 	bl	800ab04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e00f      	b.n	800a922 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	69da      	ldr	r2, [r3, #28]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	4013      	ands	r3, r2
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	429a      	cmp	r2, r3
 800a910:	bf0c      	ite	eq
 800a912:	2301      	moveq	r3, #1
 800a914:	2300      	movne	r3, #0
 800a916:	b2db      	uxtb	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	79fb      	ldrb	r3, [r7, #7]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d0a6      	beq.n	800a86e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b097      	sub	sp, #92	; 0x5c
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4613      	mov	r3, r2
 800a938:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	88fa      	ldrh	r2, [r7, #6]
 800a944:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	88fa      	ldrh	r2, [r7, #6]
 800a94c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95e:	d10e      	bne.n	800a97e <UART_Start_Receive_IT+0x52>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d105      	bne.n	800a974 <UART_Start_Receive_IT+0x48>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a96e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a972:	e02d      	b.n	800a9d0 <UART_Start_Receive_IT+0xa4>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	22ff      	movs	r2, #255	; 0xff
 800a978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a97c:	e028      	b.n	800a9d0 <UART_Start_Receive_IT+0xa4>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10d      	bne.n	800a9a2 <UART_Start_Receive_IT+0x76>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d104      	bne.n	800a998 <UART_Start_Receive_IT+0x6c>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	22ff      	movs	r2, #255	; 0xff
 800a992:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a996:	e01b      	b.n	800a9d0 <UART_Start_Receive_IT+0xa4>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	227f      	movs	r2, #127	; 0x7f
 800a99c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9a0:	e016      	b.n	800a9d0 <UART_Start_Receive_IT+0xa4>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9aa:	d10d      	bne.n	800a9c8 <UART_Start_Receive_IT+0x9c>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d104      	bne.n	800a9be <UART_Start_Receive_IT+0x92>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	227f      	movs	r2, #127	; 0x7f
 800a9b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9bc:	e008      	b.n	800a9d0 <UART_Start_Receive_IT+0xa4>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	223f      	movs	r2, #63	; 0x3f
 800a9c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9c6:	e003      	b.n	800a9d0 <UART_Start_Receive_IT+0xa4>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2222      	movs	r2, #34	; 0x22
 800a9dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ea:	e853 3f00 	ldrex	r3, [r3]
 800a9ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	f043 0301 	orr.w	r3, r3, #1
 800a9f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa00:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e5      	bne.n	800a9e0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1c:	d107      	bne.n	800aa2e <UART_Start_Receive_IT+0x102>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d103      	bne.n	800aa2e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	4a21      	ldr	r2, [pc, #132]	; (800aab0 <UART_Start_Receive_IT+0x184>)
 800aa2a:	669a      	str	r2, [r3, #104]	; 0x68
 800aa2c:	e002      	b.n	800aa34 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4a20      	ldr	r2, [pc, #128]	; (800aab4 <UART_Start_Receive_IT+0x188>)
 800aa32:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d019      	beq.n	800aa70 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	e853 3f00 	ldrex	r3, [r3]
 800aa48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800aa50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa62:	e841 2300 	strex	r3, r2, [r1]
 800aa66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e6      	bne.n	800aa3c <UART_Start_Receive_IT+0x110>
 800aa6e:	e018      	b.n	800aaa2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f043 0320 	orr.w	r3, r3, #32
 800aa84:	653b      	str	r3, [r7, #80]	; 0x50
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa8e:	623b      	str	r3, [r7, #32]
 800aa90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	69f9      	ldr	r1, [r7, #28]
 800aa94:	6a3a      	ldr	r2, [r7, #32]
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e6      	bne.n	800aa70 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	375c      	adds	r7, #92	; 0x5c
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	0800af3d 	.word	0x0800af3d
 800aab4:	0800ad81 	.word	0x0800ad81

0800aab8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b089      	sub	sp, #36	; 0x24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	e853 3f00 	ldrex	r3, [r3]
 800aacc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aad4:	61fb      	str	r3, [r7, #28]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	61bb      	str	r3, [r7, #24]
 800aae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae2:	6979      	ldr	r1, [r7, #20]
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	e841 2300 	strex	r3, r2, [r1]
 800aaea:	613b      	str	r3, [r7, #16]
   return(result);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1e6      	bne.n	800aac0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2220      	movs	r2, #32
 800aaf6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800aaf8:	bf00      	nop
 800aafa:	3724      	adds	r7, #36	; 0x24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b095      	sub	sp, #84	; 0x54
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab14:	e853 3f00 	ldrex	r3, [r3]
 800ab18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab2a:	643b      	str	r3, [r7, #64]	; 0x40
 800ab2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab32:	e841 2300 	strex	r3, r2, [r1]
 800ab36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1e6      	bne.n	800ab0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3308      	adds	r3, #8
 800ab44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	f023 0301 	bic.w	r3, r3, #1
 800ab54:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3308      	adds	r3, #8
 800ab5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e5      	bne.n	800ab3e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d118      	bne.n	800abac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	e853 3f00 	ldrex	r3, [r3]
 800ab86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f023 0310 	bic.w	r3, r3, #16
 800ab8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab98:	61bb      	str	r3, [r7, #24]
 800ab9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9c:	6979      	ldr	r1, [r7, #20]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	e841 2300 	strex	r3, r2, [r1]
 800aba4:	613b      	str	r3, [r7, #16]
   return(result);
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e6      	bne.n	800ab7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2220      	movs	r2, #32
 800abb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	669a      	str	r2, [r3, #104]	; 0x68
}
 800abc0:	bf00      	nop
 800abc2:	3754      	adds	r7, #84	; 0x54
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b090      	sub	sp, #64	; 0x40
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d137      	bne.n	800ac58 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800abe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abea:	2200      	movs	r2, #0
 800abec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3308      	adds	r3, #8
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	e853 3f00 	ldrex	r3, [r3]
 800abfe:	623b      	str	r3, [r7, #32]
   return(result);
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac06:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac10:	633a      	str	r2, [r7, #48]	; 0x30
 800ac12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac18:	e841 2300 	strex	r3, r2, [r1]
 800ac1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1e5      	bne.n	800abf0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac38:	637b      	str	r3, [r7, #52]	; 0x34
 800ac3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac42:	61fb      	str	r3, [r7, #28]
 800ac44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	69b9      	ldr	r1, [r7, #24]
 800ac48:	69fa      	ldr	r2, [r7, #28]
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	617b      	str	r3, [r7, #20]
   return(result);
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e6      	bne.n	800ac24 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac56:	e002      	b.n	800ac5e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ac58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac5a:	f7ff f9d3 	bl	800a004 <HAL_UART_TxCpltCallback>
}
 800ac5e:	bf00      	nop
 800ac60:	3740      	adds	r7, #64	; 0x40
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b084      	sub	sp, #16
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f7ff f9cf 	bl	800a018 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac7a:	bf00      	nop
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b086      	sub	sp, #24
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca8:	2b80      	cmp	r3, #128	; 0x80
 800acaa:	d109      	bne.n	800acc0 <UART_DMAError+0x3e>
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	2b21      	cmp	r3, #33	; 0x21
 800acb0:	d106      	bne.n	800acc0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800acba:	6978      	ldr	r0, [r7, #20]
 800acbc:	f7ff fefc 	bl	800aab8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acca:	2b40      	cmp	r3, #64	; 0x40
 800accc:	d109      	bne.n	800ace2 <UART_DMAError+0x60>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b22      	cmp	r3, #34	; 0x22
 800acd2:	d106      	bne.n	800ace2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800acdc:	6978      	ldr	r0, [r7, #20]
 800acde:	f7ff ff11 	bl	800ab04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ace8:	f043 0210 	orr.w	r2, r3, #16
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acf2:	6978      	ldr	r0, [r7, #20]
 800acf4:	f7ff f99a 	bl	800a02c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acf8:	bf00      	nop
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7ff f984 	bl	800a02c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad24:	bf00      	nop
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad48:	61fb      	str	r3, [r7, #28]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	61bb      	str	r3, [r7, #24]
 800ad54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6979      	ldr	r1, [r7, #20]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e6      	bne.n	800ad34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff f946 	bl	800a004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad78:	bf00      	nop
 800ad7a:	3720      	adds	r7, #32
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b09c      	sub	sp, #112	; 0x70
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad8e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad98:	2b22      	cmp	r3, #34	; 0x22
 800ad9a:	f040 80be 	bne.w	800af1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ada4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ada8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800adac:	b2d9      	uxtb	r1, r3
 800adae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb8:	400a      	ands	r2, r1
 800adba:	b2d2      	uxtb	r2, r2
 800adbc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800adce:	b29b      	uxth	r3, r3
 800add0:	3b01      	subs	r3, #1
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f040 80a3 	bne.w	800af2e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf0:	e853 3f00 	ldrex	r3, [r3]
 800adf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adfc:	66bb      	str	r3, [r7, #104]	; 0x68
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	461a      	mov	r2, r3
 800ae04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae06:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e6      	bne.n	800ade8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3308      	adds	r3, #8
 800ae20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	e853 3f00 	ldrex	r3, [r3]
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2c:	f023 0301 	bic.w	r3, r3, #1
 800ae30:	667b      	str	r3, [r7, #100]	; 0x64
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3308      	adds	r3, #8
 800ae38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae3a:	647a      	str	r2, [r7, #68]	; 0x44
 800ae3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1e5      	bne.n	800ae1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2220      	movs	r2, #32
 800ae52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a34      	ldr	r2, [pc, #208]	; (800af38 <UART_RxISR_8BIT+0x1b8>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d01f      	beq.n	800aeac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d018      	beq.n	800aeac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	e853 3f00 	ldrex	r3, [r3]
 800ae86:	623b      	str	r3, [r7, #32]
   return(result);
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae8e:	663b      	str	r3, [r7, #96]	; 0x60
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	461a      	mov	r2, r3
 800ae96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae98:	633b      	str	r3, [r7, #48]	; 0x30
 800ae9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea0:	e841 2300 	strex	r3, r2, [r1]
 800aea4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e6      	bne.n	800ae7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d12e      	bne.n	800af12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	e853 3f00 	ldrex	r3, [r3]
 800aec6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 0310 	bic.w	r3, r3, #16
 800aece:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	461a      	mov	r2, r3
 800aed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aed8:	61fb      	str	r3, [r7, #28]
 800aeda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aedc:	69b9      	ldr	r1, [r7, #24]
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	e841 2300 	strex	r3, r2, [r1]
 800aee4:	617b      	str	r3, [r7, #20]
   return(result);
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e6      	bne.n	800aeba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	f003 0310 	and.w	r3, r3, #16
 800aef6:	2b10      	cmp	r3, #16
 800aef8:	d103      	bne.n	800af02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2210      	movs	r2, #16
 800af00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff f898 	bl	800a040 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af10:	e00d      	b.n	800af2e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7f7 fcf4 	bl	8002900 <HAL_UART_RxCpltCallback>
}
 800af18:	e009      	b.n	800af2e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	8b1b      	ldrh	r3, [r3, #24]
 800af20:	b29a      	uxth	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 0208 	orr.w	r2, r2, #8
 800af2a:	b292      	uxth	r2, r2
 800af2c:	831a      	strh	r2, [r3, #24]
}
 800af2e:	bf00      	nop
 800af30:	3770      	adds	r7, #112	; 0x70
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	40008000 	.word	0x40008000

0800af3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b09c      	sub	sp, #112	; 0x70
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af54:	2b22      	cmp	r3, #34	; 0x22
 800af56:	f040 80be 	bne.w	800b0d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800af60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af68:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800af6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800af6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800af72:	4013      	ands	r3, r2
 800af74:	b29a      	uxth	r2, r3
 800af76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af7e:	1c9a      	adds	r2, r3, #2
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	3b01      	subs	r3, #1
 800af8e:	b29a      	uxth	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f040 80a3 	bne.w	800b0ea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800afb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afb8:	667b      	str	r3, [r7, #100]	; 0x64
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc2:	657b      	str	r3, [r7, #84]	; 0x54
 800afc4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800afd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e6      	bne.n	800afa4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	f023 0301 	bic.w	r3, r3, #1
 800afec:	663b      	str	r3, [r7, #96]	; 0x60
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3308      	adds	r3, #8
 800aff4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aff6:	643a      	str	r2, [r7, #64]	; 0x40
 800aff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800affc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e5      	bne.n	800afd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a34      	ldr	r2, [pc, #208]	; (800b0f4 <UART_RxISR_16BIT+0x1b8>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d01f      	beq.n	800b068 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d018      	beq.n	800b068 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	6a3b      	ldr	r3, [r7, #32]
 800b03e:	e853 3f00 	ldrex	r3, [r3]
 800b042:	61fb      	str	r3, [r7, #28]
   return(result);
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b04a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	461a      	mov	r2, r3
 800b052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b054:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b056:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b05a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b05c:	e841 2300 	strex	r3, r2, [r1]
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e6      	bne.n	800b036 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d12e      	bne.n	800b0ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	e853 3f00 	ldrex	r3, [r3]
 800b082:	60bb      	str	r3, [r7, #8]
   return(result);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	f023 0310 	bic.w	r3, r3, #16
 800b08a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	461a      	mov	r2, r3
 800b092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b094:	61bb      	str	r3, [r7, #24]
 800b096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b098:	6979      	ldr	r1, [r7, #20]
 800b09a:	69ba      	ldr	r2, [r7, #24]
 800b09c:	e841 2300 	strex	r3, r2, [r1]
 800b0a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e6      	bne.n	800b076 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	f003 0310 	and.w	r3, r3, #16
 800b0b2:	2b10      	cmp	r3, #16
 800b0b4:	d103      	bne.n	800b0be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2210      	movs	r2, #16
 800b0bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7fe ffba 	bl	800a040 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0cc:	e00d      	b.n	800b0ea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7f7 fc16 	bl	8002900 <HAL_UART_RxCpltCallback>
}
 800b0d4:	e009      	b.n	800b0ea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	8b1b      	ldrh	r3, [r3, #24]
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f042 0208 	orr.w	r2, r2, #8
 800b0e6:	b292      	uxth	r2, r2
 800b0e8:	831a      	strh	r2, [r3, #24]
}
 800b0ea:	bf00      	nop
 800b0ec:	3770      	adds	r7, #112	; 0x70
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	40008000 	.word	0x40008000

0800b0f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <atoi>:
 800b10c:	220a      	movs	r2, #10
 800b10e:	2100      	movs	r1, #0
 800b110:	f000 b882 	b.w	800b218 <strtol>

0800b114 <_strtol_l.constprop.0>:
 800b114:	2b01      	cmp	r3, #1
 800b116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11a:	d001      	beq.n	800b120 <_strtol_l.constprop.0+0xc>
 800b11c:	2b24      	cmp	r3, #36	; 0x24
 800b11e:	d906      	bls.n	800b12e <_strtol_l.constprop.0+0x1a>
 800b120:	f000 fe74 	bl	800be0c <__errno>
 800b124:	2316      	movs	r3, #22
 800b126:	6003      	str	r3, [r0, #0]
 800b128:	2000      	movs	r0, #0
 800b12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b12e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b214 <_strtol_l.constprop.0+0x100>
 800b132:	460d      	mov	r5, r1
 800b134:	462e      	mov	r6, r5
 800b136:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b13a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b13e:	f017 0708 	ands.w	r7, r7, #8
 800b142:	d1f7      	bne.n	800b134 <_strtol_l.constprop.0+0x20>
 800b144:	2c2d      	cmp	r4, #45	; 0x2d
 800b146:	d132      	bne.n	800b1ae <_strtol_l.constprop.0+0x9a>
 800b148:	782c      	ldrb	r4, [r5, #0]
 800b14a:	2701      	movs	r7, #1
 800b14c:	1cb5      	adds	r5, r6, #2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d05b      	beq.n	800b20a <_strtol_l.constprop.0+0xf6>
 800b152:	2b10      	cmp	r3, #16
 800b154:	d109      	bne.n	800b16a <_strtol_l.constprop.0+0x56>
 800b156:	2c30      	cmp	r4, #48	; 0x30
 800b158:	d107      	bne.n	800b16a <_strtol_l.constprop.0+0x56>
 800b15a:	782c      	ldrb	r4, [r5, #0]
 800b15c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b160:	2c58      	cmp	r4, #88	; 0x58
 800b162:	d14d      	bne.n	800b200 <_strtol_l.constprop.0+0xec>
 800b164:	786c      	ldrb	r4, [r5, #1]
 800b166:	2310      	movs	r3, #16
 800b168:	3502      	adds	r5, #2
 800b16a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b16e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b172:	f04f 0e00 	mov.w	lr, #0
 800b176:	fbb8 f9f3 	udiv	r9, r8, r3
 800b17a:	4676      	mov	r6, lr
 800b17c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b180:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b184:	f1bc 0f09 	cmp.w	ip, #9
 800b188:	d816      	bhi.n	800b1b8 <_strtol_l.constprop.0+0xa4>
 800b18a:	4664      	mov	r4, ip
 800b18c:	42a3      	cmp	r3, r4
 800b18e:	dd24      	ble.n	800b1da <_strtol_l.constprop.0+0xc6>
 800b190:	f1be 3fff 	cmp.w	lr, #4294967295
 800b194:	d008      	beq.n	800b1a8 <_strtol_l.constprop.0+0x94>
 800b196:	45b1      	cmp	r9, r6
 800b198:	d31c      	bcc.n	800b1d4 <_strtol_l.constprop.0+0xc0>
 800b19a:	d101      	bne.n	800b1a0 <_strtol_l.constprop.0+0x8c>
 800b19c:	45a2      	cmp	sl, r4
 800b19e:	db19      	blt.n	800b1d4 <_strtol_l.constprop.0+0xc0>
 800b1a0:	fb06 4603 	mla	r6, r6, r3, r4
 800b1a4:	f04f 0e01 	mov.w	lr, #1
 800b1a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1ac:	e7e8      	b.n	800b180 <_strtol_l.constprop.0+0x6c>
 800b1ae:	2c2b      	cmp	r4, #43	; 0x2b
 800b1b0:	bf04      	itt	eq
 800b1b2:	782c      	ldrbeq	r4, [r5, #0]
 800b1b4:	1cb5      	addeq	r5, r6, #2
 800b1b6:	e7ca      	b.n	800b14e <_strtol_l.constprop.0+0x3a>
 800b1b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b1bc:	f1bc 0f19 	cmp.w	ip, #25
 800b1c0:	d801      	bhi.n	800b1c6 <_strtol_l.constprop.0+0xb2>
 800b1c2:	3c37      	subs	r4, #55	; 0x37
 800b1c4:	e7e2      	b.n	800b18c <_strtol_l.constprop.0+0x78>
 800b1c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b1ca:	f1bc 0f19 	cmp.w	ip, #25
 800b1ce:	d804      	bhi.n	800b1da <_strtol_l.constprop.0+0xc6>
 800b1d0:	3c57      	subs	r4, #87	; 0x57
 800b1d2:	e7db      	b.n	800b18c <_strtol_l.constprop.0+0x78>
 800b1d4:	f04f 3eff 	mov.w	lr, #4294967295
 800b1d8:	e7e6      	b.n	800b1a8 <_strtol_l.constprop.0+0x94>
 800b1da:	f1be 3fff 	cmp.w	lr, #4294967295
 800b1de:	d105      	bne.n	800b1ec <_strtol_l.constprop.0+0xd8>
 800b1e0:	2322      	movs	r3, #34	; 0x22
 800b1e2:	6003      	str	r3, [r0, #0]
 800b1e4:	4646      	mov	r6, r8
 800b1e6:	b942      	cbnz	r2, 800b1fa <_strtol_l.constprop.0+0xe6>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	e79e      	b.n	800b12a <_strtol_l.constprop.0+0x16>
 800b1ec:	b107      	cbz	r7, 800b1f0 <_strtol_l.constprop.0+0xdc>
 800b1ee:	4276      	negs	r6, r6
 800b1f0:	2a00      	cmp	r2, #0
 800b1f2:	d0f9      	beq.n	800b1e8 <_strtol_l.constprop.0+0xd4>
 800b1f4:	f1be 0f00 	cmp.w	lr, #0
 800b1f8:	d000      	beq.n	800b1fc <_strtol_l.constprop.0+0xe8>
 800b1fa:	1e69      	subs	r1, r5, #1
 800b1fc:	6011      	str	r1, [r2, #0]
 800b1fe:	e7f3      	b.n	800b1e8 <_strtol_l.constprop.0+0xd4>
 800b200:	2430      	movs	r4, #48	; 0x30
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1b1      	bne.n	800b16a <_strtol_l.constprop.0+0x56>
 800b206:	2308      	movs	r3, #8
 800b208:	e7af      	b.n	800b16a <_strtol_l.constprop.0+0x56>
 800b20a:	2c30      	cmp	r4, #48	; 0x30
 800b20c:	d0a5      	beq.n	800b15a <_strtol_l.constprop.0+0x46>
 800b20e:	230a      	movs	r3, #10
 800b210:	e7ab      	b.n	800b16a <_strtol_l.constprop.0+0x56>
 800b212:	bf00      	nop
 800b214:	0800e091 	.word	0x0800e091

0800b218 <strtol>:
 800b218:	4613      	mov	r3, r2
 800b21a:	460a      	mov	r2, r1
 800b21c:	4601      	mov	r1, r0
 800b21e:	4802      	ldr	r0, [pc, #8]	; (800b228 <strtol+0x10>)
 800b220:	6800      	ldr	r0, [r0, #0]
 800b222:	f7ff bf77 	b.w	800b114 <_strtol_l.constprop.0>
 800b226:	bf00      	nop
 800b228:	20000164 	.word	0x20000164

0800b22c <__cvt>:
 800b22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b230:	ec55 4b10 	vmov	r4, r5, d0
 800b234:	2d00      	cmp	r5, #0
 800b236:	460e      	mov	r6, r1
 800b238:	4619      	mov	r1, r3
 800b23a:	462b      	mov	r3, r5
 800b23c:	bfbb      	ittet	lt
 800b23e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b242:	461d      	movlt	r5, r3
 800b244:	2300      	movge	r3, #0
 800b246:	232d      	movlt	r3, #45	; 0x2d
 800b248:	700b      	strb	r3, [r1, #0]
 800b24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b24c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b250:	4691      	mov	r9, r2
 800b252:	f023 0820 	bic.w	r8, r3, #32
 800b256:	bfbc      	itt	lt
 800b258:	4622      	movlt	r2, r4
 800b25a:	4614      	movlt	r4, r2
 800b25c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b260:	d005      	beq.n	800b26e <__cvt+0x42>
 800b262:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b266:	d100      	bne.n	800b26a <__cvt+0x3e>
 800b268:	3601      	adds	r6, #1
 800b26a:	2102      	movs	r1, #2
 800b26c:	e000      	b.n	800b270 <__cvt+0x44>
 800b26e:	2103      	movs	r1, #3
 800b270:	ab03      	add	r3, sp, #12
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	ab02      	add	r3, sp, #8
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	ec45 4b10 	vmov	d0, r4, r5
 800b27c:	4653      	mov	r3, sl
 800b27e:	4632      	mov	r2, r6
 800b280:	f000 fe8a 	bl	800bf98 <_dtoa_r>
 800b284:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b288:	4607      	mov	r7, r0
 800b28a:	d102      	bne.n	800b292 <__cvt+0x66>
 800b28c:	f019 0f01 	tst.w	r9, #1
 800b290:	d022      	beq.n	800b2d8 <__cvt+0xac>
 800b292:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b296:	eb07 0906 	add.w	r9, r7, r6
 800b29a:	d110      	bne.n	800b2be <__cvt+0x92>
 800b29c:	783b      	ldrb	r3, [r7, #0]
 800b29e:	2b30      	cmp	r3, #48	; 0x30
 800b2a0:	d10a      	bne.n	800b2b8 <__cvt+0x8c>
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ae:	b918      	cbnz	r0, 800b2b8 <__cvt+0x8c>
 800b2b0:	f1c6 0601 	rsb	r6, r6, #1
 800b2b4:	f8ca 6000 	str.w	r6, [sl]
 800b2b8:	f8da 3000 	ldr.w	r3, [sl]
 800b2bc:	4499      	add	r9, r3
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	f7f5 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ca:	b108      	cbz	r0, 800b2d0 <__cvt+0xa4>
 800b2cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2d0:	2230      	movs	r2, #48	; 0x30
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	454b      	cmp	r3, r9
 800b2d6:	d307      	bcc.n	800b2e8 <__cvt+0xbc>
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2dc:	1bdb      	subs	r3, r3, r7
 800b2de:	4638      	mov	r0, r7
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	b004      	add	sp, #16
 800b2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e8:	1c59      	adds	r1, r3, #1
 800b2ea:	9103      	str	r1, [sp, #12]
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	e7f0      	b.n	800b2d2 <__cvt+0xa6>

0800b2f0 <__exponent>:
 800b2f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	bfb8      	it	lt
 800b2f8:	4249      	neglt	r1, r1
 800b2fa:	f803 2b02 	strb.w	r2, [r3], #2
 800b2fe:	bfb4      	ite	lt
 800b300:	222d      	movlt	r2, #45	; 0x2d
 800b302:	222b      	movge	r2, #43	; 0x2b
 800b304:	2909      	cmp	r1, #9
 800b306:	7042      	strb	r2, [r0, #1]
 800b308:	dd2a      	ble.n	800b360 <__exponent+0x70>
 800b30a:	f10d 0207 	add.w	r2, sp, #7
 800b30e:	4617      	mov	r7, r2
 800b310:	260a      	movs	r6, #10
 800b312:	4694      	mov	ip, r2
 800b314:	fb91 f5f6 	sdiv	r5, r1, r6
 800b318:	fb06 1415 	mls	r4, r6, r5, r1
 800b31c:	3430      	adds	r4, #48	; 0x30
 800b31e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b322:	460c      	mov	r4, r1
 800b324:	2c63      	cmp	r4, #99	; 0x63
 800b326:	f102 32ff 	add.w	r2, r2, #4294967295
 800b32a:	4629      	mov	r1, r5
 800b32c:	dcf1      	bgt.n	800b312 <__exponent+0x22>
 800b32e:	3130      	adds	r1, #48	; 0x30
 800b330:	f1ac 0402 	sub.w	r4, ip, #2
 800b334:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b338:	1c41      	adds	r1, r0, #1
 800b33a:	4622      	mov	r2, r4
 800b33c:	42ba      	cmp	r2, r7
 800b33e:	d30a      	bcc.n	800b356 <__exponent+0x66>
 800b340:	f10d 0209 	add.w	r2, sp, #9
 800b344:	eba2 020c 	sub.w	r2, r2, ip
 800b348:	42bc      	cmp	r4, r7
 800b34a:	bf88      	it	hi
 800b34c:	2200      	movhi	r2, #0
 800b34e:	4413      	add	r3, r2
 800b350:	1a18      	subs	r0, r3, r0
 800b352:	b003      	add	sp, #12
 800b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b356:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b35a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b35e:	e7ed      	b.n	800b33c <__exponent+0x4c>
 800b360:	2330      	movs	r3, #48	; 0x30
 800b362:	3130      	adds	r1, #48	; 0x30
 800b364:	7083      	strb	r3, [r0, #2]
 800b366:	70c1      	strb	r1, [r0, #3]
 800b368:	1d03      	adds	r3, r0, #4
 800b36a:	e7f1      	b.n	800b350 <__exponent+0x60>

0800b36c <_printf_float>:
 800b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	ed2d 8b02 	vpush	{d8}
 800b374:	b08d      	sub	sp, #52	; 0x34
 800b376:	460c      	mov	r4, r1
 800b378:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b37c:	4616      	mov	r6, r2
 800b37e:	461f      	mov	r7, r3
 800b380:	4605      	mov	r5, r0
 800b382:	f000 fcf9 	bl	800bd78 <_localeconv_r>
 800b386:	f8d0 a000 	ldr.w	sl, [r0]
 800b38a:	4650      	mov	r0, sl
 800b38c:	f7f4 ff70 	bl	8000270 <strlen>
 800b390:	2300      	movs	r3, #0
 800b392:	930a      	str	r3, [sp, #40]	; 0x28
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	9305      	str	r3, [sp, #20]
 800b398:	f8d8 3000 	ldr.w	r3, [r8]
 800b39c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b3a0:	3307      	adds	r3, #7
 800b3a2:	f023 0307 	bic.w	r3, r3, #7
 800b3a6:	f103 0208 	add.w	r2, r3, #8
 800b3aa:	f8c8 2000 	str.w	r2, [r8]
 800b3ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3b6:	9307      	str	r3, [sp, #28]
 800b3b8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3bc:	ee08 0a10 	vmov	s16, r0
 800b3c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b3c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3c8:	4b9e      	ldr	r3, [pc, #632]	; (800b644 <_printf_float+0x2d8>)
 800b3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ce:	f7f5 fbad 	bl	8000b2c <__aeabi_dcmpun>
 800b3d2:	bb88      	cbnz	r0, 800b438 <_printf_float+0xcc>
 800b3d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3d8:	4b9a      	ldr	r3, [pc, #616]	; (800b644 <_printf_float+0x2d8>)
 800b3da:	f04f 32ff 	mov.w	r2, #4294967295
 800b3de:	f7f5 fb87 	bl	8000af0 <__aeabi_dcmple>
 800b3e2:	bb48      	cbnz	r0, 800b438 <_printf_float+0xcc>
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	f7f5 fb76 	bl	8000adc <__aeabi_dcmplt>
 800b3f0:	b110      	cbz	r0, 800b3f8 <_printf_float+0x8c>
 800b3f2:	232d      	movs	r3, #45	; 0x2d
 800b3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3f8:	4a93      	ldr	r2, [pc, #588]	; (800b648 <_printf_float+0x2dc>)
 800b3fa:	4b94      	ldr	r3, [pc, #592]	; (800b64c <_printf_float+0x2e0>)
 800b3fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b400:	bf94      	ite	ls
 800b402:	4690      	movls	r8, r2
 800b404:	4698      	movhi	r8, r3
 800b406:	2303      	movs	r3, #3
 800b408:	6123      	str	r3, [r4, #16]
 800b40a:	9b05      	ldr	r3, [sp, #20]
 800b40c:	f023 0304 	bic.w	r3, r3, #4
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	f04f 0900 	mov.w	r9, #0
 800b416:	9700      	str	r7, [sp, #0]
 800b418:	4633      	mov	r3, r6
 800b41a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b41c:	4621      	mov	r1, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 f9da 	bl	800b7d8 <_printf_common>
 800b424:	3001      	adds	r0, #1
 800b426:	f040 8090 	bne.w	800b54a <_printf_float+0x1de>
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	b00d      	add	sp, #52	; 0x34
 800b430:	ecbd 8b02 	vpop	{d8}
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	4642      	mov	r2, r8
 800b43a:	464b      	mov	r3, r9
 800b43c:	4640      	mov	r0, r8
 800b43e:	4649      	mov	r1, r9
 800b440:	f7f5 fb74 	bl	8000b2c <__aeabi_dcmpun>
 800b444:	b140      	cbz	r0, 800b458 <_printf_float+0xec>
 800b446:	464b      	mov	r3, r9
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bfbc      	itt	lt
 800b44c:	232d      	movlt	r3, #45	; 0x2d
 800b44e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b452:	4a7f      	ldr	r2, [pc, #508]	; (800b650 <_printf_float+0x2e4>)
 800b454:	4b7f      	ldr	r3, [pc, #508]	; (800b654 <_printf_float+0x2e8>)
 800b456:	e7d1      	b.n	800b3fc <_printf_float+0x90>
 800b458:	6863      	ldr	r3, [r4, #4]
 800b45a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b45e:	9206      	str	r2, [sp, #24]
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	d13f      	bne.n	800b4e4 <_printf_float+0x178>
 800b464:	2306      	movs	r3, #6
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	9b05      	ldr	r3, [sp, #20]
 800b46a:	6861      	ldr	r1, [r4, #4]
 800b46c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b470:	2300      	movs	r3, #0
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	ab0a      	add	r3, sp, #40	; 0x28
 800b476:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b47a:	ab09      	add	r3, sp, #36	; 0x24
 800b47c:	ec49 8b10 	vmov	d0, r8, r9
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b488:	4628      	mov	r0, r5
 800b48a:	f7ff fecf 	bl	800b22c <__cvt>
 800b48e:	9b06      	ldr	r3, [sp, #24]
 800b490:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b492:	2b47      	cmp	r3, #71	; 0x47
 800b494:	4680      	mov	r8, r0
 800b496:	d108      	bne.n	800b4aa <_printf_float+0x13e>
 800b498:	1cc8      	adds	r0, r1, #3
 800b49a:	db02      	blt.n	800b4a2 <_printf_float+0x136>
 800b49c:	6863      	ldr	r3, [r4, #4]
 800b49e:	4299      	cmp	r1, r3
 800b4a0:	dd41      	ble.n	800b526 <_printf_float+0x1ba>
 800b4a2:	f1ab 0302 	sub.w	r3, fp, #2
 800b4a6:	fa5f fb83 	uxtb.w	fp, r3
 800b4aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b4ae:	d820      	bhi.n	800b4f2 <_printf_float+0x186>
 800b4b0:	3901      	subs	r1, #1
 800b4b2:	465a      	mov	r2, fp
 800b4b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b4b8:	9109      	str	r1, [sp, #36]	; 0x24
 800b4ba:	f7ff ff19 	bl	800b2f0 <__exponent>
 800b4be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4c0:	1813      	adds	r3, r2, r0
 800b4c2:	2a01      	cmp	r2, #1
 800b4c4:	4681      	mov	r9, r0
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	dc02      	bgt.n	800b4d0 <_printf_float+0x164>
 800b4ca:	6822      	ldr	r2, [r4, #0]
 800b4cc:	07d2      	lsls	r2, r2, #31
 800b4ce:	d501      	bpl.n	800b4d4 <_printf_float+0x168>
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d09c      	beq.n	800b416 <_printf_float+0xaa>
 800b4dc:	232d      	movs	r3, #45	; 0x2d
 800b4de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4e2:	e798      	b.n	800b416 <_printf_float+0xaa>
 800b4e4:	9a06      	ldr	r2, [sp, #24]
 800b4e6:	2a47      	cmp	r2, #71	; 0x47
 800b4e8:	d1be      	bne.n	800b468 <_printf_float+0xfc>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1bc      	bne.n	800b468 <_printf_float+0xfc>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e7b9      	b.n	800b466 <_printf_float+0xfa>
 800b4f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b4f6:	d118      	bne.n	800b52a <_printf_float+0x1be>
 800b4f8:	2900      	cmp	r1, #0
 800b4fa:	6863      	ldr	r3, [r4, #4]
 800b4fc:	dd0b      	ble.n	800b516 <_printf_float+0x1aa>
 800b4fe:	6121      	str	r1, [r4, #16]
 800b500:	b913      	cbnz	r3, 800b508 <_printf_float+0x19c>
 800b502:	6822      	ldr	r2, [r4, #0]
 800b504:	07d0      	lsls	r0, r2, #31
 800b506:	d502      	bpl.n	800b50e <_printf_float+0x1a2>
 800b508:	3301      	adds	r3, #1
 800b50a:	440b      	add	r3, r1
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b510:	f04f 0900 	mov.w	r9, #0
 800b514:	e7de      	b.n	800b4d4 <_printf_float+0x168>
 800b516:	b913      	cbnz	r3, 800b51e <_printf_float+0x1b2>
 800b518:	6822      	ldr	r2, [r4, #0]
 800b51a:	07d2      	lsls	r2, r2, #31
 800b51c:	d501      	bpl.n	800b522 <_printf_float+0x1b6>
 800b51e:	3302      	adds	r3, #2
 800b520:	e7f4      	b.n	800b50c <_printf_float+0x1a0>
 800b522:	2301      	movs	r3, #1
 800b524:	e7f2      	b.n	800b50c <_printf_float+0x1a0>
 800b526:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b52c:	4299      	cmp	r1, r3
 800b52e:	db05      	blt.n	800b53c <_printf_float+0x1d0>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	6121      	str	r1, [r4, #16]
 800b534:	07d8      	lsls	r0, r3, #31
 800b536:	d5ea      	bpl.n	800b50e <_printf_float+0x1a2>
 800b538:	1c4b      	adds	r3, r1, #1
 800b53a:	e7e7      	b.n	800b50c <_printf_float+0x1a0>
 800b53c:	2900      	cmp	r1, #0
 800b53e:	bfd4      	ite	le
 800b540:	f1c1 0202 	rsble	r2, r1, #2
 800b544:	2201      	movgt	r2, #1
 800b546:	4413      	add	r3, r2
 800b548:	e7e0      	b.n	800b50c <_printf_float+0x1a0>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	055a      	lsls	r2, r3, #21
 800b54e:	d407      	bmi.n	800b560 <_printf_float+0x1f4>
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	4642      	mov	r2, r8
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	d12c      	bne.n	800b5b8 <_printf_float+0x24c>
 800b55e:	e764      	b.n	800b42a <_printf_float+0xbe>
 800b560:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b564:	f240 80e0 	bls.w	800b728 <_printf_float+0x3bc>
 800b568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b56c:	2200      	movs	r2, #0
 800b56e:	2300      	movs	r3, #0
 800b570:	f7f5 faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b574:	2800      	cmp	r0, #0
 800b576:	d034      	beq.n	800b5e2 <_printf_float+0x276>
 800b578:	4a37      	ldr	r2, [pc, #220]	; (800b658 <_printf_float+0x2ec>)
 800b57a:	2301      	movs	r3, #1
 800b57c:	4631      	mov	r1, r6
 800b57e:	4628      	mov	r0, r5
 800b580:	47b8      	blx	r7
 800b582:	3001      	adds	r0, #1
 800b584:	f43f af51 	beq.w	800b42a <_printf_float+0xbe>
 800b588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b58c:	429a      	cmp	r2, r3
 800b58e:	db02      	blt.n	800b596 <_printf_float+0x22a>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	07d8      	lsls	r0, r3, #31
 800b594:	d510      	bpl.n	800b5b8 <_printf_float+0x24c>
 800b596:	ee18 3a10 	vmov	r3, s16
 800b59a:	4652      	mov	r2, sl
 800b59c:	4631      	mov	r1, r6
 800b59e:	4628      	mov	r0, r5
 800b5a0:	47b8      	blx	r7
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	f43f af41 	beq.w	800b42a <_printf_float+0xbe>
 800b5a8:	f04f 0800 	mov.w	r8, #0
 800b5ac:	f104 091a 	add.w	r9, r4, #26
 800b5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	4543      	cmp	r3, r8
 800b5b6:	dc09      	bgt.n	800b5cc <_printf_float+0x260>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	079b      	lsls	r3, r3, #30
 800b5bc:	f100 8107 	bmi.w	800b7ce <_printf_float+0x462>
 800b5c0:	68e0      	ldr	r0, [r4, #12]
 800b5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5c4:	4298      	cmp	r0, r3
 800b5c6:	bfb8      	it	lt
 800b5c8:	4618      	movlt	r0, r3
 800b5ca:	e730      	b.n	800b42e <_printf_float+0xc2>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	464a      	mov	r2, r9
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	47b8      	blx	r7
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	f43f af27 	beq.w	800b42a <_printf_float+0xbe>
 800b5dc:	f108 0801 	add.w	r8, r8, #1
 800b5e0:	e7e6      	b.n	800b5b0 <_printf_float+0x244>
 800b5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	dc39      	bgt.n	800b65c <_printf_float+0x2f0>
 800b5e8:	4a1b      	ldr	r2, [pc, #108]	; (800b658 <_printf_float+0x2ec>)
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	47b8      	blx	r7
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	f43f af19 	beq.w	800b42a <_printf_float+0xbe>
 800b5f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	d102      	bne.n	800b606 <_printf_float+0x29a>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	07d9      	lsls	r1, r3, #31
 800b604:	d5d8      	bpl.n	800b5b8 <_printf_float+0x24c>
 800b606:	ee18 3a10 	vmov	r3, s16
 800b60a:	4652      	mov	r2, sl
 800b60c:	4631      	mov	r1, r6
 800b60e:	4628      	mov	r0, r5
 800b610:	47b8      	blx	r7
 800b612:	3001      	adds	r0, #1
 800b614:	f43f af09 	beq.w	800b42a <_printf_float+0xbe>
 800b618:	f04f 0900 	mov.w	r9, #0
 800b61c:	f104 0a1a 	add.w	sl, r4, #26
 800b620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b622:	425b      	negs	r3, r3
 800b624:	454b      	cmp	r3, r9
 800b626:	dc01      	bgt.n	800b62c <_printf_float+0x2c0>
 800b628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b62a:	e792      	b.n	800b552 <_printf_float+0x1e6>
 800b62c:	2301      	movs	r3, #1
 800b62e:	4652      	mov	r2, sl
 800b630:	4631      	mov	r1, r6
 800b632:	4628      	mov	r0, r5
 800b634:	47b8      	blx	r7
 800b636:	3001      	adds	r0, #1
 800b638:	f43f aef7 	beq.w	800b42a <_printf_float+0xbe>
 800b63c:	f109 0901 	add.w	r9, r9, #1
 800b640:	e7ee      	b.n	800b620 <_printf_float+0x2b4>
 800b642:	bf00      	nop
 800b644:	7fefffff 	.word	0x7fefffff
 800b648:	0800e191 	.word	0x0800e191
 800b64c:	0800e195 	.word	0x0800e195
 800b650:	0800e199 	.word	0x0800e199
 800b654:	0800e19d 	.word	0x0800e19d
 800b658:	0800e1a1 	.word	0x0800e1a1
 800b65c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b65e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b660:	429a      	cmp	r2, r3
 800b662:	bfa8      	it	ge
 800b664:	461a      	movge	r2, r3
 800b666:	2a00      	cmp	r2, #0
 800b668:	4691      	mov	r9, r2
 800b66a:	dc37      	bgt.n	800b6dc <_printf_float+0x370>
 800b66c:	f04f 0b00 	mov.w	fp, #0
 800b670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b674:	f104 021a 	add.w	r2, r4, #26
 800b678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b67a:	9305      	str	r3, [sp, #20]
 800b67c:	eba3 0309 	sub.w	r3, r3, r9
 800b680:	455b      	cmp	r3, fp
 800b682:	dc33      	bgt.n	800b6ec <_printf_float+0x380>
 800b684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b688:	429a      	cmp	r2, r3
 800b68a:	db3b      	blt.n	800b704 <_printf_float+0x398>
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	07da      	lsls	r2, r3, #31
 800b690:	d438      	bmi.n	800b704 <_printf_float+0x398>
 800b692:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b696:	eba2 0903 	sub.w	r9, r2, r3
 800b69a:	9b05      	ldr	r3, [sp, #20]
 800b69c:	1ad2      	subs	r2, r2, r3
 800b69e:	4591      	cmp	r9, r2
 800b6a0:	bfa8      	it	ge
 800b6a2:	4691      	movge	r9, r2
 800b6a4:	f1b9 0f00 	cmp.w	r9, #0
 800b6a8:	dc35      	bgt.n	800b716 <_printf_float+0x3aa>
 800b6aa:	f04f 0800 	mov.w	r8, #0
 800b6ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6b2:	f104 0a1a 	add.w	sl, r4, #26
 800b6b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6ba:	1a9b      	subs	r3, r3, r2
 800b6bc:	eba3 0309 	sub.w	r3, r3, r9
 800b6c0:	4543      	cmp	r3, r8
 800b6c2:	f77f af79 	ble.w	800b5b8 <_printf_float+0x24c>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	47b8      	blx	r7
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f43f aeaa 	beq.w	800b42a <_printf_float+0xbe>
 800b6d6:	f108 0801 	add.w	r8, r8, #1
 800b6da:	e7ec      	b.n	800b6b6 <_printf_float+0x34a>
 800b6dc:	4613      	mov	r3, r2
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	47b8      	blx	r7
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d1c0      	bne.n	800b66c <_printf_float+0x300>
 800b6ea:	e69e      	b.n	800b42a <_printf_float+0xbe>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	9205      	str	r2, [sp, #20]
 800b6f4:	47b8      	blx	r7
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f43f ae97 	beq.w	800b42a <_printf_float+0xbe>
 800b6fc:	9a05      	ldr	r2, [sp, #20]
 800b6fe:	f10b 0b01 	add.w	fp, fp, #1
 800b702:	e7b9      	b.n	800b678 <_printf_float+0x30c>
 800b704:	ee18 3a10 	vmov	r3, s16
 800b708:	4652      	mov	r2, sl
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b8      	blx	r7
 800b710:	3001      	adds	r0, #1
 800b712:	d1be      	bne.n	800b692 <_printf_float+0x326>
 800b714:	e689      	b.n	800b42a <_printf_float+0xbe>
 800b716:	9a05      	ldr	r2, [sp, #20]
 800b718:	464b      	mov	r3, r9
 800b71a:	4442      	add	r2, r8
 800b71c:	4631      	mov	r1, r6
 800b71e:	4628      	mov	r0, r5
 800b720:	47b8      	blx	r7
 800b722:	3001      	adds	r0, #1
 800b724:	d1c1      	bne.n	800b6aa <_printf_float+0x33e>
 800b726:	e680      	b.n	800b42a <_printf_float+0xbe>
 800b728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b72a:	2a01      	cmp	r2, #1
 800b72c:	dc01      	bgt.n	800b732 <_printf_float+0x3c6>
 800b72e:	07db      	lsls	r3, r3, #31
 800b730:	d53a      	bpl.n	800b7a8 <_printf_float+0x43c>
 800b732:	2301      	movs	r3, #1
 800b734:	4642      	mov	r2, r8
 800b736:	4631      	mov	r1, r6
 800b738:	4628      	mov	r0, r5
 800b73a:	47b8      	blx	r7
 800b73c:	3001      	adds	r0, #1
 800b73e:	f43f ae74 	beq.w	800b42a <_printf_float+0xbe>
 800b742:	ee18 3a10 	vmov	r3, s16
 800b746:	4652      	mov	r2, sl
 800b748:	4631      	mov	r1, r6
 800b74a:	4628      	mov	r0, r5
 800b74c:	47b8      	blx	r7
 800b74e:	3001      	adds	r0, #1
 800b750:	f43f ae6b 	beq.w	800b42a <_printf_float+0xbe>
 800b754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b758:	2200      	movs	r2, #0
 800b75a:	2300      	movs	r3, #0
 800b75c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b760:	f7f5 f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b764:	b9d8      	cbnz	r0, 800b79e <_printf_float+0x432>
 800b766:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b76a:	f108 0201 	add.w	r2, r8, #1
 800b76e:	4631      	mov	r1, r6
 800b770:	4628      	mov	r0, r5
 800b772:	47b8      	blx	r7
 800b774:	3001      	adds	r0, #1
 800b776:	d10e      	bne.n	800b796 <_printf_float+0x42a>
 800b778:	e657      	b.n	800b42a <_printf_float+0xbe>
 800b77a:	2301      	movs	r3, #1
 800b77c:	4652      	mov	r2, sl
 800b77e:	4631      	mov	r1, r6
 800b780:	4628      	mov	r0, r5
 800b782:	47b8      	blx	r7
 800b784:	3001      	adds	r0, #1
 800b786:	f43f ae50 	beq.w	800b42a <_printf_float+0xbe>
 800b78a:	f108 0801 	add.w	r8, r8, #1
 800b78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b790:	3b01      	subs	r3, #1
 800b792:	4543      	cmp	r3, r8
 800b794:	dcf1      	bgt.n	800b77a <_printf_float+0x40e>
 800b796:	464b      	mov	r3, r9
 800b798:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b79c:	e6da      	b.n	800b554 <_printf_float+0x1e8>
 800b79e:	f04f 0800 	mov.w	r8, #0
 800b7a2:	f104 0a1a 	add.w	sl, r4, #26
 800b7a6:	e7f2      	b.n	800b78e <_printf_float+0x422>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	4642      	mov	r2, r8
 800b7ac:	e7df      	b.n	800b76e <_printf_float+0x402>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	464a      	mov	r2, r9
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b8      	blx	r7
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	f43f ae36 	beq.w	800b42a <_printf_float+0xbe>
 800b7be:	f108 0801 	add.w	r8, r8, #1
 800b7c2:	68e3      	ldr	r3, [r4, #12]
 800b7c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7c6:	1a5b      	subs	r3, r3, r1
 800b7c8:	4543      	cmp	r3, r8
 800b7ca:	dcf0      	bgt.n	800b7ae <_printf_float+0x442>
 800b7cc:	e6f8      	b.n	800b5c0 <_printf_float+0x254>
 800b7ce:	f04f 0800 	mov.w	r8, #0
 800b7d2:	f104 0919 	add.w	r9, r4, #25
 800b7d6:	e7f4      	b.n	800b7c2 <_printf_float+0x456>

0800b7d8 <_printf_common>:
 800b7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7dc:	4616      	mov	r6, r2
 800b7de:	4699      	mov	r9, r3
 800b7e0:	688a      	ldr	r2, [r1, #8]
 800b7e2:	690b      	ldr	r3, [r1, #16]
 800b7e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	bfb8      	it	lt
 800b7ec:	4613      	movlt	r3, r2
 800b7ee:	6033      	str	r3, [r6, #0]
 800b7f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	b10a      	cbz	r2, 800b7fe <_printf_common+0x26>
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	6033      	str	r3, [r6, #0]
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	0699      	lsls	r1, r3, #26
 800b802:	bf42      	ittt	mi
 800b804:	6833      	ldrmi	r3, [r6, #0]
 800b806:	3302      	addmi	r3, #2
 800b808:	6033      	strmi	r3, [r6, #0]
 800b80a:	6825      	ldr	r5, [r4, #0]
 800b80c:	f015 0506 	ands.w	r5, r5, #6
 800b810:	d106      	bne.n	800b820 <_printf_common+0x48>
 800b812:	f104 0a19 	add.w	sl, r4, #25
 800b816:	68e3      	ldr	r3, [r4, #12]
 800b818:	6832      	ldr	r2, [r6, #0]
 800b81a:	1a9b      	subs	r3, r3, r2
 800b81c:	42ab      	cmp	r3, r5
 800b81e:	dc26      	bgt.n	800b86e <_printf_common+0x96>
 800b820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b824:	1e13      	subs	r3, r2, #0
 800b826:	6822      	ldr	r2, [r4, #0]
 800b828:	bf18      	it	ne
 800b82a:	2301      	movne	r3, #1
 800b82c:	0692      	lsls	r2, r2, #26
 800b82e:	d42b      	bmi.n	800b888 <_printf_common+0xb0>
 800b830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b834:	4649      	mov	r1, r9
 800b836:	4638      	mov	r0, r7
 800b838:	47c0      	blx	r8
 800b83a:	3001      	adds	r0, #1
 800b83c:	d01e      	beq.n	800b87c <_printf_common+0xa4>
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	6922      	ldr	r2, [r4, #16]
 800b842:	f003 0306 	and.w	r3, r3, #6
 800b846:	2b04      	cmp	r3, #4
 800b848:	bf02      	ittt	eq
 800b84a:	68e5      	ldreq	r5, [r4, #12]
 800b84c:	6833      	ldreq	r3, [r6, #0]
 800b84e:	1aed      	subeq	r5, r5, r3
 800b850:	68a3      	ldr	r3, [r4, #8]
 800b852:	bf0c      	ite	eq
 800b854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b858:	2500      	movne	r5, #0
 800b85a:	4293      	cmp	r3, r2
 800b85c:	bfc4      	itt	gt
 800b85e:	1a9b      	subgt	r3, r3, r2
 800b860:	18ed      	addgt	r5, r5, r3
 800b862:	2600      	movs	r6, #0
 800b864:	341a      	adds	r4, #26
 800b866:	42b5      	cmp	r5, r6
 800b868:	d11a      	bne.n	800b8a0 <_printf_common+0xc8>
 800b86a:	2000      	movs	r0, #0
 800b86c:	e008      	b.n	800b880 <_printf_common+0xa8>
 800b86e:	2301      	movs	r3, #1
 800b870:	4652      	mov	r2, sl
 800b872:	4649      	mov	r1, r9
 800b874:	4638      	mov	r0, r7
 800b876:	47c0      	blx	r8
 800b878:	3001      	adds	r0, #1
 800b87a:	d103      	bne.n	800b884 <_printf_common+0xac>
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295
 800b880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b884:	3501      	adds	r5, #1
 800b886:	e7c6      	b.n	800b816 <_printf_common+0x3e>
 800b888:	18e1      	adds	r1, r4, r3
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	2030      	movs	r0, #48	; 0x30
 800b88e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b892:	4422      	add	r2, r4
 800b894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b89c:	3302      	adds	r3, #2
 800b89e:	e7c7      	b.n	800b830 <_printf_common+0x58>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	4622      	mov	r2, r4
 800b8a4:	4649      	mov	r1, r9
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	47c0      	blx	r8
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d0e6      	beq.n	800b87c <_printf_common+0xa4>
 800b8ae:	3601      	adds	r6, #1
 800b8b0:	e7d9      	b.n	800b866 <_printf_common+0x8e>
	...

0800b8b4 <_printf_i>:
 800b8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b8:	7e0f      	ldrb	r7, [r1, #24]
 800b8ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8bc:	2f78      	cmp	r7, #120	; 0x78
 800b8be:	4691      	mov	r9, r2
 800b8c0:	4680      	mov	r8, r0
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	469a      	mov	sl, r3
 800b8c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b8ca:	d807      	bhi.n	800b8dc <_printf_i+0x28>
 800b8cc:	2f62      	cmp	r7, #98	; 0x62
 800b8ce:	d80a      	bhi.n	800b8e6 <_printf_i+0x32>
 800b8d0:	2f00      	cmp	r7, #0
 800b8d2:	f000 80d4 	beq.w	800ba7e <_printf_i+0x1ca>
 800b8d6:	2f58      	cmp	r7, #88	; 0x58
 800b8d8:	f000 80c0 	beq.w	800ba5c <_printf_i+0x1a8>
 800b8dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8e4:	e03a      	b.n	800b95c <_printf_i+0xa8>
 800b8e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8ea:	2b15      	cmp	r3, #21
 800b8ec:	d8f6      	bhi.n	800b8dc <_printf_i+0x28>
 800b8ee:	a101      	add	r1, pc, #4	; (adr r1, 800b8f4 <_printf_i+0x40>)
 800b8f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8f4:	0800b94d 	.word	0x0800b94d
 800b8f8:	0800b961 	.word	0x0800b961
 800b8fc:	0800b8dd 	.word	0x0800b8dd
 800b900:	0800b8dd 	.word	0x0800b8dd
 800b904:	0800b8dd 	.word	0x0800b8dd
 800b908:	0800b8dd 	.word	0x0800b8dd
 800b90c:	0800b961 	.word	0x0800b961
 800b910:	0800b8dd 	.word	0x0800b8dd
 800b914:	0800b8dd 	.word	0x0800b8dd
 800b918:	0800b8dd 	.word	0x0800b8dd
 800b91c:	0800b8dd 	.word	0x0800b8dd
 800b920:	0800ba65 	.word	0x0800ba65
 800b924:	0800b98d 	.word	0x0800b98d
 800b928:	0800ba1f 	.word	0x0800ba1f
 800b92c:	0800b8dd 	.word	0x0800b8dd
 800b930:	0800b8dd 	.word	0x0800b8dd
 800b934:	0800ba87 	.word	0x0800ba87
 800b938:	0800b8dd 	.word	0x0800b8dd
 800b93c:	0800b98d 	.word	0x0800b98d
 800b940:	0800b8dd 	.word	0x0800b8dd
 800b944:	0800b8dd 	.word	0x0800b8dd
 800b948:	0800ba27 	.word	0x0800ba27
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	1d1a      	adds	r2, r3, #4
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	602a      	str	r2, [r5, #0]
 800b954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b95c:	2301      	movs	r3, #1
 800b95e:	e09f      	b.n	800baa0 <_printf_i+0x1ec>
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	0607      	lsls	r7, r0, #24
 800b966:	f103 0104 	add.w	r1, r3, #4
 800b96a:	6029      	str	r1, [r5, #0]
 800b96c:	d501      	bpl.n	800b972 <_printf_i+0xbe>
 800b96e:	681e      	ldr	r6, [r3, #0]
 800b970:	e003      	b.n	800b97a <_printf_i+0xc6>
 800b972:	0646      	lsls	r6, r0, #25
 800b974:	d5fb      	bpl.n	800b96e <_printf_i+0xba>
 800b976:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b97a:	2e00      	cmp	r6, #0
 800b97c:	da03      	bge.n	800b986 <_printf_i+0xd2>
 800b97e:	232d      	movs	r3, #45	; 0x2d
 800b980:	4276      	negs	r6, r6
 800b982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b986:	485a      	ldr	r0, [pc, #360]	; (800baf0 <_printf_i+0x23c>)
 800b988:	230a      	movs	r3, #10
 800b98a:	e012      	b.n	800b9b2 <_printf_i+0xfe>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	6820      	ldr	r0, [r4, #0]
 800b990:	1d19      	adds	r1, r3, #4
 800b992:	6029      	str	r1, [r5, #0]
 800b994:	0605      	lsls	r5, r0, #24
 800b996:	d501      	bpl.n	800b99c <_printf_i+0xe8>
 800b998:	681e      	ldr	r6, [r3, #0]
 800b99a:	e002      	b.n	800b9a2 <_printf_i+0xee>
 800b99c:	0641      	lsls	r1, r0, #25
 800b99e:	d5fb      	bpl.n	800b998 <_printf_i+0xe4>
 800b9a0:	881e      	ldrh	r6, [r3, #0]
 800b9a2:	4853      	ldr	r0, [pc, #332]	; (800baf0 <_printf_i+0x23c>)
 800b9a4:	2f6f      	cmp	r7, #111	; 0x6f
 800b9a6:	bf0c      	ite	eq
 800b9a8:	2308      	moveq	r3, #8
 800b9aa:	230a      	movne	r3, #10
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9b2:	6865      	ldr	r5, [r4, #4]
 800b9b4:	60a5      	str	r5, [r4, #8]
 800b9b6:	2d00      	cmp	r5, #0
 800b9b8:	bfa2      	ittt	ge
 800b9ba:	6821      	ldrge	r1, [r4, #0]
 800b9bc:	f021 0104 	bicge.w	r1, r1, #4
 800b9c0:	6021      	strge	r1, [r4, #0]
 800b9c2:	b90e      	cbnz	r6, 800b9c8 <_printf_i+0x114>
 800b9c4:	2d00      	cmp	r5, #0
 800b9c6:	d04b      	beq.n	800ba60 <_printf_i+0x1ac>
 800b9c8:	4615      	mov	r5, r2
 800b9ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800b9ce:	fb03 6711 	mls	r7, r3, r1, r6
 800b9d2:	5dc7      	ldrb	r7, [r0, r7]
 800b9d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9d8:	4637      	mov	r7, r6
 800b9da:	42bb      	cmp	r3, r7
 800b9dc:	460e      	mov	r6, r1
 800b9de:	d9f4      	bls.n	800b9ca <_printf_i+0x116>
 800b9e0:	2b08      	cmp	r3, #8
 800b9e2:	d10b      	bne.n	800b9fc <_printf_i+0x148>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	07de      	lsls	r6, r3, #31
 800b9e8:	d508      	bpl.n	800b9fc <_printf_i+0x148>
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	6861      	ldr	r1, [r4, #4]
 800b9ee:	4299      	cmp	r1, r3
 800b9f0:	bfde      	ittt	le
 800b9f2:	2330      	movle	r3, #48	; 0x30
 800b9f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9fc:	1b52      	subs	r2, r2, r5
 800b9fe:	6122      	str	r2, [r4, #16]
 800ba00:	f8cd a000 	str.w	sl, [sp]
 800ba04:	464b      	mov	r3, r9
 800ba06:	aa03      	add	r2, sp, #12
 800ba08:	4621      	mov	r1, r4
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	f7ff fee4 	bl	800b7d8 <_printf_common>
 800ba10:	3001      	adds	r0, #1
 800ba12:	d14a      	bne.n	800baaa <_printf_i+0x1f6>
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	b004      	add	sp, #16
 800ba1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1e:	6823      	ldr	r3, [r4, #0]
 800ba20:	f043 0320 	orr.w	r3, r3, #32
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	4833      	ldr	r0, [pc, #204]	; (800baf4 <_printf_i+0x240>)
 800ba28:	2778      	movs	r7, #120	; 0x78
 800ba2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	6829      	ldr	r1, [r5, #0]
 800ba32:	061f      	lsls	r7, r3, #24
 800ba34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba38:	d402      	bmi.n	800ba40 <_printf_i+0x18c>
 800ba3a:	065f      	lsls	r7, r3, #25
 800ba3c:	bf48      	it	mi
 800ba3e:	b2b6      	uxthmi	r6, r6
 800ba40:	07df      	lsls	r7, r3, #31
 800ba42:	bf48      	it	mi
 800ba44:	f043 0320 	orrmi.w	r3, r3, #32
 800ba48:	6029      	str	r1, [r5, #0]
 800ba4a:	bf48      	it	mi
 800ba4c:	6023      	strmi	r3, [r4, #0]
 800ba4e:	b91e      	cbnz	r6, 800ba58 <_printf_i+0x1a4>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	f023 0320 	bic.w	r3, r3, #32
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	2310      	movs	r3, #16
 800ba5a:	e7a7      	b.n	800b9ac <_printf_i+0xf8>
 800ba5c:	4824      	ldr	r0, [pc, #144]	; (800baf0 <_printf_i+0x23c>)
 800ba5e:	e7e4      	b.n	800ba2a <_printf_i+0x176>
 800ba60:	4615      	mov	r5, r2
 800ba62:	e7bd      	b.n	800b9e0 <_printf_i+0x12c>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	6826      	ldr	r6, [r4, #0]
 800ba68:	6961      	ldr	r1, [r4, #20]
 800ba6a:	1d18      	adds	r0, r3, #4
 800ba6c:	6028      	str	r0, [r5, #0]
 800ba6e:	0635      	lsls	r5, r6, #24
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	d501      	bpl.n	800ba78 <_printf_i+0x1c4>
 800ba74:	6019      	str	r1, [r3, #0]
 800ba76:	e002      	b.n	800ba7e <_printf_i+0x1ca>
 800ba78:	0670      	lsls	r0, r6, #25
 800ba7a:	d5fb      	bpl.n	800ba74 <_printf_i+0x1c0>
 800ba7c:	8019      	strh	r1, [r3, #0]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	4615      	mov	r5, r2
 800ba84:	e7bc      	b.n	800ba00 <_printf_i+0x14c>
 800ba86:	682b      	ldr	r3, [r5, #0]
 800ba88:	1d1a      	adds	r2, r3, #4
 800ba8a:	602a      	str	r2, [r5, #0]
 800ba8c:	681d      	ldr	r5, [r3, #0]
 800ba8e:	6862      	ldr	r2, [r4, #4]
 800ba90:	2100      	movs	r1, #0
 800ba92:	4628      	mov	r0, r5
 800ba94:	f7f4 fb9c 	bl	80001d0 <memchr>
 800ba98:	b108      	cbz	r0, 800ba9e <_printf_i+0x1ea>
 800ba9a:	1b40      	subs	r0, r0, r5
 800ba9c:	6060      	str	r0, [r4, #4]
 800ba9e:	6863      	ldr	r3, [r4, #4]
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	2300      	movs	r3, #0
 800baa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baa8:	e7aa      	b.n	800ba00 <_printf_i+0x14c>
 800baaa:	6923      	ldr	r3, [r4, #16]
 800baac:	462a      	mov	r2, r5
 800baae:	4649      	mov	r1, r9
 800bab0:	4640      	mov	r0, r8
 800bab2:	47d0      	blx	sl
 800bab4:	3001      	adds	r0, #1
 800bab6:	d0ad      	beq.n	800ba14 <_printf_i+0x160>
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	079b      	lsls	r3, r3, #30
 800babc:	d413      	bmi.n	800bae6 <_printf_i+0x232>
 800babe:	68e0      	ldr	r0, [r4, #12]
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	4298      	cmp	r0, r3
 800bac4:	bfb8      	it	lt
 800bac6:	4618      	movlt	r0, r3
 800bac8:	e7a6      	b.n	800ba18 <_printf_i+0x164>
 800baca:	2301      	movs	r3, #1
 800bacc:	4632      	mov	r2, r6
 800bace:	4649      	mov	r1, r9
 800bad0:	4640      	mov	r0, r8
 800bad2:	47d0      	blx	sl
 800bad4:	3001      	adds	r0, #1
 800bad6:	d09d      	beq.n	800ba14 <_printf_i+0x160>
 800bad8:	3501      	adds	r5, #1
 800bada:	68e3      	ldr	r3, [r4, #12]
 800badc:	9903      	ldr	r1, [sp, #12]
 800bade:	1a5b      	subs	r3, r3, r1
 800bae0:	42ab      	cmp	r3, r5
 800bae2:	dcf2      	bgt.n	800baca <_printf_i+0x216>
 800bae4:	e7eb      	b.n	800babe <_printf_i+0x20a>
 800bae6:	2500      	movs	r5, #0
 800bae8:	f104 0619 	add.w	r6, r4, #25
 800baec:	e7f5      	b.n	800bada <_printf_i+0x226>
 800baee:	bf00      	nop
 800baf0:	0800e1a3 	.word	0x0800e1a3
 800baf4:	0800e1b4 	.word	0x0800e1b4

0800baf8 <std>:
 800baf8:	2300      	movs	r3, #0
 800bafa:	b510      	push	{r4, lr}
 800bafc:	4604      	mov	r4, r0
 800bafe:	e9c0 3300 	strd	r3, r3, [r0]
 800bb02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb06:	6083      	str	r3, [r0, #8]
 800bb08:	8181      	strh	r1, [r0, #12]
 800bb0a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb0c:	81c2      	strh	r2, [r0, #14]
 800bb0e:	6183      	str	r3, [r0, #24]
 800bb10:	4619      	mov	r1, r3
 800bb12:	2208      	movs	r2, #8
 800bb14:	305c      	adds	r0, #92	; 0x5c
 800bb16:	f000 f926 	bl	800bd66 <memset>
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	; (800bb50 <std+0x58>)
 800bb1c:	6263      	str	r3, [r4, #36]	; 0x24
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	; (800bb54 <std+0x5c>)
 800bb20:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb22:	4b0d      	ldr	r3, [pc, #52]	; (800bb58 <std+0x60>)
 800bb24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb26:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <std+0x64>)
 800bb28:	6323      	str	r3, [r4, #48]	; 0x30
 800bb2a:	4b0d      	ldr	r3, [pc, #52]	; (800bb60 <std+0x68>)
 800bb2c:	6224      	str	r4, [r4, #32]
 800bb2e:	429c      	cmp	r4, r3
 800bb30:	d006      	beq.n	800bb40 <std+0x48>
 800bb32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bb36:	4294      	cmp	r4, r2
 800bb38:	d002      	beq.n	800bb40 <std+0x48>
 800bb3a:	33d0      	adds	r3, #208	; 0xd0
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	d105      	bne.n	800bb4c <std+0x54>
 800bb40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb48:	f000 b98a 	b.w	800be60 <__retarget_lock_init_recursive>
 800bb4c:	bd10      	pop	{r4, pc}
 800bb4e:	bf00      	nop
 800bb50:	0800bce1 	.word	0x0800bce1
 800bb54:	0800bd03 	.word	0x0800bd03
 800bb58:	0800bd3b 	.word	0x0800bd3b
 800bb5c:	0800bd5f 	.word	0x0800bd5f
 800bb60:	2000082c 	.word	0x2000082c

0800bb64 <stdio_exit_handler>:
 800bb64:	4a02      	ldr	r2, [pc, #8]	; (800bb70 <stdio_exit_handler+0xc>)
 800bb66:	4903      	ldr	r1, [pc, #12]	; (800bb74 <stdio_exit_handler+0x10>)
 800bb68:	4803      	ldr	r0, [pc, #12]	; (800bb78 <stdio_exit_handler+0x14>)
 800bb6a:	f000 b869 	b.w	800bc40 <_fwalk_sglue>
 800bb6e:	bf00      	nop
 800bb70:	2000010c 	.word	0x2000010c
 800bb74:	0800dab9 	.word	0x0800dab9
 800bb78:	20000118 	.word	0x20000118

0800bb7c <cleanup_stdio>:
 800bb7c:	6841      	ldr	r1, [r0, #4]
 800bb7e:	4b0c      	ldr	r3, [pc, #48]	; (800bbb0 <cleanup_stdio+0x34>)
 800bb80:	4299      	cmp	r1, r3
 800bb82:	b510      	push	{r4, lr}
 800bb84:	4604      	mov	r4, r0
 800bb86:	d001      	beq.n	800bb8c <cleanup_stdio+0x10>
 800bb88:	f001 ff96 	bl	800dab8 <_fflush_r>
 800bb8c:	68a1      	ldr	r1, [r4, #8]
 800bb8e:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <cleanup_stdio+0x38>)
 800bb90:	4299      	cmp	r1, r3
 800bb92:	d002      	beq.n	800bb9a <cleanup_stdio+0x1e>
 800bb94:	4620      	mov	r0, r4
 800bb96:	f001 ff8f 	bl	800dab8 <_fflush_r>
 800bb9a:	68e1      	ldr	r1, [r4, #12]
 800bb9c:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <cleanup_stdio+0x3c>)
 800bb9e:	4299      	cmp	r1, r3
 800bba0:	d004      	beq.n	800bbac <cleanup_stdio+0x30>
 800bba2:	4620      	mov	r0, r4
 800bba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba8:	f001 bf86 	b.w	800dab8 <_fflush_r>
 800bbac:	bd10      	pop	{r4, pc}
 800bbae:	bf00      	nop
 800bbb0:	2000082c 	.word	0x2000082c
 800bbb4:	20000894 	.word	0x20000894
 800bbb8:	200008fc 	.word	0x200008fc

0800bbbc <global_stdio_init.part.0>:
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <global_stdio_init.part.0+0x30>)
 800bbc0:	4c0b      	ldr	r4, [pc, #44]	; (800bbf0 <global_stdio_init.part.0+0x34>)
 800bbc2:	4a0c      	ldr	r2, [pc, #48]	; (800bbf4 <global_stdio_init.part.0+0x38>)
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	2200      	movs	r2, #0
 800bbca:	2104      	movs	r1, #4
 800bbcc:	f7ff ff94 	bl	800baf8 <std>
 800bbd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	2109      	movs	r1, #9
 800bbd8:	f7ff ff8e 	bl	800baf8 <std>
 800bbdc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbe6:	2112      	movs	r1, #18
 800bbe8:	f7ff bf86 	b.w	800baf8 <std>
 800bbec:	20000964 	.word	0x20000964
 800bbf0:	2000082c 	.word	0x2000082c
 800bbf4:	0800bb65 	.word	0x0800bb65

0800bbf8 <__sfp_lock_acquire>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	; (800bc00 <__sfp_lock_acquire+0x8>)
 800bbfa:	f000 b932 	b.w	800be62 <__retarget_lock_acquire_recursive>
 800bbfe:	bf00      	nop
 800bc00:	2000096d 	.word	0x2000096d

0800bc04 <__sfp_lock_release>:
 800bc04:	4801      	ldr	r0, [pc, #4]	; (800bc0c <__sfp_lock_release+0x8>)
 800bc06:	f000 b92d 	b.w	800be64 <__retarget_lock_release_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	2000096d 	.word	0x2000096d

0800bc10 <__sinit>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4604      	mov	r4, r0
 800bc14:	f7ff fff0 	bl	800bbf8 <__sfp_lock_acquire>
 800bc18:	6a23      	ldr	r3, [r4, #32]
 800bc1a:	b11b      	cbz	r3, 800bc24 <__sinit+0x14>
 800bc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc20:	f7ff bff0 	b.w	800bc04 <__sfp_lock_release>
 800bc24:	4b04      	ldr	r3, [pc, #16]	; (800bc38 <__sinit+0x28>)
 800bc26:	6223      	str	r3, [r4, #32]
 800bc28:	4b04      	ldr	r3, [pc, #16]	; (800bc3c <__sinit+0x2c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1f5      	bne.n	800bc1c <__sinit+0xc>
 800bc30:	f7ff ffc4 	bl	800bbbc <global_stdio_init.part.0>
 800bc34:	e7f2      	b.n	800bc1c <__sinit+0xc>
 800bc36:	bf00      	nop
 800bc38:	0800bb7d 	.word	0x0800bb7d
 800bc3c:	20000964 	.word	0x20000964

0800bc40 <_fwalk_sglue>:
 800bc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc44:	4607      	mov	r7, r0
 800bc46:	4688      	mov	r8, r1
 800bc48:	4614      	mov	r4, r2
 800bc4a:	2600      	movs	r6, #0
 800bc4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc50:	f1b9 0901 	subs.w	r9, r9, #1
 800bc54:	d505      	bpl.n	800bc62 <_fwalk_sglue+0x22>
 800bc56:	6824      	ldr	r4, [r4, #0]
 800bc58:	2c00      	cmp	r4, #0
 800bc5a:	d1f7      	bne.n	800bc4c <_fwalk_sglue+0xc>
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc62:	89ab      	ldrh	r3, [r5, #12]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d907      	bls.n	800bc78 <_fwalk_sglue+0x38>
 800bc68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	d003      	beq.n	800bc78 <_fwalk_sglue+0x38>
 800bc70:	4629      	mov	r1, r5
 800bc72:	4638      	mov	r0, r7
 800bc74:	47c0      	blx	r8
 800bc76:	4306      	orrs	r6, r0
 800bc78:	3568      	adds	r5, #104	; 0x68
 800bc7a:	e7e9      	b.n	800bc50 <_fwalk_sglue+0x10>

0800bc7c <iprintf>:
 800bc7c:	b40f      	push	{r0, r1, r2, r3}
 800bc7e:	b507      	push	{r0, r1, r2, lr}
 800bc80:	4906      	ldr	r1, [pc, #24]	; (800bc9c <iprintf+0x20>)
 800bc82:	ab04      	add	r3, sp, #16
 800bc84:	6808      	ldr	r0, [r1, #0]
 800bc86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc8a:	6881      	ldr	r1, [r0, #8]
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	f001 fd73 	bl	800d778 <_vfiprintf_r>
 800bc92:	b003      	add	sp, #12
 800bc94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc98:	b004      	add	sp, #16
 800bc9a:	4770      	bx	lr
 800bc9c:	20000164 	.word	0x20000164

0800bca0 <siprintf>:
 800bca0:	b40e      	push	{r1, r2, r3}
 800bca2:	b500      	push	{lr}
 800bca4:	b09c      	sub	sp, #112	; 0x70
 800bca6:	ab1d      	add	r3, sp, #116	; 0x74
 800bca8:	9002      	str	r0, [sp, #8]
 800bcaa:	9006      	str	r0, [sp, #24]
 800bcac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcb0:	4809      	ldr	r0, [pc, #36]	; (800bcd8 <siprintf+0x38>)
 800bcb2:	9107      	str	r1, [sp, #28]
 800bcb4:	9104      	str	r1, [sp, #16]
 800bcb6:	4909      	ldr	r1, [pc, #36]	; (800bcdc <siprintf+0x3c>)
 800bcb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcbc:	9105      	str	r1, [sp, #20]
 800bcbe:	6800      	ldr	r0, [r0, #0]
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	a902      	add	r1, sp, #8
 800bcc4:	f001 fc30 	bl	800d528 <_svfiprintf_r>
 800bcc8:	9b02      	ldr	r3, [sp, #8]
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]
 800bcce:	b01c      	add	sp, #112	; 0x70
 800bcd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd4:	b003      	add	sp, #12
 800bcd6:	4770      	bx	lr
 800bcd8:	20000164 	.word	0x20000164
 800bcdc:	ffff0208 	.word	0xffff0208

0800bce0 <__sread>:
 800bce0:	b510      	push	{r4, lr}
 800bce2:	460c      	mov	r4, r1
 800bce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce8:	f000 f86c 	bl	800bdc4 <_read_r>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	bfab      	itete	ge
 800bcf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcf2:	89a3      	ldrhlt	r3, [r4, #12]
 800bcf4:	181b      	addge	r3, r3, r0
 800bcf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcfa:	bfac      	ite	ge
 800bcfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcfe:	81a3      	strhlt	r3, [r4, #12]
 800bd00:	bd10      	pop	{r4, pc}

0800bd02 <__swrite>:
 800bd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd06:	461f      	mov	r7, r3
 800bd08:	898b      	ldrh	r3, [r1, #12]
 800bd0a:	05db      	lsls	r3, r3, #23
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	460c      	mov	r4, r1
 800bd10:	4616      	mov	r6, r2
 800bd12:	d505      	bpl.n	800bd20 <__swrite+0x1e>
 800bd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd18:	2302      	movs	r3, #2
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f000 f840 	bl	800bda0 <_lseek_r>
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	4632      	mov	r2, r6
 800bd2e:	463b      	mov	r3, r7
 800bd30:	4628      	mov	r0, r5
 800bd32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd36:	f000 b857 	b.w	800bde8 <_write_r>

0800bd3a <__sseek>:
 800bd3a:	b510      	push	{r4, lr}
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd42:	f000 f82d 	bl	800bda0 <_lseek_r>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	bf15      	itete	ne
 800bd4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd56:	81a3      	strheq	r3, [r4, #12]
 800bd58:	bf18      	it	ne
 800bd5a:	81a3      	strhne	r3, [r4, #12]
 800bd5c:	bd10      	pop	{r4, pc}

0800bd5e <__sclose>:
 800bd5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd62:	f000 b80d 	b.w	800bd80 <_close_r>

0800bd66 <memset>:
 800bd66:	4402      	add	r2, r0
 800bd68:	4603      	mov	r3, r0
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d100      	bne.n	800bd70 <memset+0xa>
 800bd6e:	4770      	bx	lr
 800bd70:	f803 1b01 	strb.w	r1, [r3], #1
 800bd74:	e7f9      	b.n	800bd6a <memset+0x4>
	...

0800bd78 <_localeconv_r>:
 800bd78:	4800      	ldr	r0, [pc, #0]	; (800bd7c <_localeconv_r+0x4>)
 800bd7a:	4770      	bx	lr
 800bd7c:	20000258 	.word	0x20000258

0800bd80 <_close_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d06      	ldr	r5, [pc, #24]	; (800bd9c <_close_r+0x1c>)
 800bd84:	2300      	movs	r3, #0
 800bd86:	4604      	mov	r4, r0
 800bd88:	4608      	mov	r0, r1
 800bd8a:	602b      	str	r3, [r5, #0]
 800bd8c:	f7f6 fedb 	bl	8002b46 <_close>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d102      	bne.n	800bd9a <_close_r+0x1a>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b103      	cbz	r3, 800bd9a <_close_r+0x1a>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	20000968 	.word	0x20000968

0800bda0 <_lseek_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4d07      	ldr	r5, [pc, #28]	; (800bdc0 <_lseek_r+0x20>)
 800bda4:	4604      	mov	r4, r0
 800bda6:	4608      	mov	r0, r1
 800bda8:	4611      	mov	r1, r2
 800bdaa:	2200      	movs	r2, #0
 800bdac:	602a      	str	r2, [r5, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	f7f6 fef0 	bl	8002b94 <_lseek>
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	d102      	bne.n	800bdbe <_lseek_r+0x1e>
 800bdb8:	682b      	ldr	r3, [r5, #0]
 800bdba:	b103      	cbz	r3, 800bdbe <_lseek_r+0x1e>
 800bdbc:	6023      	str	r3, [r4, #0]
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	20000968 	.word	0x20000968

0800bdc4 <_read_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	4d07      	ldr	r5, [pc, #28]	; (800bde4 <_read_r+0x20>)
 800bdc8:	4604      	mov	r4, r0
 800bdca:	4608      	mov	r0, r1
 800bdcc:	4611      	mov	r1, r2
 800bdce:	2200      	movs	r2, #0
 800bdd0:	602a      	str	r2, [r5, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f7f6 fe7e 	bl	8002ad4 <_read>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_read_r+0x1e>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_read_r+0x1e>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20000968 	.word	0x20000968

0800bde8 <_write_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d07      	ldr	r5, [pc, #28]	; (800be08 <_write_r+0x20>)
 800bdec:	4604      	mov	r4, r0
 800bdee:	4608      	mov	r0, r1
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	602a      	str	r2, [r5, #0]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f7f6 fe89 	bl	8002b0e <_write>
 800bdfc:	1c43      	adds	r3, r0, #1
 800bdfe:	d102      	bne.n	800be06 <_write_r+0x1e>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	b103      	cbz	r3, 800be06 <_write_r+0x1e>
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	20000968 	.word	0x20000968

0800be0c <__errno>:
 800be0c:	4b01      	ldr	r3, [pc, #4]	; (800be14 <__errno+0x8>)
 800be0e:	6818      	ldr	r0, [r3, #0]
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	20000164 	.word	0x20000164

0800be18 <__libc_init_array>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	4d0d      	ldr	r5, [pc, #52]	; (800be50 <__libc_init_array+0x38>)
 800be1c:	4c0d      	ldr	r4, [pc, #52]	; (800be54 <__libc_init_array+0x3c>)
 800be1e:	1b64      	subs	r4, r4, r5
 800be20:	10a4      	asrs	r4, r4, #2
 800be22:	2600      	movs	r6, #0
 800be24:	42a6      	cmp	r6, r4
 800be26:	d109      	bne.n	800be3c <__libc_init_array+0x24>
 800be28:	4d0b      	ldr	r5, [pc, #44]	; (800be58 <__libc_init_array+0x40>)
 800be2a:	4c0c      	ldr	r4, [pc, #48]	; (800be5c <__libc_init_array+0x44>)
 800be2c:	f002 f898 	bl	800df60 <_init>
 800be30:	1b64      	subs	r4, r4, r5
 800be32:	10a4      	asrs	r4, r4, #2
 800be34:	2600      	movs	r6, #0
 800be36:	42a6      	cmp	r6, r4
 800be38:	d105      	bne.n	800be46 <__libc_init_array+0x2e>
 800be3a:	bd70      	pop	{r4, r5, r6, pc}
 800be3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be40:	4798      	blx	r3
 800be42:	3601      	adds	r6, #1
 800be44:	e7ee      	b.n	800be24 <__libc_init_array+0xc>
 800be46:	f855 3b04 	ldr.w	r3, [r5], #4
 800be4a:	4798      	blx	r3
 800be4c:	3601      	adds	r6, #1
 800be4e:	e7f2      	b.n	800be36 <__libc_init_array+0x1e>
 800be50:	0800e40c 	.word	0x0800e40c
 800be54:	0800e40c 	.word	0x0800e40c
 800be58:	0800e40c 	.word	0x0800e40c
 800be5c:	0800e410 	.word	0x0800e410

0800be60 <__retarget_lock_init_recursive>:
 800be60:	4770      	bx	lr

0800be62 <__retarget_lock_acquire_recursive>:
 800be62:	4770      	bx	lr

0800be64 <__retarget_lock_release_recursive>:
 800be64:	4770      	bx	lr

0800be66 <memcpy>:
 800be66:	440a      	add	r2, r1
 800be68:	4291      	cmp	r1, r2
 800be6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800be6e:	d100      	bne.n	800be72 <memcpy+0xc>
 800be70:	4770      	bx	lr
 800be72:	b510      	push	{r4, lr}
 800be74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be7c:	4291      	cmp	r1, r2
 800be7e:	d1f9      	bne.n	800be74 <memcpy+0xe>
 800be80:	bd10      	pop	{r4, pc}

0800be82 <quorem>:
 800be82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be86:	6903      	ldr	r3, [r0, #16]
 800be88:	690c      	ldr	r4, [r1, #16]
 800be8a:	42a3      	cmp	r3, r4
 800be8c:	4607      	mov	r7, r0
 800be8e:	db7e      	blt.n	800bf8e <quorem+0x10c>
 800be90:	3c01      	subs	r4, #1
 800be92:	f101 0814 	add.w	r8, r1, #20
 800be96:	f100 0514 	add.w	r5, r0, #20
 800be9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bea8:	3301      	adds	r3, #1
 800beaa:	429a      	cmp	r2, r3
 800beac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800beb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800beb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800beb8:	d331      	bcc.n	800bf1e <quorem+0x9c>
 800beba:	f04f 0e00 	mov.w	lr, #0
 800bebe:	4640      	mov	r0, r8
 800bec0:	46ac      	mov	ip, r5
 800bec2:	46f2      	mov	sl, lr
 800bec4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bec8:	b293      	uxth	r3, r2
 800beca:	fb06 e303 	mla	r3, r6, r3, lr
 800bece:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bed2:	0c1a      	lsrs	r2, r3, #16
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	ebaa 0303 	sub.w	r3, sl, r3
 800beda:	f8dc a000 	ldr.w	sl, [ip]
 800bede:	fa13 f38a 	uxtah	r3, r3, sl
 800bee2:	fb06 220e 	mla	r2, r6, lr, r2
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	9b00      	ldr	r3, [sp, #0]
 800beea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800beee:	b292      	uxth	r2, r2
 800bef0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bef8:	f8bd 3000 	ldrh.w	r3, [sp]
 800befc:	4581      	cmp	r9, r0
 800befe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf02:	f84c 3b04 	str.w	r3, [ip], #4
 800bf06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf0a:	d2db      	bcs.n	800bec4 <quorem+0x42>
 800bf0c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf10:	b92b      	cbnz	r3, 800bf1e <quorem+0x9c>
 800bf12:	9b01      	ldr	r3, [sp, #4]
 800bf14:	3b04      	subs	r3, #4
 800bf16:	429d      	cmp	r5, r3
 800bf18:	461a      	mov	r2, r3
 800bf1a:	d32c      	bcc.n	800bf76 <quorem+0xf4>
 800bf1c:	613c      	str	r4, [r7, #16]
 800bf1e:	4638      	mov	r0, r7
 800bf20:	f001 f9a8 	bl	800d274 <__mcmp>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	db22      	blt.n	800bf6e <quorem+0xec>
 800bf28:	3601      	adds	r6, #1
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf32:	f8d1 c000 	ldr.w	ip, [r1]
 800bf36:	b293      	uxth	r3, r2
 800bf38:	1ac3      	subs	r3, r0, r3
 800bf3a:	0c12      	lsrs	r2, r2, #16
 800bf3c:	fa13 f38c 	uxtah	r3, r3, ip
 800bf40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bf44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf4e:	45c1      	cmp	r9, r8
 800bf50:	f841 3b04 	str.w	r3, [r1], #4
 800bf54:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf58:	d2e9      	bcs.n	800bf2e <quorem+0xac>
 800bf5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf62:	b922      	cbnz	r2, 800bf6e <quorem+0xec>
 800bf64:	3b04      	subs	r3, #4
 800bf66:	429d      	cmp	r5, r3
 800bf68:	461a      	mov	r2, r3
 800bf6a:	d30a      	bcc.n	800bf82 <quorem+0x100>
 800bf6c:	613c      	str	r4, [r7, #16]
 800bf6e:	4630      	mov	r0, r6
 800bf70:	b003      	add	sp, #12
 800bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf76:	6812      	ldr	r2, [r2, #0]
 800bf78:	3b04      	subs	r3, #4
 800bf7a:	2a00      	cmp	r2, #0
 800bf7c:	d1ce      	bne.n	800bf1c <quorem+0x9a>
 800bf7e:	3c01      	subs	r4, #1
 800bf80:	e7c9      	b.n	800bf16 <quorem+0x94>
 800bf82:	6812      	ldr	r2, [r2, #0]
 800bf84:	3b04      	subs	r3, #4
 800bf86:	2a00      	cmp	r2, #0
 800bf88:	d1f0      	bne.n	800bf6c <quorem+0xea>
 800bf8a:	3c01      	subs	r4, #1
 800bf8c:	e7eb      	b.n	800bf66 <quorem+0xe4>
 800bf8e:	2000      	movs	r0, #0
 800bf90:	e7ee      	b.n	800bf70 <quorem+0xee>
 800bf92:	0000      	movs	r0, r0
 800bf94:	0000      	movs	r0, r0
	...

0800bf98 <_dtoa_r>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	ed2d 8b04 	vpush	{d8-d9}
 800bfa0:	69c5      	ldr	r5, [r0, #28]
 800bfa2:	b093      	sub	sp, #76	; 0x4c
 800bfa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bfa8:	ec57 6b10 	vmov	r6, r7, d0
 800bfac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bfb0:	9107      	str	r1, [sp, #28]
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	920a      	str	r2, [sp, #40]	; 0x28
 800bfb6:	930d      	str	r3, [sp, #52]	; 0x34
 800bfb8:	b975      	cbnz	r5, 800bfd8 <_dtoa_r+0x40>
 800bfba:	2010      	movs	r0, #16
 800bfbc:	f000 fe2a 	bl	800cc14 <malloc>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	61e0      	str	r0, [r4, #28]
 800bfc4:	b920      	cbnz	r0, 800bfd0 <_dtoa_r+0x38>
 800bfc6:	4bae      	ldr	r3, [pc, #696]	; (800c280 <_dtoa_r+0x2e8>)
 800bfc8:	21ef      	movs	r1, #239	; 0xef
 800bfca:	48ae      	ldr	r0, [pc, #696]	; (800c284 <_dtoa_r+0x2ec>)
 800bfcc:	f001 fe5c 	bl	800dc88 <__assert_func>
 800bfd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bfd4:	6005      	str	r5, [r0, #0]
 800bfd6:	60c5      	str	r5, [r0, #12]
 800bfd8:	69e3      	ldr	r3, [r4, #28]
 800bfda:	6819      	ldr	r1, [r3, #0]
 800bfdc:	b151      	cbz	r1, 800bff4 <_dtoa_r+0x5c>
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	604a      	str	r2, [r1, #4]
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	4093      	lsls	r3, r2
 800bfe6:	608b      	str	r3, [r1, #8]
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 ff07 	bl	800cdfc <_Bfree>
 800bfee:	69e3      	ldr	r3, [r4, #28]
 800bff0:	2200      	movs	r2, #0
 800bff2:	601a      	str	r2, [r3, #0]
 800bff4:	1e3b      	subs	r3, r7, #0
 800bff6:	bfbb      	ittet	lt
 800bff8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bffc:	9303      	strlt	r3, [sp, #12]
 800bffe:	2300      	movge	r3, #0
 800c000:	2201      	movlt	r2, #1
 800c002:	bfac      	ite	ge
 800c004:	f8c8 3000 	strge.w	r3, [r8]
 800c008:	f8c8 2000 	strlt.w	r2, [r8]
 800c00c:	4b9e      	ldr	r3, [pc, #632]	; (800c288 <_dtoa_r+0x2f0>)
 800c00e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c012:	ea33 0308 	bics.w	r3, r3, r8
 800c016:	d11b      	bne.n	800c050 <_dtoa_r+0xb8>
 800c018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c01a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c01e:	6013      	str	r3, [r2, #0]
 800c020:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c024:	4333      	orrs	r3, r6
 800c026:	f000 8593 	beq.w	800cb50 <_dtoa_r+0xbb8>
 800c02a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c02c:	b963      	cbnz	r3, 800c048 <_dtoa_r+0xb0>
 800c02e:	4b97      	ldr	r3, [pc, #604]	; (800c28c <_dtoa_r+0x2f4>)
 800c030:	e027      	b.n	800c082 <_dtoa_r+0xea>
 800c032:	4b97      	ldr	r3, [pc, #604]	; (800c290 <_dtoa_r+0x2f8>)
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	3308      	adds	r3, #8
 800c038:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	9800      	ldr	r0, [sp, #0]
 800c03e:	b013      	add	sp, #76	; 0x4c
 800c040:	ecbd 8b04 	vpop	{d8-d9}
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c048:	4b90      	ldr	r3, [pc, #576]	; (800c28c <_dtoa_r+0x2f4>)
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	3303      	adds	r3, #3
 800c04e:	e7f3      	b.n	800c038 <_dtoa_r+0xa0>
 800c050:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c054:	2200      	movs	r2, #0
 800c056:	ec51 0b17 	vmov	r0, r1, d7
 800c05a:	eeb0 8a47 	vmov.f32	s16, s14
 800c05e:	eef0 8a67 	vmov.f32	s17, s15
 800c062:	2300      	movs	r3, #0
 800c064:	f7f4 fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 800c068:	4681      	mov	r9, r0
 800c06a:	b160      	cbz	r0, 800c086 <_dtoa_r+0xee>
 800c06c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c06e:	2301      	movs	r3, #1
 800c070:	6013      	str	r3, [r2, #0]
 800c072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 8568 	beq.w	800cb4a <_dtoa_r+0xbb2>
 800c07a:	4b86      	ldr	r3, [pc, #536]	; (800c294 <_dtoa_r+0x2fc>)
 800c07c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	3b01      	subs	r3, #1
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	e7da      	b.n	800c03c <_dtoa_r+0xa4>
 800c086:	aa10      	add	r2, sp, #64	; 0x40
 800c088:	a911      	add	r1, sp, #68	; 0x44
 800c08a:	4620      	mov	r0, r4
 800c08c:	eeb0 0a48 	vmov.f32	s0, s16
 800c090:	eef0 0a68 	vmov.f32	s1, s17
 800c094:	f001 f994 	bl	800d3c0 <__d2b>
 800c098:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c09c:	4682      	mov	sl, r0
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	d07f      	beq.n	800c1a2 <_dtoa_r+0x20a>
 800c0a2:	ee18 3a90 	vmov	r3, s17
 800c0a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c0ae:	ec51 0b18 	vmov	r0, r1, d8
 800c0b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c0ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c0be:	4619      	mov	r1, r3
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	4b75      	ldr	r3, [pc, #468]	; (800c298 <_dtoa_r+0x300>)
 800c0c4:	f7f4 f8e0 	bl	8000288 <__aeabi_dsub>
 800c0c8:	a367      	add	r3, pc, #412	; (adr r3, 800c268 <_dtoa_r+0x2d0>)
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	f7f4 fa93 	bl	80005f8 <__aeabi_dmul>
 800c0d2:	a367      	add	r3, pc, #412	; (adr r3, 800c270 <_dtoa_r+0x2d8>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	f7f4 f8d8 	bl	800028c <__adddf3>
 800c0dc:	4606      	mov	r6, r0
 800c0de:	4628      	mov	r0, r5
 800c0e0:	460f      	mov	r7, r1
 800c0e2:	f7f4 fa1f 	bl	8000524 <__aeabi_i2d>
 800c0e6:	a364      	add	r3, pc, #400	; (adr r3, 800c278 <_dtoa_r+0x2e0>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f7f4 fa84 	bl	80005f8 <__aeabi_dmul>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	4639      	mov	r1, r7
 800c0f8:	f7f4 f8c8 	bl	800028c <__adddf3>
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460f      	mov	r7, r1
 800c100:	f7f4 fd2a 	bl	8000b58 <__aeabi_d2iz>
 800c104:	2200      	movs	r2, #0
 800c106:	4683      	mov	fp, r0
 800c108:	2300      	movs	r3, #0
 800c10a:	4630      	mov	r0, r6
 800c10c:	4639      	mov	r1, r7
 800c10e:	f7f4 fce5 	bl	8000adc <__aeabi_dcmplt>
 800c112:	b148      	cbz	r0, 800c128 <_dtoa_r+0x190>
 800c114:	4658      	mov	r0, fp
 800c116:	f7f4 fa05 	bl	8000524 <__aeabi_i2d>
 800c11a:	4632      	mov	r2, r6
 800c11c:	463b      	mov	r3, r7
 800c11e:	f7f4 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c122:	b908      	cbnz	r0, 800c128 <_dtoa_r+0x190>
 800c124:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c128:	f1bb 0f16 	cmp.w	fp, #22
 800c12c:	d857      	bhi.n	800c1de <_dtoa_r+0x246>
 800c12e:	4b5b      	ldr	r3, [pc, #364]	; (800c29c <_dtoa_r+0x304>)
 800c130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	ec51 0b18 	vmov	r0, r1, d8
 800c13c:	f7f4 fcce 	bl	8000adc <__aeabi_dcmplt>
 800c140:	2800      	cmp	r0, #0
 800c142:	d04e      	beq.n	800c1e2 <_dtoa_r+0x24a>
 800c144:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c148:	2300      	movs	r3, #0
 800c14a:	930c      	str	r3, [sp, #48]	; 0x30
 800c14c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c14e:	1b5b      	subs	r3, r3, r5
 800c150:	1e5a      	subs	r2, r3, #1
 800c152:	bf45      	ittet	mi
 800c154:	f1c3 0301 	rsbmi	r3, r3, #1
 800c158:	9305      	strmi	r3, [sp, #20]
 800c15a:	2300      	movpl	r3, #0
 800c15c:	2300      	movmi	r3, #0
 800c15e:	9206      	str	r2, [sp, #24]
 800c160:	bf54      	ite	pl
 800c162:	9305      	strpl	r3, [sp, #20]
 800c164:	9306      	strmi	r3, [sp, #24]
 800c166:	f1bb 0f00 	cmp.w	fp, #0
 800c16a:	db3c      	blt.n	800c1e6 <_dtoa_r+0x24e>
 800c16c:	9b06      	ldr	r3, [sp, #24]
 800c16e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c172:	445b      	add	r3, fp
 800c174:	9306      	str	r3, [sp, #24]
 800c176:	2300      	movs	r3, #0
 800c178:	9308      	str	r3, [sp, #32]
 800c17a:	9b07      	ldr	r3, [sp, #28]
 800c17c:	2b09      	cmp	r3, #9
 800c17e:	d868      	bhi.n	800c252 <_dtoa_r+0x2ba>
 800c180:	2b05      	cmp	r3, #5
 800c182:	bfc4      	itt	gt
 800c184:	3b04      	subgt	r3, #4
 800c186:	9307      	strgt	r3, [sp, #28]
 800c188:	9b07      	ldr	r3, [sp, #28]
 800c18a:	f1a3 0302 	sub.w	r3, r3, #2
 800c18e:	bfcc      	ite	gt
 800c190:	2500      	movgt	r5, #0
 800c192:	2501      	movle	r5, #1
 800c194:	2b03      	cmp	r3, #3
 800c196:	f200 8085 	bhi.w	800c2a4 <_dtoa_r+0x30c>
 800c19a:	e8df f003 	tbb	[pc, r3]
 800c19e:	3b2e      	.short	0x3b2e
 800c1a0:	5839      	.short	0x5839
 800c1a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c1a6:	441d      	add	r5, r3
 800c1a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c1ac:	2b20      	cmp	r3, #32
 800c1ae:	bfc1      	itttt	gt
 800c1b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c1b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c1b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c1bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c1c0:	bfd6      	itet	le
 800c1c2:	f1c3 0320 	rsble	r3, r3, #32
 800c1c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c1ca:	fa06 f003 	lslle.w	r0, r6, r3
 800c1ce:	f7f4 f999 	bl	8000504 <__aeabi_ui2d>
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c1d8:	3d01      	subs	r5, #1
 800c1da:	920e      	str	r2, [sp, #56]	; 0x38
 800c1dc:	e76f      	b.n	800c0be <_dtoa_r+0x126>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e7b3      	b.n	800c14a <_dtoa_r+0x1b2>
 800c1e2:	900c      	str	r0, [sp, #48]	; 0x30
 800c1e4:	e7b2      	b.n	800c14c <_dtoa_r+0x1b4>
 800c1e6:	9b05      	ldr	r3, [sp, #20]
 800c1e8:	eba3 030b 	sub.w	r3, r3, fp
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	f1cb 0300 	rsb	r3, fp, #0
 800c1f2:	9308      	str	r3, [sp, #32]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1f8:	e7bf      	b.n	800c17a <_dtoa_r+0x1e2>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c200:	2b00      	cmp	r3, #0
 800c202:	dc52      	bgt.n	800c2aa <_dtoa_r+0x312>
 800c204:	2301      	movs	r3, #1
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	9304      	str	r3, [sp, #16]
 800c20a:	461a      	mov	r2, r3
 800c20c:	920a      	str	r2, [sp, #40]	; 0x28
 800c20e:	e00b      	b.n	800c228 <_dtoa_r+0x290>
 800c210:	2301      	movs	r3, #1
 800c212:	e7f3      	b.n	800c1fc <_dtoa_r+0x264>
 800c214:	2300      	movs	r3, #0
 800c216:	9309      	str	r3, [sp, #36]	; 0x24
 800c218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c21a:	445b      	add	r3, fp
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	3301      	adds	r3, #1
 800c220:	2b01      	cmp	r3, #1
 800c222:	9304      	str	r3, [sp, #16]
 800c224:	bfb8      	it	lt
 800c226:	2301      	movlt	r3, #1
 800c228:	69e0      	ldr	r0, [r4, #28]
 800c22a:	2100      	movs	r1, #0
 800c22c:	2204      	movs	r2, #4
 800c22e:	f102 0614 	add.w	r6, r2, #20
 800c232:	429e      	cmp	r6, r3
 800c234:	d93d      	bls.n	800c2b2 <_dtoa_r+0x31a>
 800c236:	6041      	str	r1, [r0, #4]
 800c238:	4620      	mov	r0, r4
 800c23a:	f000 fd9f 	bl	800cd7c <_Balloc>
 800c23e:	9000      	str	r0, [sp, #0]
 800c240:	2800      	cmp	r0, #0
 800c242:	d139      	bne.n	800c2b8 <_dtoa_r+0x320>
 800c244:	4b16      	ldr	r3, [pc, #88]	; (800c2a0 <_dtoa_r+0x308>)
 800c246:	4602      	mov	r2, r0
 800c248:	f240 11af 	movw	r1, #431	; 0x1af
 800c24c:	e6bd      	b.n	800bfca <_dtoa_r+0x32>
 800c24e:	2301      	movs	r3, #1
 800c250:	e7e1      	b.n	800c216 <_dtoa_r+0x27e>
 800c252:	2501      	movs	r5, #1
 800c254:	2300      	movs	r3, #0
 800c256:	9307      	str	r3, [sp, #28]
 800c258:	9509      	str	r5, [sp, #36]	; 0x24
 800c25a:	f04f 33ff 	mov.w	r3, #4294967295
 800c25e:	9301      	str	r3, [sp, #4]
 800c260:	9304      	str	r3, [sp, #16]
 800c262:	2200      	movs	r2, #0
 800c264:	2312      	movs	r3, #18
 800c266:	e7d1      	b.n	800c20c <_dtoa_r+0x274>
 800c268:	636f4361 	.word	0x636f4361
 800c26c:	3fd287a7 	.word	0x3fd287a7
 800c270:	8b60c8b3 	.word	0x8b60c8b3
 800c274:	3fc68a28 	.word	0x3fc68a28
 800c278:	509f79fb 	.word	0x509f79fb
 800c27c:	3fd34413 	.word	0x3fd34413
 800c280:	0800e1d2 	.word	0x0800e1d2
 800c284:	0800e1e9 	.word	0x0800e1e9
 800c288:	7ff00000 	.word	0x7ff00000
 800c28c:	0800e1ce 	.word	0x0800e1ce
 800c290:	0800e1c5 	.word	0x0800e1c5
 800c294:	0800e1a2 	.word	0x0800e1a2
 800c298:	3ff80000 	.word	0x3ff80000
 800c29c:	0800e2d8 	.word	0x0800e2d8
 800c2a0:	0800e241 	.word	0x0800e241
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a8:	e7d7      	b.n	800c25a <_dtoa_r+0x2c2>
 800c2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	9304      	str	r3, [sp, #16]
 800c2b0:	e7ba      	b.n	800c228 <_dtoa_r+0x290>
 800c2b2:	3101      	adds	r1, #1
 800c2b4:	0052      	lsls	r2, r2, #1
 800c2b6:	e7ba      	b.n	800c22e <_dtoa_r+0x296>
 800c2b8:	69e3      	ldr	r3, [r4, #28]
 800c2ba:	9a00      	ldr	r2, [sp, #0]
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	2b0e      	cmp	r3, #14
 800c2c2:	f200 80a8 	bhi.w	800c416 <_dtoa_r+0x47e>
 800c2c6:	2d00      	cmp	r5, #0
 800c2c8:	f000 80a5 	beq.w	800c416 <_dtoa_r+0x47e>
 800c2cc:	f1bb 0f00 	cmp.w	fp, #0
 800c2d0:	dd38      	ble.n	800c344 <_dtoa_r+0x3ac>
 800c2d2:	4bc0      	ldr	r3, [pc, #768]	; (800c5d4 <_dtoa_r+0x63c>)
 800c2d4:	f00b 020f 	and.w	r2, fp, #15
 800c2d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c2e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c2e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c2e8:	d019      	beq.n	800c31e <_dtoa_r+0x386>
 800c2ea:	4bbb      	ldr	r3, [pc, #748]	; (800c5d8 <_dtoa_r+0x640>)
 800c2ec:	ec51 0b18 	vmov	r0, r1, d8
 800c2f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2f4:	f7f4 faaa 	bl	800084c <__aeabi_ddiv>
 800c2f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2fc:	f008 080f 	and.w	r8, r8, #15
 800c300:	2503      	movs	r5, #3
 800c302:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c5d8 <_dtoa_r+0x640>
 800c306:	f1b8 0f00 	cmp.w	r8, #0
 800c30a:	d10a      	bne.n	800c322 <_dtoa_r+0x38a>
 800c30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c310:	4632      	mov	r2, r6
 800c312:	463b      	mov	r3, r7
 800c314:	f7f4 fa9a 	bl	800084c <__aeabi_ddiv>
 800c318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c31c:	e02b      	b.n	800c376 <_dtoa_r+0x3de>
 800c31e:	2502      	movs	r5, #2
 800c320:	e7ef      	b.n	800c302 <_dtoa_r+0x36a>
 800c322:	f018 0f01 	tst.w	r8, #1
 800c326:	d008      	beq.n	800c33a <_dtoa_r+0x3a2>
 800c328:	4630      	mov	r0, r6
 800c32a:	4639      	mov	r1, r7
 800c32c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c330:	f7f4 f962 	bl	80005f8 <__aeabi_dmul>
 800c334:	3501      	adds	r5, #1
 800c336:	4606      	mov	r6, r0
 800c338:	460f      	mov	r7, r1
 800c33a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c33e:	f109 0908 	add.w	r9, r9, #8
 800c342:	e7e0      	b.n	800c306 <_dtoa_r+0x36e>
 800c344:	f000 809f 	beq.w	800c486 <_dtoa_r+0x4ee>
 800c348:	f1cb 0600 	rsb	r6, fp, #0
 800c34c:	4ba1      	ldr	r3, [pc, #644]	; (800c5d4 <_dtoa_r+0x63c>)
 800c34e:	4fa2      	ldr	r7, [pc, #648]	; (800c5d8 <_dtoa_r+0x640>)
 800c350:	f006 020f 	and.w	r2, r6, #15
 800c354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	ec51 0b18 	vmov	r0, r1, d8
 800c360:	f7f4 f94a 	bl	80005f8 <__aeabi_dmul>
 800c364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c368:	1136      	asrs	r6, r6, #4
 800c36a:	2300      	movs	r3, #0
 800c36c:	2502      	movs	r5, #2
 800c36e:	2e00      	cmp	r6, #0
 800c370:	d17e      	bne.n	800c470 <_dtoa_r+0x4d8>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1d0      	bne.n	800c318 <_dtoa_r+0x380>
 800c376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c378:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f000 8084 	beq.w	800c48a <_dtoa_r+0x4f2>
 800c382:	4b96      	ldr	r3, [pc, #600]	; (800c5dc <_dtoa_r+0x644>)
 800c384:	2200      	movs	r2, #0
 800c386:	4640      	mov	r0, r8
 800c388:	4649      	mov	r1, r9
 800c38a:	f7f4 fba7 	bl	8000adc <__aeabi_dcmplt>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d07b      	beq.n	800c48a <_dtoa_r+0x4f2>
 800c392:	9b04      	ldr	r3, [sp, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d078      	beq.n	800c48a <_dtoa_r+0x4f2>
 800c398:	9b01      	ldr	r3, [sp, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	dd39      	ble.n	800c412 <_dtoa_r+0x47a>
 800c39e:	4b90      	ldr	r3, [pc, #576]	; (800c5e0 <_dtoa_r+0x648>)
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	4640      	mov	r0, r8
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	f7f4 f927 	bl	80005f8 <__aeabi_dmul>
 800c3aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ae:	9e01      	ldr	r6, [sp, #4]
 800c3b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c3b4:	3501      	adds	r5, #1
 800c3b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f7f4 f8b2 	bl	8000524 <__aeabi_i2d>
 800c3c0:	4642      	mov	r2, r8
 800c3c2:	464b      	mov	r3, r9
 800c3c4:	f7f4 f918 	bl	80005f8 <__aeabi_dmul>
 800c3c8:	4b86      	ldr	r3, [pc, #536]	; (800c5e4 <_dtoa_r+0x64c>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f7f3 ff5e 	bl	800028c <__adddf3>
 800c3d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d8:	9303      	str	r3, [sp, #12]
 800c3da:	2e00      	cmp	r6, #0
 800c3dc:	d158      	bne.n	800c490 <_dtoa_r+0x4f8>
 800c3de:	4b82      	ldr	r3, [pc, #520]	; (800c5e8 <_dtoa_r+0x650>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	4649      	mov	r1, r9
 800c3e6:	f7f3 ff4f 	bl	8000288 <__aeabi_dsub>
 800c3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3ee:	4680      	mov	r8, r0
 800c3f0:	4689      	mov	r9, r1
 800c3f2:	f7f4 fb91 	bl	8000b18 <__aeabi_dcmpgt>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	f040 8296 	bne.w	800c928 <_dtoa_r+0x990>
 800c3fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c400:	4640      	mov	r0, r8
 800c402:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c406:	4649      	mov	r1, r9
 800c408:	f7f4 fb68 	bl	8000adc <__aeabi_dcmplt>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	f040 8289 	bne.w	800c924 <_dtoa_r+0x98c>
 800c412:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f2c0 814e 	blt.w	800c6ba <_dtoa_r+0x722>
 800c41e:	f1bb 0f0e 	cmp.w	fp, #14
 800c422:	f300 814a 	bgt.w	800c6ba <_dtoa_r+0x722>
 800c426:	4b6b      	ldr	r3, [pc, #428]	; (800c5d4 <_dtoa_r+0x63c>)
 800c428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c42c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c432:	2b00      	cmp	r3, #0
 800c434:	f280 80dc 	bge.w	800c5f0 <_dtoa_r+0x658>
 800c438:	9b04      	ldr	r3, [sp, #16]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f300 80d8 	bgt.w	800c5f0 <_dtoa_r+0x658>
 800c440:	f040 826f 	bne.w	800c922 <_dtoa_r+0x98a>
 800c444:	4b68      	ldr	r3, [pc, #416]	; (800c5e8 <_dtoa_r+0x650>)
 800c446:	2200      	movs	r2, #0
 800c448:	4640      	mov	r0, r8
 800c44a:	4649      	mov	r1, r9
 800c44c:	f7f4 f8d4 	bl	80005f8 <__aeabi_dmul>
 800c450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c454:	f7f4 fb56 	bl	8000b04 <__aeabi_dcmpge>
 800c458:	9e04      	ldr	r6, [sp, #16]
 800c45a:	4637      	mov	r7, r6
 800c45c:	2800      	cmp	r0, #0
 800c45e:	f040 8245 	bne.w	800c8ec <_dtoa_r+0x954>
 800c462:	9d00      	ldr	r5, [sp, #0]
 800c464:	2331      	movs	r3, #49	; 0x31
 800c466:	f805 3b01 	strb.w	r3, [r5], #1
 800c46a:	f10b 0b01 	add.w	fp, fp, #1
 800c46e:	e241      	b.n	800c8f4 <_dtoa_r+0x95c>
 800c470:	07f2      	lsls	r2, r6, #31
 800c472:	d505      	bpl.n	800c480 <_dtoa_r+0x4e8>
 800c474:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c478:	f7f4 f8be 	bl	80005f8 <__aeabi_dmul>
 800c47c:	3501      	adds	r5, #1
 800c47e:	2301      	movs	r3, #1
 800c480:	1076      	asrs	r6, r6, #1
 800c482:	3708      	adds	r7, #8
 800c484:	e773      	b.n	800c36e <_dtoa_r+0x3d6>
 800c486:	2502      	movs	r5, #2
 800c488:	e775      	b.n	800c376 <_dtoa_r+0x3de>
 800c48a:	9e04      	ldr	r6, [sp, #16]
 800c48c:	465f      	mov	r7, fp
 800c48e:	e792      	b.n	800c3b6 <_dtoa_r+0x41e>
 800c490:	9900      	ldr	r1, [sp, #0]
 800c492:	4b50      	ldr	r3, [pc, #320]	; (800c5d4 <_dtoa_r+0x63c>)
 800c494:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c498:	4431      	add	r1, r6
 800c49a:	9102      	str	r1, [sp, #8]
 800c49c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c49e:	eeb0 9a47 	vmov.f32	s18, s14
 800c4a2:	eef0 9a67 	vmov.f32	s19, s15
 800c4a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c4aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	d044      	beq.n	800c53c <_dtoa_r+0x5a4>
 800c4b2:	494e      	ldr	r1, [pc, #312]	; (800c5ec <_dtoa_r+0x654>)
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	f7f4 f9c9 	bl	800084c <__aeabi_ddiv>
 800c4ba:	ec53 2b19 	vmov	r2, r3, d9
 800c4be:	f7f3 fee3 	bl	8000288 <__aeabi_dsub>
 800c4c2:	9d00      	ldr	r5, [sp, #0]
 800c4c4:	ec41 0b19 	vmov	d9, r0, r1
 800c4c8:	4649      	mov	r1, r9
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	f7f4 fb44 	bl	8000b58 <__aeabi_d2iz>
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	f7f4 f827 	bl	8000524 <__aeabi_i2d>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	460b      	mov	r3, r1
 800c4da:	4640      	mov	r0, r8
 800c4dc:	4649      	mov	r1, r9
 800c4de:	f7f3 fed3 	bl	8000288 <__aeabi_dsub>
 800c4e2:	3630      	adds	r6, #48	; 0x30
 800c4e4:	f805 6b01 	strb.w	r6, [r5], #1
 800c4e8:	ec53 2b19 	vmov	r2, r3, d9
 800c4ec:	4680      	mov	r8, r0
 800c4ee:	4689      	mov	r9, r1
 800c4f0:	f7f4 faf4 	bl	8000adc <__aeabi_dcmplt>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d164      	bne.n	800c5c2 <_dtoa_r+0x62a>
 800c4f8:	4642      	mov	r2, r8
 800c4fa:	464b      	mov	r3, r9
 800c4fc:	4937      	ldr	r1, [pc, #220]	; (800c5dc <_dtoa_r+0x644>)
 800c4fe:	2000      	movs	r0, #0
 800c500:	f7f3 fec2 	bl	8000288 <__aeabi_dsub>
 800c504:	ec53 2b19 	vmov	r2, r3, d9
 800c508:	f7f4 fae8 	bl	8000adc <__aeabi_dcmplt>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	f040 80b6 	bne.w	800c67e <_dtoa_r+0x6e6>
 800c512:	9b02      	ldr	r3, [sp, #8]
 800c514:	429d      	cmp	r5, r3
 800c516:	f43f af7c 	beq.w	800c412 <_dtoa_r+0x47a>
 800c51a:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <_dtoa_r+0x648>)
 800c51c:	ec51 0b19 	vmov	r0, r1, d9
 800c520:	2200      	movs	r2, #0
 800c522:	f7f4 f869 	bl	80005f8 <__aeabi_dmul>
 800c526:	4b2e      	ldr	r3, [pc, #184]	; (800c5e0 <_dtoa_r+0x648>)
 800c528:	ec41 0b19 	vmov	d9, r0, r1
 800c52c:	2200      	movs	r2, #0
 800c52e:	4640      	mov	r0, r8
 800c530:	4649      	mov	r1, r9
 800c532:	f7f4 f861 	bl	80005f8 <__aeabi_dmul>
 800c536:	4680      	mov	r8, r0
 800c538:	4689      	mov	r9, r1
 800c53a:	e7c5      	b.n	800c4c8 <_dtoa_r+0x530>
 800c53c:	ec51 0b17 	vmov	r0, r1, d7
 800c540:	f7f4 f85a 	bl	80005f8 <__aeabi_dmul>
 800c544:	9b02      	ldr	r3, [sp, #8]
 800c546:	9d00      	ldr	r5, [sp, #0]
 800c548:	930f      	str	r3, [sp, #60]	; 0x3c
 800c54a:	ec41 0b19 	vmov	d9, r0, r1
 800c54e:	4649      	mov	r1, r9
 800c550:	4640      	mov	r0, r8
 800c552:	f7f4 fb01 	bl	8000b58 <__aeabi_d2iz>
 800c556:	4606      	mov	r6, r0
 800c558:	f7f3 ffe4 	bl	8000524 <__aeabi_i2d>
 800c55c:	3630      	adds	r6, #48	; 0x30
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4640      	mov	r0, r8
 800c564:	4649      	mov	r1, r9
 800c566:	f7f3 fe8f 	bl	8000288 <__aeabi_dsub>
 800c56a:	f805 6b01 	strb.w	r6, [r5], #1
 800c56e:	9b02      	ldr	r3, [sp, #8]
 800c570:	429d      	cmp	r5, r3
 800c572:	4680      	mov	r8, r0
 800c574:	4689      	mov	r9, r1
 800c576:	f04f 0200 	mov.w	r2, #0
 800c57a:	d124      	bne.n	800c5c6 <_dtoa_r+0x62e>
 800c57c:	4b1b      	ldr	r3, [pc, #108]	; (800c5ec <_dtoa_r+0x654>)
 800c57e:	ec51 0b19 	vmov	r0, r1, d9
 800c582:	f7f3 fe83 	bl	800028c <__adddf3>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4640      	mov	r0, r8
 800c58c:	4649      	mov	r1, r9
 800c58e:	f7f4 fac3 	bl	8000b18 <__aeabi_dcmpgt>
 800c592:	2800      	cmp	r0, #0
 800c594:	d173      	bne.n	800c67e <_dtoa_r+0x6e6>
 800c596:	ec53 2b19 	vmov	r2, r3, d9
 800c59a:	4914      	ldr	r1, [pc, #80]	; (800c5ec <_dtoa_r+0x654>)
 800c59c:	2000      	movs	r0, #0
 800c59e:	f7f3 fe73 	bl	8000288 <__aeabi_dsub>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4640      	mov	r0, r8
 800c5a8:	4649      	mov	r1, r9
 800c5aa:	f7f4 fa97 	bl	8000adc <__aeabi_dcmplt>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f43f af2f 	beq.w	800c412 <_dtoa_r+0x47a>
 800c5b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c5b6:	1e6b      	subs	r3, r5, #1
 800c5b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5be:	2b30      	cmp	r3, #48	; 0x30
 800c5c0:	d0f8      	beq.n	800c5b4 <_dtoa_r+0x61c>
 800c5c2:	46bb      	mov	fp, r7
 800c5c4:	e04a      	b.n	800c65c <_dtoa_r+0x6c4>
 800c5c6:	4b06      	ldr	r3, [pc, #24]	; (800c5e0 <_dtoa_r+0x648>)
 800c5c8:	f7f4 f816 	bl	80005f8 <__aeabi_dmul>
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	4689      	mov	r9, r1
 800c5d0:	e7bd      	b.n	800c54e <_dtoa_r+0x5b6>
 800c5d2:	bf00      	nop
 800c5d4:	0800e2d8 	.word	0x0800e2d8
 800c5d8:	0800e2b0 	.word	0x0800e2b0
 800c5dc:	3ff00000 	.word	0x3ff00000
 800c5e0:	40240000 	.word	0x40240000
 800c5e4:	401c0000 	.word	0x401c0000
 800c5e8:	40140000 	.word	0x40140000
 800c5ec:	3fe00000 	.word	0x3fe00000
 800c5f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c5f4:	9d00      	ldr	r5, [sp, #0]
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	464b      	mov	r3, r9
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	4639      	mov	r1, r7
 800c5fe:	f7f4 f925 	bl	800084c <__aeabi_ddiv>
 800c602:	f7f4 faa9 	bl	8000b58 <__aeabi_d2iz>
 800c606:	9001      	str	r0, [sp, #4]
 800c608:	f7f3 ff8c 	bl	8000524 <__aeabi_i2d>
 800c60c:	4642      	mov	r2, r8
 800c60e:	464b      	mov	r3, r9
 800c610:	f7f3 fff2 	bl	80005f8 <__aeabi_dmul>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	4630      	mov	r0, r6
 800c61a:	4639      	mov	r1, r7
 800c61c:	f7f3 fe34 	bl	8000288 <__aeabi_dsub>
 800c620:	9e01      	ldr	r6, [sp, #4]
 800c622:	9f04      	ldr	r7, [sp, #16]
 800c624:	3630      	adds	r6, #48	; 0x30
 800c626:	f805 6b01 	strb.w	r6, [r5], #1
 800c62a:	9e00      	ldr	r6, [sp, #0]
 800c62c:	1bae      	subs	r6, r5, r6
 800c62e:	42b7      	cmp	r7, r6
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	d134      	bne.n	800c6a0 <_dtoa_r+0x708>
 800c636:	f7f3 fe29 	bl	800028c <__adddf3>
 800c63a:	4642      	mov	r2, r8
 800c63c:	464b      	mov	r3, r9
 800c63e:	4606      	mov	r6, r0
 800c640:	460f      	mov	r7, r1
 800c642:	f7f4 fa69 	bl	8000b18 <__aeabi_dcmpgt>
 800c646:	b9c8      	cbnz	r0, 800c67c <_dtoa_r+0x6e4>
 800c648:	4642      	mov	r2, r8
 800c64a:	464b      	mov	r3, r9
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
 800c650:	f7f4 fa3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c654:	b110      	cbz	r0, 800c65c <_dtoa_r+0x6c4>
 800c656:	9b01      	ldr	r3, [sp, #4]
 800c658:	07db      	lsls	r3, r3, #31
 800c65a:	d40f      	bmi.n	800c67c <_dtoa_r+0x6e4>
 800c65c:	4651      	mov	r1, sl
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 fbcc 	bl	800cdfc <_Bfree>
 800c664:	2300      	movs	r3, #0
 800c666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c668:	702b      	strb	r3, [r5, #0]
 800c66a:	f10b 0301 	add.w	r3, fp, #1
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c672:	2b00      	cmp	r3, #0
 800c674:	f43f ace2 	beq.w	800c03c <_dtoa_r+0xa4>
 800c678:	601d      	str	r5, [r3, #0]
 800c67a:	e4df      	b.n	800c03c <_dtoa_r+0xa4>
 800c67c:	465f      	mov	r7, fp
 800c67e:	462b      	mov	r3, r5
 800c680:	461d      	mov	r5, r3
 800c682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c686:	2a39      	cmp	r2, #57	; 0x39
 800c688:	d106      	bne.n	800c698 <_dtoa_r+0x700>
 800c68a:	9a00      	ldr	r2, [sp, #0]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d1f7      	bne.n	800c680 <_dtoa_r+0x6e8>
 800c690:	9900      	ldr	r1, [sp, #0]
 800c692:	2230      	movs	r2, #48	; 0x30
 800c694:	3701      	adds	r7, #1
 800c696:	700a      	strb	r2, [r1, #0]
 800c698:	781a      	ldrb	r2, [r3, #0]
 800c69a:	3201      	adds	r2, #1
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	e790      	b.n	800c5c2 <_dtoa_r+0x62a>
 800c6a0:	4ba3      	ldr	r3, [pc, #652]	; (800c930 <_dtoa_r+0x998>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f7f3 ffa8 	bl	80005f8 <__aeabi_dmul>
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	f7f4 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d09e      	beq.n	800c5f6 <_dtoa_r+0x65e>
 800c6b8:	e7d0      	b.n	800c65c <_dtoa_r+0x6c4>
 800c6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6bc:	2a00      	cmp	r2, #0
 800c6be:	f000 80ca 	beq.w	800c856 <_dtoa_r+0x8be>
 800c6c2:	9a07      	ldr	r2, [sp, #28]
 800c6c4:	2a01      	cmp	r2, #1
 800c6c6:	f300 80ad 	bgt.w	800c824 <_dtoa_r+0x88c>
 800c6ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6cc:	2a00      	cmp	r2, #0
 800c6ce:	f000 80a5 	beq.w	800c81c <_dtoa_r+0x884>
 800c6d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c6d6:	9e08      	ldr	r6, [sp, #32]
 800c6d8:	9d05      	ldr	r5, [sp, #20]
 800c6da:	9a05      	ldr	r2, [sp, #20]
 800c6dc:	441a      	add	r2, r3
 800c6de:	9205      	str	r2, [sp, #20]
 800c6e0:	9a06      	ldr	r2, [sp, #24]
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	441a      	add	r2, r3
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	9206      	str	r2, [sp, #24]
 800c6ea:	f000 fc3d 	bl	800cf68 <__i2b>
 800c6ee:	4607      	mov	r7, r0
 800c6f0:	b165      	cbz	r5, 800c70c <_dtoa_r+0x774>
 800c6f2:	9b06      	ldr	r3, [sp, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	dd09      	ble.n	800c70c <_dtoa_r+0x774>
 800c6f8:	42ab      	cmp	r3, r5
 800c6fa:	9a05      	ldr	r2, [sp, #20]
 800c6fc:	bfa8      	it	ge
 800c6fe:	462b      	movge	r3, r5
 800c700:	1ad2      	subs	r2, r2, r3
 800c702:	9205      	str	r2, [sp, #20]
 800c704:	9a06      	ldr	r2, [sp, #24]
 800c706:	1aed      	subs	r5, r5, r3
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	9306      	str	r3, [sp, #24]
 800c70c:	9b08      	ldr	r3, [sp, #32]
 800c70e:	b1f3      	cbz	r3, 800c74e <_dtoa_r+0x7b6>
 800c710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 80a3 	beq.w	800c85e <_dtoa_r+0x8c6>
 800c718:	2e00      	cmp	r6, #0
 800c71a:	dd10      	ble.n	800c73e <_dtoa_r+0x7a6>
 800c71c:	4639      	mov	r1, r7
 800c71e:	4632      	mov	r2, r6
 800c720:	4620      	mov	r0, r4
 800c722:	f000 fce1 	bl	800d0e8 <__pow5mult>
 800c726:	4652      	mov	r2, sl
 800c728:	4601      	mov	r1, r0
 800c72a:	4607      	mov	r7, r0
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 fc31 	bl	800cf94 <__multiply>
 800c732:	4651      	mov	r1, sl
 800c734:	4680      	mov	r8, r0
 800c736:	4620      	mov	r0, r4
 800c738:	f000 fb60 	bl	800cdfc <_Bfree>
 800c73c:	46c2      	mov	sl, r8
 800c73e:	9b08      	ldr	r3, [sp, #32]
 800c740:	1b9a      	subs	r2, r3, r6
 800c742:	d004      	beq.n	800c74e <_dtoa_r+0x7b6>
 800c744:	4651      	mov	r1, sl
 800c746:	4620      	mov	r0, r4
 800c748:	f000 fcce 	bl	800d0e8 <__pow5mult>
 800c74c:	4682      	mov	sl, r0
 800c74e:	2101      	movs	r1, #1
 800c750:	4620      	mov	r0, r4
 800c752:	f000 fc09 	bl	800cf68 <__i2b>
 800c756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c758:	2b00      	cmp	r3, #0
 800c75a:	4606      	mov	r6, r0
 800c75c:	f340 8081 	ble.w	800c862 <_dtoa_r+0x8ca>
 800c760:	461a      	mov	r2, r3
 800c762:	4601      	mov	r1, r0
 800c764:	4620      	mov	r0, r4
 800c766:	f000 fcbf 	bl	800d0e8 <__pow5mult>
 800c76a:	9b07      	ldr	r3, [sp, #28]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	4606      	mov	r6, r0
 800c770:	dd7a      	ble.n	800c868 <_dtoa_r+0x8d0>
 800c772:	f04f 0800 	mov.w	r8, #0
 800c776:	6933      	ldr	r3, [r6, #16]
 800c778:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c77c:	6918      	ldr	r0, [r3, #16]
 800c77e:	f000 fba5 	bl	800cecc <__hi0bits>
 800c782:	f1c0 0020 	rsb	r0, r0, #32
 800c786:	9b06      	ldr	r3, [sp, #24]
 800c788:	4418      	add	r0, r3
 800c78a:	f010 001f 	ands.w	r0, r0, #31
 800c78e:	f000 8094 	beq.w	800c8ba <_dtoa_r+0x922>
 800c792:	f1c0 0320 	rsb	r3, r0, #32
 800c796:	2b04      	cmp	r3, #4
 800c798:	f340 8085 	ble.w	800c8a6 <_dtoa_r+0x90e>
 800c79c:	9b05      	ldr	r3, [sp, #20]
 800c79e:	f1c0 001c 	rsb	r0, r0, #28
 800c7a2:	4403      	add	r3, r0
 800c7a4:	9305      	str	r3, [sp, #20]
 800c7a6:	9b06      	ldr	r3, [sp, #24]
 800c7a8:	4403      	add	r3, r0
 800c7aa:	4405      	add	r5, r0
 800c7ac:	9306      	str	r3, [sp, #24]
 800c7ae:	9b05      	ldr	r3, [sp, #20]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dd05      	ble.n	800c7c0 <_dtoa_r+0x828>
 800c7b4:	4651      	mov	r1, sl
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f000 fcef 	bl	800d19c <__lshift>
 800c7be:	4682      	mov	sl, r0
 800c7c0:	9b06      	ldr	r3, [sp, #24]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	dd05      	ble.n	800c7d2 <_dtoa_r+0x83a>
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fce6 	bl	800d19c <__lshift>
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d072      	beq.n	800c8be <_dtoa_r+0x926>
 800c7d8:	4631      	mov	r1, r6
 800c7da:	4650      	mov	r0, sl
 800c7dc:	f000 fd4a 	bl	800d274 <__mcmp>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	da6c      	bge.n	800c8be <_dtoa_r+0x926>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4651      	mov	r1, sl
 800c7e8:	220a      	movs	r2, #10
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 fb28 	bl	800ce40 <__multadd>
 800c7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c7f6:	4682      	mov	sl, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 81b0 	beq.w	800cb5e <_dtoa_r+0xbc6>
 800c7fe:	2300      	movs	r3, #0
 800c800:	4639      	mov	r1, r7
 800c802:	220a      	movs	r2, #10
 800c804:	4620      	mov	r0, r4
 800c806:	f000 fb1b 	bl	800ce40 <__multadd>
 800c80a:	9b01      	ldr	r3, [sp, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	4607      	mov	r7, r0
 800c810:	f300 8096 	bgt.w	800c940 <_dtoa_r+0x9a8>
 800c814:	9b07      	ldr	r3, [sp, #28]
 800c816:	2b02      	cmp	r3, #2
 800c818:	dc59      	bgt.n	800c8ce <_dtoa_r+0x936>
 800c81a:	e091      	b.n	800c940 <_dtoa_r+0x9a8>
 800c81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c81e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c822:	e758      	b.n	800c6d6 <_dtoa_r+0x73e>
 800c824:	9b04      	ldr	r3, [sp, #16]
 800c826:	1e5e      	subs	r6, r3, #1
 800c828:	9b08      	ldr	r3, [sp, #32]
 800c82a:	42b3      	cmp	r3, r6
 800c82c:	bfbf      	itttt	lt
 800c82e:	9b08      	ldrlt	r3, [sp, #32]
 800c830:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c832:	9608      	strlt	r6, [sp, #32]
 800c834:	1af3      	sublt	r3, r6, r3
 800c836:	bfb4      	ite	lt
 800c838:	18d2      	addlt	r2, r2, r3
 800c83a:	1b9e      	subge	r6, r3, r6
 800c83c:	9b04      	ldr	r3, [sp, #16]
 800c83e:	bfbc      	itt	lt
 800c840:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c842:	2600      	movlt	r6, #0
 800c844:	2b00      	cmp	r3, #0
 800c846:	bfb7      	itett	lt
 800c848:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c84c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c850:	1a9d      	sublt	r5, r3, r2
 800c852:	2300      	movlt	r3, #0
 800c854:	e741      	b.n	800c6da <_dtoa_r+0x742>
 800c856:	9e08      	ldr	r6, [sp, #32]
 800c858:	9d05      	ldr	r5, [sp, #20]
 800c85a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c85c:	e748      	b.n	800c6f0 <_dtoa_r+0x758>
 800c85e:	9a08      	ldr	r2, [sp, #32]
 800c860:	e770      	b.n	800c744 <_dtoa_r+0x7ac>
 800c862:	9b07      	ldr	r3, [sp, #28]
 800c864:	2b01      	cmp	r3, #1
 800c866:	dc19      	bgt.n	800c89c <_dtoa_r+0x904>
 800c868:	9b02      	ldr	r3, [sp, #8]
 800c86a:	b9bb      	cbnz	r3, 800c89c <_dtoa_r+0x904>
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c872:	b99b      	cbnz	r3, 800c89c <_dtoa_r+0x904>
 800c874:	9b03      	ldr	r3, [sp, #12]
 800c876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c87a:	0d1b      	lsrs	r3, r3, #20
 800c87c:	051b      	lsls	r3, r3, #20
 800c87e:	b183      	cbz	r3, 800c8a2 <_dtoa_r+0x90a>
 800c880:	9b05      	ldr	r3, [sp, #20]
 800c882:	3301      	adds	r3, #1
 800c884:	9305      	str	r3, [sp, #20]
 800c886:	9b06      	ldr	r3, [sp, #24]
 800c888:	3301      	adds	r3, #1
 800c88a:	9306      	str	r3, [sp, #24]
 800c88c:	f04f 0801 	mov.w	r8, #1
 800c890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c892:	2b00      	cmp	r3, #0
 800c894:	f47f af6f 	bne.w	800c776 <_dtoa_r+0x7de>
 800c898:	2001      	movs	r0, #1
 800c89a:	e774      	b.n	800c786 <_dtoa_r+0x7ee>
 800c89c:	f04f 0800 	mov.w	r8, #0
 800c8a0:	e7f6      	b.n	800c890 <_dtoa_r+0x8f8>
 800c8a2:	4698      	mov	r8, r3
 800c8a4:	e7f4      	b.n	800c890 <_dtoa_r+0x8f8>
 800c8a6:	d082      	beq.n	800c7ae <_dtoa_r+0x816>
 800c8a8:	9a05      	ldr	r2, [sp, #20]
 800c8aa:	331c      	adds	r3, #28
 800c8ac:	441a      	add	r2, r3
 800c8ae:	9205      	str	r2, [sp, #20]
 800c8b0:	9a06      	ldr	r2, [sp, #24]
 800c8b2:	441a      	add	r2, r3
 800c8b4:	441d      	add	r5, r3
 800c8b6:	9206      	str	r2, [sp, #24]
 800c8b8:	e779      	b.n	800c7ae <_dtoa_r+0x816>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	e7f4      	b.n	800c8a8 <_dtoa_r+0x910>
 800c8be:	9b04      	ldr	r3, [sp, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	dc37      	bgt.n	800c934 <_dtoa_r+0x99c>
 800c8c4:	9b07      	ldr	r3, [sp, #28]
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	dd34      	ble.n	800c934 <_dtoa_r+0x99c>
 800c8ca:	9b04      	ldr	r3, [sp, #16]
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	9b01      	ldr	r3, [sp, #4]
 800c8d0:	b963      	cbnz	r3, 800c8ec <_dtoa_r+0x954>
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	2205      	movs	r2, #5
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 fab2 	bl	800ce40 <__multadd>
 800c8dc:	4601      	mov	r1, r0
 800c8de:	4606      	mov	r6, r0
 800c8e0:	4650      	mov	r0, sl
 800c8e2:	f000 fcc7 	bl	800d274 <__mcmp>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f73f adbb 	bgt.w	800c462 <_dtoa_r+0x4ca>
 800c8ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ee:	9d00      	ldr	r5, [sp, #0]
 800c8f0:	ea6f 0b03 	mvn.w	fp, r3
 800c8f4:	f04f 0800 	mov.w	r8, #0
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f000 fa7e 	bl	800cdfc <_Bfree>
 800c900:	2f00      	cmp	r7, #0
 800c902:	f43f aeab 	beq.w	800c65c <_dtoa_r+0x6c4>
 800c906:	f1b8 0f00 	cmp.w	r8, #0
 800c90a:	d005      	beq.n	800c918 <_dtoa_r+0x980>
 800c90c:	45b8      	cmp	r8, r7
 800c90e:	d003      	beq.n	800c918 <_dtoa_r+0x980>
 800c910:	4641      	mov	r1, r8
 800c912:	4620      	mov	r0, r4
 800c914:	f000 fa72 	bl	800cdfc <_Bfree>
 800c918:	4639      	mov	r1, r7
 800c91a:	4620      	mov	r0, r4
 800c91c:	f000 fa6e 	bl	800cdfc <_Bfree>
 800c920:	e69c      	b.n	800c65c <_dtoa_r+0x6c4>
 800c922:	2600      	movs	r6, #0
 800c924:	4637      	mov	r7, r6
 800c926:	e7e1      	b.n	800c8ec <_dtoa_r+0x954>
 800c928:	46bb      	mov	fp, r7
 800c92a:	4637      	mov	r7, r6
 800c92c:	e599      	b.n	800c462 <_dtoa_r+0x4ca>
 800c92e:	bf00      	nop
 800c930:	40240000 	.word	0x40240000
 800c934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c936:	2b00      	cmp	r3, #0
 800c938:	f000 80c8 	beq.w	800cacc <_dtoa_r+0xb34>
 800c93c:	9b04      	ldr	r3, [sp, #16]
 800c93e:	9301      	str	r3, [sp, #4]
 800c940:	2d00      	cmp	r5, #0
 800c942:	dd05      	ble.n	800c950 <_dtoa_r+0x9b8>
 800c944:	4639      	mov	r1, r7
 800c946:	462a      	mov	r2, r5
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 fc27 	bl	800d19c <__lshift>
 800c94e:	4607      	mov	r7, r0
 800c950:	f1b8 0f00 	cmp.w	r8, #0
 800c954:	d05b      	beq.n	800ca0e <_dtoa_r+0xa76>
 800c956:	6879      	ldr	r1, [r7, #4]
 800c958:	4620      	mov	r0, r4
 800c95a:	f000 fa0f 	bl	800cd7c <_Balloc>
 800c95e:	4605      	mov	r5, r0
 800c960:	b928      	cbnz	r0, 800c96e <_dtoa_r+0x9d6>
 800c962:	4b83      	ldr	r3, [pc, #524]	; (800cb70 <_dtoa_r+0xbd8>)
 800c964:	4602      	mov	r2, r0
 800c966:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c96a:	f7ff bb2e 	b.w	800bfca <_dtoa_r+0x32>
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	3202      	adds	r2, #2
 800c972:	0092      	lsls	r2, r2, #2
 800c974:	f107 010c 	add.w	r1, r7, #12
 800c978:	300c      	adds	r0, #12
 800c97a:	f7ff fa74 	bl	800be66 <memcpy>
 800c97e:	2201      	movs	r2, #1
 800c980:	4629      	mov	r1, r5
 800c982:	4620      	mov	r0, r4
 800c984:	f000 fc0a 	bl	800d19c <__lshift>
 800c988:	9b00      	ldr	r3, [sp, #0]
 800c98a:	3301      	adds	r3, #1
 800c98c:	9304      	str	r3, [sp, #16]
 800c98e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c992:	4413      	add	r3, r2
 800c994:	9308      	str	r3, [sp, #32]
 800c996:	9b02      	ldr	r3, [sp, #8]
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	46b8      	mov	r8, r7
 800c99e:	9306      	str	r3, [sp, #24]
 800c9a0:	4607      	mov	r7, r0
 800c9a2:	9b04      	ldr	r3, [sp, #16]
 800c9a4:	4631      	mov	r1, r6
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	4650      	mov	r0, sl
 800c9aa:	9301      	str	r3, [sp, #4]
 800c9ac:	f7ff fa69 	bl	800be82 <quorem>
 800c9b0:	4641      	mov	r1, r8
 800c9b2:	9002      	str	r0, [sp, #8]
 800c9b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	f000 fc5b 	bl	800d274 <__mcmp>
 800c9be:	463a      	mov	r2, r7
 800c9c0:	9005      	str	r0, [sp, #20]
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f000 fc71 	bl	800d2ac <__mdiff>
 800c9ca:	68c2      	ldr	r2, [r0, #12]
 800c9cc:	4605      	mov	r5, r0
 800c9ce:	bb02      	cbnz	r2, 800ca12 <_dtoa_r+0xa7a>
 800c9d0:	4601      	mov	r1, r0
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	f000 fc4e 	bl	800d274 <__mcmp>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	4629      	mov	r1, r5
 800c9dc:	4620      	mov	r0, r4
 800c9de:	9209      	str	r2, [sp, #36]	; 0x24
 800c9e0:	f000 fa0c 	bl	800cdfc <_Bfree>
 800c9e4:	9b07      	ldr	r3, [sp, #28]
 800c9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9e8:	9d04      	ldr	r5, [sp, #16]
 800c9ea:	ea43 0102 	orr.w	r1, r3, r2
 800c9ee:	9b06      	ldr	r3, [sp, #24]
 800c9f0:	4319      	orrs	r1, r3
 800c9f2:	d110      	bne.n	800ca16 <_dtoa_r+0xa7e>
 800c9f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c9f8:	d029      	beq.n	800ca4e <_dtoa_r+0xab6>
 800c9fa:	9b05      	ldr	r3, [sp, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dd02      	ble.n	800ca06 <_dtoa_r+0xa6e>
 800ca00:	9b02      	ldr	r3, [sp, #8]
 800ca02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	f883 9000 	strb.w	r9, [r3]
 800ca0c:	e774      	b.n	800c8f8 <_dtoa_r+0x960>
 800ca0e:	4638      	mov	r0, r7
 800ca10:	e7ba      	b.n	800c988 <_dtoa_r+0x9f0>
 800ca12:	2201      	movs	r2, #1
 800ca14:	e7e1      	b.n	800c9da <_dtoa_r+0xa42>
 800ca16:	9b05      	ldr	r3, [sp, #20]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	db04      	blt.n	800ca26 <_dtoa_r+0xa8e>
 800ca1c:	9907      	ldr	r1, [sp, #28]
 800ca1e:	430b      	orrs	r3, r1
 800ca20:	9906      	ldr	r1, [sp, #24]
 800ca22:	430b      	orrs	r3, r1
 800ca24:	d120      	bne.n	800ca68 <_dtoa_r+0xad0>
 800ca26:	2a00      	cmp	r2, #0
 800ca28:	dded      	ble.n	800ca06 <_dtoa_r+0xa6e>
 800ca2a:	4651      	mov	r1, sl
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f000 fbb4 	bl	800d19c <__lshift>
 800ca34:	4631      	mov	r1, r6
 800ca36:	4682      	mov	sl, r0
 800ca38:	f000 fc1c 	bl	800d274 <__mcmp>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	dc03      	bgt.n	800ca48 <_dtoa_r+0xab0>
 800ca40:	d1e1      	bne.n	800ca06 <_dtoa_r+0xa6e>
 800ca42:	f019 0f01 	tst.w	r9, #1
 800ca46:	d0de      	beq.n	800ca06 <_dtoa_r+0xa6e>
 800ca48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ca4c:	d1d8      	bne.n	800ca00 <_dtoa_r+0xa68>
 800ca4e:	9a01      	ldr	r2, [sp, #4]
 800ca50:	2339      	movs	r3, #57	; 0x39
 800ca52:	7013      	strb	r3, [r2, #0]
 800ca54:	462b      	mov	r3, r5
 800ca56:	461d      	mov	r5, r3
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca5e:	2a39      	cmp	r2, #57	; 0x39
 800ca60:	d06c      	beq.n	800cb3c <_dtoa_r+0xba4>
 800ca62:	3201      	adds	r2, #1
 800ca64:	701a      	strb	r2, [r3, #0]
 800ca66:	e747      	b.n	800c8f8 <_dtoa_r+0x960>
 800ca68:	2a00      	cmp	r2, #0
 800ca6a:	dd07      	ble.n	800ca7c <_dtoa_r+0xae4>
 800ca6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ca70:	d0ed      	beq.n	800ca4e <_dtoa_r+0xab6>
 800ca72:	9a01      	ldr	r2, [sp, #4]
 800ca74:	f109 0301 	add.w	r3, r9, #1
 800ca78:	7013      	strb	r3, [r2, #0]
 800ca7a:	e73d      	b.n	800c8f8 <_dtoa_r+0x960>
 800ca7c:	9b04      	ldr	r3, [sp, #16]
 800ca7e:	9a08      	ldr	r2, [sp, #32]
 800ca80:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d043      	beq.n	800cb10 <_dtoa_r+0xb78>
 800ca88:	4651      	mov	r1, sl
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 f9d6 	bl	800ce40 <__multadd>
 800ca94:	45b8      	cmp	r8, r7
 800ca96:	4682      	mov	sl, r0
 800ca98:	f04f 0300 	mov.w	r3, #0
 800ca9c:	f04f 020a 	mov.w	r2, #10
 800caa0:	4641      	mov	r1, r8
 800caa2:	4620      	mov	r0, r4
 800caa4:	d107      	bne.n	800cab6 <_dtoa_r+0xb1e>
 800caa6:	f000 f9cb 	bl	800ce40 <__multadd>
 800caaa:	4680      	mov	r8, r0
 800caac:	4607      	mov	r7, r0
 800caae:	9b04      	ldr	r3, [sp, #16]
 800cab0:	3301      	adds	r3, #1
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	e775      	b.n	800c9a2 <_dtoa_r+0xa0a>
 800cab6:	f000 f9c3 	bl	800ce40 <__multadd>
 800caba:	4639      	mov	r1, r7
 800cabc:	4680      	mov	r8, r0
 800cabe:	2300      	movs	r3, #0
 800cac0:	220a      	movs	r2, #10
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 f9bc 	bl	800ce40 <__multadd>
 800cac8:	4607      	mov	r7, r0
 800caca:	e7f0      	b.n	800caae <_dtoa_r+0xb16>
 800cacc:	9b04      	ldr	r3, [sp, #16]
 800cace:	9301      	str	r3, [sp, #4]
 800cad0:	9d00      	ldr	r5, [sp, #0]
 800cad2:	4631      	mov	r1, r6
 800cad4:	4650      	mov	r0, sl
 800cad6:	f7ff f9d4 	bl	800be82 <quorem>
 800cada:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cade:	9b00      	ldr	r3, [sp, #0]
 800cae0:	f805 9b01 	strb.w	r9, [r5], #1
 800cae4:	1aea      	subs	r2, r5, r3
 800cae6:	9b01      	ldr	r3, [sp, #4]
 800cae8:	4293      	cmp	r3, r2
 800caea:	dd07      	ble.n	800cafc <_dtoa_r+0xb64>
 800caec:	4651      	mov	r1, sl
 800caee:	2300      	movs	r3, #0
 800caf0:	220a      	movs	r2, #10
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 f9a4 	bl	800ce40 <__multadd>
 800caf8:	4682      	mov	sl, r0
 800cafa:	e7ea      	b.n	800cad2 <_dtoa_r+0xb3a>
 800cafc:	9b01      	ldr	r3, [sp, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	bfc8      	it	gt
 800cb02:	461d      	movgt	r5, r3
 800cb04:	9b00      	ldr	r3, [sp, #0]
 800cb06:	bfd8      	it	le
 800cb08:	2501      	movle	r5, #1
 800cb0a:	441d      	add	r5, r3
 800cb0c:	f04f 0800 	mov.w	r8, #0
 800cb10:	4651      	mov	r1, sl
 800cb12:	2201      	movs	r2, #1
 800cb14:	4620      	mov	r0, r4
 800cb16:	f000 fb41 	bl	800d19c <__lshift>
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4682      	mov	sl, r0
 800cb1e:	f000 fba9 	bl	800d274 <__mcmp>
 800cb22:	2800      	cmp	r0, #0
 800cb24:	dc96      	bgt.n	800ca54 <_dtoa_r+0xabc>
 800cb26:	d102      	bne.n	800cb2e <_dtoa_r+0xb96>
 800cb28:	f019 0f01 	tst.w	r9, #1
 800cb2c:	d192      	bne.n	800ca54 <_dtoa_r+0xabc>
 800cb2e:	462b      	mov	r3, r5
 800cb30:	461d      	mov	r5, r3
 800cb32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb36:	2a30      	cmp	r2, #48	; 0x30
 800cb38:	d0fa      	beq.n	800cb30 <_dtoa_r+0xb98>
 800cb3a:	e6dd      	b.n	800c8f8 <_dtoa_r+0x960>
 800cb3c:	9a00      	ldr	r2, [sp, #0]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d189      	bne.n	800ca56 <_dtoa_r+0xabe>
 800cb42:	f10b 0b01 	add.w	fp, fp, #1
 800cb46:	2331      	movs	r3, #49	; 0x31
 800cb48:	e796      	b.n	800ca78 <_dtoa_r+0xae0>
 800cb4a:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <_dtoa_r+0xbdc>)
 800cb4c:	f7ff ba99 	b.w	800c082 <_dtoa_r+0xea>
 800cb50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f47f aa6d 	bne.w	800c032 <_dtoa_r+0x9a>
 800cb58:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <_dtoa_r+0xbe0>)
 800cb5a:	f7ff ba92 	b.w	800c082 <_dtoa_r+0xea>
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dcb5      	bgt.n	800cad0 <_dtoa_r+0xb38>
 800cb64:	9b07      	ldr	r3, [sp, #28]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	f73f aeb1 	bgt.w	800c8ce <_dtoa_r+0x936>
 800cb6c:	e7b0      	b.n	800cad0 <_dtoa_r+0xb38>
 800cb6e:	bf00      	nop
 800cb70:	0800e241 	.word	0x0800e241
 800cb74:	0800e1a1 	.word	0x0800e1a1
 800cb78:	0800e1c5 	.word	0x0800e1c5

0800cb7c <_free_r>:
 800cb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb7e:	2900      	cmp	r1, #0
 800cb80:	d044      	beq.n	800cc0c <_free_r+0x90>
 800cb82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb86:	9001      	str	r0, [sp, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb8e:	bfb8      	it	lt
 800cb90:	18e4      	addlt	r4, r4, r3
 800cb92:	f000 f8e7 	bl	800cd64 <__malloc_lock>
 800cb96:	4a1e      	ldr	r2, [pc, #120]	; (800cc10 <_free_r+0x94>)
 800cb98:	9801      	ldr	r0, [sp, #4]
 800cb9a:	6813      	ldr	r3, [r2, #0]
 800cb9c:	b933      	cbnz	r3, 800cbac <_free_r+0x30>
 800cb9e:	6063      	str	r3, [r4, #4]
 800cba0:	6014      	str	r4, [r2, #0]
 800cba2:	b003      	add	sp, #12
 800cba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cba8:	f000 b8e2 	b.w	800cd70 <__malloc_unlock>
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	d908      	bls.n	800cbc2 <_free_r+0x46>
 800cbb0:	6825      	ldr	r5, [r4, #0]
 800cbb2:	1961      	adds	r1, r4, r5
 800cbb4:	428b      	cmp	r3, r1
 800cbb6:	bf01      	itttt	eq
 800cbb8:	6819      	ldreq	r1, [r3, #0]
 800cbba:	685b      	ldreq	r3, [r3, #4]
 800cbbc:	1949      	addeq	r1, r1, r5
 800cbbe:	6021      	streq	r1, [r4, #0]
 800cbc0:	e7ed      	b.n	800cb9e <_free_r+0x22>
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	b10b      	cbz	r3, 800cbcc <_free_r+0x50>
 800cbc8:	42a3      	cmp	r3, r4
 800cbca:	d9fa      	bls.n	800cbc2 <_free_r+0x46>
 800cbcc:	6811      	ldr	r1, [r2, #0]
 800cbce:	1855      	adds	r5, r2, r1
 800cbd0:	42a5      	cmp	r5, r4
 800cbd2:	d10b      	bne.n	800cbec <_free_r+0x70>
 800cbd4:	6824      	ldr	r4, [r4, #0]
 800cbd6:	4421      	add	r1, r4
 800cbd8:	1854      	adds	r4, r2, r1
 800cbda:	42a3      	cmp	r3, r4
 800cbdc:	6011      	str	r1, [r2, #0]
 800cbde:	d1e0      	bne.n	800cba2 <_free_r+0x26>
 800cbe0:	681c      	ldr	r4, [r3, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	6053      	str	r3, [r2, #4]
 800cbe6:	440c      	add	r4, r1
 800cbe8:	6014      	str	r4, [r2, #0]
 800cbea:	e7da      	b.n	800cba2 <_free_r+0x26>
 800cbec:	d902      	bls.n	800cbf4 <_free_r+0x78>
 800cbee:	230c      	movs	r3, #12
 800cbf0:	6003      	str	r3, [r0, #0]
 800cbf2:	e7d6      	b.n	800cba2 <_free_r+0x26>
 800cbf4:	6825      	ldr	r5, [r4, #0]
 800cbf6:	1961      	adds	r1, r4, r5
 800cbf8:	428b      	cmp	r3, r1
 800cbfa:	bf04      	itt	eq
 800cbfc:	6819      	ldreq	r1, [r3, #0]
 800cbfe:	685b      	ldreq	r3, [r3, #4]
 800cc00:	6063      	str	r3, [r4, #4]
 800cc02:	bf04      	itt	eq
 800cc04:	1949      	addeq	r1, r1, r5
 800cc06:	6021      	streq	r1, [r4, #0]
 800cc08:	6054      	str	r4, [r2, #4]
 800cc0a:	e7ca      	b.n	800cba2 <_free_r+0x26>
 800cc0c:	b003      	add	sp, #12
 800cc0e:	bd30      	pop	{r4, r5, pc}
 800cc10:	20000970 	.word	0x20000970

0800cc14 <malloc>:
 800cc14:	4b02      	ldr	r3, [pc, #8]	; (800cc20 <malloc+0xc>)
 800cc16:	4601      	mov	r1, r0
 800cc18:	6818      	ldr	r0, [r3, #0]
 800cc1a:	f000 b823 	b.w	800cc64 <_malloc_r>
 800cc1e:	bf00      	nop
 800cc20:	20000164 	.word	0x20000164

0800cc24 <sbrk_aligned>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	4e0e      	ldr	r6, [pc, #56]	; (800cc60 <sbrk_aligned+0x3c>)
 800cc28:	460c      	mov	r4, r1
 800cc2a:	6831      	ldr	r1, [r6, #0]
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	b911      	cbnz	r1, 800cc36 <sbrk_aligned+0x12>
 800cc30:	f001 f81a 	bl	800dc68 <_sbrk_r>
 800cc34:	6030      	str	r0, [r6, #0]
 800cc36:	4621      	mov	r1, r4
 800cc38:	4628      	mov	r0, r5
 800cc3a:	f001 f815 	bl	800dc68 <_sbrk_r>
 800cc3e:	1c43      	adds	r3, r0, #1
 800cc40:	d00a      	beq.n	800cc58 <sbrk_aligned+0x34>
 800cc42:	1cc4      	adds	r4, r0, #3
 800cc44:	f024 0403 	bic.w	r4, r4, #3
 800cc48:	42a0      	cmp	r0, r4
 800cc4a:	d007      	beq.n	800cc5c <sbrk_aligned+0x38>
 800cc4c:	1a21      	subs	r1, r4, r0
 800cc4e:	4628      	mov	r0, r5
 800cc50:	f001 f80a 	bl	800dc68 <_sbrk_r>
 800cc54:	3001      	adds	r0, #1
 800cc56:	d101      	bne.n	800cc5c <sbrk_aligned+0x38>
 800cc58:	f04f 34ff 	mov.w	r4, #4294967295
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}
 800cc60:	20000974 	.word	0x20000974

0800cc64 <_malloc_r>:
 800cc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc68:	1ccd      	adds	r5, r1, #3
 800cc6a:	f025 0503 	bic.w	r5, r5, #3
 800cc6e:	3508      	adds	r5, #8
 800cc70:	2d0c      	cmp	r5, #12
 800cc72:	bf38      	it	cc
 800cc74:	250c      	movcc	r5, #12
 800cc76:	2d00      	cmp	r5, #0
 800cc78:	4607      	mov	r7, r0
 800cc7a:	db01      	blt.n	800cc80 <_malloc_r+0x1c>
 800cc7c:	42a9      	cmp	r1, r5
 800cc7e:	d905      	bls.n	800cc8c <_malloc_r+0x28>
 800cc80:	230c      	movs	r3, #12
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	2600      	movs	r6, #0
 800cc86:	4630      	mov	r0, r6
 800cc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd60 <_malloc_r+0xfc>
 800cc90:	f000 f868 	bl	800cd64 <__malloc_lock>
 800cc94:	f8d8 3000 	ldr.w	r3, [r8]
 800cc98:	461c      	mov	r4, r3
 800cc9a:	bb5c      	cbnz	r4, 800ccf4 <_malloc_r+0x90>
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4638      	mov	r0, r7
 800cca0:	f7ff ffc0 	bl	800cc24 <sbrk_aligned>
 800cca4:	1c43      	adds	r3, r0, #1
 800cca6:	4604      	mov	r4, r0
 800cca8:	d155      	bne.n	800cd56 <_malloc_r+0xf2>
 800ccaa:	f8d8 4000 	ldr.w	r4, [r8]
 800ccae:	4626      	mov	r6, r4
 800ccb0:	2e00      	cmp	r6, #0
 800ccb2:	d145      	bne.n	800cd40 <_malloc_r+0xdc>
 800ccb4:	2c00      	cmp	r4, #0
 800ccb6:	d048      	beq.n	800cd4a <_malloc_r+0xe6>
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	4631      	mov	r1, r6
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	eb04 0903 	add.w	r9, r4, r3
 800ccc2:	f000 ffd1 	bl	800dc68 <_sbrk_r>
 800ccc6:	4581      	cmp	r9, r0
 800ccc8:	d13f      	bne.n	800cd4a <_malloc_r+0xe6>
 800ccca:	6821      	ldr	r1, [r4, #0]
 800cccc:	1a6d      	subs	r5, r5, r1
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	f7ff ffa7 	bl	800cc24 <sbrk_aligned>
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	d037      	beq.n	800cd4a <_malloc_r+0xe6>
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	442b      	add	r3, r5
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	f8d8 3000 	ldr.w	r3, [r8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d038      	beq.n	800cd5a <_malloc_r+0xf6>
 800cce8:	685a      	ldr	r2, [r3, #4]
 800ccea:	42a2      	cmp	r2, r4
 800ccec:	d12b      	bne.n	800cd46 <_malloc_r+0xe2>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	605a      	str	r2, [r3, #4]
 800ccf2:	e00f      	b.n	800cd14 <_malloc_r+0xb0>
 800ccf4:	6822      	ldr	r2, [r4, #0]
 800ccf6:	1b52      	subs	r2, r2, r5
 800ccf8:	d41f      	bmi.n	800cd3a <_malloc_r+0xd6>
 800ccfa:	2a0b      	cmp	r2, #11
 800ccfc:	d917      	bls.n	800cd2e <_malloc_r+0xca>
 800ccfe:	1961      	adds	r1, r4, r5
 800cd00:	42a3      	cmp	r3, r4
 800cd02:	6025      	str	r5, [r4, #0]
 800cd04:	bf18      	it	ne
 800cd06:	6059      	strne	r1, [r3, #4]
 800cd08:	6863      	ldr	r3, [r4, #4]
 800cd0a:	bf08      	it	eq
 800cd0c:	f8c8 1000 	streq.w	r1, [r8]
 800cd10:	5162      	str	r2, [r4, r5]
 800cd12:	604b      	str	r3, [r1, #4]
 800cd14:	4638      	mov	r0, r7
 800cd16:	f104 060b 	add.w	r6, r4, #11
 800cd1a:	f000 f829 	bl	800cd70 <__malloc_unlock>
 800cd1e:	f026 0607 	bic.w	r6, r6, #7
 800cd22:	1d23      	adds	r3, r4, #4
 800cd24:	1af2      	subs	r2, r6, r3
 800cd26:	d0ae      	beq.n	800cc86 <_malloc_r+0x22>
 800cd28:	1b9b      	subs	r3, r3, r6
 800cd2a:	50a3      	str	r3, [r4, r2]
 800cd2c:	e7ab      	b.n	800cc86 <_malloc_r+0x22>
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	6862      	ldr	r2, [r4, #4]
 800cd32:	d1dd      	bne.n	800ccf0 <_malloc_r+0x8c>
 800cd34:	f8c8 2000 	str.w	r2, [r8]
 800cd38:	e7ec      	b.n	800cd14 <_malloc_r+0xb0>
 800cd3a:	4623      	mov	r3, r4
 800cd3c:	6864      	ldr	r4, [r4, #4]
 800cd3e:	e7ac      	b.n	800cc9a <_malloc_r+0x36>
 800cd40:	4634      	mov	r4, r6
 800cd42:	6876      	ldr	r6, [r6, #4]
 800cd44:	e7b4      	b.n	800ccb0 <_malloc_r+0x4c>
 800cd46:	4613      	mov	r3, r2
 800cd48:	e7cc      	b.n	800cce4 <_malloc_r+0x80>
 800cd4a:	230c      	movs	r3, #12
 800cd4c:	603b      	str	r3, [r7, #0]
 800cd4e:	4638      	mov	r0, r7
 800cd50:	f000 f80e 	bl	800cd70 <__malloc_unlock>
 800cd54:	e797      	b.n	800cc86 <_malloc_r+0x22>
 800cd56:	6025      	str	r5, [r4, #0]
 800cd58:	e7dc      	b.n	800cd14 <_malloc_r+0xb0>
 800cd5a:	605b      	str	r3, [r3, #4]
 800cd5c:	deff      	udf	#255	; 0xff
 800cd5e:	bf00      	nop
 800cd60:	20000970 	.word	0x20000970

0800cd64 <__malloc_lock>:
 800cd64:	4801      	ldr	r0, [pc, #4]	; (800cd6c <__malloc_lock+0x8>)
 800cd66:	f7ff b87c 	b.w	800be62 <__retarget_lock_acquire_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	2000096c 	.word	0x2000096c

0800cd70 <__malloc_unlock>:
 800cd70:	4801      	ldr	r0, [pc, #4]	; (800cd78 <__malloc_unlock+0x8>)
 800cd72:	f7ff b877 	b.w	800be64 <__retarget_lock_release_recursive>
 800cd76:	bf00      	nop
 800cd78:	2000096c 	.word	0x2000096c

0800cd7c <_Balloc>:
 800cd7c:	b570      	push	{r4, r5, r6, lr}
 800cd7e:	69c6      	ldr	r6, [r0, #28]
 800cd80:	4604      	mov	r4, r0
 800cd82:	460d      	mov	r5, r1
 800cd84:	b976      	cbnz	r6, 800cda4 <_Balloc+0x28>
 800cd86:	2010      	movs	r0, #16
 800cd88:	f7ff ff44 	bl	800cc14 <malloc>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	61e0      	str	r0, [r4, #28]
 800cd90:	b920      	cbnz	r0, 800cd9c <_Balloc+0x20>
 800cd92:	4b18      	ldr	r3, [pc, #96]	; (800cdf4 <_Balloc+0x78>)
 800cd94:	4818      	ldr	r0, [pc, #96]	; (800cdf8 <_Balloc+0x7c>)
 800cd96:	216b      	movs	r1, #107	; 0x6b
 800cd98:	f000 ff76 	bl	800dc88 <__assert_func>
 800cd9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cda0:	6006      	str	r6, [r0, #0]
 800cda2:	60c6      	str	r6, [r0, #12]
 800cda4:	69e6      	ldr	r6, [r4, #28]
 800cda6:	68f3      	ldr	r3, [r6, #12]
 800cda8:	b183      	cbz	r3, 800cdcc <_Balloc+0x50>
 800cdaa:	69e3      	ldr	r3, [r4, #28]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cdb2:	b9b8      	cbnz	r0, 800cde4 <_Balloc+0x68>
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	fa01 f605 	lsl.w	r6, r1, r5
 800cdba:	1d72      	adds	r2, r6, #5
 800cdbc:	0092      	lsls	r2, r2, #2
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f000 ff80 	bl	800dcc4 <_calloc_r>
 800cdc4:	b160      	cbz	r0, 800cde0 <_Balloc+0x64>
 800cdc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cdca:	e00e      	b.n	800cdea <_Balloc+0x6e>
 800cdcc:	2221      	movs	r2, #33	; 0x21
 800cdce:	2104      	movs	r1, #4
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f000 ff77 	bl	800dcc4 <_calloc_r>
 800cdd6:	69e3      	ldr	r3, [r4, #28]
 800cdd8:	60f0      	str	r0, [r6, #12]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1e4      	bne.n	800cdaa <_Balloc+0x2e>
 800cde0:	2000      	movs	r0, #0
 800cde2:	bd70      	pop	{r4, r5, r6, pc}
 800cde4:	6802      	ldr	r2, [r0, #0]
 800cde6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdea:	2300      	movs	r3, #0
 800cdec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdf0:	e7f7      	b.n	800cde2 <_Balloc+0x66>
 800cdf2:	bf00      	nop
 800cdf4:	0800e1d2 	.word	0x0800e1d2
 800cdf8:	0800e252 	.word	0x0800e252

0800cdfc <_Bfree>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	69c6      	ldr	r6, [r0, #28]
 800ce00:	4605      	mov	r5, r0
 800ce02:	460c      	mov	r4, r1
 800ce04:	b976      	cbnz	r6, 800ce24 <_Bfree+0x28>
 800ce06:	2010      	movs	r0, #16
 800ce08:	f7ff ff04 	bl	800cc14 <malloc>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	61e8      	str	r0, [r5, #28]
 800ce10:	b920      	cbnz	r0, 800ce1c <_Bfree+0x20>
 800ce12:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <_Bfree+0x3c>)
 800ce14:	4809      	ldr	r0, [pc, #36]	; (800ce3c <_Bfree+0x40>)
 800ce16:	218f      	movs	r1, #143	; 0x8f
 800ce18:	f000 ff36 	bl	800dc88 <__assert_func>
 800ce1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce20:	6006      	str	r6, [r0, #0]
 800ce22:	60c6      	str	r6, [r0, #12]
 800ce24:	b13c      	cbz	r4, 800ce36 <_Bfree+0x3a>
 800ce26:	69eb      	ldr	r3, [r5, #28]
 800ce28:	6862      	ldr	r2, [r4, #4]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce30:	6021      	str	r1, [r4, #0]
 800ce32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce36:	bd70      	pop	{r4, r5, r6, pc}
 800ce38:	0800e1d2 	.word	0x0800e1d2
 800ce3c:	0800e252 	.word	0x0800e252

0800ce40 <__multadd>:
 800ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce44:	690d      	ldr	r5, [r1, #16]
 800ce46:	4607      	mov	r7, r0
 800ce48:	460c      	mov	r4, r1
 800ce4a:	461e      	mov	r6, r3
 800ce4c:	f101 0c14 	add.w	ip, r1, #20
 800ce50:	2000      	movs	r0, #0
 800ce52:	f8dc 3000 	ldr.w	r3, [ip]
 800ce56:	b299      	uxth	r1, r3
 800ce58:	fb02 6101 	mla	r1, r2, r1, r6
 800ce5c:	0c1e      	lsrs	r6, r3, #16
 800ce5e:	0c0b      	lsrs	r3, r1, #16
 800ce60:	fb02 3306 	mla	r3, r2, r6, r3
 800ce64:	b289      	uxth	r1, r1
 800ce66:	3001      	adds	r0, #1
 800ce68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce6c:	4285      	cmp	r5, r0
 800ce6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ce72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce76:	dcec      	bgt.n	800ce52 <__multadd+0x12>
 800ce78:	b30e      	cbz	r6, 800cebe <__multadd+0x7e>
 800ce7a:	68a3      	ldr	r3, [r4, #8]
 800ce7c:	42ab      	cmp	r3, r5
 800ce7e:	dc19      	bgt.n	800ceb4 <__multadd+0x74>
 800ce80:	6861      	ldr	r1, [r4, #4]
 800ce82:	4638      	mov	r0, r7
 800ce84:	3101      	adds	r1, #1
 800ce86:	f7ff ff79 	bl	800cd7c <_Balloc>
 800ce8a:	4680      	mov	r8, r0
 800ce8c:	b928      	cbnz	r0, 800ce9a <__multadd+0x5a>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	4b0c      	ldr	r3, [pc, #48]	; (800cec4 <__multadd+0x84>)
 800ce92:	480d      	ldr	r0, [pc, #52]	; (800cec8 <__multadd+0x88>)
 800ce94:	21ba      	movs	r1, #186	; 0xba
 800ce96:	f000 fef7 	bl	800dc88 <__assert_func>
 800ce9a:	6922      	ldr	r2, [r4, #16]
 800ce9c:	3202      	adds	r2, #2
 800ce9e:	f104 010c 	add.w	r1, r4, #12
 800cea2:	0092      	lsls	r2, r2, #2
 800cea4:	300c      	adds	r0, #12
 800cea6:	f7fe ffde 	bl	800be66 <memcpy>
 800ceaa:	4621      	mov	r1, r4
 800ceac:	4638      	mov	r0, r7
 800ceae:	f7ff ffa5 	bl	800cdfc <_Bfree>
 800ceb2:	4644      	mov	r4, r8
 800ceb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ceb8:	3501      	adds	r5, #1
 800ceba:	615e      	str	r6, [r3, #20]
 800cebc:	6125      	str	r5, [r4, #16]
 800cebe:	4620      	mov	r0, r4
 800cec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec4:	0800e241 	.word	0x0800e241
 800cec8:	0800e252 	.word	0x0800e252

0800cecc <__hi0bits>:
 800cecc:	0c03      	lsrs	r3, r0, #16
 800cece:	041b      	lsls	r3, r3, #16
 800ced0:	b9d3      	cbnz	r3, 800cf08 <__hi0bits+0x3c>
 800ced2:	0400      	lsls	r0, r0, #16
 800ced4:	2310      	movs	r3, #16
 800ced6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ceda:	bf04      	itt	eq
 800cedc:	0200      	lsleq	r0, r0, #8
 800cede:	3308      	addeq	r3, #8
 800cee0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cee4:	bf04      	itt	eq
 800cee6:	0100      	lsleq	r0, r0, #4
 800cee8:	3304      	addeq	r3, #4
 800ceea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ceee:	bf04      	itt	eq
 800cef0:	0080      	lsleq	r0, r0, #2
 800cef2:	3302      	addeq	r3, #2
 800cef4:	2800      	cmp	r0, #0
 800cef6:	db05      	blt.n	800cf04 <__hi0bits+0x38>
 800cef8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cefc:	f103 0301 	add.w	r3, r3, #1
 800cf00:	bf08      	it	eq
 800cf02:	2320      	moveq	r3, #32
 800cf04:	4618      	mov	r0, r3
 800cf06:	4770      	bx	lr
 800cf08:	2300      	movs	r3, #0
 800cf0a:	e7e4      	b.n	800ced6 <__hi0bits+0xa>

0800cf0c <__lo0bits>:
 800cf0c:	6803      	ldr	r3, [r0, #0]
 800cf0e:	f013 0207 	ands.w	r2, r3, #7
 800cf12:	d00c      	beq.n	800cf2e <__lo0bits+0x22>
 800cf14:	07d9      	lsls	r1, r3, #31
 800cf16:	d422      	bmi.n	800cf5e <__lo0bits+0x52>
 800cf18:	079a      	lsls	r2, r3, #30
 800cf1a:	bf49      	itett	mi
 800cf1c:	085b      	lsrmi	r3, r3, #1
 800cf1e:	089b      	lsrpl	r3, r3, #2
 800cf20:	6003      	strmi	r3, [r0, #0]
 800cf22:	2201      	movmi	r2, #1
 800cf24:	bf5c      	itt	pl
 800cf26:	6003      	strpl	r3, [r0, #0]
 800cf28:	2202      	movpl	r2, #2
 800cf2a:	4610      	mov	r0, r2
 800cf2c:	4770      	bx	lr
 800cf2e:	b299      	uxth	r1, r3
 800cf30:	b909      	cbnz	r1, 800cf36 <__lo0bits+0x2a>
 800cf32:	0c1b      	lsrs	r3, r3, #16
 800cf34:	2210      	movs	r2, #16
 800cf36:	b2d9      	uxtb	r1, r3
 800cf38:	b909      	cbnz	r1, 800cf3e <__lo0bits+0x32>
 800cf3a:	3208      	adds	r2, #8
 800cf3c:	0a1b      	lsrs	r3, r3, #8
 800cf3e:	0719      	lsls	r1, r3, #28
 800cf40:	bf04      	itt	eq
 800cf42:	091b      	lsreq	r3, r3, #4
 800cf44:	3204      	addeq	r2, #4
 800cf46:	0799      	lsls	r1, r3, #30
 800cf48:	bf04      	itt	eq
 800cf4a:	089b      	lsreq	r3, r3, #2
 800cf4c:	3202      	addeq	r2, #2
 800cf4e:	07d9      	lsls	r1, r3, #31
 800cf50:	d403      	bmi.n	800cf5a <__lo0bits+0x4e>
 800cf52:	085b      	lsrs	r3, r3, #1
 800cf54:	f102 0201 	add.w	r2, r2, #1
 800cf58:	d003      	beq.n	800cf62 <__lo0bits+0x56>
 800cf5a:	6003      	str	r3, [r0, #0]
 800cf5c:	e7e5      	b.n	800cf2a <__lo0bits+0x1e>
 800cf5e:	2200      	movs	r2, #0
 800cf60:	e7e3      	b.n	800cf2a <__lo0bits+0x1e>
 800cf62:	2220      	movs	r2, #32
 800cf64:	e7e1      	b.n	800cf2a <__lo0bits+0x1e>
	...

0800cf68 <__i2b>:
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	460c      	mov	r4, r1
 800cf6c:	2101      	movs	r1, #1
 800cf6e:	f7ff ff05 	bl	800cd7c <_Balloc>
 800cf72:	4602      	mov	r2, r0
 800cf74:	b928      	cbnz	r0, 800cf82 <__i2b+0x1a>
 800cf76:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <__i2b+0x24>)
 800cf78:	4805      	ldr	r0, [pc, #20]	; (800cf90 <__i2b+0x28>)
 800cf7a:	f240 1145 	movw	r1, #325	; 0x145
 800cf7e:	f000 fe83 	bl	800dc88 <__assert_func>
 800cf82:	2301      	movs	r3, #1
 800cf84:	6144      	str	r4, [r0, #20]
 800cf86:	6103      	str	r3, [r0, #16]
 800cf88:	bd10      	pop	{r4, pc}
 800cf8a:	bf00      	nop
 800cf8c:	0800e241 	.word	0x0800e241
 800cf90:	0800e252 	.word	0x0800e252

0800cf94 <__multiply>:
 800cf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	4691      	mov	r9, r2
 800cf9a:	690a      	ldr	r2, [r1, #16]
 800cf9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	bfb8      	it	lt
 800cfa4:	460b      	movlt	r3, r1
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	bfbc      	itt	lt
 800cfaa:	464c      	movlt	r4, r9
 800cfac:	4699      	movlt	r9, r3
 800cfae:	6927      	ldr	r7, [r4, #16]
 800cfb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cfb4:	68a3      	ldr	r3, [r4, #8]
 800cfb6:	6861      	ldr	r1, [r4, #4]
 800cfb8:	eb07 060a 	add.w	r6, r7, sl
 800cfbc:	42b3      	cmp	r3, r6
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	bfb8      	it	lt
 800cfc2:	3101      	addlt	r1, #1
 800cfc4:	f7ff feda 	bl	800cd7c <_Balloc>
 800cfc8:	b930      	cbnz	r0, 800cfd8 <__multiply+0x44>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	4b44      	ldr	r3, [pc, #272]	; (800d0e0 <__multiply+0x14c>)
 800cfce:	4845      	ldr	r0, [pc, #276]	; (800d0e4 <__multiply+0x150>)
 800cfd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cfd4:	f000 fe58 	bl	800dc88 <__assert_func>
 800cfd8:	f100 0514 	add.w	r5, r0, #20
 800cfdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfe0:	462b      	mov	r3, r5
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	4543      	cmp	r3, r8
 800cfe6:	d321      	bcc.n	800d02c <__multiply+0x98>
 800cfe8:	f104 0314 	add.w	r3, r4, #20
 800cfec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cff0:	f109 0314 	add.w	r3, r9, #20
 800cff4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cff8:	9202      	str	r2, [sp, #8]
 800cffa:	1b3a      	subs	r2, r7, r4
 800cffc:	3a15      	subs	r2, #21
 800cffe:	f022 0203 	bic.w	r2, r2, #3
 800d002:	3204      	adds	r2, #4
 800d004:	f104 0115 	add.w	r1, r4, #21
 800d008:	428f      	cmp	r7, r1
 800d00a:	bf38      	it	cc
 800d00c:	2204      	movcc	r2, #4
 800d00e:	9201      	str	r2, [sp, #4]
 800d010:	9a02      	ldr	r2, [sp, #8]
 800d012:	9303      	str	r3, [sp, #12]
 800d014:	429a      	cmp	r2, r3
 800d016:	d80c      	bhi.n	800d032 <__multiply+0x9e>
 800d018:	2e00      	cmp	r6, #0
 800d01a:	dd03      	ble.n	800d024 <__multiply+0x90>
 800d01c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d020:	2b00      	cmp	r3, #0
 800d022:	d05b      	beq.n	800d0dc <__multiply+0x148>
 800d024:	6106      	str	r6, [r0, #16]
 800d026:	b005      	add	sp, #20
 800d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02c:	f843 2b04 	str.w	r2, [r3], #4
 800d030:	e7d8      	b.n	800cfe4 <__multiply+0x50>
 800d032:	f8b3 a000 	ldrh.w	sl, [r3]
 800d036:	f1ba 0f00 	cmp.w	sl, #0
 800d03a:	d024      	beq.n	800d086 <__multiply+0xf2>
 800d03c:	f104 0e14 	add.w	lr, r4, #20
 800d040:	46a9      	mov	r9, r5
 800d042:	f04f 0c00 	mov.w	ip, #0
 800d046:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d04a:	f8d9 1000 	ldr.w	r1, [r9]
 800d04e:	fa1f fb82 	uxth.w	fp, r2
 800d052:	b289      	uxth	r1, r1
 800d054:	fb0a 110b 	mla	r1, sl, fp, r1
 800d058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d05c:	f8d9 2000 	ldr.w	r2, [r9]
 800d060:	4461      	add	r1, ip
 800d062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d066:	fb0a c20b 	mla	r2, sl, fp, ip
 800d06a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d06e:	b289      	uxth	r1, r1
 800d070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d074:	4577      	cmp	r7, lr
 800d076:	f849 1b04 	str.w	r1, [r9], #4
 800d07a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d07e:	d8e2      	bhi.n	800d046 <__multiply+0xb2>
 800d080:	9a01      	ldr	r2, [sp, #4]
 800d082:	f845 c002 	str.w	ip, [r5, r2]
 800d086:	9a03      	ldr	r2, [sp, #12]
 800d088:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d08c:	3304      	adds	r3, #4
 800d08e:	f1b9 0f00 	cmp.w	r9, #0
 800d092:	d021      	beq.n	800d0d8 <__multiply+0x144>
 800d094:	6829      	ldr	r1, [r5, #0]
 800d096:	f104 0c14 	add.w	ip, r4, #20
 800d09a:	46ae      	mov	lr, r5
 800d09c:	f04f 0a00 	mov.w	sl, #0
 800d0a0:	f8bc b000 	ldrh.w	fp, [ip]
 800d0a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d0a8:	fb09 220b 	mla	r2, r9, fp, r2
 800d0ac:	4452      	add	r2, sl
 800d0ae:	b289      	uxth	r1, r1
 800d0b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d0b4:	f84e 1b04 	str.w	r1, [lr], #4
 800d0b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d0bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0c0:	f8be 1000 	ldrh.w	r1, [lr]
 800d0c4:	fb09 110a 	mla	r1, r9, sl, r1
 800d0c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d0cc:	4567      	cmp	r7, ip
 800d0ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0d2:	d8e5      	bhi.n	800d0a0 <__multiply+0x10c>
 800d0d4:	9a01      	ldr	r2, [sp, #4]
 800d0d6:	50a9      	str	r1, [r5, r2]
 800d0d8:	3504      	adds	r5, #4
 800d0da:	e799      	b.n	800d010 <__multiply+0x7c>
 800d0dc:	3e01      	subs	r6, #1
 800d0de:	e79b      	b.n	800d018 <__multiply+0x84>
 800d0e0:	0800e241 	.word	0x0800e241
 800d0e4:	0800e252 	.word	0x0800e252

0800d0e8 <__pow5mult>:
 800d0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0ec:	4615      	mov	r5, r2
 800d0ee:	f012 0203 	ands.w	r2, r2, #3
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	460f      	mov	r7, r1
 800d0f6:	d007      	beq.n	800d108 <__pow5mult+0x20>
 800d0f8:	4c25      	ldr	r4, [pc, #148]	; (800d190 <__pow5mult+0xa8>)
 800d0fa:	3a01      	subs	r2, #1
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d102:	f7ff fe9d 	bl	800ce40 <__multadd>
 800d106:	4607      	mov	r7, r0
 800d108:	10ad      	asrs	r5, r5, #2
 800d10a:	d03d      	beq.n	800d188 <__pow5mult+0xa0>
 800d10c:	69f4      	ldr	r4, [r6, #28]
 800d10e:	b97c      	cbnz	r4, 800d130 <__pow5mult+0x48>
 800d110:	2010      	movs	r0, #16
 800d112:	f7ff fd7f 	bl	800cc14 <malloc>
 800d116:	4602      	mov	r2, r0
 800d118:	61f0      	str	r0, [r6, #28]
 800d11a:	b928      	cbnz	r0, 800d128 <__pow5mult+0x40>
 800d11c:	4b1d      	ldr	r3, [pc, #116]	; (800d194 <__pow5mult+0xac>)
 800d11e:	481e      	ldr	r0, [pc, #120]	; (800d198 <__pow5mult+0xb0>)
 800d120:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d124:	f000 fdb0 	bl	800dc88 <__assert_func>
 800d128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d12c:	6004      	str	r4, [r0, #0]
 800d12e:	60c4      	str	r4, [r0, #12]
 800d130:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d138:	b94c      	cbnz	r4, 800d14e <__pow5mult+0x66>
 800d13a:	f240 2171 	movw	r1, #625	; 0x271
 800d13e:	4630      	mov	r0, r6
 800d140:	f7ff ff12 	bl	800cf68 <__i2b>
 800d144:	2300      	movs	r3, #0
 800d146:	f8c8 0008 	str.w	r0, [r8, #8]
 800d14a:	4604      	mov	r4, r0
 800d14c:	6003      	str	r3, [r0, #0]
 800d14e:	f04f 0900 	mov.w	r9, #0
 800d152:	07eb      	lsls	r3, r5, #31
 800d154:	d50a      	bpl.n	800d16c <__pow5mult+0x84>
 800d156:	4639      	mov	r1, r7
 800d158:	4622      	mov	r2, r4
 800d15a:	4630      	mov	r0, r6
 800d15c:	f7ff ff1a 	bl	800cf94 <__multiply>
 800d160:	4639      	mov	r1, r7
 800d162:	4680      	mov	r8, r0
 800d164:	4630      	mov	r0, r6
 800d166:	f7ff fe49 	bl	800cdfc <_Bfree>
 800d16a:	4647      	mov	r7, r8
 800d16c:	106d      	asrs	r5, r5, #1
 800d16e:	d00b      	beq.n	800d188 <__pow5mult+0xa0>
 800d170:	6820      	ldr	r0, [r4, #0]
 800d172:	b938      	cbnz	r0, 800d184 <__pow5mult+0x9c>
 800d174:	4622      	mov	r2, r4
 800d176:	4621      	mov	r1, r4
 800d178:	4630      	mov	r0, r6
 800d17a:	f7ff ff0b 	bl	800cf94 <__multiply>
 800d17e:	6020      	str	r0, [r4, #0]
 800d180:	f8c0 9000 	str.w	r9, [r0]
 800d184:	4604      	mov	r4, r0
 800d186:	e7e4      	b.n	800d152 <__pow5mult+0x6a>
 800d188:	4638      	mov	r0, r7
 800d18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d18e:	bf00      	nop
 800d190:	0800e3a0 	.word	0x0800e3a0
 800d194:	0800e1d2 	.word	0x0800e1d2
 800d198:	0800e252 	.word	0x0800e252

0800d19c <__lshift>:
 800d19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	6849      	ldr	r1, [r1, #4]
 800d1a4:	6923      	ldr	r3, [r4, #16]
 800d1a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	4691      	mov	r9, r2
 800d1b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1b4:	f108 0601 	add.w	r6, r8, #1
 800d1b8:	42b3      	cmp	r3, r6
 800d1ba:	db0b      	blt.n	800d1d4 <__lshift+0x38>
 800d1bc:	4638      	mov	r0, r7
 800d1be:	f7ff fddd 	bl	800cd7c <_Balloc>
 800d1c2:	4605      	mov	r5, r0
 800d1c4:	b948      	cbnz	r0, 800d1da <__lshift+0x3e>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	4b28      	ldr	r3, [pc, #160]	; (800d26c <__lshift+0xd0>)
 800d1ca:	4829      	ldr	r0, [pc, #164]	; (800d270 <__lshift+0xd4>)
 800d1cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d1d0:	f000 fd5a 	bl	800dc88 <__assert_func>
 800d1d4:	3101      	adds	r1, #1
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	e7ee      	b.n	800d1b8 <__lshift+0x1c>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	f100 0114 	add.w	r1, r0, #20
 800d1e0:	f100 0210 	add.w	r2, r0, #16
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	4553      	cmp	r3, sl
 800d1e8:	db33      	blt.n	800d252 <__lshift+0xb6>
 800d1ea:	6920      	ldr	r0, [r4, #16]
 800d1ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1f0:	f104 0314 	add.w	r3, r4, #20
 800d1f4:	f019 091f 	ands.w	r9, r9, #31
 800d1f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d200:	d02b      	beq.n	800d25a <__lshift+0xbe>
 800d202:	f1c9 0e20 	rsb	lr, r9, #32
 800d206:	468a      	mov	sl, r1
 800d208:	2200      	movs	r2, #0
 800d20a:	6818      	ldr	r0, [r3, #0]
 800d20c:	fa00 f009 	lsl.w	r0, r0, r9
 800d210:	4310      	orrs	r0, r2
 800d212:	f84a 0b04 	str.w	r0, [sl], #4
 800d216:	f853 2b04 	ldr.w	r2, [r3], #4
 800d21a:	459c      	cmp	ip, r3
 800d21c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d220:	d8f3      	bhi.n	800d20a <__lshift+0x6e>
 800d222:	ebac 0304 	sub.w	r3, ip, r4
 800d226:	3b15      	subs	r3, #21
 800d228:	f023 0303 	bic.w	r3, r3, #3
 800d22c:	3304      	adds	r3, #4
 800d22e:	f104 0015 	add.w	r0, r4, #21
 800d232:	4584      	cmp	ip, r0
 800d234:	bf38      	it	cc
 800d236:	2304      	movcc	r3, #4
 800d238:	50ca      	str	r2, [r1, r3]
 800d23a:	b10a      	cbz	r2, 800d240 <__lshift+0xa4>
 800d23c:	f108 0602 	add.w	r6, r8, #2
 800d240:	3e01      	subs	r6, #1
 800d242:	4638      	mov	r0, r7
 800d244:	612e      	str	r6, [r5, #16]
 800d246:	4621      	mov	r1, r4
 800d248:	f7ff fdd8 	bl	800cdfc <_Bfree>
 800d24c:	4628      	mov	r0, r5
 800d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d252:	f842 0f04 	str.w	r0, [r2, #4]!
 800d256:	3301      	adds	r3, #1
 800d258:	e7c5      	b.n	800d1e6 <__lshift+0x4a>
 800d25a:	3904      	subs	r1, #4
 800d25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d260:	f841 2f04 	str.w	r2, [r1, #4]!
 800d264:	459c      	cmp	ip, r3
 800d266:	d8f9      	bhi.n	800d25c <__lshift+0xc0>
 800d268:	e7ea      	b.n	800d240 <__lshift+0xa4>
 800d26a:	bf00      	nop
 800d26c:	0800e241 	.word	0x0800e241
 800d270:	0800e252 	.word	0x0800e252

0800d274 <__mcmp>:
 800d274:	b530      	push	{r4, r5, lr}
 800d276:	6902      	ldr	r2, [r0, #16]
 800d278:	690c      	ldr	r4, [r1, #16]
 800d27a:	1b12      	subs	r2, r2, r4
 800d27c:	d10e      	bne.n	800d29c <__mcmp+0x28>
 800d27e:	f100 0314 	add.w	r3, r0, #20
 800d282:	3114      	adds	r1, #20
 800d284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d28c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d294:	42a5      	cmp	r5, r4
 800d296:	d003      	beq.n	800d2a0 <__mcmp+0x2c>
 800d298:	d305      	bcc.n	800d2a6 <__mcmp+0x32>
 800d29a:	2201      	movs	r2, #1
 800d29c:	4610      	mov	r0, r2
 800d29e:	bd30      	pop	{r4, r5, pc}
 800d2a0:	4283      	cmp	r3, r0
 800d2a2:	d3f3      	bcc.n	800d28c <__mcmp+0x18>
 800d2a4:	e7fa      	b.n	800d29c <__mcmp+0x28>
 800d2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2aa:	e7f7      	b.n	800d29c <__mcmp+0x28>

0800d2ac <__mdiff>:
 800d2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	4690      	mov	r8, r2
 800d2ba:	f7ff ffdb 	bl	800d274 <__mcmp>
 800d2be:	1e05      	subs	r5, r0, #0
 800d2c0:	d110      	bne.n	800d2e4 <__mdiff+0x38>
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7ff fd59 	bl	800cd7c <_Balloc>
 800d2ca:	b930      	cbnz	r0, 800d2da <__mdiff+0x2e>
 800d2cc:	4b3a      	ldr	r3, [pc, #232]	; (800d3b8 <__mdiff+0x10c>)
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	f240 2137 	movw	r1, #567	; 0x237
 800d2d4:	4839      	ldr	r0, [pc, #228]	; (800d3bc <__mdiff+0x110>)
 800d2d6:	f000 fcd7 	bl	800dc88 <__assert_func>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e4:	bfa4      	itt	ge
 800d2e6:	4643      	movge	r3, r8
 800d2e8:	46a0      	movge	r8, r4
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d2f0:	bfa6      	itte	ge
 800d2f2:	461c      	movge	r4, r3
 800d2f4:	2500      	movge	r5, #0
 800d2f6:	2501      	movlt	r5, #1
 800d2f8:	f7ff fd40 	bl	800cd7c <_Balloc>
 800d2fc:	b920      	cbnz	r0, 800d308 <__mdiff+0x5c>
 800d2fe:	4b2e      	ldr	r3, [pc, #184]	; (800d3b8 <__mdiff+0x10c>)
 800d300:	4602      	mov	r2, r0
 800d302:	f240 2145 	movw	r1, #581	; 0x245
 800d306:	e7e5      	b.n	800d2d4 <__mdiff+0x28>
 800d308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d30c:	6926      	ldr	r6, [r4, #16]
 800d30e:	60c5      	str	r5, [r0, #12]
 800d310:	f104 0914 	add.w	r9, r4, #20
 800d314:	f108 0514 	add.w	r5, r8, #20
 800d318:	f100 0e14 	add.w	lr, r0, #20
 800d31c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d324:	f108 0210 	add.w	r2, r8, #16
 800d328:	46f2      	mov	sl, lr
 800d32a:	2100      	movs	r1, #0
 800d32c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d334:	fa11 f88b 	uxtah	r8, r1, fp
 800d338:	b299      	uxth	r1, r3
 800d33a:	0c1b      	lsrs	r3, r3, #16
 800d33c:	eba8 0801 	sub.w	r8, r8, r1
 800d340:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d344:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d348:	fa1f f888 	uxth.w	r8, r8
 800d34c:	1419      	asrs	r1, r3, #16
 800d34e:	454e      	cmp	r6, r9
 800d350:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d354:	f84a 3b04 	str.w	r3, [sl], #4
 800d358:	d8e8      	bhi.n	800d32c <__mdiff+0x80>
 800d35a:	1b33      	subs	r3, r6, r4
 800d35c:	3b15      	subs	r3, #21
 800d35e:	f023 0303 	bic.w	r3, r3, #3
 800d362:	3304      	adds	r3, #4
 800d364:	3415      	adds	r4, #21
 800d366:	42a6      	cmp	r6, r4
 800d368:	bf38      	it	cc
 800d36a:	2304      	movcc	r3, #4
 800d36c:	441d      	add	r5, r3
 800d36e:	4473      	add	r3, lr
 800d370:	469e      	mov	lr, r3
 800d372:	462e      	mov	r6, r5
 800d374:	4566      	cmp	r6, ip
 800d376:	d30e      	bcc.n	800d396 <__mdiff+0xea>
 800d378:	f10c 0203 	add.w	r2, ip, #3
 800d37c:	1b52      	subs	r2, r2, r5
 800d37e:	f022 0203 	bic.w	r2, r2, #3
 800d382:	3d03      	subs	r5, #3
 800d384:	45ac      	cmp	ip, r5
 800d386:	bf38      	it	cc
 800d388:	2200      	movcc	r2, #0
 800d38a:	4413      	add	r3, r2
 800d38c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d390:	b17a      	cbz	r2, 800d3b2 <__mdiff+0x106>
 800d392:	6107      	str	r7, [r0, #16]
 800d394:	e7a4      	b.n	800d2e0 <__mdiff+0x34>
 800d396:	f856 8b04 	ldr.w	r8, [r6], #4
 800d39a:	fa11 f288 	uxtah	r2, r1, r8
 800d39e:	1414      	asrs	r4, r2, #16
 800d3a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d3a4:	b292      	uxth	r2, r2
 800d3a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d3aa:	f84e 2b04 	str.w	r2, [lr], #4
 800d3ae:	1421      	asrs	r1, r4, #16
 800d3b0:	e7e0      	b.n	800d374 <__mdiff+0xc8>
 800d3b2:	3f01      	subs	r7, #1
 800d3b4:	e7ea      	b.n	800d38c <__mdiff+0xe0>
 800d3b6:	bf00      	nop
 800d3b8:	0800e241 	.word	0x0800e241
 800d3bc:	0800e252 	.word	0x0800e252

0800d3c0 <__d2b>:
 800d3c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3c4:	460f      	mov	r7, r1
 800d3c6:	2101      	movs	r1, #1
 800d3c8:	ec59 8b10 	vmov	r8, r9, d0
 800d3cc:	4616      	mov	r6, r2
 800d3ce:	f7ff fcd5 	bl	800cd7c <_Balloc>
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	b930      	cbnz	r0, 800d3e4 <__d2b+0x24>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	4b24      	ldr	r3, [pc, #144]	; (800d46c <__d2b+0xac>)
 800d3da:	4825      	ldr	r0, [pc, #148]	; (800d470 <__d2b+0xb0>)
 800d3dc:	f240 310f 	movw	r1, #783	; 0x30f
 800d3e0:	f000 fc52 	bl	800dc88 <__assert_func>
 800d3e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d3e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3ec:	bb2d      	cbnz	r5, 800d43a <__d2b+0x7a>
 800d3ee:	9301      	str	r3, [sp, #4]
 800d3f0:	f1b8 0300 	subs.w	r3, r8, #0
 800d3f4:	d026      	beq.n	800d444 <__d2b+0x84>
 800d3f6:	4668      	mov	r0, sp
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	f7ff fd87 	bl	800cf0c <__lo0bits>
 800d3fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d402:	b1e8      	cbz	r0, 800d440 <__d2b+0x80>
 800d404:	f1c0 0320 	rsb	r3, r0, #32
 800d408:	fa02 f303 	lsl.w	r3, r2, r3
 800d40c:	430b      	orrs	r3, r1
 800d40e:	40c2      	lsrs	r2, r0
 800d410:	6163      	str	r3, [r4, #20]
 800d412:	9201      	str	r2, [sp, #4]
 800d414:	9b01      	ldr	r3, [sp, #4]
 800d416:	61a3      	str	r3, [r4, #24]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	bf14      	ite	ne
 800d41c:	2202      	movne	r2, #2
 800d41e:	2201      	moveq	r2, #1
 800d420:	6122      	str	r2, [r4, #16]
 800d422:	b1bd      	cbz	r5, 800d454 <__d2b+0x94>
 800d424:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d428:	4405      	add	r5, r0
 800d42a:	603d      	str	r5, [r7, #0]
 800d42c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d430:	6030      	str	r0, [r6, #0]
 800d432:	4620      	mov	r0, r4
 800d434:	b003      	add	sp, #12
 800d436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d43a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d43e:	e7d6      	b.n	800d3ee <__d2b+0x2e>
 800d440:	6161      	str	r1, [r4, #20]
 800d442:	e7e7      	b.n	800d414 <__d2b+0x54>
 800d444:	a801      	add	r0, sp, #4
 800d446:	f7ff fd61 	bl	800cf0c <__lo0bits>
 800d44a:	9b01      	ldr	r3, [sp, #4]
 800d44c:	6163      	str	r3, [r4, #20]
 800d44e:	3020      	adds	r0, #32
 800d450:	2201      	movs	r2, #1
 800d452:	e7e5      	b.n	800d420 <__d2b+0x60>
 800d454:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d458:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d45c:	6038      	str	r0, [r7, #0]
 800d45e:	6918      	ldr	r0, [r3, #16]
 800d460:	f7ff fd34 	bl	800cecc <__hi0bits>
 800d464:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d468:	e7e2      	b.n	800d430 <__d2b+0x70>
 800d46a:	bf00      	nop
 800d46c:	0800e241 	.word	0x0800e241
 800d470:	0800e252 	.word	0x0800e252

0800d474 <__ssputs_r>:
 800d474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d478:	688e      	ldr	r6, [r1, #8]
 800d47a:	461f      	mov	r7, r3
 800d47c:	42be      	cmp	r6, r7
 800d47e:	680b      	ldr	r3, [r1, #0]
 800d480:	4682      	mov	sl, r0
 800d482:	460c      	mov	r4, r1
 800d484:	4690      	mov	r8, r2
 800d486:	d82c      	bhi.n	800d4e2 <__ssputs_r+0x6e>
 800d488:	898a      	ldrh	r2, [r1, #12]
 800d48a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d48e:	d026      	beq.n	800d4de <__ssputs_r+0x6a>
 800d490:	6965      	ldr	r5, [r4, #20]
 800d492:	6909      	ldr	r1, [r1, #16]
 800d494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d498:	eba3 0901 	sub.w	r9, r3, r1
 800d49c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4a0:	1c7b      	adds	r3, r7, #1
 800d4a2:	444b      	add	r3, r9
 800d4a4:	106d      	asrs	r5, r5, #1
 800d4a6:	429d      	cmp	r5, r3
 800d4a8:	bf38      	it	cc
 800d4aa:	461d      	movcc	r5, r3
 800d4ac:	0553      	lsls	r3, r2, #21
 800d4ae:	d527      	bpl.n	800d500 <__ssputs_r+0x8c>
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	f7ff fbd7 	bl	800cc64 <_malloc_r>
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	b360      	cbz	r0, 800d514 <__ssputs_r+0xa0>
 800d4ba:	6921      	ldr	r1, [r4, #16]
 800d4bc:	464a      	mov	r2, r9
 800d4be:	f7fe fcd2 	bl	800be66 <memcpy>
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4cc:	81a3      	strh	r3, [r4, #12]
 800d4ce:	6126      	str	r6, [r4, #16]
 800d4d0:	6165      	str	r5, [r4, #20]
 800d4d2:	444e      	add	r6, r9
 800d4d4:	eba5 0509 	sub.w	r5, r5, r9
 800d4d8:	6026      	str	r6, [r4, #0]
 800d4da:	60a5      	str	r5, [r4, #8]
 800d4dc:	463e      	mov	r6, r7
 800d4de:	42be      	cmp	r6, r7
 800d4e0:	d900      	bls.n	800d4e4 <__ssputs_r+0x70>
 800d4e2:	463e      	mov	r6, r7
 800d4e4:	6820      	ldr	r0, [r4, #0]
 800d4e6:	4632      	mov	r2, r6
 800d4e8:	4641      	mov	r1, r8
 800d4ea:	f000 fba3 	bl	800dc34 <memmove>
 800d4ee:	68a3      	ldr	r3, [r4, #8]
 800d4f0:	1b9b      	subs	r3, r3, r6
 800d4f2:	60a3      	str	r3, [r4, #8]
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	4433      	add	r3, r6
 800d4f8:	6023      	str	r3, [r4, #0]
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d500:	462a      	mov	r2, r5
 800d502:	f000 fc07 	bl	800dd14 <_realloc_r>
 800d506:	4606      	mov	r6, r0
 800d508:	2800      	cmp	r0, #0
 800d50a:	d1e0      	bne.n	800d4ce <__ssputs_r+0x5a>
 800d50c:	6921      	ldr	r1, [r4, #16]
 800d50e:	4650      	mov	r0, sl
 800d510:	f7ff fb34 	bl	800cb7c <_free_r>
 800d514:	230c      	movs	r3, #12
 800d516:	f8ca 3000 	str.w	r3, [sl]
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d520:	81a3      	strh	r3, [r4, #12]
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	e7e9      	b.n	800d4fc <__ssputs_r+0x88>

0800d528 <_svfiprintf_r>:
 800d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	4698      	mov	r8, r3
 800d52e:	898b      	ldrh	r3, [r1, #12]
 800d530:	061b      	lsls	r3, r3, #24
 800d532:	b09d      	sub	sp, #116	; 0x74
 800d534:	4607      	mov	r7, r0
 800d536:	460d      	mov	r5, r1
 800d538:	4614      	mov	r4, r2
 800d53a:	d50e      	bpl.n	800d55a <_svfiprintf_r+0x32>
 800d53c:	690b      	ldr	r3, [r1, #16]
 800d53e:	b963      	cbnz	r3, 800d55a <_svfiprintf_r+0x32>
 800d540:	2140      	movs	r1, #64	; 0x40
 800d542:	f7ff fb8f 	bl	800cc64 <_malloc_r>
 800d546:	6028      	str	r0, [r5, #0]
 800d548:	6128      	str	r0, [r5, #16]
 800d54a:	b920      	cbnz	r0, 800d556 <_svfiprintf_r+0x2e>
 800d54c:	230c      	movs	r3, #12
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	f04f 30ff 	mov.w	r0, #4294967295
 800d554:	e0d0      	b.n	800d6f8 <_svfiprintf_r+0x1d0>
 800d556:	2340      	movs	r3, #64	; 0x40
 800d558:	616b      	str	r3, [r5, #20]
 800d55a:	2300      	movs	r3, #0
 800d55c:	9309      	str	r3, [sp, #36]	; 0x24
 800d55e:	2320      	movs	r3, #32
 800d560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d564:	f8cd 800c 	str.w	r8, [sp, #12]
 800d568:	2330      	movs	r3, #48	; 0x30
 800d56a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d710 <_svfiprintf_r+0x1e8>
 800d56e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d572:	f04f 0901 	mov.w	r9, #1
 800d576:	4623      	mov	r3, r4
 800d578:	469a      	mov	sl, r3
 800d57a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d57e:	b10a      	cbz	r2, 800d584 <_svfiprintf_r+0x5c>
 800d580:	2a25      	cmp	r2, #37	; 0x25
 800d582:	d1f9      	bne.n	800d578 <_svfiprintf_r+0x50>
 800d584:	ebba 0b04 	subs.w	fp, sl, r4
 800d588:	d00b      	beq.n	800d5a2 <_svfiprintf_r+0x7a>
 800d58a:	465b      	mov	r3, fp
 800d58c:	4622      	mov	r2, r4
 800d58e:	4629      	mov	r1, r5
 800d590:	4638      	mov	r0, r7
 800d592:	f7ff ff6f 	bl	800d474 <__ssputs_r>
 800d596:	3001      	adds	r0, #1
 800d598:	f000 80a9 	beq.w	800d6ee <_svfiprintf_r+0x1c6>
 800d59c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d59e:	445a      	add	r2, fp
 800d5a0:	9209      	str	r2, [sp, #36]	; 0x24
 800d5a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 80a1 	beq.w	800d6ee <_svfiprintf_r+0x1c6>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5b6:	f10a 0a01 	add.w	sl, sl, #1
 800d5ba:	9304      	str	r3, [sp, #16]
 800d5bc:	9307      	str	r3, [sp, #28]
 800d5be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5c2:	931a      	str	r3, [sp, #104]	; 0x68
 800d5c4:	4654      	mov	r4, sl
 800d5c6:	2205      	movs	r2, #5
 800d5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5cc:	4850      	ldr	r0, [pc, #320]	; (800d710 <_svfiprintf_r+0x1e8>)
 800d5ce:	f7f2 fdff 	bl	80001d0 <memchr>
 800d5d2:	9a04      	ldr	r2, [sp, #16]
 800d5d4:	b9d8      	cbnz	r0, 800d60e <_svfiprintf_r+0xe6>
 800d5d6:	06d0      	lsls	r0, r2, #27
 800d5d8:	bf44      	itt	mi
 800d5da:	2320      	movmi	r3, #32
 800d5dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5e0:	0711      	lsls	r1, r2, #28
 800d5e2:	bf44      	itt	mi
 800d5e4:	232b      	movmi	r3, #43	; 0x2b
 800d5e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d5f0:	d015      	beq.n	800d61e <_svfiprintf_r+0xf6>
 800d5f2:	9a07      	ldr	r2, [sp, #28]
 800d5f4:	4654      	mov	r4, sl
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	f04f 0c0a 	mov.w	ip, #10
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d602:	3b30      	subs	r3, #48	; 0x30
 800d604:	2b09      	cmp	r3, #9
 800d606:	d94d      	bls.n	800d6a4 <_svfiprintf_r+0x17c>
 800d608:	b1b0      	cbz	r0, 800d638 <_svfiprintf_r+0x110>
 800d60a:	9207      	str	r2, [sp, #28]
 800d60c:	e014      	b.n	800d638 <_svfiprintf_r+0x110>
 800d60e:	eba0 0308 	sub.w	r3, r0, r8
 800d612:	fa09 f303 	lsl.w	r3, r9, r3
 800d616:	4313      	orrs	r3, r2
 800d618:	9304      	str	r3, [sp, #16]
 800d61a:	46a2      	mov	sl, r4
 800d61c:	e7d2      	b.n	800d5c4 <_svfiprintf_r+0x9c>
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	1d19      	adds	r1, r3, #4
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	9103      	str	r1, [sp, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	bfbb      	ittet	lt
 800d62a:	425b      	neglt	r3, r3
 800d62c:	f042 0202 	orrlt.w	r2, r2, #2
 800d630:	9307      	strge	r3, [sp, #28]
 800d632:	9307      	strlt	r3, [sp, #28]
 800d634:	bfb8      	it	lt
 800d636:	9204      	strlt	r2, [sp, #16]
 800d638:	7823      	ldrb	r3, [r4, #0]
 800d63a:	2b2e      	cmp	r3, #46	; 0x2e
 800d63c:	d10c      	bne.n	800d658 <_svfiprintf_r+0x130>
 800d63e:	7863      	ldrb	r3, [r4, #1]
 800d640:	2b2a      	cmp	r3, #42	; 0x2a
 800d642:	d134      	bne.n	800d6ae <_svfiprintf_r+0x186>
 800d644:	9b03      	ldr	r3, [sp, #12]
 800d646:	1d1a      	adds	r2, r3, #4
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	9203      	str	r2, [sp, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	bfb8      	it	lt
 800d650:	f04f 33ff 	movlt.w	r3, #4294967295
 800d654:	3402      	adds	r4, #2
 800d656:	9305      	str	r3, [sp, #20]
 800d658:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d720 <_svfiprintf_r+0x1f8>
 800d65c:	7821      	ldrb	r1, [r4, #0]
 800d65e:	2203      	movs	r2, #3
 800d660:	4650      	mov	r0, sl
 800d662:	f7f2 fdb5 	bl	80001d0 <memchr>
 800d666:	b138      	cbz	r0, 800d678 <_svfiprintf_r+0x150>
 800d668:	9b04      	ldr	r3, [sp, #16]
 800d66a:	eba0 000a 	sub.w	r0, r0, sl
 800d66e:	2240      	movs	r2, #64	; 0x40
 800d670:	4082      	lsls	r2, r0
 800d672:	4313      	orrs	r3, r2
 800d674:	3401      	adds	r4, #1
 800d676:	9304      	str	r3, [sp, #16]
 800d678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67c:	4825      	ldr	r0, [pc, #148]	; (800d714 <_svfiprintf_r+0x1ec>)
 800d67e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d682:	2206      	movs	r2, #6
 800d684:	f7f2 fda4 	bl	80001d0 <memchr>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d038      	beq.n	800d6fe <_svfiprintf_r+0x1d6>
 800d68c:	4b22      	ldr	r3, [pc, #136]	; (800d718 <_svfiprintf_r+0x1f0>)
 800d68e:	bb1b      	cbnz	r3, 800d6d8 <_svfiprintf_r+0x1b0>
 800d690:	9b03      	ldr	r3, [sp, #12]
 800d692:	3307      	adds	r3, #7
 800d694:	f023 0307 	bic.w	r3, r3, #7
 800d698:	3308      	adds	r3, #8
 800d69a:	9303      	str	r3, [sp, #12]
 800d69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69e:	4433      	add	r3, r6
 800d6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a2:	e768      	b.n	800d576 <_svfiprintf_r+0x4e>
 800d6a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6a8:	460c      	mov	r4, r1
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	e7a6      	b.n	800d5fc <_svfiprintf_r+0xd4>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	3401      	adds	r4, #1
 800d6b2:	9305      	str	r3, [sp, #20]
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	f04f 0c0a 	mov.w	ip, #10
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6c0:	3a30      	subs	r2, #48	; 0x30
 800d6c2:	2a09      	cmp	r2, #9
 800d6c4:	d903      	bls.n	800d6ce <_svfiprintf_r+0x1a6>
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d0c6      	beq.n	800d658 <_svfiprintf_r+0x130>
 800d6ca:	9105      	str	r1, [sp, #20]
 800d6cc:	e7c4      	b.n	800d658 <_svfiprintf_r+0x130>
 800d6ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e7f0      	b.n	800d6ba <_svfiprintf_r+0x192>
 800d6d8:	ab03      	add	r3, sp, #12
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	462a      	mov	r2, r5
 800d6de:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <_svfiprintf_r+0x1f4>)
 800d6e0:	a904      	add	r1, sp, #16
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	f7fd fe42 	bl	800b36c <_printf_float>
 800d6e8:	1c42      	adds	r2, r0, #1
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	d1d6      	bne.n	800d69c <_svfiprintf_r+0x174>
 800d6ee:	89ab      	ldrh	r3, [r5, #12]
 800d6f0:	065b      	lsls	r3, r3, #25
 800d6f2:	f53f af2d 	bmi.w	800d550 <_svfiprintf_r+0x28>
 800d6f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6f8:	b01d      	add	sp, #116	; 0x74
 800d6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fe:	ab03      	add	r3, sp, #12
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	462a      	mov	r2, r5
 800d704:	4b05      	ldr	r3, [pc, #20]	; (800d71c <_svfiprintf_r+0x1f4>)
 800d706:	a904      	add	r1, sp, #16
 800d708:	4638      	mov	r0, r7
 800d70a:	f7fe f8d3 	bl	800b8b4 <_printf_i>
 800d70e:	e7eb      	b.n	800d6e8 <_svfiprintf_r+0x1c0>
 800d710:	0800e3ac 	.word	0x0800e3ac
 800d714:	0800e3b6 	.word	0x0800e3b6
 800d718:	0800b36d 	.word	0x0800b36d
 800d71c:	0800d475 	.word	0x0800d475
 800d720:	0800e3b2 	.word	0x0800e3b2

0800d724 <__sfputc_r>:
 800d724:	6893      	ldr	r3, [r2, #8]
 800d726:	3b01      	subs	r3, #1
 800d728:	2b00      	cmp	r3, #0
 800d72a:	b410      	push	{r4}
 800d72c:	6093      	str	r3, [r2, #8]
 800d72e:	da08      	bge.n	800d742 <__sfputc_r+0x1e>
 800d730:	6994      	ldr	r4, [r2, #24]
 800d732:	42a3      	cmp	r3, r4
 800d734:	db01      	blt.n	800d73a <__sfputc_r+0x16>
 800d736:	290a      	cmp	r1, #10
 800d738:	d103      	bne.n	800d742 <__sfputc_r+0x1e>
 800d73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d73e:	f000 b9e3 	b.w	800db08 <__swbuf_r>
 800d742:	6813      	ldr	r3, [r2, #0]
 800d744:	1c58      	adds	r0, r3, #1
 800d746:	6010      	str	r0, [r2, #0]
 800d748:	7019      	strb	r1, [r3, #0]
 800d74a:	4608      	mov	r0, r1
 800d74c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d750:	4770      	bx	lr

0800d752 <__sfputs_r>:
 800d752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d754:	4606      	mov	r6, r0
 800d756:	460f      	mov	r7, r1
 800d758:	4614      	mov	r4, r2
 800d75a:	18d5      	adds	r5, r2, r3
 800d75c:	42ac      	cmp	r4, r5
 800d75e:	d101      	bne.n	800d764 <__sfputs_r+0x12>
 800d760:	2000      	movs	r0, #0
 800d762:	e007      	b.n	800d774 <__sfputs_r+0x22>
 800d764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d768:	463a      	mov	r2, r7
 800d76a:	4630      	mov	r0, r6
 800d76c:	f7ff ffda 	bl	800d724 <__sfputc_r>
 800d770:	1c43      	adds	r3, r0, #1
 800d772:	d1f3      	bne.n	800d75c <__sfputs_r+0xa>
 800d774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d778 <_vfiprintf_r>:
 800d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	460d      	mov	r5, r1
 800d77e:	b09d      	sub	sp, #116	; 0x74
 800d780:	4614      	mov	r4, r2
 800d782:	4698      	mov	r8, r3
 800d784:	4606      	mov	r6, r0
 800d786:	b118      	cbz	r0, 800d790 <_vfiprintf_r+0x18>
 800d788:	6a03      	ldr	r3, [r0, #32]
 800d78a:	b90b      	cbnz	r3, 800d790 <_vfiprintf_r+0x18>
 800d78c:	f7fe fa40 	bl	800bc10 <__sinit>
 800d790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d792:	07d9      	lsls	r1, r3, #31
 800d794:	d405      	bmi.n	800d7a2 <_vfiprintf_r+0x2a>
 800d796:	89ab      	ldrh	r3, [r5, #12]
 800d798:	059a      	lsls	r2, r3, #22
 800d79a:	d402      	bmi.n	800d7a2 <_vfiprintf_r+0x2a>
 800d79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d79e:	f7fe fb60 	bl	800be62 <__retarget_lock_acquire_recursive>
 800d7a2:	89ab      	ldrh	r3, [r5, #12]
 800d7a4:	071b      	lsls	r3, r3, #28
 800d7a6:	d501      	bpl.n	800d7ac <_vfiprintf_r+0x34>
 800d7a8:	692b      	ldr	r3, [r5, #16]
 800d7aa:	b99b      	cbnz	r3, 800d7d4 <_vfiprintf_r+0x5c>
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	f000 f9e8 	bl	800db84 <__swsetup_r>
 800d7b4:	b170      	cbz	r0, 800d7d4 <_vfiprintf_r+0x5c>
 800d7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7b8:	07dc      	lsls	r4, r3, #31
 800d7ba:	d504      	bpl.n	800d7c6 <_vfiprintf_r+0x4e>
 800d7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c0:	b01d      	add	sp, #116	; 0x74
 800d7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c6:	89ab      	ldrh	r3, [r5, #12]
 800d7c8:	0598      	lsls	r0, r3, #22
 800d7ca:	d4f7      	bmi.n	800d7bc <_vfiprintf_r+0x44>
 800d7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ce:	f7fe fb49 	bl	800be64 <__retarget_lock_release_recursive>
 800d7d2:	e7f3      	b.n	800d7bc <_vfiprintf_r+0x44>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d8:	2320      	movs	r3, #32
 800d7da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7e2:	2330      	movs	r3, #48	; 0x30
 800d7e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d998 <_vfiprintf_r+0x220>
 800d7e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7ec:	f04f 0901 	mov.w	r9, #1
 800d7f0:	4623      	mov	r3, r4
 800d7f2:	469a      	mov	sl, r3
 800d7f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7f8:	b10a      	cbz	r2, 800d7fe <_vfiprintf_r+0x86>
 800d7fa:	2a25      	cmp	r2, #37	; 0x25
 800d7fc:	d1f9      	bne.n	800d7f2 <_vfiprintf_r+0x7a>
 800d7fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d802:	d00b      	beq.n	800d81c <_vfiprintf_r+0xa4>
 800d804:	465b      	mov	r3, fp
 800d806:	4622      	mov	r2, r4
 800d808:	4629      	mov	r1, r5
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7ff ffa1 	bl	800d752 <__sfputs_r>
 800d810:	3001      	adds	r0, #1
 800d812:	f000 80a9 	beq.w	800d968 <_vfiprintf_r+0x1f0>
 800d816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d818:	445a      	add	r2, fp
 800d81a:	9209      	str	r2, [sp, #36]	; 0x24
 800d81c:	f89a 3000 	ldrb.w	r3, [sl]
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 80a1 	beq.w	800d968 <_vfiprintf_r+0x1f0>
 800d826:	2300      	movs	r3, #0
 800d828:	f04f 32ff 	mov.w	r2, #4294967295
 800d82c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d830:	f10a 0a01 	add.w	sl, sl, #1
 800d834:	9304      	str	r3, [sp, #16]
 800d836:	9307      	str	r3, [sp, #28]
 800d838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d83c:	931a      	str	r3, [sp, #104]	; 0x68
 800d83e:	4654      	mov	r4, sl
 800d840:	2205      	movs	r2, #5
 800d842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d846:	4854      	ldr	r0, [pc, #336]	; (800d998 <_vfiprintf_r+0x220>)
 800d848:	f7f2 fcc2 	bl	80001d0 <memchr>
 800d84c:	9a04      	ldr	r2, [sp, #16]
 800d84e:	b9d8      	cbnz	r0, 800d888 <_vfiprintf_r+0x110>
 800d850:	06d1      	lsls	r1, r2, #27
 800d852:	bf44      	itt	mi
 800d854:	2320      	movmi	r3, #32
 800d856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d85a:	0713      	lsls	r3, r2, #28
 800d85c:	bf44      	itt	mi
 800d85e:	232b      	movmi	r3, #43	; 0x2b
 800d860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d864:	f89a 3000 	ldrb.w	r3, [sl]
 800d868:	2b2a      	cmp	r3, #42	; 0x2a
 800d86a:	d015      	beq.n	800d898 <_vfiprintf_r+0x120>
 800d86c:	9a07      	ldr	r2, [sp, #28]
 800d86e:	4654      	mov	r4, sl
 800d870:	2000      	movs	r0, #0
 800d872:	f04f 0c0a 	mov.w	ip, #10
 800d876:	4621      	mov	r1, r4
 800d878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d87c:	3b30      	subs	r3, #48	; 0x30
 800d87e:	2b09      	cmp	r3, #9
 800d880:	d94d      	bls.n	800d91e <_vfiprintf_r+0x1a6>
 800d882:	b1b0      	cbz	r0, 800d8b2 <_vfiprintf_r+0x13a>
 800d884:	9207      	str	r2, [sp, #28]
 800d886:	e014      	b.n	800d8b2 <_vfiprintf_r+0x13a>
 800d888:	eba0 0308 	sub.w	r3, r0, r8
 800d88c:	fa09 f303 	lsl.w	r3, r9, r3
 800d890:	4313      	orrs	r3, r2
 800d892:	9304      	str	r3, [sp, #16]
 800d894:	46a2      	mov	sl, r4
 800d896:	e7d2      	b.n	800d83e <_vfiprintf_r+0xc6>
 800d898:	9b03      	ldr	r3, [sp, #12]
 800d89a:	1d19      	adds	r1, r3, #4
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	9103      	str	r1, [sp, #12]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	bfbb      	ittet	lt
 800d8a4:	425b      	neglt	r3, r3
 800d8a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d8aa:	9307      	strge	r3, [sp, #28]
 800d8ac:	9307      	strlt	r3, [sp, #28]
 800d8ae:	bfb8      	it	lt
 800d8b0:	9204      	strlt	r2, [sp, #16]
 800d8b2:	7823      	ldrb	r3, [r4, #0]
 800d8b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d8b6:	d10c      	bne.n	800d8d2 <_vfiprintf_r+0x15a>
 800d8b8:	7863      	ldrb	r3, [r4, #1]
 800d8ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d8bc:	d134      	bne.n	800d928 <_vfiprintf_r+0x1b0>
 800d8be:	9b03      	ldr	r3, [sp, #12]
 800d8c0:	1d1a      	adds	r2, r3, #4
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	9203      	str	r2, [sp, #12]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	bfb8      	it	lt
 800d8ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8ce:	3402      	adds	r4, #2
 800d8d0:	9305      	str	r3, [sp, #20]
 800d8d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d9a8 <_vfiprintf_r+0x230>
 800d8d6:	7821      	ldrb	r1, [r4, #0]
 800d8d8:	2203      	movs	r2, #3
 800d8da:	4650      	mov	r0, sl
 800d8dc:	f7f2 fc78 	bl	80001d0 <memchr>
 800d8e0:	b138      	cbz	r0, 800d8f2 <_vfiprintf_r+0x17a>
 800d8e2:	9b04      	ldr	r3, [sp, #16]
 800d8e4:	eba0 000a 	sub.w	r0, r0, sl
 800d8e8:	2240      	movs	r2, #64	; 0x40
 800d8ea:	4082      	lsls	r2, r0
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	3401      	adds	r4, #1
 800d8f0:	9304      	str	r3, [sp, #16]
 800d8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f6:	4829      	ldr	r0, [pc, #164]	; (800d99c <_vfiprintf_r+0x224>)
 800d8f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8fc:	2206      	movs	r2, #6
 800d8fe:	f7f2 fc67 	bl	80001d0 <memchr>
 800d902:	2800      	cmp	r0, #0
 800d904:	d03f      	beq.n	800d986 <_vfiprintf_r+0x20e>
 800d906:	4b26      	ldr	r3, [pc, #152]	; (800d9a0 <_vfiprintf_r+0x228>)
 800d908:	bb1b      	cbnz	r3, 800d952 <_vfiprintf_r+0x1da>
 800d90a:	9b03      	ldr	r3, [sp, #12]
 800d90c:	3307      	adds	r3, #7
 800d90e:	f023 0307 	bic.w	r3, r3, #7
 800d912:	3308      	adds	r3, #8
 800d914:	9303      	str	r3, [sp, #12]
 800d916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d918:	443b      	add	r3, r7
 800d91a:	9309      	str	r3, [sp, #36]	; 0x24
 800d91c:	e768      	b.n	800d7f0 <_vfiprintf_r+0x78>
 800d91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d922:	460c      	mov	r4, r1
 800d924:	2001      	movs	r0, #1
 800d926:	e7a6      	b.n	800d876 <_vfiprintf_r+0xfe>
 800d928:	2300      	movs	r3, #0
 800d92a:	3401      	adds	r4, #1
 800d92c:	9305      	str	r3, [sp, #20]
 800d92e:	4619      	mov	r1, r3
 800d930:	f04f 0c0a 	mov.w	ip, #10
 800d934:	4620      	mov	r0, r4
 800d936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d93a:	3a30      	subs	r2, #48	; 0x30
 800d93c:	2a09      	cmp	r2, #9
 800d93e:	d903      	bls.n	800d948 <_vfiprintf_r+0x1d0>
 800d940:	2b00      	cmp	r3, #0
 800d942:	d0c6      	beq.n	800d8d2 <_vfiprintf_r+0x15a>
 800d944:	9105      	str	r1, [sp, #20]
 800d946:	e7c4      	b.n	800d8d2 <_vfiprintf_r+0x15a>
 800d948:	fb0c 2101 	mla	r1, ip, r1, r2
 800d94c:	4604      	mov	r4, r0
 800d94e:	2301      	movs	r3, #1
 800d950:	e7f0      	b.n	800d934 <_vfiprintf_r+0x1bc>
 800d952:	ab03      	add	r3, sp, #12
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	462a      	mov	r2, r5
 800d958:	4b12      	ldr	r3, [pc, #72]	; (800d9a4 <_vfiprintf_r+0x22c>)
 800d95a:	a904      	add	r1, sp, #16
 800d95c:	4630      	mov	r0, r6
 800d95e:	f7fd fd05 	bl	800b36c <_printf_float>
 800d962:	4607      	mov	r7, r0
 800d964:	1c78      	adds	r0, r7, #1
 800d966:	d1d6      	bne.n	800d916 <_vfiprintf_r+0x19e>
 800d968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d96a:	07d9      	lsls	r1, r3, #31
 800d96c:	d405      	bmi.n	800d97a <_vfiprintf_r+0x202>
 800d96e:	89ab      	ldrh	r3, [r5, #12]
 800d970:	059a      	lsls	r2, r3, #22
 800d972:	d402      	bmi.n	800d97a <_vfiprintf_r+0x202>
 800d974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d976:	f7fe fa75 	bl	800be64 <__retarget_lock_release_recursive>
 800d97a:	89ab      	ldrh	r3, [r5, #12]
 800d97c:	065b      	lsls	r3, r3, #25
 800d97e:	f53f af1d 	bmi.w	800d7bc <_vfiprintf_r+0x44>
 800d982:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d984:	e71c      	b.n	800d7c0 <_vfiprintf_r+0x48>
 800d986:	ab03      	add	r3, sp, #12
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	462a      	mov	r2, r5
 800d98c:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <_vfiprintf_r+0x22c>)
 800d98e:	a904      	add	r1, sp, #16
 800d990:	4630      	mov	r0, r6
 800d992:	f7fd ff8f 	bl	800b8b4 <_printf_i>
 800d996:	e7e4      	b.n	800d962 <_vfiprintf_r+0x1ea>
 800d998:	0800e3ac 	.word	0x0800e3ac
 800d99c:	0800e3b6 	.word	0x0800e3b6
 800d9a0:	0800b36d 	.word	0x0800b36d
 800d9a4:	0800d753 	.word	0x0800d753
 800d9a8:	0800e3b2 	.word	0x0800e3b2

0800d9ac <__sflush_r>:
 800d9ac:	898a      	ldrh	r2, [r1, #12]
 800d9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b2:	4605      	mov	r5, r0
 800d9b4:	0710      	lsls	r0, r2, #28
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	d458      	bmi.n	800da6c <__sflush_r+0xc0>
 800d9ba:	684b      	ldr	r3, [r1, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	dc05      	bgt.n	800d9cc <__sflush_r+0x20>
 800d9c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	dc02      	bgt.n	800d9cc <__sflush_r+0x20>
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9ce:	2e00      	cmp	r6, #0
 800d9d0:	d0f9      	beq.n	800d9c6 <__sflush_r+0x1a>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d9d8:	682f      	ldr	r7, [r5, #0]
 800d9da:	6a21      	ldr	r1, [r4, #32]
 800d9dc:	602b      	str	r3, [r5, #0]
 800d9de:	d032      	beq.n	800da46 <__sflush_r+0x9a>
 800d9e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d9e2:	89a3      	ldrh	r3, [r4, #12]
 800d9e4:	075a      	lsls	r2, r3, #29
 800d9e6:	d505      	bpl.n	800d9f4 <__sflush_r+0x48>
 800d9e8:	6863      	ldr	r3, [r4, #4]
 800d9ea:	1ac0      	subs	r0, r0, r3
 800d9ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d9ee:	b10b      	cbz	r3, 800d9f4 <__sflush_r+0x48>
 800d9f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9f2:	1ac0      	subs	r0, r0, r3
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9fa:	6a21      	ldr	r1, [r4, #32]
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	47b0      	blx	r6
 800da00:	1c43      	adds	r3, r0, #1
 800da02:	89a3      	ldrh	r3, [r4, #12]
 800da04:	d106      	bne.n	800da14 <__sflush_r+0x68>
 800da06:	6829      	ldr	r1, [r5, #0]
 800da08:	291d      	cmp	r1, #29
 800da0a:	d82b      	bhi.n	800da64 <__sflush_r+0xb8>
 800da0c:	4a29      	ldr	r2, [pc, #164]	; (800dab4 <__sflush_r+0x108>)
 800da0e:	410a      	asrs	r2, r1
 800da10:	07d6      	lsls	r6, r2, #31
 800da12:	d427      	bmi.n	800da64 <__sflush_r+0xb8>
 800da14:	2200      	movs	r2, #0
 800da16:	6062      	str	r2, [r4, #4]
 800da18:	04d9      	lsls	r1, r3, #19
 800da1a:	6922      	ldr	r2, [r4, #16]
 800da1c:	6022      	str	r2, [r4, #0]
 800da1e:	d504      	bpl.n	800da2a <__sflush_r+0x7e>
 800da20:	1c42      	adds	r2, r0, #1
 800da22:	d101      	bne.n	800da28 <__sflush_r+0x7c>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	b903      	cbnz	r3, 800da2a <__sflush_r+0x7e>
 800da28:	6560      	str	r0, [r4, #84]	; 0x54
 800da2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da2c:	602f      	str	r7, [r5, #0]
 800da2e:	2900      	cmp	r1, #0
 800da30:	d0c9      	beq.n	800d9c6 <__sflush_r+0x1a>
 800da32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da36:	4299      	cmp	r1, r3
 800da38:	d002      	beq.n	800da40 <__sflush_r+0x94>
 800da3a:	4628      	mov	r0, r5
 800da3c:	f7ff f89e 	bl	800cb7c <_free_r>
 800da40:	2000      	movs	r0, #0
 800da42:	6360      	str	r0, [r4, #52]	; 0x34
 800da44:	e7c0      	b.n	800d9c8 <__sflush_r+0x1c>
 800da46:	2301      	movs	r3, #1
 800da48:	4628      	mov	r0, r5
 800da4a:	47b0      	blx	r6
 800da4c:	1c41      	adds	r1, r0, #1
 800da4e:	d1c8      	bne.n	800d9e2 <__sflush_r+0x36>
 800da50:	682b      	ldr	r3, [r5, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d0c5      	beq.n	800d9e2 <__sflush_r+0x36>
 800da56:	2b1d      	cmp	r3, #29
 800da58:	d001      	beq.n	800da5e <__sflush_r+0xb2>
 800da5a:	2b16      	cmp	r3, #22
 800da5c:	d101      	bne.n	800da62 <__sflush_r+0xb6>
 800da5e:	602f      	str	r7, [r5, #0]
 800da60:	e7b1      	b.n	800d9c6 <__sflush_r+0x1a>
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da68:	81a3      	strh	r3, [r4, #12]
 800da6a:	e7ad      	b.n	800d9c8 <__sflush_r+0x1c>
 800da6c:	690f      	ldr	r7, [r1, #16]
 800da6e:	2f00      	cmp	r7, #0
 800da70:	d0a9      	beq.n	800d9c6 <__sflush_r+0x1a>
 800da72:	0793      	lsls	r3, r2, #30
 800da74:	680e      	ldr	r6, [r1, #0]
 800da76:	bf08      	it	eq
 800da78:	694b      	ldreq	r3, [r1, #20]
 800da7a:	600f      	str	r7, [r1, #0]
 800da7c:	bf18      	it	ne
 800da7e:	2300      	movne	r3, #0
 800da80:	eba6 0807 	sub.w	r8, r6, r7
 800da84:	608b      	str	r3, [r1, #8]
 800da86:	f1b8 0f00 	cmp.w	r8, #0
 800da8a:	dd9c      	ble.n	800d9c6 <__sflush_r+0x1a>
 800da8c:	6a21      	ldr	r1, [r4, #32]
 800da8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da90:	4643      	mov	r3, r8
 800da92:	463a      	mov	r2, r7
 800da94:	4628      	mov	r0, r5
 800da96:	47b0      	blx	r6
 800da98:	2800      	cmp	r0, #0
 800da9a:	dc06      	bgt.n	800daaa <__sflush_r+0xfe>
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daa2:	81a3      	strh	r3, [r4, #12]
 800daa4:	f04f 30ff 	mov.w	r0, #4294967295
 800daa8:	e78e      	b.n	800d9c8 <__sflush_r+0x1c>
 800daaa:	4407      	add	r7, r0
 800daac:	eba8 0800 	sub.w	r8, r8, r0
 800dab0:	e7e9      	b.n	800da86 <__sflush_r+0xda>
 800dab2:	bf00      	nop
 800dab4:	dfbffffe 	.word	0xdfbffffe

0800dab8 <_fflush_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	690b      	ldr	r3, [r1, #16]
 800dabc:	4605      	mov	r5, r0
 800dabe:	460c      	mov	r4, r1
 800dac0:	b913      	cbnz	r3, 800dac8 <_fflush_r+0x10>
 800dac2:	2500      	movs	r5, #0
 800dac4:	4628      	mov	r0, r5
 800dac6:	bd38      	pop	{r3, r4, r5, pc}
 800dac8:	b118      	cbz	r0, 800dad2 <_fflush_r+0x1a>
 800daca:	6a03      	ldr	r3, [r0, #32]
 800dacc:	b90b      	cbnz	r3, 800dad2 <_fflush_r+0x1a>
 800dace:	f7fe f89f 	bl	800bc10 <__sinit>
 800dad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0f3      	beq.n	800dac2 <_fflush_r+0xa>
 800dada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dadc:	07d0      	lsls	r0, r2, #31
 800dade:	d404      	bmi.n	800daea <_fflush_r+0x32>
 800dae0:	0599      	lsls	r1, r3, #22
 800dae2:	d402      	bmi.n	800daea <_fflush_r+0x32>
 800dae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dae6:	f7fe f9bc 	bl	800be62 <__retarget_lock_acquire_recursive>
 800daea:	4628      	mov	r0, r5
 800daec:	4621      	mov	r1, r4
 800daee:	f7ff ff5d 	bl	800d9ac <__sflush_r>
 800daf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800daf4:	07da      	lsls	r2, r3, #31
 800daf6:	4605      	mov	r5, r0
 800daf8:	d4e4      	bmi.n	800dac4 <_fflush_r+0xc>
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	059b      	lsls	r3, r3, #22
 800dafe:	d4e1      	bmi.n	800dac4 <_fflush_r+0xc>
 800db00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db02:	f7fe f9af 	bl	800be64 <__retarget_lock_release_recursive>
 800db06:	e7dd      	b.n	800dac4 <_fflush_r+0xc>

0800db08 <__swbuf_r>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	460e      	mov	r6, r1
 800db0c:	4614      	mov	r4, r2
 800db0e:	4605      	mov	r5, r0
 800db10:	b118      	cbz	r0, 800db1a <__swbuf_r+0x12>
 800db12:	6a03      	ldr	r3, [r0, #32]
 800db14:	b90b      	cbnz	r3, 800db1a <__swbuf_r+0x12>
 800db16:	f7fe f87b 	bl	800bc10 <__sinit>
 800db1a:	69a3      	ldr	r3, [r4, #24]
 800db1c:	60a3      	str	r3, [r4, #8]
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	071a      	lsls	r2, r3, #28
 800db22:	d525      	bpl.n	800db70 <__swbuf_r+0x68>
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	b31b      	cbz	r3, 800db70 <__swbuf_r+0x68>
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	6922      	ldr	r2, [r4, #16]
 800db2c:	1a98      	subs	r0, r3, r2
 800db2e:	6963      	ldr	r3, [r4, #20]
 800db30:	b2f6      	uxtb	r6, r6
 800db32:	4283      	cmp	r3, r0
 800db34:	4637      	mov	r7, r6
 800db36:	dc04      	bgt.n	800db42 <__swbuf_r+0x3a>
 800db38:	4621      	mov	r1, r4
 800db3a:	4628      	mov	r0, r5
 800db3c:	f7ff ffbc 	bl	800dab8 <_fflush_r>
 800db40:	b9e0      	cbnz	r0, 800db7c <__swbuf_r+0x74>
 800db42:	68a3      	ldr	r3, [r4, #8]
 800db44:	3b01      	subs	r3, #1
 800db46:	60a3      	str	r3, [r4, #8]
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	1c5a      	adds	r2, r3, #1
 800db4c:	6022      	str	r2, [r4, #0]
 800db4e:	701e      	strb	r6, [r3, #0]
 800db50:	6962      	ldr	r2, [r4, #20]
 800db52:	1c43      	adds	r3, r0, #1
 800db54:	429a      	cmp	r2, r3
 800db56:	d004      	beq.n	800db62 <__swbuf_r+0x5a>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	07db      	lsls	r3, r3, #31
 800db5c:	d506      	bpl.n	800db6c <__swbuf_r+0x64>
 800db5e:	2e0a      	cmp	r6, #10
 800db60:	d104      	bne.n	800db6c <__swbuf_r+0x64>
 800db62:	4621      	mov	r1, r4
 800db64:	4628      	mov	r0, r5
 800db66:	f7ff ffa7 	bl	800dab8 <_fflush_r>
 800db6a:	b938      	cbnz	r0, 800db7c <__swbuf_r+0x74>
 800db6c:	4638      	mov	r0, r7
 800db6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db70:	4621      	mov	r1, r4
 800db72:	4628      	mov	r0, r5
 800db74:	f000 f806 	bl	800db84 <__swsetup_r>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d0d5      	beq.n	800db28 <__swbuf_r+0x20>
 800db7c:	f04f 37ff 	mov.w	r7, #4294967295
 800db80:	e7f4      	b.n	800db6c <__swbuf_r+0x64>
	...

0800db84 <__swsetup_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4b2a      	ldr	r3, [pc, #168]	; (800dc30 <__swsetup_r+0xac>)
 800db88:	4605      	mov	r5, r0
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	460c      	mov	r4, r1
 800db8e:	b118      	cbz	r0, 800db98 <__swsetup_r+0x14>
 800db90:	6a03      	ldr	r3, [r0, #32]
 800db92:	b90b      	cbnz	r3, 800db98 <__swsetup_r+0x14>
 800db94:	f7fe f83c 	bl	800bc10 <__sinit>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db9e:	0718      	lsls	r0, r3, #28
 800dba0:	d422      	bmi.n	800dbe8 <__swsetup_r+0x64>
 800dba2:	06d9      	lsls	r1, r3, #27
 800dba4:	d407      	bmi.n	800dbb6 <__swsetup_r+0x32>
 800dba6:	2309      	movs	r3, #9
 800dba8:	602b      	str	r3, [r5, #0]
 800dbaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbae:	81a3      	strh	r3, [r4, #12]
 800dbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb4:	e034      	b.n	800dc20 <__swsetup_r+0x9c>
 800dbb6:	0758      	lsls	r0, r3, #29
 800dbb8:	d512      	bpl.n	800dbe0 <__swsetup_r+0x5c>
 800dbba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbbc:	b141      	cbz	r1, 800dbd0 <__swsetup_r+0x4c>
 800dbbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbc2:	4299      	cmp	r1, r3
 800dbc4:	d002      	beq.n	800dbcc <__swsetup_r+0x48>
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f7fe ffd8 	bl	800cb7c <_free_r>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	6363      	str	r3, [r4, #52]	; 0x34
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbd6:	81a3      	strh	r3, [r4, #12]
 800dbd8:	2300      	movs	r3, #0
 800dbda:	6063      	str	r3, [r4, #4]
 800dbdc:	6923      	ldr	r3, [r4, #16]
 800dbde:	6023      	str	r3, [r4, #0]
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	f043 0308 	orr.w	r3, r3, #8
 800dbe6:	81a3      	strh	r3, [r4, #12]
 800dbe8:	6923      	ldr	r3, [r4, #16]
 800dbea:	b94b      	cbnz	r3, 800dc00 <__swsetup_r+0x7c>
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbf6:	d003      	beq.n	800dc00 <__swsetup_r+0x7c>
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	f000 f8fe 	bl	800ddfc <__smakebuf_r>
 800dc00:	89a0      	ldrh	r0, [r4, #12]
 800dc02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc06:	f010 0301 	ands.w	r3, r0, #1
 800dc0a:	d00a      	beq.n	800dc22 <__swsetup_r+0x9e>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	60a3      	str	r3, [r4, #8]
 800dc10:	6963      	ldr	r3, [r4, #20]
 800dc12:	425b      	negs	r3, r3
 800dc14:	61a3      	str	r3, [r4, #24]
 800dc16:	6923      	ldr	r3, [r4, #16]
 800dc18:	b943      	cbnz	r3, 800dc2c <__swsetup_r+0xa8>
 800dc1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc1e:	d1c4      	bne.n	800dbaa <__swsetup_r+0x26>
 800dc20:	bd38      	pop	{r3, r4, r5, pc}
 800dc22:	0781      	lsls	r1, r0, #30
 800dc24:	bf58      	it	pl
 800dc26:	6963      	ldrpl	r3, [r4, #20]
 800dc28:	60a3      	str	r3, [r4, #8]
 800dc2a:	e7f4      	b.n	800dc16 <__swsetup_r+0x92>
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	e7f7      	b.n	800dc20 <__swsetup_r+0x9c>
 800dc30:	20000164 	.word	0x20000164

0800dc34 <memmove>:
 800dc34:	4288      	cmp	r0, r1
 800dc36:	b510      	push	{r4, lr}
 800dc38:	eb01 0402 	add.w	r4, r1, r2
 800dc3c:	d902      	bls.n	800dc44 <memmove+0x10>
 800dc3e:	4284      	cmp	r4, r0
 800dc40:	4623      	mov	r3, r4
 800dc42:	d807      	bhi.n	800dc54 <memmove+0x20>
 800dc44:	1e43      	subs	r3, r0, #1
 800dc46:	42a1      	cmp	r1, r4
 800dc48:	d008      	beq.n	800dc5c <memmove+0x28>
 800dc4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc52:	e7f8      	b.n	800dc46 <memmove+0x12>
 800dc54:	4402      	add	r2, r0
 800dc56:	4601      	mov	r1, r0
 800dc58:	428a      	cmp	r2, r1
 800dc5a:	d100      	bne.n	800dc5e <memmove+0x2a>
 800dc5c:	bd10      	pop	{r4, pc}
 800dc5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc66:	e7f7      	b.n	800dc58 <memmove+0x24>

0800dc68 <_sbrk_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4d06      	ldr	r5, [pc, #24]	; (800dc84 <_sbrk_r+0x1c>)
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	4604      	mov	r4, r0
 800dc70:	4608      	mov	r0, r1
 800dc72:	602b      	str	r3, [r5, #0]
 800dc74:	f7f4 ff9c 	bl	8002bb0 <_sbrk>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d102      	bne.n	800dc82 <_sbrk_r+0x1a>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	b103      	cbz	r3, 800dc82 <_sbrk_r+0x1a>
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	20000968 	.word	0x20000968

0800dc88 <__assert_func>:
 800dc88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc8a:	4614      	mov	r4, r2
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	4b09      	ldr	r3, [pc, #36]	; (800dcb4 <__assert_func+0x2c>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4605      	mov	r5, r0
 800dc94:	68d8      	ldr	r0, [r3, #12]
 800dc96:	b14c      	cbz	r4, 800dcac <__assert_func+0x24>
 800dc98:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <__assert_func+0x30>)
 800dc9a:	9100      	str	r1, [sp, #0]
 800dc9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dca0:	4906      	ldr	r1, [pc, #24]	; (800dcbc <__assert_func+0x34>)
 800dca2:	462b      	mov	r3, r5
 800dca4:	f000 f872 	bl	800dd8c <fiprintf>
 800dca8:	f000 f906 	bl	800deb8 <abort>
 800dcac:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <__assert_func+0x38>)
 800dcae:	461c      	mov	r4, r3
 800dcb0:	e7f3      	b.n	800dc9a <__assert_func+0x12>
 800dcb2:	bf00      	nop
 800dcb4:	20000164 	.word	0x20000164
 800dcb8:	0800e3c7 	.word	0x0800e3c7
 800dcbc:	0800e3d4 	.word	0x0800e3d4
 800dcc0:	0800e402 	.word	0x0800e402

0800dcc4 <_calloc_r>:
 800dcc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcc6:	fba1 2402 	umull	r2, r4, r1, r2
 800dcca:	b94c      	cbnz	r4, 800dce0 <_calloc_r+0x1c>
 800dccc:	4611      	mov	r1, r2
 800dcce:	9201      	str	r2, [sp, #4]
 800dcd0:	f7fe ffc8 	bl	800cc64 <_malloc_r>
 800dcd4:	9a01      	ldr	r2, [sp, #4]
 800dcd6:	4605      	mov	r5, r0
 800dcd8:	b930      	cbnz	r0, 800dce8 <_calloc_r+0x24>
 800dcda:	4628      	mov	r0, r5
 800dcdc:	b003      	add	sp, #12
 800dcde:	bd30      	pop	{r4, r5, pc}
 800dce0:	220c      	movs	r2, #12
 800dce2:	6002      	str	r2, [r0, #0]
 800dce4:	2500      	movs	r5, #0
 800dce6:	e7f8      	b.n	800dcda <_calloc_r+0x16>
 800dce8:	4621      	mov	r1, r4
 800dcea:	f7fe f83c 	bl	800bd66 <memset>
 800dcee:	e7f4      	b.n	800dcda <_calloc_r+0x16>

0800dcf0 <__ascii_mbtowc>:
 800dcf0:	b082      	sub	sp, #8
 800dcf2:	b901      	cbnz	r1, 800dcf6 <__ascii_mbtowc+0x6>
 800dcf4:	a901      	add	r1, sp, #4
 800dcf6:	b142      	cbz	r2, 800dd0a <__ascii_mbtowc+0x1a>
 800dcf8:	b14b      	cbz	r3, 800dd0e <__ascii_mbtowc+0x1e>
 800dcfa:	7813      	ldrb	r3, [r2, #0]
 800dcfc:	600b      	str	r3, [r1, #0]
 800dcfe:	7812      	ldrb	r2, [r2, #0]
 800dd00:	1e10      	subs	r0, r2, #0
 800dd02:	bf18      	it	ne
 800dd04:	2001      	movne	r0, #1
 800dd06:	b002      	add	sp, #8
 800dd08:	4770      	bx	lr
 800dd0a:	4610      	mov	r0, r2
 800dd0c:	e7fb      	b.n	800dd06 <__ascii_mbtowc+0x16>
 800dd0e:	f06f 0001 	mvn.w	r0, #1
 800dd12:	e7f8      	b.n	800dd06 <__ascii_mbtowc+0x16>

0800dd14 <_realloc_r>:
 800dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd18:	4680      	mov	r8, r0
 800dd1a:	4614      	mov	r4, r2
 800dd1c:	460e      	mov	r6, r1
 800dd1e:	b921      	cbnz	r1, 800dd2a <_realloc_r+0x16>
 800dd20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd24:	4611      	mov	r1, r2
 800dd26:	f7fe bf9d 	b.w	800cc64 <_malloc_r>
 800dd2a:	b92a      	cbnz	r2, 800dd38 <_realloc_r+0x24>
 800dd2c:	f7fe ff26 	bl	800cb7c <_free_r>
 800dd30:	4625      	mov	r5, r4
 800dd32:	4628      	mov	r0, r5
 800dd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd38:	f000 f8c5 	bl	800dec6 <_malloc_usable_size_r>
 800dd3c:	4284      	cmp	r4, r0
 800dd3e:	4607      	mov	r7, r0
 800dd40:	d802      	bhi.n	800dd48 <_realloc_r+0x34>
 800dd42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd46:	d812      	bhi.n	800dd6e <_realloc_r+0x5a>
 800dd48:	4621      	mov	r1, r4
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	f7fe ff8a 	bl	800cc64 <_malloc_r>
 800dd50:	4605      	mov	r5, r0
 800dd52:	2800      	cmp	r0, #0
 800dd54:	d0ed      	beq.n	800dd32 <_realloc_r+0x1e>
 800dd56:	42bc      	cmp	r4, r7
 800dd58:	4622      	mov	r2, r4
 800dd5a:	4631      	mov	r1, r6
 800dd5c:	bf28      	it	cs
 800dd5e:	463a      	movcs	r2, r7
 800dd60:	f7fe f881 	bl	800be66 <memcpy>
 800dd64:	4631      	mov	r1, r6
 800dd66:	4640      	mov	r0, r8
 800dd68:	f7fe ff08 	bl	800cb7c <_free_r>
 800dd6c:	e7e1      	b.n	800dd32 <_realloc_r+0x1e>
 800dd6e:	4635      	mov	r5, r6
 800dd70:	e7df      	b.n	800dd32 <_realloc_r+0x1e>

0800dd72 <__ascii_wctomb>:
 800dd72:	b149      	cbz	r1, 800dd88 <__ascii_wctomb+0x16>
 800dd74:	2aff      	cmp	r2, #255	; 0xff
 800dd76:	bf85      	ittet	hi
 800dd78:	238a      	movhi	r3, #138	; 0x8a
 800dd7a:	6003      	strhi	r3, [r0, #0]
 800dd7c:	700a      	strbls	r2, [r1, #0]
 800dd7e:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd82:	bf98      	it	ls
 800dd84:	2001      	movls	r0, #1
 800dd86:	4770      	bx	lr
 800dd88:	4608      	mov	r0, r1
 800dd8a:	4770      	bx	lr

0800dd8c <fiprintf>:
 800dd8c:	b40e      	push	{r1, r2, r3}
 800dd8e:	b503      	push	{r0, r1, lr}
 800dd90:	4601      	mov	r1, r0
 800dd92:	ab03      	add	r3, sp, #12
 800dd94:	4805      	ldr	r0, [pc, #20]	; (800ddac <fiprintf+0x20>)
 800dd96:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd9a:	6800      	ldr	r0, [r0, #0]
 800dd9c:	9301      	str	r3, [sp, #4]
 800dd9e:	f7ff fceb 	bl	800d778 <_vfiprintf_r>
 800dda2:	b002      	add	sp, #8
 800dda4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dda8:	b003      	add	sp, #12
 800ddaa:	4770      	bx	lr
 800ddac:	20000164 	.word	0x20000164

0800ddb0 <__swhatbuf_r>:
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	460c      	mov	r4, r1
 800ddb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddb8:	2900      	cmp	r1, #0
 800ddba:	b096      	sub	sp, #88	; 0x58
 800ddbc:	4615      	mov	r5, r2
 800ddbe:	461e      	mov	r6, r3
 800ddc0:	da0d      	bge.n	800ddde <__swhatbuf_r+0x2e>
 800ddc2:	89a3      	ldrh	r3, [r4, #12]
 800ddc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ddc8:	f04f 0100 	mov.w	r1, #0
 800ddcc:	bf0c      	ite	eq
 800ddce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ddd2:	2340      	movne	r3, #64	; 0x40
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	6031      	str	r1, [r6, #0]
 800ddd8:	602b      	str	r3, [r5, #0]
 800ddda:	b016      	add	sp, #88	; 0x58
 800dddc:	bd70      	pop	{r4, r5, r6, pc}
 800ddde:	466a      	mov	r2, sp
 800dde0:	f000 f848 	bl	800de74 <_fstat_r>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	dbec      	blt.n	800ddc2 <__swhatbuf_r+0x12>
 800dde8:	9901      	ldr	r1, [sp, #4]
 800ddea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ddee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ddf2:	4259      	negs	r1, r3
 800ddf4:	4159      	adcs	r1, r3
 800ddf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddfa:	e7eb      	b.n	800ddd4 <__swhatbuf_r+0x24>

0800ddfc <__smakebuf_r>:
 800ddfc:	898b      	ldrh	r3, [r1, #12]
 800ddfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de00:	079d      	lsls	r5, r3, #30
 800de02:	4606      	mov	r6, r0
 800de04:	460c      	mov	r4, r1
 800de06:	d507      	bpl.n	800de18 <__smakebuf_r+0x1c>
 800de08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	6123      	str	r3, [r4, #16]
 800de10:	2301      	movs	r3, #1
 800de12:	6163      	str	r3, [r4, #20]
 800de14:	b002      	add	sp, #8
 800de16:	bd70      	pop	{r4, r5, r6, pc}
 800de18:	ab01      	add	r3, sp, #4
 800de1a:	466a      	mov	r2, sp
 800de1c:	f7ff ffc8 	bl	800ddb0 <__swhatbuf_r>
 800de20:	9900      	ldr	r1, [sp, #0]
 800de22:	4605      	mov	r5, r0
 800de24:	4630      	mov	r0, r6
 800de26:	f7fe ff1d 	bl	800cc64 <_malloc_r>
 800de2a:	b948      	cbnz	r0, 800de40 <__smakebuf_r+0x44>
 800de2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de30:	059a      	lsls	r2, r3, #22
 800de32:	d4ef      	bmi.n	800de14 <__smakebuf_r+0x18>
 800de34:	f023 0303 	bic.w	r3, r3, #3
 800de38:	f043 0302 	orr.w	r3, r3, #2
 800de3c:	81a3      	strh	r3, [r4, #12]
 800de3e:	e7e3      	b.n	800de08 <__smakebuf_r+0xc>
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	6020      	str	r0, [r4, #0]
 800de44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de48:	81a3      	strh	r3, [r4, #12]
 800de4a:	9b00      	ldr	r3, [sp, #0]
 800de4c:	6163      	str	r3, [r4, #20]
 800de4e:	9b01      	ldr	r3, [sp, #4]
 800de50:	6120      	str	r0, [r4, #16]
 800de52:	b15b      	cbz	r3, 800de6c <__smakebuf_r+0x70>
 800de54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de58:	4630      	mov	r0, r6
 800de5a:	f000 f81d 	bl	800de98 <_isatty_r>
 800de5e:	b128      	cbz	r0, 800de6c <__smakebuf_r+0x70>
 800de60:	89a3      	ldrh	r3, [r4, #12]
 800de62:	f023 0303 	bic.w	r3, r3, #3
 800de66:	f043 0301 	orr.w	r3, r3, #1
 800de6a:	81a3      	strh	r3, [r4, #12]
 800de6c:	89a3      	ldrh	r3, [r4, #12]
 800de6e:	431d      	orrs	r5, r3
 800de70:	81a5      	strh	r5, [r4, #12]
 800de72:	e7cf      	b.n	800de14 <__smakebuf_r+0x18>

0800de74 <_fstat_r>:
 800de74:	b538      	push	{r3, r4, r5, lr}
 800de76:	4d07      	ldr	r5, [pc, #28]	; (800de94 <_fstat_r+0x20>)
 800de78:	2300      	movs	r3, #0
 800de7a:	4604      	mov	r4, r0
 800de7c:	4608      	mov	r0, r1
 800de7e:	4611      	mov	r1, r2
 800de80:	602b      	str	r3, [r5, #0]
 800de82:	f7f4 fe6c 	bl	8002b5e <_fstat>
 800de86:	1c43      	adds	r3, r0, #1
 800de88:	d102      	bne.n	800de90 <_fstat_r+0x1c>
 800de8a:	682b      	ldr	r3, [r5, #0]
 800de8c:	b103      	cbz	r3, 800de90 <_fstat_r+0x1c>
 800de8e:	6023      	str	r3, [r4, #0]
 800de90:	bd38      	pop	{r3, r4, r5, pc}
 800de92:	bf00      	nop
 800de94:	20000968 	.word	0x20000968

0800de98 <_isatty_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4d06      	ldr	r5, [pc, #24]	; (800deb4 <_isatty_r+0x1c>)
 800de9c:	2300      	movs	r3, #0
 800de9e:	4604      	mov	r4, r0
 800dea0:	4608      	mov	r0, r1
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	f7f4 fe6b 	bl	8002b7e <_isatty>
 800dea8:	1c43      	adds	r3, r0, #1
 800deaa:	d102      	bne.n	800deb2 <_isatty_r+0x1a>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	b103      	cbz	r3, 800deb2 <_isatty_r+0x1a>
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	bd38      	pop	{r3, r4, r5, pc}
 800deb4:	20000968 	.word	0x20000968

0800deb8 <abort>:
 800deb8:	b508      	push	{r3, lr}
 800deba:	2006      	movs	r0, #6
 800debc:	f000 f834 	bl	800df28 <raise>
 800dec0:	2001      	movs	r0, #1
 800dec2:	f7f4 fdfd 	bl	8002ac0 <_exit>

0800dec6 <_malloc_usable_size_r>:
 800dec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deca:	1f18      	subs	r0, r3, #4
 800decc:	2b00      	cmp	r3, #0
 800dece:	bfbc      	itt	lt
 800ded0:	580b      	ldrlt	r3, [r1, r0]
 800ded2:	18c0      	addlt	r0, r0, r3
 800ded4:	4770      	bx	lr

0800ded6 <_raise_r>:
 800ded6:	291f      	cmp	r1, #31
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4604      	mov	r4, r0
 800dedc:	460d      	mov	r5, r1
 800dede:	d904      	bls.n	800deea <_raise_r+0x14>
 800dee0:	2316      	movs	r3, #22
 800dee2:	6003      	str	r3, [r0, #0]
 800dee4:	f04f 30ff 	mov.w	r0, #4294967295
 800dee8:	bd38      	pop	{r3, r4, r5, pc}
 800deea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800deec:	b112      	cbz	r2, 800def4 <_raise_r+0x1e>
 800deee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800def2:	b94b      	cbnz	r3, 800df08 <_raise_r+0x32>
 800def4:	4620      	mov	r0, r4
 800def6:	f000 f831 	bl	800df5c <_getpid_r>
 800defa:	462a      	mov	r2, r5
 800defc:	4601      	mov	r1, r0
 800defe:	4620      	mov	r0, r4
 800df00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df04:	f000 b818 	b.w	800df38 <_kill_r>
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d00a      	beq.n	800df22 <_raise_r+0x4c>
 800df0c:	1c59      	adds	r1, r3, #1
 800df0e:	d103      	bne.n	800df18 <_raise_r+0x42>
 800df10:	2316      	movs	r3, #22
 800df12:	6003      	str	r3, [r0, #0]
 800df14:	2001      	movs	r0, #1
 800df16:	e7e7      	b.n	800dee8 <_raise_r+0x12>
 800df18:	2400      	movs	r4, #0
 800df1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df1e:	4628      	mov	r0, r5
 800df20:	4798      	blx	r3
 800df22:	2000      	movs	r0, #0
 800df24:	e7e0      	b.n	800dee8 <_raise_r+0x12>
	...

0800df28 <raise>:
 800df28:	4b02      	ldr	r3, [pc, #8]	; (800df34 <raise+0xc>)
 800df2a:	4601      	mov	r1, r0
 800df2c:	6818      	ldr	r0, [r3, #0]
 800df2e:	f7ff bfd2 	b.w	800ded6 <_raise_r>
 800df32:	bf00      	nop
 800df34:	20000164 	.word	0x20000164

0800df38 <_kill_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4d07      	ldr	r5, [pc, #28]	; (800df58 <_kill_r+0x20>)
 800df3c:	2300      	movs	r3, #0
 800df3e:	4604      	mov	r4, r0
 800df40:	4608      	mov	r0, r1
 800df42:	4611      	mov	r1, r2
 800df44:	602b      	str	r3, [r5, #0]
 800df46:	f7f4 fdab 	bl	8002aa0 <_kill>
 800df4a:	1c43      	adds	r3, r0, #1
 800df4c:	d102      	bne.n	800df54 <_kill_r+0x1c>
 800df4e:	682b      	ldr	r3, [r5, #0]
 800df50:	b103      	cbz	r3, 800df54 <_kill_r+0x1c>
 800df52:	6023      	str	r3, [r4, #0]
 800df54:	bd38      	pop	{r3, r4, r5, pc}
 800df56:	bf00      	nop
 800df58:	20000968 	.word	0x20000968

0800df5c <_getpid_r>:
 800df5c:	f7f4 bd98 	b.w	8002a90 <_getpid>

0800df60 <_init>:
 800df60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df62:	bf00      	nop
 800df64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df66:	bc08      	pop	{r3}
 800df68:	469e      	mov	lr, r3
 800df6a:	4770      	bx	lr

0800df6c <_fini>:
 800df6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6e:	bf00      	nop
 800df70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df72:	bc08      	pop	{r3}
 800df74:	469e      	mov	lr, r3
 800df76:	4770      	bx	lr
