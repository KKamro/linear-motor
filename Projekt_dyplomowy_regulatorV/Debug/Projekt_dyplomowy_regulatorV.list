
Projekt_dyplomowy_regulatorV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800a280  0800a280  0001a280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a82c  0800a82c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a82c  0800a82c  0001a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a834  0800a834  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a834  0800a834  0001a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a838  0800a838  0001a838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  200001d4  0800aa10  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  0800aa10  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d5ad  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053aa  00000000  00000000  0004d7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00017388  00000000  00000000  00052b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013f0  00000000  00000000  00069f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000293f  00000000  00000000  0006b318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c17a  00000000  00000000  0006dc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003167d  00000000  00000000  00099dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b606  00000000  00000000  000cb44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052dc  00000000  00000000  001d6a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001dbd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a264 	.word	0x0800a264

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a264 	.word	0x0800a264

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <CircBuffInit>:
#include "CircularBuffer.h"

void CircBuffInit(CircularBuffer *buff)
{
	buff->head = 0;
	buff->size = BUFFER_SIZE;
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c

	for (uint32_t i=0; i < buff->size; i++)
	{
		buff->data[i] = 0;
 8000eac:	223c      	movs	r2, #60	; 0x3c
 8000eae:	f007 b8de 	b.w	800806e <memset>
 8000eb2:	bf00      	nop

08000eb4 <CircBuffUpdate>:
	}
}

void CircBuffUpdate(CircularBuffer *buff, int32_t new_data)
{
 8000eb4:	b410      	push	{r4}
	buff->data[buff->head] = new_data;

	buff->head++;
	buff->head = buff->head % buff->size;
 8000eb6:	e9d0 420f 	ldrd	r4, r2, [r0, #60]	; 0x3c
	buff->head++;
 8000eba:	1c63      	adds	r3, r4, #1
	buff->data[buff->head] = new_data;
 8000ebc:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
	buff->head = buff->head % buff->size;
 8000ec0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ec4:	fb02 3311 	mls	r3, r2, r1, r3
}
 8000ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
	buff->head = buff->head % buff->size;
 8000ecc:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 8000ece:	4770      	bx	lr

08000ed0 <quickSort>:
    return (i + 1);
}

// Główna funkcja sortująca używająca quicksort
static void quickSort(int32_t arr[], int32_t low, int32_t high) {
    if (low < high) {
 8000ed0:	428a      	cmp	r2, r1
 8000ed2:	dd30      	ble.n	8000f36 <quickSort+0x66>
static void quickSort(int32_t arr[], int32_t low, int32_t high) {
 8000ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ed8:	4616      	mov	r6, r2
 8000eda:	4681      	mov	r9, r0
    int32_t pivot = arr[high]; // Wybieramy ostatni element jako pivot
 8000edc:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8000ee0:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 8000ee4:	eb01 0c07 	add.w	ip, r1, r7
 8000ee8:	f8d8 2000 	ldr.w	r2, [r8]
    int32_t i = (low - 1); // Indeks mniejszego elementu
 8000eec:	1e4d      	subs	r5, r1, #1
    for (int32_t j = low; j <= high - 1; j++) {
 8000eee:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
    int32_t i = (low - 1); // Indeks mniejszego elementu
 8000ef2:	460b      	mov	r3, r1
        if (arr[j] <= pivot) {
 8000ef4:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 8000ef8:	42a2      	cmp	r2, r4
    for (int32_t j = low; j <= high - 1; j++) {
 8000efa:	f103 0301 	add.w	r3, r3, #1
        if (arr[j] <= pivot) {
 8000efe:	db06      	blt.n	8000f0e <quickSort+0x3e>
            i++; // Inkrementujemy indeks mniejszego elementu
 8000f00:	3501      	adds	r5, #1
    }
}

static void swap(int32_t *xp, int32_t *yp)
{
    int32_t temp = *xp;
 8000f02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]

    *xp = *yp;
 8000f06:	f849 4025 	str.w	r4, [r9, r5, lsl #2]
    *yp = temp;
 8000f0a:	f8cc 0000 	str.w	r0, [ip]
    for (int32_t j = low; j <= high - 1; j++) {
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	dcf0      	bgt.n	8000ef4 <quickSort+0x24>
    swap(&arr[i + 1], &arr[high]);
 8000f12:	1c6a      	adds	r2, r5, #1
    *xp = *yp;
 8000f14:	f8d8 3000 	ldr.w	r3, [r8]
    int32_t temp = *xp;
 8000f18:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
    *xp = *yp;
 8000f1c:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
    *yp = temp;
 8000f20:	f8c8 0000 	str.w	r0, [r8]
        quickSort(arr, low, pi - 1);
 8000f24:	462a      	mov	r2, r5
 8000f26:	4648      	mov	r0, r9
 8000f28:	f7ff ffd2 	bl	8000ed0 <quickSort>
        quickSort(arr, pi + 1, high);
 8000f2c:	1ca9      	adds	r1, r5, #2
    if (low < high) {
 8000f2e:	42b1      	cmp	r1, r6
 8000f30:	dbd8      	blt.n	8000ee4 <quickSort+0x14>
}
 8000f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f36:	4770      	bx	lr

08000f38 <FilterMedianInit>:
	CircBuffInit(buff);
 8000f38:	f7ff bfb4 	b.w	8000ea4 <CircBuffInit>

08000f3c <FilterMedianUpdate>:
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	b091      	sub	sp, #68	; 0x44
 8000f40:	4605      	mov	r5, r0
	memcpy(tmp_array, buff->data, sizeof(tmp_array));
 8000f42:	ac01      	add	r4, sp, #4
	CircBuffUpdate(buff, new_data);
 8000f44:	f7ff ffb6 	bl	8000eb4 <CircBuffUpdate>
	memcpy(tmp_array, buff->data, sizeof(tmp_array));
 8000f48:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8000f4c:	46a6      	mov	lr, r4
 8000f4e:	6828      	ldr	r0, [r5, #0]
 8000f50:	6869      	ldr	r1, [r5, #4]
 8000f52:	68aa      	ldr	r2, [r5, #8]
 8000f54:	68eb      	ldr	r3, [r5, #12]
 8000f56:	46f4      	mov	ip, lr
 8000f58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000f5c:	3510      	adds	r5, #16
 8000f5e:	42b5      	cmp	r5, r6
 8000f60:	46e6      	mov	lr, ip
 8000f62:	d1f4      	bne.n	8000f4e <FilterMedianUpdate+0x12>
 8000f64:	6869      	ldr	r1, [r5, #4]
 8000f66:	6828      	ldr	r0, [r5, #0]
 8000f68:	68aa      	ldr	r2, [r5, #8]
 8000f6a:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
 8000f6e:	2100      	movs	r1, #0
        if (arr[j] <= pivot) {
 8000f70:	aa10      	add	r2, sp, #64	; 0x40
 8000f72:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    int32_t pivot = arr[high]; // Wybieramy ostatni element jako pivot
 8000f76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        if (arr[j] <= pivot) {
 8000f78:	f852 0c3c 	ldr.w	r0, [r2, #-60]
            i++; // Inkrementujemy indeks mniejszego elementu
 8000f7c:	4283      	cmp	r3, r0
 8000f7e:	bfac      	ite	ge
 8000f80:	460d      	movge	r5, r1
 8000f82:	1e4d      	sublt	r5, r1, #1
    for (int32_t j = low; j <= high - 1; j++) {
 8000f84:	290d      	cmp	r1, #13
        if (arr[j] <= pivot) {
 8000f86:	ea4f 0281 	mov.w	r2, r1, lsl #2
    for (int32_t j = low; j <= high - 1; j++) {
 8000f8a:	f000 808f 	beq.w	80010ac <FilterMedianUpdate+0x170>
        if (arr[j] <= pivot) {
 8000f8e:	1d10      	adds	r0, r2, #4
 8000f90:	5826      	ldr	r6, [r4, r0]
 8000f92:	42b3      	cmp	r3, r6
 8000f94:	db05      	blt.n	8000fa2 <FilterMedianUpdate+0x66>
            i++; // Inkrementujemy indeks mniejszego elementu
 8000f96:	3501      	adds	r5, #1
    int32_t temp = *xp;
 8000f98:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 8000f9c:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 8000fa0:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 8000fa2:	290c      	cmp	r1, #12
 8000fa4:	f000 8081 	beq.w	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8000fa8:	f102 0008 	add.w	r0, r2, #8
 8000fac:	5826      	ldr	r6, [r4, r0]
 8000fae:	42b3      	cmp	r3, r6
 8000fb0:	db05      	blt.n	8000fbe <FilterMedianUpdate+0x82>
            i++; // Inkrementujemy indeks mniejszego elementu
 8000fb2:	3501      	adds	r5, #1
    int32_t temp = *xp;
 8000fb4:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 8000fb8:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 8000fbc:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 8000fbe:	290b      	cmp	r1, #11
 8000fc0:	d073      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8000fc2:	f102 000c 	add.w	r0, r2, #12
 8000fc6:	5826      	ldr	r6, [r4, r0]
 8000fc8:	42b3      	cmp	r3, r6
 8000fca:	db05      	blt.n	8000fd8 <FilterMedianUpdate+0x9c>
            i++; // Inkrementujemy indeks mniejszego elementu
 8000fcc:	3501      	adds	r5, #1
    int32_t temp = *xp;
 8000fce:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 8000fd2:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 8000fd6:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 8000fd8:	290a      	cmp	r1, #10
 8000fda:	d066      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8000fdc:	f102 0010 	add.w	r0, r2, #16
 8000fe0:	5826      	ldr	r6, [r4, r0]
 8000fe2:	42b3      	cmp	r3, r6
 8000fe4:	db05      	blt.n	8000ff2 <FilterMedianUpdate+0xb6>
            i++; // Inkrementujemy indeks mniejszego elementu
 8000fe6:	3501      	adds	r5, #1
    int32_t temp = *xp;
 8000fe8:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 8000fec:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 8000ff0:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 8000ff2:	2909      	cmp	r1, #9
 8000ff4:	d059      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8000ff6:	f102 0014 	add.w	r0, r2, #20
 8000ffa:	5826      	ldr	r6, [r4, r0]
 8000ffc:	42b3      	cmp	r3, r6
 8000ffe:	db05      	blt.n	800100c <FilterMedianUpdate+0xd0>
            i++; // Inkrementujemy indeks mniejszego elementu
 8001000:	3501      	adds	r5, #1
    int32_t temp = *xp;
 8001002:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 8001006:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 800100a:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 800100c:	2908      	cmp	r1, #8
 800100e:	d04c      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8001010:	f102 0018 	add.w	r0, r2, #24
 8001014:	5826      	ldr	r6, [r4, r0]
 8001016:	42b3      	cmp	r3, r6
 8001018:	db05      	blt.n	8001026 <FilterMedianUpdate+0xea>
            i++; // Inkrementujemy indeks mniejszego elementu
 800101a:	3501      	adds	r5, #1
    int32_t temp = *xp;
 800101c:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 8001020:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 8001024:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 8001026:	2907      	cmp	r1, #7
 8001028:	d03f      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 800102a:	f102 001c 	add.w	r0, r2, #28
 800102e:	5826      	ldr	r6, [r4, r0]
 8001030:	42b3      	cmp	r3, r6
 8001032:	db05      	blt.n	8001040 <FilterMedianUpdate+0x104>
            i++; // Inkrementujemy indeks mniejszego elementu
 8001034:	3501      	adds	r5, #1
    int32_t temp = *xp;
 8001036:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 800103a:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 800103e:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 8001040:	2906      	cmp	r1, #6
 8001042:	d032      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8001044:	f102 0020 	add.w	r0, r2, #32
 8001048:	5826      	ldr	r6, [r4, r0]
 800104a:	42b3      	cmp	r3, r6
 800104c:	db05      	blt.n	800105a <FilterMedianUpdate+0x11e>
            i++; // Inkrementujemy indeks mniejszego elementu
 800104e:	3501      	adds	r5, #1
    int32_t temp = *xp;
 8001050:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 8001054:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 8001058:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 800105a:	2905      	cmp	r1, #5
 800105c:	d025      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 800105e:	f102 0024 	add.w	r0, r2, #36	; 0x24
 8001062:	5826      	ldr	r6, [r4, r0]
 8001064:	42b3      	cmp	r3, r6
 8001066:	db05      	blt.n	8001074 <FilterMedianUpdate+0x138>
            i++; // Inkrementujemy indeks mniejszego elementu
 8001068:	3501      	adds	r5, #1
    int32_t temp = *xp;
 800106a:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 800106e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 8001072:	5027      	str	r7, [r4, r0]
    for (int32_t j = low; j <= high - 1; j++) {
 8001074:	2904      	cmp	r1, #4
 8001076:	d018      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8001078:	f102 0028 	add.w	r0, r2, #40	; 0x28
 800107c:	5826      	ldr	r6, [r4, r0]
 800107e:	42b3      	cmp	r3, r6
 8001080:	da26      	bge.n	80010d0 <FilterMedianUpdate+0x194>
    for (int32_t j = low; j <= high - 1; j++) {
 8001082:	2903      	cmp	r1, #3
 8001084:	d011      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8001086:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 800108a:	5826      	ldr	r6, [r4, r0]
 800108c:	42b3      	cmp	r3, r6
 800108e:	da26      	bge.n	80010de <FilterMedianUpdate+0x1a2>
    for (int32_t j = low; j <= high - 1; j++) {
 8001090:	2902      	cmp	r1, #2
 8001092:	f101 060c 	add.w	r6, r1, #12
 8001096:	d008      	beq.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 8001098:	3230      	adds	r2, #48	; 0x30
 800109a:	58a0      	ldr	r0, [r4, r2]
 800109c:	4283      	cmp	r3, r0
 800109e:	da25      	bge.n	80010ec <FilterMedianUpdate+0x1b0>
    for (int32_t j = low; j <= high - 1; j++) {
 80010a0:	2e0c      	cmp	r6, #12
 80010a2:	d102      	bne.n	80010aa <FilterMedianUpdate+0x16e>
        if (arr[j] <= pivot) {
 80010a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80010a6:	4293      	cmp	r3, r2
 80010a8:	da27      	bge.n	80010fa <FilterMedianUpdate+0x1be>
 80010aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    swap(&arr[i + 1], &arr[high]);
 80010ac:	f105 0c01 	add.w	ip, r5, #1
        quickSort(arr, low, pi - 1);
 80010b0:	462a      	mov	r2, r5
    int32_t temp = *xp;
 80010b2:	f854 602c 	ldr.w	r6, [r4, ip, lsl #2]
    *xp = *yp;
 80010b6:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        quickSort(arr, low, pi - 1);
 80010ba:	4620      	mov	r0, r4
    *yp = temp;
 80010bc:	960f      	str	r6, [sp, #60]	; 0x3c
        quickSort(arr, low, pi - 1);
 80010be:	f7ff ff07 	bl	8000ed0 <quickSort>
        quickSort(arr, pi + 1, high);
 80010c2:	1ca9      	adds	r1, r5, #2
    if (low < high) {
 80010c4:	290d      	cmp	r1, #13
 80010c6:	f77f af53 	ble.w	8000f70 <FilterMedianUpdate+0x34>
}
 80010ca:	9807      	ldr	r0, [sp, #28]
 80010cc:	b011      	add	sp, #68	; 0x44
 80010ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i++; // Inkrementujemy indeks mniejszego elementu
 80010d0:	3501      	adds	r5, #1
    int32_t temp = *xp;
 80010d2:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 80010d6:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 80010da:	5027      	str	r7, [r4, r0]
 80010dc:	e7d1      	b.n	8001082 <FilterMedianUpdate+0x146>
            i++; // Inkrementujemy indeks mniejszego elementu
 80010de:	3501      	adds	r5, #1
    int32_t temp = *xp;
 80010e0:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 80010e4:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    *yp = temp;
 80010e8:	5027      	str	r7, [r4, r0]
 80010ea:	e7d1      	b.n	8001090 <FilterMedianUpdate+0x154>
            i++; // Inkrementujemy indeks mniejszego elementu
 80010ec:	3501      	adds	r5, #1
    int32_t temp = *xp;
 80010ee:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
    *xp = *yp;
 80010f2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    *yp = temp;
 80010f6:	50a7      	str	r7, [r4, r2]
 80010f8:	e7d2      	b.n	80010a0 <FilterMedianUpdate+0x164>
            i++; // Inkrementujemy indeks mniejszego elementu
 80010fa:	3501      	adds	r5, #1
    int32_t temp = *xp;
 80010fc:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    *xp = *yp;
 8001100:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
    *yp = temp;
 8001104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001106:	900e      	str	r0, [sp, #56]	; 0x38
}
 8001108:	e7d0      	b.n	80010ac <FilterMedianUpdate+0x170>
 800110a:	bf00      	nop

0800110c <FilterMovingAverageInit>:
 800110c:	f7ff beca 	b.w	8000ea4 <CircBuffInit>

08001110 <FilterLowPassInit>:
	return (sum/size);
}
// Lowpass
void FilterLowPassInit(FilterLowPass *lpf, float alpha)
{
	lpf->out = 0.0f;
 8001110:	2300      	movs	r3, #0
 8001112:	6003      	str	r3, [r0, #0]
	lpf->alpha = alpha;
 8001114:	ed80 0a01 	vstr	s0, [r0, #4]
}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <FilterLowPassUpdate>:

int32_t FilterLowPassUpdate(FilterLowPass *lpf, int32_t new_data)
{
	lpf->out = lpf->alpha * new_data + (1.0f-(lpf->alpha)) * lpf->out;
 800111c:	edd0 6a01 	vldr	s13, [r0, #4]
 8001120:	ed90 6a00 	vldr	s12, [r0]
 8001124:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001128:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800112c:	ee07 1a10 	vmov	s14, r1
 8001130:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001134:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001138:	eee6 7a87 	vfma.f32	s15, s13, s14
 800113c:	edc0 7a00 	vstr	s15, [r0]

	return lpf->out;
}
 8001140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001144:	ee17 0a90 	vmov	r0, s15
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <PIDInit>:

#include "PID.h"

void PIDInit(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
	pid_data->error_previous = 0;
 800114c:	2300      	movs	r3, #0
	pid_data->error_total = 0;

	pid_data->Kp = kp_init;
 800114e:	ed80 0a02 	vstr	s0, [r0, #8]
	pid_data->error_previous = 0;
 8001152:	6003      	str	r3, [r0, #0]
	pid_data->error_total = 0;
 8001154:	6043      	str	r3, [r0, #4]
	pid_data->Ki = ki_init;
 8001156:	edc0 0a03 	vstr	s1, [r0, #12]
	pid_data->Kd = kd_init;
 800115a:	ed80 1a04 	vstr	s2, [r0, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 800115e:	8281      	strh	r1, [r0, #20]
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <PIDReset>:

void PIDReset(PID *pid_data)
{
	pid_data->error_total = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	6043      	str	r3, [r0, #4]
	pid_data->error_previous = 0;
 8001168:	6003      	str	r3, [r0, #0]
}
 800116a:	4770      	bx	lr

0800116c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800116c:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116e:	482e      	ldr	r0, [pc, #184]	; (8001228 <MX_ADC1_Init+0xbc>)
 8001170:	4a2e      	ldr	r2, [pc, #184]	; (800122c <MX_ADC1_Init+0xc0>)
 8001172:	6002      	str	r2, [r0, #0]
{
 8001174:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8001176:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001178:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 800117a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001182:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001186:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800118e:	e9c0 3203 	strd	r3, r2, [r0, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001192:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8001196:	9309      	str	r3, [sp, #36]	; 0x24
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001198:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800119c:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800119e:	6443      	str	r3, [r0, #68]	; 0x44
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a4:	8303      	strh	r3, [r0, #24]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80011a6:	6403      	str	r3, [r0, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a8:	2304      	movs	r3, #4
 80011aa:	6143      	str	r3, [r0, #20]
  hadc1.Init.NbrOfConversion = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61c3      	str	r3, [r0, #28]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80011b0:	231c      	movs	r3, #28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.OversamplingMode = ENABLE;
 80011b6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80011ba:	6482      	str	r2, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80011bc:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011be:	f001 fe59 	bl	8002e74 <HAL_ADC_Init>
 80011c2:	bb18      	cbnz	r0, 800120c <MX_ADC1_Init+0xa0>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011c6:	4818      	ldr	r0, [pc, #96]	; (8001228 <MX_ADC1_Init+0xbc>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011ca:	a901      	add	r1, sp, #4
 80011cc:	f002 fc70 	bl	8003ab0 <HAL_ADCEx_MultiModeConfigChannel>
 80011d0:	bb38      	cbnz	r0, 8001222 <MX_ADC1_Init+0xb6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <MX_ADC1_Init+0xc4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	4814      	ldr	r0, [pc, #80]	; (8001228 <MX_ADC1_Init+0xbc>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011dc:	2107      	movs	r1, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	; 0x7f
 80011e0:	e9cd 1306 	strd	r1, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e4:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80011ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	f002 f897 	bl	8003320 <HAL_ADC_ConfigChannel>
 80011f2:	b998      	cbnz	r0, 800121c <MX_ADC1_Init+0xb0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011f4:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <MX_ADC1_Init+0xc8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_ADC1_Init+0xbc>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011f8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	f002 f88e 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001204:	b928      	cbnz	r0, 8001212 <MX_ADC1_Init+0xa6>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001206:	b00b      	add	sp, #44	; 0x2c
 8001208:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800120c:	f000 ff18 	bl	8002040 <Error_Handler>
 8001210:	e7d8      	b.n	80011c4 <MX_ADC1_Init+0x58>
    Error_Handler();
 8001212:	f000 ff15 	bl	8002040 <Error_Handler>
}
 8001216:	b00b      	add	sp, #44	; 0x2c
 8001218:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800121c:	f000 ff10 	bl	8002040 <Error_Handler>
 8001220:	e7e8      	b.n	80011f4 <MX_ADC1_Init+0x88>
    Error_Handler();
 8001222:	f000 ff0d 	bl	8002040 <Error_Handler>
 8001226:	e7d4      	b.n	80011d2 <MX_ADC1_Init+0x66>
 8001228:	200001f4 	.word	0x200001f4
 800122c:	50040000 	.word	0x50040000
 8001230:	36902000 	.word	0x36902000
 8001234:	3ac04000 	.word	0x3ac04000

08001238 <MX_ADC3_Init>:

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001238:	482e      	ldr	r0, [pc, #184]	; (80012f4 <MX_ADC3_Init+0xbc>)
 800123a:	492f      	ldr	r1, [pc, #188]	; (80012f8 <MX_ADC3_Init+0xc0>)
{
 800123c:	b500      	push	{lr}
  hadc3.Instance = ADC3;
 800123e:	6001      	str	r1, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001240:	2104      	movs	r1, #4
 8001242:	6141      	str	r1, [r0, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001248:	8301      	strh	r1, [r0, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 3;
 800124a:	2103      	movs	r1, #3
 800124c:	61c1      	str	r1, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.OversamplingMode = ENABLE;
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800124e:	210c      	movs	r1, #12
  ADC_ChannelConfTypeDef sConfig = {0};
 8001250:	2300      	movs	r3, #0
{
 8001252:	b087      	sub	sp, #28
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001254:	2201      	movs	r2, #1
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001256:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001258:	2180      	movs	r1, #128	; 0x80
  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	e9cd 3300 	strd	r3, r3, [sp]
 800125e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001262:	e9cd 3304 	strd	r3, r3, [sp, #16]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001266:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800126a:	e9c0 3203 	strd	r3, r2, [r0, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001272:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001276:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800127a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127e:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8001280:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001284:	6482      	str	r2, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001286:	f001 fdf5 	bl	8002e74 <HAL_ADC_Init>
 800128a:	bb28      	cbnz	r0, 80012d8 <MX_ADC3_Init+0xa0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <MX_ADC3_Init+0xc4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_ADC3_Init+0xbc>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001290:	2306      	movs	r3, #6
 8001292:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001296:	2107      	movs	r1, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001298:	237f      	movs	r3, #127	; 0x7f
 800129a:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800129e:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80012a0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012a2:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 80012a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012a8:	f002 f83a 	bl	8003320 <HAL_ADC_ConfigChannel>
 80012ac:	b9f8      	cbnz	r0, 80012ee <MX_ADC3_Init+0xb6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <MX_ADC3_Init+0xc8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <MX_ADC3_Init+0xbc>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012b2:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012b4:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012b6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ba:	f002 f831 	bl	8003320 <HAL_ADC_ConfigChannel>
 80012be:	b998      	cbnz	r0, 80012e8 <MX_ADC3_Init+0xb0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012c0:	4a10      	ldr	r2, [pc, #64]	; (8001304 <MX_ADC3_Init+0xcc>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_ADC3_Init+0xbc>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012c4:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c6:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012c8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012cc:	f002 f828 	bl	8003320 <HAL_ADC_ConfigChannel>
 80012d0:	b928      	cbnz	r0, 80012de <MX_ADC3_Init+0xa6>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012d2:	b007      	add	sp, #28
 80012d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012d8:	f000 feb2 	bl	8002040 <Error_Handler>
 80012dc:	e7d6      	b.n	800128c <MX_ADC3_Init+0x54>
    Error_Handler();
 80012de:	f000 feaf 	bl	8002040 <Error_Handler>
}
 80012e2:	b007      	add	sp, #28
 80012e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012e8:	f000 feaa 	bl	8002040 <Error_Handler>
 80012ec:	e7e8      	b.n	80012c0 <MX_ADC3_Init+0x88>
    Error_Handler();
 80012ee:	f000 fea7 	bl	8002040 <Error_Handler>
 80012f2:	e7dc      	b.n	80012ae <MX_ADC3_Init+0x76>
 80012f4:	20000258 	.word	0x20000258
 80012f8:	50040200 	.word	0x50040200
 80012fc:	04300002 	.word	0x04300002
 8001300:	08600004 	.word	0x08600004
 8001304:	0c900008 	.word	0x0c900008

08001308 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001308:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800130a:	6802      	ldr	r2, [r0, #0]
 800130c:	493b      	ldr	r1, [pc, #236]	; (80013fc <HAL_ADC_MspInit+0xf4>)
{
 800130e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8001312:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001318:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
 800131c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	9308      	str	r3, [sp, #32]
  if(adcHandle->Instance==ADC1)
 8001320:	d037      	beq.n	8001392 <HAL_ADC_MspInit+0x8a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001322:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_ADC_MspInit+0xf8>)
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001328:	b00b      	add	sp, #44	; 0x2c
 800132a:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC_CLK_ENABLED++;
 800132c:	4a35      	ldr	r2, [pc, #212]	; (8001404 <HAL_ADC_MspInit+0xfc>)
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001332:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8001334:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001336:	d053      	beq.n	80013e0 <HAL_ADC_MspInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_ADC_MspInit+0x100>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	4834      	ldr	r0, [pc, #208]	; (800140c <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 800133e:	4d34      	ldr	r5, [pc, #208]	; (8001410 <HAL_ADC_MspInit+0x108>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	f042 0204 	orr.w	r2, r2, #4
 8001344:	64da      	str	r2, [r3, #76]	; 0x4c
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = HALL1_Pin|HALL2_Pin|HALL3_Pin;
 8001350:	2207      	movs	r2, #7
 8001352:	230b      	movs	r3, #11
 8001354:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f002 fdeb 	bl	8003f34 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800135e:	492d      	ldr	r1, [pc, #180]	; (8001414 <HAL_ADC_MspInit+0x10c>)
    hdma_adc3.Init.Request = DMA_REQUEST_0;
 8001360:	2300      	movs	r3, #0
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	2280      	movs	r2, #128	; 0x80
    hdma_adc3.Init.Request = DMA_REQUEST_0;
 8001364:	e9c5 1300 	strd	r1, r3, [r5]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	612a      	str	r2, [r5, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001372:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001376:	2220      	movs	r2, #32
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001378:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800137c:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001380:	4628      	mov	r0, r5
 8001382:	f002 fc85 	bl	8003c90 <HAL_DMA_Init>
 8001386:	2800      	cmp	r0, #0
 8001388:	d135      	bne.n	80013f6 <HAL_ADC_MspInit+0xee>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800138a:	64e5      	str	r5, [r4, #76]	; 0x4c
 800138c:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800138e:	b00b      	add	sp, #44	; 0x2c
 8001390:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC_CLK_ENABLED++;
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_ADC_MspInit+0xfc>)
 8001394:	6813      	ldr	r3, [r2, #0]
 8001396:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001398:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 800139a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800139c:	d015      	beq.n	80013ca <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_ADC_MspInit+0x100>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a0:	481a      	ldr	r0, [pc, #104]	; (800140c <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 80013a4:	4d1c      	ldr	r5, [pc, #112]	; (8001418 <HAL_ADC_MspInit+0x110>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	f042 0204 	orr.w	r2, r2, #4
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = H1_CURRENT_Pin|H2_CURRENT_Pin;
 80013b6:	2230      	movs	r2, #48	; 0x30
 80013b8:	230b      	movs	r3, #11
 80013ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f002 fdb8 	bl	8003f34 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80013c4:	4915      	ldr	r1, [pc, #84]	; (800141c <HAL_ADC_MspInit+0x114>)
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e7cb      	b.n	8001362 <HAL_ADC_MspInit+0x5a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_ADC_MspInit+0x100>)
 80013cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	9b00      	ldr	r3, [sp, #0]
 80013de:	e7de      	b.n	800139e <HAL_ADC_MspInit+0x96>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_ADC_MspInit+0x100>)
 80013e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	9b02      	ldr	r3, [sp, #8]
 80013f4:	e7a0      	b.n	8001338 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 80013f6:	f000 fe23 	bl	8002040 <Error_Handler>
 80013fa:	e7c6      	b.n	800138a <HAL_ADC_MspInit+0x82>
 80013fc:	50040000 	.word	0x50040000
 8001400:	50040200 	.word	0x50040200
 8001404:	200001f0 	.word	0x200001f0
 8001408:	40021000 	.word	0x40021000
 800140c:	48000800 	.word	0x48000800
 8001410:	20000304 	.word	0x20000304
 8001414:	40020030 	.word	0x40020030
 8001418:	200002bc 	.word	0x200002bc
 800141c:	40020008 	.word	0x40020008

08001420 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_DMA_Init+0x1c>)
 8001422:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	649a      	str	r2, [r3, #72]	; 0x48
 800142a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 800142c:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	9b01      	ldr	r3, [sp, #4]

}
 8001436:	b002      	add	sp, #8
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <ds18b20_start_measure>:
  OW_Write_Byte(cmd);
  return HAL_OK;
}

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	4605      	mov	r5, r0
  if (OW_Reset() != HAL_OK)
 8001444:	f001 fa80 	bl	8002948 <OW_Reset>
 8001448:	b988      	cbnz	r0, 800146e <ds18b20_start_measure+0x2e>
  if (!rom_code) {
 800144a:	4606      	mov	r6, r0
 800144c:	b195      	cbz	r5, 8001474 <ds18b20_start_measure+0x34>
	  OW_Write_Byte(DS18B20_MATCH_ROM);
 800144e:	2055      	movs	r0, #85	; 0x55
 8001450:	f001 fafe 	bl	8002a50 <OW_Write_Byte>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001454:	1e6c      	subs	r4, r5, #1
 8001456:	3507      	adds	r5, #7
      OW_Write_Byte(rom_code[i]);
 8001458:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800145c:	f001 faf8 	bl	8002a50 <OW_Write_Byte>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001460:	42ac      	cmp	r4, r5
 8001462:	d1f9      	bne.n	8001458 <ds18b20_start_measure+0x18>
  OW_Write_Byte(cmd);
 8001464:	2044      	movs	r0, #68	; 0x44
 8001466:	f001 faf3 	bl	8002a50 <OW_Write_Byte>
  return send_cmd(rom_code, DS18B20_CONVERT_T);
}
 800146a:	4630      	mov	r0, r6
 800146c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800146e:	2601      	movs	r6, #1
}
 8001470:	4630      	mov	r0, r6
 8001472:	bd70      	pop	{r4, r5, r6, pc}
    OW_Write_Byte(DS18B20_SKIP_ROM);
 8001474:	20cc      	movs	r0, #204	; 0xcc
 8001476:	f001 faeb 	bl	8002a50 <OW_Write_Byte>
 800147a:	e7f3      	b.n	8001464 <ds18b20_start_measure+0x24>

0800147c <ds18b20_get_temp>:
  else
    return HAL_ERROR;
}

int16_t ds18b20_get_temp(const uint8_t* rom_code)
{
 800147c:	b530      	push	{r4, r5, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	4605      	mov	r5, r0
  if (OW_Reset() != HAL_OK)
 8001482:	f001 fa61 	bl	8002948 <OW_Reset>
 8001486:	b9f8      	cbnz	r0, 80014c8 <ds18b20_get_temp+0x4c>
  if (!rom_code) {
 8001488:	b32d      	cbz	r5, 80014d6 <ds18b20_get_temp+0x5a>
	  OW_Write_Byte(DS18B20_MATCH_ROM);
 800148a:	2055      	movs	r0, #85	; 0x55
 800148c:	f001 fae0 	bl	8002a50 <OW_Write_Byte>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001490:	1e6c      	subs	r4, r5, #1
 8001492:	3507      	adds	r5, #7
      OW_Write_Byte(rom_code[i]);
 8001494:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001498:	f001 fada 	bl	8002a50 <OW_Write_Byte>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800149c:	42ac      	cmp	r4, r5
 800149e:	d1f9      	bne.n	8001494 <ds18b20_get_temp+0x18>
  OW_Write_Byte(cmd);
 80014a0:	20be      	movs	r0, #190	; 0xbe
 80014a2:	f001 fad5 	bl	8002a50 <OW_Write_Byte>
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80014a6:	f10d 0403 	add.w	r4, sp, #3
 80014aa:	ad03      	add	r5, sp, #12
    scratchpad[i] = OW_Read_Byte();
 80014ac:	f001 faa4 	bl	80029f8 <OW_Read_Byte>
 80014b0:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80014b4:	42a5      	cmp	r5, r4
 80014b6:	d1f9      	bne.n	80014ac <ds18b20_get_temp+0x30>
  crc = OW_CRC(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80014b8:	2108      	movs	r1, #8
 80014ba:	a801      	add	r0, sp, #4
 80014bc:	f001 faf4 	bl	8002aa8 <OW_CRC>
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80014c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80014c4:	4283      	cmp	r3, r0
 80014c6:	d002      	beq.n	80014ce <ds18b20_get_temp+0x52>
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
    return 85;
 80014c8:	2055      	movs	r0, #85	; 0x55

  memcpy(&temp, &scratchpad[0], sizeof(temp));

  return temp;
}
 80014ca:	b005      	add	sp, #20
 80014cc:	bd30      	pop	{r4, r5, pc}
  memcpy(&temp, &scratchpad[0], sizeof(temp));
 80014ce:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
}
 80014d2:	b005      	add	sp, #20
 80014d4:	bd30      	pop	{r4, r5, pc}
    OW_Write_Byte(DS18B20_SKIP_ROM);
 80014d6:	20cc      	movs	r0, #204	; 0xcc
 80014d8:	f001 faba 	bl	8002a50 <OW_Write_Byte>
 80014dc:	e7e0      	b.n	80014a0 <ds18b20_get_temp+0x24>
 80014de:	bf00      	nop

080014e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	2400      	movs	r4, #0
{
 80014e4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014ea:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_GPIO_Init+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80014f4:	f041 0104 	orr.w	r1, r1, #4
 80014f8:	64d9      	str	r1, [r3, #76]	; 0x4c
 80014fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80014fc:	f001 0104 	and.w	r1, r1, #4
 8001500:	9100      	str	r1, [sp, #0]
 8001502:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001504:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001506:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800150a:	64d9      	str	r1, [r3, #76]	; 0x4c
 800150c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800150e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001512:	9101      	str	r1, [sp, #4]
 8001514:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001518:	f041 0101 	orr.w	r1, r1, #1
 800151c:	64d9      	str	r1, [r3, #76]	; 0x4c
 800151e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001520:	f001 0101 	and.w	r1, r1, #1
 8001524:	9102      	str	r1, [sp, #8]
 8001526:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800152a:	f041 0102 	orr.w	r1, r1, #2
 800152e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR2_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8001536:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR2_Pin|DIR1_Pin, GPIO_PIN_RESET);
 800153a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR2_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8001544:	f002 fdf8 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001548:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = B1_Pin;
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001552:	4810      	ldr	r0, [pc, #64]	; (8001594 <MX_GPIO_Init+0xb4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8001556:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800155a:	f002 fceb 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800155e:	2208      	movs	r2, #8
 8001560:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	a904      	add	r1, sp, #16
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <MX_GPIO_Init+0xb4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800156a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f002 fce1 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR2_Pin|DIR1_Pin;
 8001572:	f44f 62a4 	mov.w	r2, #1312	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	a904      	add	r1, sp, #16
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f002 fcd5 	bl	8003f34 <HAL_GPIO_Init>

}
 800158a:	b00a      	add	sp, #40	; 0x28
 800158c:	bd10      	pop	{r4, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	48000800 	.word	0x48000800

08001598 <HBridgeInit>:


void HBridgeInit(HBridge *hb, GPIO_TypeDef *dir_port,
		uint16_t dir_pin, TIM_HandleTypeDef *PwmTim,
		uint8_t TimChannel)
{
 8001598:	f89d c000 	ldrb.w	ip, [sp]
	hb->DIR_PORT = dir_port;
 800159c:	6001      	str	r1, [r0, #0]

	hb->DIR_GPIO_PIN = dir_pin;
 800159e:	8082      	strh	r2, [r0, #4]

	hb->PWM_TIM = PwmTim;
 80015a0:	6083      	str	r3, [r0, #8]
	hb->TIM_CHANNEL = TimChannel;
 80015a2:	f880 c00c 	strb.w	ip, [r0, #12]
}
 80015a6:	4770      	bx	lr

080015a8 <HBridgeControl>:

void HBridgeControl(HBridge *hb, int16_t pwm_val)
{
 80015a8:	b538      	push	{r3, r4, r5, lr}
	if(pwm_val > 0)
 80015aa:	1e0d      	subs	r5, r1, #0
	{
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 80015ac:	7b03      	ldrb	r3, [r0, #12]
{
 80015ae:	4604      	mov	r4, r0
	if(pwm_val > 0)
 80015b0:	dd1a      	ble.n	80015e8 <HBridgeControl+0x40>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 80015b2:	b96b      	cbnz	r3, 80015d0 <HBridgeControl+0x28>
 80015b4:	6882      	ldr	r2, [r0, #8]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_GPIO_WritePin(hb->DIR_PORT,hb->DIR_GPIO_PIN, GPIO_PIN_SET);
 80015ba:	88a1      	ldrh	r1, [r4, #4]
 80015bc:	6820      	ldr	r0, [r4, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	f002 fdba 	bl	8004138 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 80015c4:	7b23      	ldrb	r3, [r4, #12]
 80015c6:	b9f3      	cbnz	r3, 8001606 <HBridgeControl+0x5e>
	else if(pwm_val < 0)
	{
		pwm_val *= -1;
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
		HAL_GPIO_WritePin(hb->DIR_PORT,hb->DIR_GPIO_PIN, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 80015c8:	68a3      	ldr	r3, [r4, #8]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	635d      	str	r5, [r3, #52]	; 0x34
	}
	else
	{
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
	}
}
 80015ce:	bd38      	pop	{r3, r4, r5, pc}
 80015d0:	3b04      	subs	r3, #4
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d82c      	bhi.n	8001630 <HBridgeControl+0x88>
 80015d6:	e8df f003 	tbb	[pc, r3]
 80015da:	2b67      	.short	0x2b67
 80015dc:	2b5d2b2b 	.word	0x2b5d2b2b
 80015e0:	2b582b2b 	.word	0x2b582b2b
 80015e4:	2b2b      	.short	0x2b2b
 80015e6:	62          	.byte	0x62
 80015e7:	00          	.byte	0x00
	else if(pwm_val < 0)
 80015e8:	d019      	beq.n	800161e <HBridgeControl+0x76>
		pwm_val *= -1;
 80015ea:	4269      	negs	r1, r5
 80015ec:	b20d      	sxth	r5, r1
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 80015ee:	bb23      	cbnz	r3, 800163a <HBridgeControl+0x92>
 80015f0:	6882      	ldr	r2, [r0, #8]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_GPIO_WritePin(hb->DIR_PORT,hb->DIR_GPIO_PIN, GPIO_PIN_RESET);
 80015f6:	88a1      	ldrh	r1, [r4, #4]
 80015f8:	6820      	ldr	r0, [r4, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f002 fd9c 	bl	8004138 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 8001600:	7b23      	ldrb	r3, [r4, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0e0      	beq.n	80015c8 <HBridgeControl+0x20>
 8001606:	3b04      	subs	r3, #4
 8001608:	2b0c      	cmp	r3, #12
 800160a:	d80d      	bhi.n	8001628 <HBridgeControl+0x80>
 800160c:	e8df f003 	tbb	[pc, r3]
 8001610:	0c0c0c39 	.word	0x0c0c0c39
 8001614:	0c0c0c35 	.word	0x0c0c0c35
 8001618:	0c0c0c31 	.word	0x0c0c0c31
 800161c:	2d          	.byte	0x2d
 800161d:	00          	.byte	0x00
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 800161e:	b9c3      	cbnz	r3, 8001652 <HBridgeControl+0xaa>
 8001620:	6882      	ldr	r2, [r0, #8]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001626:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 8001628:	68a3      	ldr	r3, [r4, #8]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	65dd      	str	r5, [r3, #92]	; 0x5c
}
 800162e:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001630:	6883      	ldr	r3, [r0, #8]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	65da      	str	r2, [r3, #92]	; 0x5c
 8001638:	e7bf      	b.n	80015ba <HBridgeControl+0x12>
 800163a:	3b04      	subs	r3, #4
 800163c:	2b0c      	cmp	r3, #12
 800163e:	d83d      	bhi.n	80016bc <HBridgeControl+0x114>
 8001640:	e8df f003 	tbb	[pc, r3]
 8001644:	3c3c3c46 	.word	0x3c3c3c46
 8001648:	3c3c3c50 	.word	0x3c3c3c50
 800164c:	3c3c3c4b 	.word	0x3c3c3c4b
 8001650:	41          	.byte	0x41
 8001651:	00          	.byte	0x00
 8001652:	3b04      	subs	r3, #4
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d82c      	bhi.n	80016b2 <HBridgeControl+0x10a>
 8001658:	e8df f003 	tbb	[pc, r3]
 800165c:	2b2b2b58 	.word	0x2b2b2b58
 8001660:	2b2b2b53 	.word	0x2b2b2b53
 8001664:	2b2b2b4e 	.word	0x2b2b2b4e
 8001668:	49          	.byte	0x49
 8001669:	00          	.byte	0x00
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 800166a:	68a3      	ldr	r3, [r4, #8]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	659d      	str	r5, [r3, #88]	; 0x58
}
 8001670:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 8001672:	68a3      	ldr	r3, [r4, #8]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	641d      	str	r5, [r3, #64]	; 0x40
}
 8001678:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 800167a:	68a3      	ldr	r3, [r4, #8]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	63dd      	str	r5, [r3, #60]	; 0x3c
}
 8001680:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, pwm_val);
 8001682:	68a3      	ldr	r3, [r4, #8]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	639d      	str	r5, [r3, #56]	; 0x38
}
 8001688:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 800168a:	6883      	ldr	r3, [r0, #8]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
 8001692:	e792      	b.n	80015ba <HBridgeControl+0x12>
 8001694:	6883      	ldr	r3, [r0, #8]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
 800169c:	e78d      	b.n	80015ba <HBridgeControl+0x12>
 800169e:	6883      	ldr	r3, [r0, #8]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	659a      	str	r2, [r3, #88]	; 0x58
 80016a6:	e788      	b.n	80015ba <HBridgeControl+0x12>
 80016a8:	6883      	ldr	r3, [r0, #8]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38
 80016b0:	e783      	b.n	80015ba <HBridgeControl+0x12>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 80016b2:	6883      	ldr	r3, [r0, #8]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 80016bc:	6883      	ldr	r3, [r0, #8]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016c4:	e797      	b.n	80015f6 <HBridgeControl+0x4e>
 80016c6:	6883      	ldr	r3, [r0, #8]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	659a      	str	r2, [r3, #88]	; 0x58
 80016ce:	e792      	b.n	80015f6 <HBridgeControl+0x4e>
 80016d0:	6883      	ldr	r3, [r0, #8]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
 80016d8:	e78d      	b.n	80015f6 <HBridgeControl+0x4e>
 80016da:	6883      	ldr	r3, [r0, #8]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2200      	movs	r2, #0
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
 80016e2:	e788      	b.n	80015f6 <HBridgeControl+0x4e>
 80016e4:	6883      	ldr	r3, [r0, #8]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2200      	movs	r2, #0
 80016ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ec:	e783      	b.n	80015f6 <HBridgeControl+0x4e>
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 80016ee:	6883      	ldr	r3, [r0, #8]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	659a      	str	r2, [r3, #88]	; 0x58
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 80016f8:	6883      	ldr	r3, [r0, #8]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001700:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 8001702:	6883      	ldr	r3, [r0, #8]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800170a:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_COMPARE(hb->PWM_TIM, hb->TIM_CHANNEL, 0);
 800170c:	6883      	ldr	r3, [r0, #8]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001714:	bd38      	pop	{r3, r4, r5, pc}
 8001716:	bf00      	nop

08001718 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001718:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <MX_I2C1_Init+0x64>)
 800171c:	4c18      	ldr	r4, [pc, #96]	; (8001780 <MX_I2C1_Init+0x68>)
  hi2c1.Init.Timing = 0x10909CEC;
 800171e:	4919      	ldr	r1, [pc, #100]	; (8001784 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.OwnAddress1 = 0;
 8001720:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001722:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8001724:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001728:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 800172c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001730:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001734:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001736:	f002 fd0f 	bl	8004158 <HAL_I2C_Init>
 800173a:	b950      	cbnz	r0, 8001752 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <MX_I2C1_Init+0x64>)
 800173e:	2100      	movs	r1, #0
 8001740:	f002 fd64 	bl	800420c <HAL_I2CEx_ConfigAnalogFilter>
 8001744:	b968      	cbnz	r0, 8001762 <MX_I2C1_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_I2C1_Init+0x64>)
 8001748:	2100      	movs	r1, #0
 800174a:	f002 fd89 	bl	8004260 <HAL_I2CEx_ConfigDigitalFilter>
 800174e:	b980      	cbnz	r0, 8001772 <MX_I2C1_Init+0x5a>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001750:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001752:	f000 fc75 	bl	8002040 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001756:	4809      	ldr	r0, [pc, #36]	; (800177c <MX_I2C1_Init+0x64>)
 8001758:	2100      	movs	r1, #0
 800175a:	f002 fd57 	bl	800420c <HAL_I2CEx_ConfigAnalogFilter>
 800175e:	2800      	cmp	r0, #0
 8001760:	d0f1      	beq.n	8001746 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001762:	f000 fc6d 	bl	8002040 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_I2C1_Init+0x64>)
 8001768:	2100      	movs	r1, #0
 800176a:	f002 fd79 	bl	8004260 <HAL_I2CEx_ConfigDigitalFilter>
 800176e:	2800      	cmp	r0, #0
 8001770:	d0ee      	beq.n	8001750 <MX_I2C1_Init+0x38>
}
 8001772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001776:	f000 bc63 	b.w	8002040 <Error_Handler>
 800177a:	bf00      	nop
 800177c:	2000034c 	.word	0x2000034c
 8001780:	40005400 	.word	0x40005400
 8001784:	10909cec 	.word	0x10909cec

08001788 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001788:	b510      	push	{r4, lr}
 800178a:	4604      	mov	r4, r0
 800178c:	b0aa      	sub	sp, #168	; 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001790:	2288      	movs	r2, #136	; 0x88
 8001792:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001798:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800179c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800179e:	f006 fc66 	bl	800806e <memset>
  if(i2cHandle->Instance==I2C1)
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_I2C_MspInit+0x80>)
 80017a4:	6822      	ldr	r2, [r4, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017aa:	b02a      	add	sp, #168	; 0xa8
 80017ac:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017ae:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017b2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b4:	f003 fb3e 	bl	8004e34 <HAL_RCCEx_PeriphCLKConfig>
 80017b8:	bb18      	cbnz	r0, 8001802 <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4c14      	ldr	r4, [pc, #80]	; (800180c <HAL_I2C_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	4814      	ldr	r0, [pc, #80]	; (8001810 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80017c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017ce:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017d2:	2312      	movs	r3, #18
 80017d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d8:	2200      	movs	r2, #0
 80017da:	2303      	movs	r3, #3
 80017dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e2:	2304      	movs	r3, #4
 80017e4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f002 fba4 	bl	8003f34 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80017f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	9b01      	ldr	r3, [sp, #4]
}
 80017fe:	b02a      	add	sp, #168	; 0xa8
 8001800:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001802:	f000 fc1d 	bl	8002040 <Error_Handler>
 8001806:	e7d8      	b.n	80017ba <HAL_I2C_MspInit+0x32>
 8001808:	40005400 	.word	0x40005400
 800180c:	40021000 	.word	0x40021000
 8001810:	48000400 	.word	0x48000400
 8001814:	00000000 	.word	0x00000000

08001818 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001818:	b510      	push	{r4, lr}
 800181a:	b098      	sub	sp, #96	; 0x60
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800181c:	2244      	movs	r2, #68	; 0x44
 800181e:	2100      	movs	r1, #0
 8001820:	a806      	add	r0, sp, #24
 8001822:	f006 fc24 	bl	800806e <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001826:	2300      	movs	r3, #0
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001828:	f44f 7000 	mov.w	r0, #512	; 0x200
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800182c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001830:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001834:	9305      	str	r3, [sp, #20]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001836:	f002 fd47 	bl	80042c8 <HAL_PWREx_ControlVoltageScaling>
 800183a:	b108      	cbz	r0, 8001840 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800183e:	e7fe      	b.n	800183e <SystemClock_Config+0x26>
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001840:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8001898 <SystemClock_Config+0x80>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001848:	2210      	movs	r2, #16
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800184a:	2302      	movs	r3, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001852:	2101      	movs	r1, #1
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001854:	220a      	movs	r2, #10
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001856:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800185a:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800185c:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800185e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001862:	9112      	str	r1, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001864:	9213      	str	r2, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001866:	f002 fe11 	bl	800448c <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	b108      	cbz	r0, 8001872 <SystemClock_Config+0x5a>
 800186e:	b672      	cpsid	i
	while (1)
 8001870:	e7fe      	b.n	8001870 <SystemClock_Config+0x58>
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001872:	2104      	movs	r1, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001874:	240f      	movs	r4, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001876:	2203      	movs	r2, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001878:	eb0d 0001 	add.w	r0, sp, r1
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187c:	e9cd 4201 	strd	r4, r2, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001880:	e9cd 3303 	strd	r3, r3, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001884:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001886:	f003 f8e9 	bl	8004a5c <HAL_RCC_ClockConfig>
 800188a:	b108      	cbz	r0, 8001890 <SystemClock_Config+0x78>
 800188c:	b672      	cpsid	i
	while (1)
 800188e:	e7fe      	b.n	800188e <SystemClock_Config+0x76>
}
 8001890:	b018      	add	sp, #96	; 0x60
 8001892:	bd10      	pop	{r4, pc}
 8001894:	f3af 8000 	nop.w
 8001898:	00000007 	.word	0x00000007
 800189c:	00000002 	.word	0x00000002

080018a0 <PeriphCommonClock_Config>:
{
 80018a0:	b500      	push	{lr}
 80018a2:	b0a3      	sub	sp, #140	; 0x8c
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80018a4:	2100      	movs	r1, #0
 80018a6:	2268      	movs	r2, #104	; 0x68
 80018a8:	a808      	add	r0, sp, #32
 80018aa:	f006 fbe0 	bl	800806e <memset>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80018e8 <PeriphCommonClock_Config+0x48>
 80018b2:	2001      	movs	r0, #1
 80018b4:	2108      	movs	r1, #8
 80018b6:	ed8d 7b00 	vstr	d7, [sp]
 80018ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80018f0 <PeriphCommonClock_Config+0x50>
 80018be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018c2:	2002      	movs	r0, #2
 80018c4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80018c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d0:	4668      	mov	r0, sp
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018d2:	ed8d 7b04 	vstr	d7, [sp, #16]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018d6:	931e      	str	r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d8:	f003 faac 	bl	8004e34 <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	b108      	cbz	r0, 80018e2 <PeriphCommonClock_Config+0x42>
 80018de:	b672      	cpsid	i
	while (1)
 80018e0:	e7fe      	b.n	80018e0 <PeriphCommonClock_Config+0x40>
}
 80018e2:	b023      	add	sp, #140	; 0x8c
 80018e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80018e8:	00004000 	.word	0x00004000
 80018ec:	00000002 	.word	0x00000002
 80018f0:	00000007 	.word	0x00000007
 80018f4:	00000002 	.word	0x00000002

080018f8 <main>:
{
 80018f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018fc:	ed2d 8b04 	vpush	{d8-d9}
 8001900:	b0b9      	sub	sp, #228	; 0xe4
	HAL_Init();
 8001902:	f001 fa7b 	bl	8002dfc <HAL_Init>
	SystemClock_Config();
 8001906:	f7ff ff87 	bl	8001818 <SystemClock_Config>
	PeriphCommonClock_Config();
 800190a:	f7ff ffc9 	bl	80018a0 <PeriphCommonClock_Config>
	MX_GPIO_Init();
 800190e:	f7ff fde7 	bl	80014e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001912:	f7ff fd85 	bl	8001420 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001916:	f000 ff3f 	bl	8002798 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800191a:	f7ff fc27 	bl	800116c <MX_ADC1_Init>
	MX_ADC3_Init();
 800191e:	f7ff fc8b 	bl	8001238 <MX_ADC3_Init>
	MX_TIM2_Init();
 8001922:	f000 fd55 	bl	80023d0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001926:	f000 fde3 	bl	80024f0 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 800192a:	f000 ff53 	bl	80027d4 <MX_USART3_UART_Init>
	MX_TIM4_Init();
 800192e:	f000 fe43 	bl	80025b8 <MX_TIM4_Init>
	MX_TIM8_Init();
 8001932:	f000 fea1 	bl	8002678 <MX_TIM8_Init>
	MX_I2C1_Init();
 8001936:	f7ff feef 	bl	8001718 <MX_I2C1_Init>
	HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2101      	movs	r1, #1
 800193e:	202f      	movs	r0, #47	; 0x2f
 8001940:	f002 f940 	bl	8003bc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001944:	202f      	movs	r0, #47	; 0x2f
 8001946:	f002 f97b 	bl	8003c40 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2105      	movs	r1, #5
 800194e:	2012      	movs	r0, #18
 8001950:	f002 f938 	bl	8003bc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001954:	2012      	movs	r0, #18
 8001956:	f002 f973 	bl	8003c40 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2102      	movs	r1, #2
 800195e:	201d      	movs	r0, #29
 8001960:	f002 f930 	bl	8003bc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001964:	201d      	movs	r0, #29
 8001966:	f002 f96b 	bl	8003c40 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2102      	movs	r1, #2
 800196e:	201e      	movs	r0, #30
 8001970:	f002 f928 	bl	8003bc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001974:	201e      	movs	r0, #30
 8001976:	f002 f963 	bl	8003c40 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	4611      	mov	r1, r2
 800197e:	200d      	movs	r0, #13
 8001980:	f002 f920 	bl	8003bc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001984:	200d      	movs	r0, #13
 8001986:	f002 f95b 	bl	8003c40 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	4611      	mov	r1, r2
 800198e:	200b      	movs	r0, #11
 8001990:	f002 f918 	bl	8003bc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001994:	200b      	movs	r0, #11
 8001996:	f002 f953 	bl	8003c40 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	4611      	mov	r1, r2
 800199e:	2011      	movs	r0, #17
 80019a0:	f002 f910 	bl	8003bc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80019a4:	2011      	movs	r0, #17
 80019a6:	f002 f94b 	bl	8003c40 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2106      	movs	r1, #6
 80019ae:	2026      	movs	r0, #38	; 0x26
 80019b0:	f002 f908 	bl	8003bc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019b4:	2026      	movs	r0, #38	; 0x26
 80019b6:	f002 f943 	bl	8003c40 <HAL_NVIC_EnableIRQ>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80019ba:	217f      	movs	r1, #127	; 0x7f
 80019bc:	48c5      	ldr	r0, [pc, #788]	; (8001cd4 <main+0x3dc>)
 80019be:	f002 f821 	bl	8003a04 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_HALL, 3);
 80019c2:	2203      	movs	r2, #3
 80019c4:	49c4      	ldr	r1, [pc, #784]	; (8001cd8 <main+0x3e0>)
 80019c6:	48c3      	ldr	r0, [pc, #780]	; (8001cd4 <main+0x3dc>)
 80019c8:	f001 ff66 	bl	8003898 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80019cc:	217f      	movs	r1, #127	; 0x7f
 80019ce:	48c3      	ldr	r0, [pc, #780]	; (8001cdc <main+0x3e4>)
 80019d0:	f002 f818 	bl	8003a04 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_CURRENT, 2);
 80019d4:	49c2      	ldr	r1, [pc, #776]	; (8001ce0 <main+0x3e8>)
 80019d6:	48c1      	ldr	r0, [pc, #772]	; (8001cdc <main+0x3e4>)
 80019d8:	2202      	movs	r2, #2
 80019da:	f001 ff5d 	bl	8003898 <HAL_ADC_Start_DMA>
	HBridgeInit(&coil1, DIR1_GPIO_Port, DIR1_Pin, &htim3, TIM_CHANNEL_2);
 80019de:	2004      	movs	r0, #4
	HBridgeInit(&coil2, DIR2_GPIO_Port, DIR2_Pin, &htim4, TIM_CHANNEL_1);
 80019e0:	2400      	movs	r4, #0
	HBridgeInit(&coil1, DIR1_GPIO_Port, DIR1_Pin, &htim3, TIM_CHANNEL_2);
 80019e2:	4bc0      	ldr	r3, [pc, #768]	; (8001ce4 <main+0x3ec>)
 80019e4:	9000      	str	r0, [sp, #0]
 80019e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ea:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80019ee:	a814      	add	r0, sp, #80	; 0x50
 80019f0:	f7ff fdd2 	bl	8001598 <HBridgeInit>
	HBridgeInit(&coil2, DIR2_GPIO_Port, DIR2_Pin, &htim4, TIM_CHANNEL_1);
 80019f4:	4bbc      	ldr	r3, [pc, #752]	; (8001ce8 <main+0x3f0>)
 80019f6:	9400      	str	r4, [sp, #0]
 80019f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001a00:	a818      	add	r0, sp, #96	; 0x60
 8001a02:	f7ff fdc9 	bl	8001598 <HBridgeInit>
	PIDInit(&pid, PID_Kp, PID_Ki, PID_Kd, PID_WIND_UP);
 8001a06:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 8001cec <main+0x3f4>
 8001a0a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001a0e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001a12:	2132      	movs	r1, #50	; 0x32
 8001a14:	a820      	add	r0, sp, #128	; 0x80
 8001a16:	f7ff fb99 	bl	800114c <PIDInit>
	uint8_t ds[2][8] =
 8001a1a:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8001a1e:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
	int16_t rslt = OW_Search_First();
 8001a22:	f001 f989 	bl	8002d38 <OW_Search_First>
	while (rslt)
 8001a26:	b200      	sxth	r0, r0
 8001a28:	b180      	cbz	r0, 8001a4c <main+0x154>
 8001a2a:	4db1      	ldr	r5, [pc, #708]	; (8001cf0 <main+0x3f8>)
			ds[i][j] = ROM_NO[j];
 8001a2c:	6869      	ldr	r1, [r5, #4]
 8001a2e:	6828      	ldr	r0, [r5, #0]
 8001a30:	b2e3      	uxtb	r3, r4
 8001a32:	aa1c      	add	r2, sp, #112	; 0x70
 8001a34:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001a38:	ae1c      	add	r6, sp, #112	; 0x70
	while (rslt)
 8001a3a:	3401      	adds	r4, #1
			ds[i][j] = ROM_NO[j];
 8001a3c:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 8001a40:	6051      	str	r1, [r2, #4]
		rslt = OW_Search_Next();
 8001a42:	f001 f989 	bl	8002d58 <OW_Search_Next>
	while (rslt)
 8001a46:	b200      	sxth	r0, r0
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d1ef      	bne.n	8001a2c <main+0x134>
	ds18b20_start_measure(ds[0]);
 8001a4c:	a81c      	add	r0, sp, #112	; 0x70
 8001a4e:	f7ff fcf7 	bl	8001440 <ds18b20_start_measure>
	ds18b20_start_measure(ds[1]);
 8001a52:	a81e      	add	r0, sp, #120	; 0x78
 8001a54:	f7ff fcf4 	bl	8001440 <ds18b20_start_measure>
	HAL_Delay(750);
 8001a58:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001a5c:	f001 f9f8 	bl	8002e50 <HAL_Delay>
	float temp_coils = ds18b20_get_temp(ds[0]) / 16.0f;
 8001a60:	a81c      	add	r0, sp, #112	; 0x70
 8001a62:	f7ff fd0b 	bl	800147c <ds18b20_get_temp>
 8001a66:	ee07 0a90 	vmov	s15, r0
	float temp_air = ds18b20_get_temp(ds[1]) / 16.0f;
 8001a6a:	a81e      	add	r0, sp, #120	; 0x78
	float temp_coils = ds18b20_get_temp(ds[0]) / 16.0f;
 8001a6c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	float temp_air = ds18b20_get_temp(ds[1]) / 16.0f;
 8001a70:	f7ff fd04 	bl	800147c <ds18b20_get_temp>
 8001a74:	ee07 0a90 	vmov	s15, r0
	return 331.8f + 0.6f * temp;
 8001a78:	ed9f 6a9e 	vldr	s12, [pc, #632]	; 8001cf4 <main+0x3fc>
	sonic_speed = CalculateSoundSpeed(temp_air) / 20000.0f;
 8001a7c:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8001cf8 <main+0x400>
 8001a80:	4b9e      	ldr	r3, [pc, #632]	; (8001cfc <main+0x404>)
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001a82:	489f      	ldr	r0, [pc, #636]	; (8001d00 <main+0x408>)
	float temp_coils = ds18b20_get_temp(ds[0]) / 16.0f;
 8001a84:	eddf 9a9f 	vldr	s19, [pc, #636]	; 8001d04 <main+0x40c>
	float x_prev = 0;
 8001a88:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8001cec <main+0x3f4>
			start1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001a8c:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8001d00 <main+0x408>
	float temp_air = ds18b20_get_temp(ds[1]) / 16.0f;
 8001a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	return 331.8f + 0.6f * temp;
 8001a94:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8001d08 <main+0x410>
 8001a98:	eee7 7a06 	vfma.f32	s15, s14, s12
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001a9c:	2100      	movs	r1, #0
	uint8_t x_calculate = 0;
 8001a9e:	2500      	movs	r5, #0
	float temp_coils = ds18b20_get_temp(ds[0]) / 16.0f;
 8001aa0:	ee68 8aa9 	vmul.f32	s17, s17, s19
	sonic_speed = CalculateSoundSpeed(temp_air) / 20000.0f;
 8001aa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001aac:	f003 feb0 	bl	8005810 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	4893      	ldr	r0, [pc, #588]	; (8001d00 <main+0x408>)
 8001ab4:	f003 feac 	bl	8005810 <HAL_TIM_IC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001ab8:	2108      	movs	r1, #8
 8001aba:	4891      	ldr	r0, [pc, #580]	; (8001d00 <main+0x408>)
 8001abc:	f003 fd70 	bl	80055a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	4888      	ldr	r0, [pc, #544]	; (8001ce4 <main+0x3ec>)
 8001ac4:	f003 fd6c 	bl	80055a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4887      	ldr	r0, [pc, #540]	; (8001ce8 <main+0x3f0>)
 8001acc:	f003 fd68 	bl	80055a0 <HAL_TIM_PWM_Start>
	HAL_Delay(100);
 8001ad0:	2064      	movs	r0, #100	; 0x64
 8001ad2:	f001 f9bd 	bl	8002e50 <HAL_Delay>
	FilterMedianInit(&filter_median);
 8001ad6:	488d      	ldr	r0, [pc, #564]	; (8001d0c <main+0x414>)
 8001ad8:	f7ff fa2e 	bl	8000f38 <FilterMedianInit>
	FilterMovingAverageInit(&filter_moving_average);
 8001adc:	488c      	ldr	r0, [pc, #560]	; (8001d10 <main+0x418>)
 8001ade:	f7ff fb15 	bl	800110c <FilterMovingAverageInit>
	FilterLowPassInit(&lpf_position, 0.01);
 8001ae2:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8001d14 <main+0x41c>
 8001ae6:	488c      	ldr	r0, [pc, #560]	; (8001d18 <main+0x420>)
 8001ae8:	f7ff fb12 	bl	8001110 <FilterLowPassInit>
	FilterLowPassInit(&lpf_velocity, 0.02);
 8001aec:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8001d1c <main+0x424>
 8001af0:	488b      	ldr	r0, [pc, #556]	; (8001d20 <main+0x428>)
 8001af2:	f7ff fb0d 	bl	8001110 <FilterLowPassInit>
	uint32_t TimerHeartBeat = HAL_GetTick();
 8001af6:	f001 f9a5 	bl	8002e44 <HAL_GetTick>
 8001afa:	4682      	mov	sl, r0
	uint32_t TimerControl = HAL_GetTick();
 8001afc:	f001 f9a2 	bl	8002e44 <HAL_GetTick>
 8001b00:	900e      	str	r0, [sp, #56]	; 0x38
	uint32_t TimerTempCoils = HAL_GetTick();
 8001b02:	f001 f99f 	bl	8002e44 <HAL_GetTick>
 8001b06:	4604      	mov	r4, r0
	uint32_t TimerShowTemp = HAL_GetTick();
 8001b08:	f001 f99c 	bl	8002e44 <HAL_GetTick>
 8001b0c:	900b      	str	r0, [sp, #44]	; 0x2c
	uint32_t TimerUCSample = HAL_GetTick();
 8001b0e:	f001 f999 	bl	8002e44 <HAL_GetTick>
	uint8_t x_calculate = 0;
 8001b12:	9511      	str	r5, [sp, #68]	; 0x44
	uint32_t TimerUCSample = HAL_GetTick();
 8001b14:	4683      	mov	fp, r0
	uint32_t TimerVelocity = HAL_GetTick();
 8001b16:	f001 f995 	bl	8002e44 <HAL_GetTick>
	HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4981      	ldr	r1, [pc, #516]	; (8001d24 <main+0x42c>)
	uint32_t TimerVelocity = HAL_GetTick();
 8001b1e:	4680      	mov	r8, r0
	HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 8001b20:	4881      	ldr	r0, [pc, #516]	; (8001d28 <main+0x430>)
 8001b22:	f004 fda1 	bl	8006668 <HAL_UART_Receive_IT>
	int16_t coil1_PWM = 0, coil2_PWM = 0;
 8001b26:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
	uint8_t wait_or_get = 1;
 8001b2a:	2201      	movs	r2, #1
	uint8_t send_once = 0;
 8001b2c:	950c      	str	r5, [sp, #48]	; 0x30
	uint8_t wait_or_get = 1;
 8001b2e:	9210      	str	r2, [sp, #64]	; 0x40
		if ((HAL_GetTick() - TimerUCSample) > UC_SAMPLE_PERIOD)
 8001b30:	f001 f988 	bl	8002e44 <HAL_GetTick>
 8001b34:	eba0 000b 	sub.w	r0, r0, fp
 8001b38:	2801      	cmp	r0, #1
 8001b3a:	d956      	bls.n	8001bea <main+0x2f2>
			start1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4648      	mov	r0, r9
 8001b40:	f004 f898 	bl	8005c74 <HAL_TIM_ReadCapturedValue>
 8001b44:	4e79      	ldr	r6, [pc, #484]	; (8001d2c <main+0x434>)
			stop1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001b46:	2104      	movs	r1, #4
			start1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001b48:	6030      	str	r0, [r6, #0]
			stop1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001b4a:	4648      	mov	r0, r9
 8001b4c:	f004 f892 	bl	8005c74 <HAL_TIM_ReadCapturedValue>
 8001b50:	4b77      	ldr	r3, [pc, #476]	; (8001d30 <main+0x438>)
			uint16_t input1 = FilterMedianUpdate(&filter_median, (stop1 - start1));
 8001b52:	6831      	ldr	r1, [r6, #0]
			stop1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001b54:	6018      	str	r0, [r3, #0]
			uint16_t input1 = FilterMedianUpdate(&filter_median, (stop1 - start1));
 8001b56:	1a41      	subs	r1, r0, r1
 8001b58:	486c      	ldr	r0, [pc, #432]	; (8001d0c <main+0x414>)
 8001b5a:	f7ff f9ef 	bl	8000f3c <FilterMedianUpdate>
			x = FilterLowPassUpdate(&lpf_position, input1) * sonic_speed;
 8001b5e:	b281      	uxth	r1, r0
 8001b60:	486d      	ldr	r0, [pc, #436]	; (8001d18 <main+0x420>)
 8001b62:	f7ff fadb 	bl	800111c <FilterLowPassUpdate>
 8001b66:	4b65      	ldr	r3, [pc, #404]	; (8001cfc <main+0x404>)
 8001b68:	ee07 0a90 	vmov	s15, r0
 8001b6c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <main+0x43c>)
 8001b76:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001b7a:	ed83 8a00 	vstr	s16, [r3]
			velocity = abs(FilterLowPassUpdate(&lpf_velocity, (x - x_prev) / ((HAL_GetTick() - TimerUCSample) * 0.001)));
 8001b7e:	f001 f961 	bl	8002e44 <HAL_GetTick>
 8001b82:	ee78 7a49 	vsub.f32	s15, s16, s18
 8001b86:	4607      	mov	r7, r0
 8001b88:	ee17 0a90 	vmov	r0, s15
 8001b8c:	f7fe fcdc 	bl	8000548 <__aeabi_f2d>
 8001b90:	4b69      	ldr	r3, [pc, #420]	; (8001d38 <main+0x440>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f7fe fd30 	bl	80005f8 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	eba7 000b 	sub.w	r0, r7, fp
 8001b9e:	4616      	mov	r6, r2
 8001ba0:	460f      	mov	r7, r1
 8001ba2:	f7fe fcaf 	bl	8000504 <__aeabi_ui2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4630      	mov	r0, r6
 8001bac:	4639      	mov	r1, r7
 8001bae:	f7fe fe4d 	bl	800084c <__aeabi_ddiv>
 8001bb2:	f7fe ffd1 	bl	8000b58 <__aeabi_d2iz>
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	4859      	ldr	r0, [pc, #356]	; (8001d20 <main+0x428>)
 8001bba:	f7ff faaf 	bl	800111c <FilterLowPassUpdate>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	bfb8      	it	lt
 8001bc2:	4240      	neglt	r0, r0
 8001bc4:	ee07 0a90 	vmov	s15, r0
			if (start_message > 1000)
 8001bc8:	4a5c      	ldr	r2, [pc, #368]	; (8001d3c <main+0x444>)
			velocity = abs(FilterLowPassUpdate(&lpf_velocity, (x - x_prev) / ((HAL_GetTick() - TimerUCSample) * 0.001)));
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <main+0x448>)
 8001bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
			if (start_message > 1000)
 8001bd4:	8813      	ldrh	r3, [r2, #0]
 8001bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
				start_message++;
 8001bda:	bf95      	itete	ls
 8001bdc:	3301      	addls	r3, #1
				x_calculate = 1;
 8001bde:	2301      	movhi	r3, #1
				start_message++;
 8001be0:	8013      	strhls	r3, [r2, #0]
				x_calculate = 1;
 8001be2:	9311      	strhi	r3, [sp, #68]	; 0x44
			TimerUCSample = HAL_GetTick();
 8001be4:	f001 f92e 	bl	8002e44 <HAL_GetTick>
 8001be8:	4683      	mov	fp, r0
		if ((HAL_GetTick() - TimerVelocity) > VELOCITY_PERIOD)
 8001bea:	f001 f92b 	bl	8002e44 <HAL_GetTick>
 8001bee:	eba0 0008 	sub.w	r0, r0, r8
 8001bf2:	2802      	cmp	r0, #2
 8001bf4:	f200 80fd 	bhi.w	8001df2 <main+0x4fa>
		if (!send_once && !critical_temp && x_calculate)
 8001bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001bfa:	b923      	cbnz	r3, 8001c06 <main+0x30e>
 8001bfc:	b91d      	cbnz	r5, 8001c06 <main+0x30e>
 8001bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 812b 	bne.w	8001e5c <main+0x564>
		if (((HAL_GetTick() - TimerControl) > CONTROL_TIMER_PERIOD)
 8001c06:	f001 f91d 	bl	8002e44 <HAL_GetTick>
 8001c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c0c:	1ac0      	subs	r0, r0, r3
 8001c0e:	2802      	cmp	r0, #2
 8001c10:	f240 80c4 	bls.w	8001d9c <main+0x4a4>
				&& input_done && !critical_temp)
 8001c14:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <main+0x44c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80bf 	beq.w	8001d9c <main+0x4a4>
 8001c1e:	2d00      	cmp	r5, #0
 8001c20:	f040 80bc 	bne.w	8001d9c <main+0x4a4>
			if (abs(xset - x) >= POSITION_TOLERANCE)
 8001c24:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <main+0x450>)
 8001c26:	edd3 6a00 	vldr	s13, [r3]
 8001c2a:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <main+0x43c>)
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8001c34:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3c:	ee17 3a90 	vmov	r3, s15
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bfb8      	it	lt
 8001c44:	425b      	neglt	r3, r3
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	f2c0 8121 	blt.w	8001e9c <main+0x5a4>
				if (x > xset)
 8001c5a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	f140 8117 	bpl.w	8001e94 <main+0x59c>
							(ADC_HALL[0] - ADC_OFFSET_HALL));
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <main+0x3e0>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
	if (HALL < DEAD_ZONE && HALL > -DEAD_ZONE)
 8001c6a:	f46f 61c1 	mvn.w	r1, #1544	; 0x608
							(ADC_HALL[0] - ADC_OFFSET_HALL));
 8001c6e:	b29b      	uxth	r3, r3
	if (HALL < DEAD_ZONE && HALL > -DEAD_ZONE)
 8001c70:	1859      	adds	r1, r3, r1
 8001c72:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001c76:	4291      	cmp	r1, r2
 8001c78:	f240 817b 	bls.w	8001f72 <main+0x67a>
	else if (HALL > DEAD_ZONE)
 8001c7c:	f5b3 6f1f 	cmp.w	r3, #2544	; 0x9f0
 8001c80:	f240 817d 	bls.w	8001f7e <main+0x686>
 8001c84:	235a      	movs	r3, #90	; 0x5a
 8001c86:	9312      	str	r3, [sp, #72]	; 0x48
		return MAX_PWM;
 8001c88:	461e      	mov	r6, r3
							-(ADC_HALL[2] - ADC_OFFSET_HALL));
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <main+0x3e0>)
 8001c8c:	889b      	ldrh	r3, [r3, #4]
 8001c8e:	b29b      	uxth	r3, r3
	if (HALL < DEAD_ZONE && HALL > -DEAD_ZONE)
 8001c90:	f5c3 621e 	rsb	r2, r3, #2528	; 0x9e0
 8001c94:	320f      	adds	r2, #15
 8001c96:	f240 31e6 	movw	r1, #998	; 0x3e6
 8001c9a:	428a      	cmp	r2, r1
 8001c9c:	f240 8141 	bls.w	8001f22 <main+0x62a>
							-(ADC_HALL[2] - ADC_OFFSET_HALL));
 8001ca0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001ca4:	3304      	adds	r3, #4
	else if (HALL > DEAD_ZONE)
 8001ca6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001caa:	f340 815e 	ble.w	8001f6a <main+0x672>
 8001cae:	275a      	movs	r7, #90	; 0x5a
		return MAX_PWM;
 8001cb0:	9713      	str	r7, [sp, #76]	; 0x4c
				HBridgeControl(&coil1, PID_output * coil1_PWM);
 8001cb2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001cb4:	a814      	add	r0, sp, #80	; 0x50
 8001cb6:	f7ff fc77 	bl	80015a8 <HBridgeControl>
				HBridgeControl(&coil2, PID_output * coil2_PWM);
 8001cba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001cbc:	a818      	add	r0, sp, #96	; 0x60
 8001cbe:	f7ff fc73 	bl	80015a8 <HBridgeControl>
						sprintf((char*) Message,
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <main+0x43c>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	f7fe fc3f 	bl	8000548 <__aeabi_f2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001cd2:	e03b      	b.n	8001d4c <main+0x454>
 8001cd4:	20000258 	.word	0x20000258
 8001cd8:	200003a4 	.word	0x200003a4
 8001cdc:	200001f4 	.word	0x200001f4
 8001ce0:	200003a0 	.word	0x200003a0
 8001ce4:	200004d8 	.word	0x200004d8
 8001ce8:	20000524 	.word	0x20000524
 8001cec:	00000000 	.word	0x00000000
 8001cf0:	20000720 	.word	0x20000720
 8001cf4:	3d19999a 	.word	0x3d19999a
 8001cf8:	3851b717 	.word	0x3851b717
 8001cfc:	20000468 	.word	0x20000468
 8001d00:	2000048c 	.word	0x2000048c
 8001d04:	3d800000 	.word	0x3d800000
 8001d08:	43a5e666 	.word	0x43a5e666
 8001d0c:	200003c0 	.word	0x200003c0
 8001d10:	20000404 	.word	0x20000404
 8001d14:	3c23d70a 	.word	0x3c23d70a
 8001d18:	20000458 	.word	0x20000458
 8001d1c:	3ca3d70a 	.word	0x3ca3d70a
 8001d20:	20000460 	.word	0x20000460
 8001d24:	20000478 	.word	0x20000478
 8001d28:	20000604 	.word	0x20000604
 8001d2c:	2000046c 	.word	0x2000046c
 8001d30:	20000474 	.word	0x20000474
 8001d34:	20000480 	.word	0x20000480
 8001d38:	408f4000 	.word	0x408f4000
 8001d3c:	20000470 	.word	0x20000470
 8001d40:	2000047c 	.word	0x2000047c
 8001d44:	20000448 	.word	0x20000448
 8001d48:	20000484 	.word	0x20000484
 8001d4c:	4b91      	ldr	r3, [pc, #580]	; (8001f94 <main+0x69c>)
 8001d4e:	6898      	ldr	r0, [r3, #8]
 8001d50:	f7fe fbfa 	bl	8000548 <__aeabi_f2d>
 8001d54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001d58:	4b8e      	ldr	r3, [pc, #568]	; (8001f94 <main+0x69c>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	f7fe fbf4 	bl	8000548 <__aeabi_f2d>
 8001d60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001d64:	4b8c      	ldr	r3, [pc, #560]	; (8001f98 <main+0x6a0>)
 8001d66:	6858      	ldr	r0, [r3, #4]
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001d70:	4b89      	ldr	r3, [pc, #548]	; (8001f98 <main+0x6a0>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	f7fe fbe8 	bl	8000548 <__aeabi_f2d>
 8001d78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d80:	e9cd 6700 	strd	r6, r7, [sp]
 8001d84:	4985      	ldr	r1, [pc, #532]	; (8001f9c <main+0x6a4>)
 8001d86:	a826      	add	r0, sp, #152	; 0x98
 8001d88:	f006 f90e 	bl	8007fa8 <siprintf>
				HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8001d8c:	a926      	add	r1, sp, #152	; 0x98
 8001d8e:	b2c2      	uxtb	r2, r0
 8001d90:	4883      	ldr	r0, [pc, #524]	; (8001fa0 <main+0x6a8>)
 8001d92:	f004 fceb 	bl	800676c <HAL_UART_Transmit_DMA>
			TimerControl = HAL_GetTick();
 8001d96:	f001 f855 	bl	8002e44 <HAL_GetTick>
 8001d9a:	900e      	str	r0, [sp, #56]	; 0x38
		if ((HAL_GetTick() - TimerTempCoils) > TEMP_COILS_PERIOD)
 8001d9c:	f001 f852 	bl	8002e44 <HAL_GetTick>
 8001da0:	f240 23ed 	movw	r3, #749	; 0x2ed
 8001da4:	1b00      	subs	r0, r0, r4
 8001da6:	4298      	cmp	r0, r3
 8001da8:	d909      	bls.n	8001dbe <main+0x4c6>
			if (wait_or_get)
 8001daa:	9b10      	ldr	r3, [sp, #64]	; 0x40
				ds18b20_start_measure(ds[0]);
 8001dac:	a81c      	add	r0, sp, #112	; 0x70
			if (wait_or_get)
 8001dae:	b33b      	cbz	r3, 8001e00 <main+0x508>
				ds18b20_start_measure(ds[0]);
 8001db0:	f7ff fb46 	bl	8001440 <ds18b20_start_measure>
				wait_or_get = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	9310      	str	r3, [sp, #64]	; 0x40
			TimerTempCoils = HAL_GetTick();
 8001db8:	f001 f844 	bl	8002e44 <HAL_GetTick>
 8001dbc:	4604      	mov	r4, r0
		if (((HAL_GetTick() - TimerShowTemp) > SHOW_TEMP) && critical_temp)
 8001dbe:	f001 f841 	bl	8002e44 <HAL_GetTick>
 8001dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001dc4:	1ac0      	subs	r0, r0, r3
 8001dc6:	f242 7310 	movw	r3, #10000	; 0x2710
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	d900      	bls.n	8001dd0 <main+0x4d8>
 8001dce:	bb35      	cbnz	r5, 8001e1e <main+0x526>
		if ((HAL_GetTick() - TimerHeartBeat) > HEART_BEAT_TIMER_PERIOD)
 8001dd0:	f001 f838 	bl	8002e44 <HAL_GetTick>
 8001dd4:	eba0 000a 	sub.w	r0, r0, sl
 8001dd8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001ddc:	f67f aea8 	bls.w	8001b30 <main+0x238>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001de0:	2120      	movs	r1, #32
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de6:	f002 f9ad 	bl	8004144 <HAL_GPIO_TogglePin>
			TimerHeartBeat = HAL_GetTick();
 8001dea:	f001 f82b 	bl	8002e44 <HAL_GetTick>
 8001dee:	4682      	mov	sl, r0
 8001df0:	e69e      	b.n	8001b30 <main+0x238>
			x_prev = x;
 8001df2:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <main+0x6ac>)
 8001df4:	ed93 9a00 	vldr	s18, [r3]
			TimerVelocity = HAL_GetTick();
 8001df8:	f001 f824 	bl	8002e44 <HAL_GetTick>
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	e6fb      	b.n	8001bf8 <main+0x300>
				temp_coils = ds18b20_get_temp(ds[0]) / 16.0f;
 8001e00:	f7ff fb3c 	bl	800147c <ds18b20_get_temp>
 8001e04:	ee07 0a90 	vmov	s15, r0
 8001e08:	eef8 8ae7 	vcvt.f32.s32	s17, s15
				if (temp_coils > 45.0f && !critical_temp)
 8001e0c:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
				temp_coils = ds18b20_get_temp(ds[0]) / 16.0f;
 8001e10:	ee68 8aa9 	vmul.f32	s17, s17, s19
				if (temp_coils > 45.0f && !critical_temp)
 8001e14:	dd1d      	ble.n	8001e52 <main+0x55a>
 8001e16:	2d00      	cmp	r5, #0
 8001e18:	d04f      	beq.n	8001eba <main+0x5c2>
				wait_or_get = 1;
 8001e1a:	9510      	str	r5, [sp, #64]	; 0x40
 8001e1c:	e7cc      	b.n	8001db8 <main+0x4c0>
			Length = sprintf((char*) Message, "Actual T: %.1f\n\r", temp_coils);
 8001e1e:	ee18 0a90 	vmov	r0, s17
 8001e22:	f7fe fb91 	bl	8000548 <__aeabi_f2d>
 8001e26:	4606      	mov	r6, r0
 8001e28:	460f      	mov	r7, r1
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	495e      	ldr	r1, [pc, #376]	; (8001fa8 <main+0x6b0>)
 8001e2e:	4632      	mov	r2, r6
 8001e30:	a826      	add	r0, sp, #152	; 0x98
 8001e32:	f006 f8b9 	bl	8007fa8 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8001e36:	a926      	add	r1, sp, #152	; 0x98
 8001e38:	b2c2      	uxtb	r2, r0
 8001e3a:	4859      	ldr	r0, [pc, #356]	; (8001fa0 <main+0x6a8>)
 8001e3c:	f004 fc96 	bl	800676c <HAL_UART_Transmit_DMA>
			printf("Actual T: %.1f\n\r", temp_coils);
 8001e40:	4632      	mov	r2, r6
 8001e42:	463b      	mov	r3, r7
 8001e44:	4858      	ldr	r0, [pc, #352]	; (8001fa8 <main+0x6b0>)
 8001e46:	f006 f89d 	bl	8007f84 <iprintf>
			TimerShowTemp = HAL_GetTick();
 8001e4a:	f000 fffb 	bl	8002e44 <HAL_GetTick>
 8001e4e:	900b      	str	r0, [sp, #44]	; 0x2c
 8001e50:	e7be      	b.n	8001dd0 <main+0x4d8>
				else if (critical_temp && temp_coils < 35.0f)
 8001e52:	2d00      	cmp	r5, #0
 8001e54:	d14b      	bne.n	8001eee <main+0x5f6>
				wait_or_get = 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	9310      	str	r3, [sp, #64]	; 0x40
 8001e5a:	e7ad      	b.n	8001db8 <main+0x4c0>
			Length = sprintf((char*) Message,
 8001e5c:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <main+0x6ac>)
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	f7fe fb72 	bl	8000548 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	ee18 0a90 	vmov	r0, s17
 8001e6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001e70:	f7fe fb6a 	bl	8000548 <__aeabi_f2d>
 8001e74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001e78:	e9cd 0100 	strd	r0, r1, [sp]
 8001e7c:	494b      	ldr	r1, [pc, #300]	; (8001fac <main+0x6b4>)
 8001e7e:	a826      	add	r0, sp, #152	; 0x98
 8001e80:	f006 f892 	bl	8007fa8 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8001e84:	a926      	add	r1, sp, #152	; 0x98
 8001e86:	b2c2      	uxtb	r2, r0
 8001e88:	4845      	ldr	r0, [pc, #276]	; (8001fa0 <main+0x6a8>)
 8001e8a:	f004 fc6f 	bl	800676c <HAL_UART_Transmit_DMA>
			send_once = 1;
 8001e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001e90:	930c      	str	r3, [sp, #48]	; 0x30
 8001e92:	e6b8      	b.n	8001c06 <main+0x30e>
				else if (x < xset)
 8001e94:	dc48      	bgt.n	8001f28 <main+0x630>
						sprintf((char*) Message,
 8001e96:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8001e9a:	e70a      	b.n	8001cb2 <main+0x3ba>
				PIDReset(&pid);
 8001e9c:	a820      	add	r0, sp, #128	; 0x80
 8001e9e:	f7ff f961 	bl	8001164 <PIDReset>
				HBridgeControl(&coil1, 0);
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	a814      	add	r0, sp, #80	; 0x50
 8001ea6:	f7ff fb7f 	bl	80015a8 <HBridgeControl>
				HBridgeControl(&coil2, 0);
 8001eaa:	4629      	mov	r1, r5
 8001eac:	a818      	add	r0, sp, #96	; 0x60
 8001eae:	f7ff fb7b 	bl	80015a8 <HBridgeControl>
				input_done = 0;
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <main+0x6b8>)
				send_once = 0;
 8001eb4:	950c      	str	r5, [sp, #48]	; 0x30
				input_done = 0;
 8001eb6:	701d      	strb	r5, [r3, #0]
				send_once = 0;
 8001eb8:	e76d      	b.n	8001d96 <main+0x49e>
					HBridgeControl(&coil1, 0);
 8001eba:	4629      	mov	r1, r5
 8001ebc:	a814      	add	r0, sp, #80	; 0x50
 8001ebe:	f7ff fb73 	bl	80015a8 <HBridgeControl>
					HBridgeControl(&coil2, 0);
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	a818      	add	r0, sp, #96	; 0x60
 8001ec6:	f7ff fb6f 	bl	80015a8 <HBridgeControl>
					Length = sprintf((char*) Message,
 8001eca:	ee18 0a90 	vmov	r0, s17
 8001ece:	f7fe fb3b 	bl	8000548 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	a826      	add	r0, sp, #152	; 0x98
 8001ed8:	4936      	ldr	r1, [pc, #216]	; (8001fb4 <main+0x6bc>)
 8001eda:	f006 f865 	bl	8007fa8 <siprintf>
					critical_temp = 1;
 8001ede:	2501      	movs	r5, #1
					HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8001ee0:	b2c2      	uxtb	r2, r0
 8001ee2:	a926      	add	r1, sp, #152	; 0x98
 8001ee4:	482e      	ldr	r0, [pc, #184]	; (8001fa0 <main+0x6a8>)
 8001ee6:	f004 fc41 	bl	800676c <HAL_UART_Transmit_DMA>
				wait_or_get = 1;
 8001eea:	9510      	str	r5, [sp, #64]	; 0x40
					HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8001eec:	e764      	b.n	8001db8 <main+0x4c0>
				else if (critical_temp && temp_coils < 35.0f)
 8001eee:	f5b0 7f0c 	cmp.w	r0, #560	; 0x230
 8001ef2:	da92      	bge.n	8001e1a <main+0x522>
					Length = sprintf((char*) Message,
 8001ef4:	4e30      	ldr	r6, [pc, #192]	; (8001fb8 <main+0x6c0>)
					send_once = 0;
 8001ef6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001ef8:	970c      	str	r7, [sp, #48]	; 0x30
					Length = sprintf((char*) Message,
 8001efa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001efc:	ac26      	add	r4, sp, #152	; 0x98
 8001efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001f08:	c403      	stmia	r4!, {r0, r1}
					HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8001f0a:	4825      	ldr	r0, [pc, #148]	; (8001fa0 <main+0x6a8>)
					Length = sprintf((char*) Message,
 8001f0c:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit_DMA(&huart2, Message, Length);
 8001f0e:	a926      	add	r1, sp, #152	; 0x98
 8001f10:	2229      	movs	r2, #41	; 0x29
 8001f12:	f004 fc2b 	bl	800676c <HAL_UART_Transmit_DMA>
					input_done = 0;
 8001f16:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <main+0x6b8>)
 8001f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001f1a:	7013      	strb	r3, [r2, #0]
				wait_or_get = 1;
 8001f1c:	9510      	str	r5, [sp, #64]	; 0x40
					critical_temp = 0;
 8001f1e:	463d      	mov	r5, r7
 8001f20:	e74a      	b.n	8001db8 <main+0x4c0>
 8001f22:	2700      	movs	r7, #0
		return 0;
 8001f24:	9713      	str	r7, [sp, #76]	; 0x4c
 8001f26:	e6c4      	b.n	8001cb2 <main+0x3ba>
							-(ADC_HALL[0] - ADC_OFFSET_HALL));
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <main+0x6c4>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
	if (HALL < DEAD_ZONE && HALL > -DEAD_ZONE)
 8001f2e:	f5c3 621e 	rsb	r2, r3, #2528	; 0x9e0
 8001f32:	320f      	adds	r2, #15
 8001f34:	f240 31e6 	movw	r1, #998	; 0x3e6
 8001f38:	428a      	cmp	r2, r1
 8001f3a:	d91d      	bls.n	8001f78 <main+0x680>
							-(ADC_HALL[0] - ADC_OFFSET_HALL));
 8001f3c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001f40:	3304      	adds	r3, #4
	else if (HALL > DEAD_ZONE)
 8001f42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f46:	dd1f      	ble.n	8001f88 <main+0x690>
 8001f48:	235a      	movs	r3, #90	; 0x5a
 8001f4a:	9312      	str	r3, [sp, #72]	; 0x48
		return MAX_PWM;
 8001f4c:	461e      	mov	r6, r3
							(ADC_HALL[2] - ADC_OFFSET_HALL));
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <main+0x6c4>)
 8001f50:	889b      	ldrh	r3, [r3, #4]
	if (HALL < DEAD_ZONE && HALL > -DEAD_ZONE)
 8001f52:	f46f 62c1 	mvn.w	r2, #1544	; 0x608
							(ADC_HALL[2] - ADC_OFFSET_HALL));
 8001f56:	b29b      	uxth	r3, r3
	if (HALL < DEAD_ZONE && HALL > -DEAD_ZONE)
 8001f58:	1899      	adds	r1, r3, r2
 8001f5a:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001f5e:	4291      	cmp	r1, r2
 8001f60:	d9df      	bls.n	8001f22 <main+0x62a>
	else if (HALL > DEAD_ZONE)
 8001f62:	f5b3 6f1f 	cmp.w	r3, #2544	; 0x9f0
 8001f66:	f63f aea2 	bhi.w	8001cae <main+0x3b6>
 8001f6a:	f06f 0759 	mvn.w	r7, #89	; 0x59
		return -MAX_PWM;
 8001f6e:	9713      	str	r7, [sp, #76]	; 0x4c
 8001f70:	e69f      	b.n	8001cb2 <main+0x3ba>
 8001f72:	462e      	mov	r6, r5
		return 0;
 8001f74:	9512      	str	r5, [sp, #72]	; 0x48
 8001f76:	e688      	b.n	8001c8a <main+0x392>
 8001f78:	462e      	mov	r6, r5
 8001f7a:	9512      	str	r5, [sp, #72]	; 0x48
 8001f7c:	e7e7      	b.n	8001f4e <main+0x656>
	else if (HALL > DEAD_ZONE)
 8001f7e:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8001f82:	9312      	str	r3, [sp, #72]	; 0x48
		return -MAX_PWM;
 8001f84:	461e      	mov	r6, r3
 8001f86:	e680      	b.n	8001c8a <main+0x392>
	else if (HALL > DEAD_ZONE)
 8001f88:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8001f8c:	9312      	str	r3, [sp, #72]	; 0x48
		return -MAX_PWM;
 8001f8e:	461e      	mov	r6, r3
 8001f90:	e7dd      	b.n	8001f4e <main+0x656>
 8001f92:	bf00      	nop
 8001f94:	200003b4 	.word	0x200003b4
 8001f98:	200003ac 	.word	0x200003ac
 8001f9c:	0800a2a8 	.word	0x0800a2a8
 8001fa0:	20000604 	.word	0x20000604
 8001fa4:	20000480 	.word	0x20000480
 8001fa8:	0800a33c 	.word	0x0800a33c
 8001fac:	0800a280 	.word	0x0800a280
 8001fb0:	20000448 	.word	0x20000448
 8001fb4:	0800a2e8 	.word	0x0800a2e8
 8001fb8:	0800a310 	.word	0x0800a310
 8001fbc:	200003a4 	.word	0x200003a4

08001fc0 <HAL_UART_RxCpltCallback>:
{
 8001fc0:	b538      	push	{r3, r4, r5, lr}
	if (huart == &huart2)
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_UART_RxCpltCallback+0x64>)
 8001fc4:	4283      	cmp	r3, r0
 8001fc6:	d000      	beq.n	8001fca <HAL_UART_RxCpltCallback+0xa>
}
 8001fc8:	bd38      	pop	{r3, r4, r5, pc}
		LineAppend(uart_rx_buffer);
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_UART_RxCpltCallback+0x68>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
	if (value == '\r' || value == '\n')
 8001fce:	2b0d      	cmp	r3, #13
 8001fd0:	d012      	beq.n	8001ff8 <HAL_UART_RxCpltCallback+0x38>
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	d010      	beq.n	8001ff8 <HAL_UART_RxCpltCallback+0x38>
		if (line_length >= LINE_MAX_LENGTH)
 8001fd6:	4915      	ldr	r1, [pc, #84]	; (800202c <HAL_UART_RxCpltCallback+0x6c>)
		line_buffer[line_length++] = value;
 8001fd8:	4c15      	ldr	r4, [pc, #84]	; (8002030 <HAL_UART_RxCpltCallback+0x70>)
		if (line_length >= LINE_MAX_LENGTH)
 8001fda:	680a      	ldr	r2, [r1, #0]
 8001fdc:	2a05      	cmp	r2, #5
 8001fde:	bf8a      	itet	hi
 8001fe0:	2200      	movhi	r2, #0
		line_buffer[line_length++] = value;
 8001fe2:	1c50      	addls	r0, r2, #1
 8001fe4:	2001      	movhi	r0, #1
 8001fe6:	54a3      	strb	r3, [r4, r2]
 8001fe8:	6008      	str	r0, [r1, #0]
}
 8001fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(huart, &uart_rx_buffer, 1);
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <HAL_UART_RxCpltCallback+0x68>)
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <HAL_UART_RxCpltCallback+0x64>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f004 bb38 	b.w	8006668 <HAL_UART_Receive_IT>
		if (line_length > 0)
 8001ff8:	4c0c      	ldr	r4, [pc, #48]	; (800202c <HAL_UART_RxCpltCallback+0x6c>)
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f4      	beq.n	8001fea <HAL_UART_RxCpltCallback+0x2a>
			line_buffer[line_length] = '\0';
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <HAL_UART_RxCpltCallback+0x70>)
 8002002:	2500      	movs	r5, #0
 8002004:	54c5      	strb	r5, [r0, r3]
			xset = atoi(line_buffer);
 8002006:	f005 fa05 	bl	8007414 <atoi>
 800200a:	ee07 0a90 	vmov	s15, r0
 800200e:	4909      	ldr	r1, [pc, #36]	; (8002034 <HAL_UART_RxCpltCallback+0x74>)
			input_done = 1;
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_UART_RxCpltCallback+0x78>)
			line_length = 0;
 8002012:	6025      	str	r5, [r4, #0]
			xset = atoi(line_buffer);
 8002014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			input_done = 1;
 8002018:	2201      	movs	r2, #1
			xset = atoi(line_buffer);
 800201a:	edc1 7a00 	vstr	s15, [r1]
			input_done = 1;
 800201e:	701a      	strb	r2, [r3, #0]
			line_length = 0;
 8002020:	e7e3      	b.n	8001fea <HAL_UART_RxCpltCallback+0x2a>
 8002022:	bf00      	nop
 8002024:	20000604 	.word	0x20000604
 8002028:	20000478 	.word	0x20000478
 800202c:	20000454 	.word	0x20000454
 8002030:	2000044c 	.word	0x2000044c
 8002034:	20000484 	.word	0x20000484
 8002038:	20000448 	.word	0x20000448

0800203c <HAL_ADC_ConvCpltCallback>:
}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <Error_Handler>:
 8002040:	b672      	cpsid	i
	while (1)
 8002042:	e7fe      	b.n	8002042 <Error_Handler+0x2>

08002044 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_MspInit+0x2c>)
 8002046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	661a      	str	r2, [r3, #96]	; 0x60
 800204e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002050:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	f002 0201 	and.w	r2, r2, #1
 8002056:	9200      	str	r2, [sp, #0]
 8002058:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002060:	659a      	str	r2, [r3, #88]	; 0x58
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	b002      	add	sp, #8
 800206e:	4770      	bx	lr
 8002070:	40021000 	.word	0x40021000

08002074 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <NMI_Handler>
 8002076:	bf00      	nop

08002078 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <HardFault_Handler>
 800207a:	bf00      	nop

0800207c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <MemManage_Handler>
 800207e:	bf00      	nop

08002080 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <BusFault_Handler>
 8002082:	bf00      	nop

08002084 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler>
 8002086:	bf00      	nop

08002088 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <DebugMon_Handler>:
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <PendSV_Handler>:
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop

08002094 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002094:	f000 beca 	b.w	8002e2c <HAL_IncTick>

08002098 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002098:	4801      	ldr	r0, [pc, #4]	; (80020a0 <DMA1_Channel1_IRQHandler+0x8>)
 800209a:	f001 befd 	b.w	8003e98 <HAL_DMA_IRQHandler>
 800209e:	bf00      	nop
 80020a0:	200002bc 	.word	0x200002bc

080020a4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80020a4:	4801      	ldr	r0, [pc, #4]	; (80020ac <DMA1_Channel3_IRQHandler+0x8>)
 80020a6:	f001 bef7 	b.w	8003e98 <HAL_DMA_IRQHandler>
 80020aa:	bf00      	nop
 80020ac:	20000304 	.word	0x20000304

080020b0 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020b0:	4801      	ldr	r0, [pc, #4]	; (80020b8 <DMA1_Channel7_IRQHandler+0x8>)
 80020b2:	f001 bef1 	b.w	8003e98 <HAL_DMA_IRQHandler>
 80020b6:	bf00      	nop
 80020b8:	200005bc 	.word	0x200005bc

080020bc <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020bc:	4801      	ldr	r0, [pc, #4]	; (80020c4 <ADC1_2_IRQHandler+0x8>)
 80020be:	f000 bfc9 	b.w	8003054 <HAL_ADC_IRQHandler>
 80020c2:	bf00      	nop
 80020c4:	200001f4 	.word	0x200001f4

080020c8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020c8:	4801      	ldr	r0, [pc, #4]	; (80020d0 <TIM3_IRQHandler+0x8>)
 80020ca:	f003 bdf7 	b.w	8005cbc <HAL_TIM_IRQHandler>
 80020ce:	bf00      	nop
 80020d0:	200004d8 	.word	0x200004d8

080020d4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020d4:	4801      	ldr	r0, [pc, #4]	; (80020dc <TIM4_IRQHandler+0x8>)
 80020d6:	f003 bdf1 	b.w	8005cbc <HAL_TIM_IRQHandler>
 80020da:	bf00      	nop
 80020dc:	20000524 	.word	0x20000524

080020e0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020e0:	4801      	ldr	r0, [pc, #4]	; (80020e8 <USART2_IRQHandler+0x8>)
 80020e2:	f004 bc19 	b.w	8006918 <HAL_UART_IRQHandler>
 80020e6:	bf00      	nop
 80020e8:	20000604 	.word	0x20000604

080020ec <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80020ec:	4801      	ldr	r0, [pc, #4]	; (80020f4 <ADC3_IRQHandler+0x8>)
 80020ee:	f000 bfb1 	b.w	8003054 <HAL_ADC_IRQHandler>
 80020f2:	bf00      	nop
 80020f4:	20000258 	.word	0x20000258

080020f8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80020f8:	2001      	movs	r0, #1
 80020fa:	4770      	bx	lr

080020fc <_kill>:

int _kill(int pid, int sig)
{
 80020fc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020fe:	f006 f809 	bl	8008114 <__errno>
 8002102:	2316      	movs	r3, #22
 8002104:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002106:	f04f 30ff 	mov.w	r0, #4294967295
 800210a:	bd08      	pop	{r3, pc}

0800210c <_exit>:

void _exit (int status)
{
 800210c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800210e:	f006 f801 	bl	8008114 <__errno>
 8002112:	2316      	movs	r3, #22
 8002114:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002116:	e7fe      	b.n	8002116 <_exit+0xa>

08002118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002118:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	1e16      	subs	r6, r2, #0
 800211c:	dd07      	ble.n	800212e <_read+0x16>
 800211e:	460c      	mov	r4, r1
 8002120:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002122:	f3af 8000 	nop.w
 8002126:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	42a5      	cmp	r5, r4
 800212c:	d1f9      	bne.n	8002122 <_read+0xa>
  }

  return len;
}
 800212e:	4630      	mov	r0, r6
 8002130:	bd70      	pop	{r4, r5, r6, pc}
 8002132:	bf00      	nop

08002134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002134:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	1e16      	subs	r6, r2, #0
 8002138:	dd07      	ble.n	800214a <_write+0x16>
 800213a:	460c      	mov	r4, r1
 800213c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800213e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002142:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	42ac      	cmp	r4, r5
 8002148:	d1f9      	bne.n	800213e <_write+0xa>
  }
  return len;
}
 800214a:	4630      	mov	r0, r6
 800214c:	bd70      	pop	{r4, r5, r6, pc}
 800214e:	bf00      	nop

08002150 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop

08002158 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800215c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800215e:	2000      	movs	r0, #0
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002164:	2001      	movs	r0, #1
 8002166:	4770      	bx	lr

08002168 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002168:	2000      	movs	r0, #0
 800216a:	4770      	bx	lr

0800216c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002170:	680b      	ldr	r3, [r1, #0]
{
 8002172:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4c0c      	ldr	r4, [pc, #48]	; (80021a8 <_sbrk+0x3c>)
 8002176:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002178:	b12b      	cbz	r3, 8002186 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217a:	4418      	add	r0, r3
 800217c:	4290      	cmp	r0, r2
 800217e:	d807      	bhi.n	8002190 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002180:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <_sbrk+0x40>)
 8002188:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4418      	add	r0, r3
 800218c:	4290      	cmp	r0, r2
 800218e:	d9f7      	bls.n	8002180 <_sbrk+0x14>
    errno = ENOMEM;
 8002190:	f005 ffc0 	bl	8008114 <__errno>
 8002194:	230c      	movs	r3, #12
 8002196:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd10      	pop	{r4, pc}
 80021a0:	20000488 	.word	0x20000488
 80021a4:	20018000 	.word	0x20018000
 80021a8:	00000400 	.word	0x00000400
 80021ac:	20000880 	.word	0x20000880

080021b0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021b0:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <SystemInit+0x10>)
 80021b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00
 80021c4:	00000000 	.word	0x00000000

080021c8 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021c8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_baseHandle->Instance==TIM2)
 80021ca:	6802      	ldr	r2, [r0, #0]
{
 80021cc:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	2300      	movs	r3, #0
  if(tim_baseHandle->Instance==TIM2)
 80021d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80021d8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80021dc:	930a      	str	r3, [sp, #40]	; 0x28
  if(tim_baseHandle->Instance==TIM2)
 80021de:	d027      	beq.n	8002230 <HAL_TIM_Base_MspInit+0x68>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_TIM_Base_MspInit+0xd8>)
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d008      	beq.n	80021f8 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_TIM_Base_MspInit+0xdc>)
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d013      	beq.n	8002214 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 80021ec:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <HAL_TIM_Base_MspInit+0xe0>)
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d042      	beq.n	8002278 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80021f2:	b00d      	add	sp, #52	; 0x34
 80021f4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021f8:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80021fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021fe:	f042 0202 	orr.w	r2, r2, #2
 8002202:	659a      	str	r2, [r3, #88]	; 0x58
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	9b03      	ldr	r3, [sp, #12]
}
 800220e:	b00d      	add	sp, #52	; 0x34
 8002210:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002214:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002218:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800221a:	f042 0204 	orr.w	r2, r2, #4
 800221e:	659a      	str	r2, [r3, #88]	; 0x58
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	9b04      	ldr	r3, [sp, #16]
}
 800222a:	b00d      	add	sp, #52	; 0x34
 800222c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002230:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002234:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = USONIC2_Pin;
 8002238:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8002298 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	659a      	str	r2, [r3, #88]	; 0x58
 8002244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002246:	f002 0201 	and.w	r2, r2, #1
 800224a:	9201      	str	r2, [sp, #4]
 800224c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	64da      	str	r2, [r3, #76]	; 0x4c
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(USONIC2_GPIO_Port, &GPIO_InitStruct);
 800225e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002260:	2301      	movs	r3, #1
    HAL_GPIO_Init(USONIC2_GPIO_Port, &GPIO_InitStruct);
 8002262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USONIC2_Pin;
 8002266:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800226c:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(USONIC2_GPIO_Port, &GPIO_InitStruct);
 800226e:	f001 fe61 	bl	8003f34 <HAL_GPIO_Init>
}
 8002272:	b00d      	add	sp, #52	; 0x34
 8002274:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002278:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800227c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800227e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002282:	661a      	str	r2, [r3, #96]	; 0x60
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228a:	9305      	str	r3, [sp, #20]
 800228c:	9b05      	ldr	r3, [sp, #20]
}
 800228e:	b00d      	add	sp, #52	; 0x34
 8002290:	f85d fb04 	ldr.w	pc, [sp], #4
 8002294:	f3af 8000 	nop.w
 8002298:	00008000 	.word	0x00008000
 800229c:	00000002 	.word	0x00000002
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40013400 	.word	0x40013400
 80022ac:	00000000 	.word	0x00000000

080022b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022b0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM2)
 80022b2:	6802      	ldr	r2, [r0, #0]
{
 80022b4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM2)
 80022b8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80022c0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80022c4:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM2)
 80022c6:	d021      	beq.n	800230c <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_TIM_MspPostInit+0x108>)
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d038      	beq.n	8002340 <HAL_TIM_MspPostInit+0x90>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_TIM_MspPostInit+0x10c>)
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d04d      	beq.n	8002370 <HAL_TIM_MspPostInit+0xc0>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_TIM_MspPostInit+0x110>)
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d002      	beq.n	80022e0 <HAL_TIM_MspPostInit+0x30>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80022da:	b00b      	add	sp, #44	; 0x2c
 80022dc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022e4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80023a0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ea:	4836      	ldr	r0, [pc, #216]	; (80023c4 <HAL_TIM_MspPostInit+0x114>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ec:	f042 0204 	orr.w	r2, r2, #4
 80022f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80022f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022fc:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022fe:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002304:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f001 fe15 	bl	8003f34 <HAL_GPIO_Init>
}
 800230a:	e7e6      	b.n	80022da <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002310:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = USONIC1_PWM_Pin;
 8002314:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80023a8 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(USONIC1_PWM_GPIO_Port, &GPIO_InitStruct);
 800231a:	482b      	ldr	r0, [pc, #172]	; (80023c8 <HAL_TIM_MspPostInit+0x118>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	f042 0202 	orr.w	r2, r2, #2
 8002320:	64da      	str	r2, [r3, #76]	; 0x4c
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(USONIC1_PWM_GPIO_Port, &GPIO_InitStruct);
 800232a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800232c:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = USONIC1_PWM_Pin;
 800232e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002334:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(USONIC1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002336:	f001 fdfd 	bl	8003f34 <HAL_GPIO_Init>
}
 800233a:	b00b      	add	sp, #44	; 0x2c
 800233c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002340:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = PWM1_Pin;
 8002344:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 80023b0 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 800234a:	481e      	ldr	r0, [pc, #120]	; (80023c4 <HAL_TIM_MspPostInit+0x114>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234c:	f042 0204 	orr.w	r2, r2, #4
 8002350:	64da      	str	r2, [r3, #76]	; 0x4c
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 800235a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800235c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = PWM1_Pin;
 800235e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002362:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002364:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8002366:	f001 fde5 	bl	8003f34 <HAL_GPIO_Init>
}
 800236a:	b00b      	add	sp, #44	; 0x2c
 800236c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    GPIO_InitStruct.Pin = PWM2_Pin;
 8002374:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80023a0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 800237a:	4813      	ldr	r0, [pc, #76]	; (80023c8 <HAL_TIM_MspPostInit+0x118>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237c:	f042 0202 	orr.w	r2, r2, #2
 8002380:	64da      	str	r2, [r3, #76]	; 0x4c
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 800238a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800238c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = PWM2_Pin;
 800238e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002394:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8002396:	f001 fdcd 	bl	8003f34 <HAL_GPIO_Init>
}
 800239a:	b00b      	add	sp, #44	; 0x2c
 800239c:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a0:	00000040 	.word	0x00000040
 80023a4:	00000002 	.word	0x00000002
 80023a8:	00000400 	.word	0x00000400
 80023ac:	00000002 	.word	0x00000002
 80023b0:	00000080 	.word	0x00000080
 80023b4:	00000002 	.word	0x00000002
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40013400 	.word	0x40013400
 80023c4:	48000800 	.word	0x48000800
 80023c8:	48000400 	.word	0x48000400
 80023cc:	00000000 	.word	0x00000000

080023d0 <MX_TIM2_Init>:
{
 80023d0:	b500      	push	{lr}
  htim2.Instance = TIM2;
 80023d2:	4845      	ldr	r0, [pc, #276]	; (80024e8 <MX_TIM2_Init+0x118>)
{
 80023d4:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d6:	2300      	movs	r3, #0
 80023d8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80023dc:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023e4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80023e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ec:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80023f0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80023f4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023f8:	9307      	str	r3, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023fa:	9312      	str	r3, [sp, #72]	; 0x48
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fe:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002400:	6183      	str	r3, [r0, #24]
  htim2.Init.Period = 99999;
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <MX_TIM2_Init+0x11c>)
 8002404:	60c3      	str	r3, [r0, #12]
  htim2.Init.Prescaler = 79;
 8002406:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800240a:	234f      	movs	r3, #79	; 0x4f
 800240c:	e9c0 1300 	strd	r1, r3, [r0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002410:	f002 ffac 	bl	800536c <HAL_TIM_Base_Init>
 8002414:	2800      	cmp	r0, #0
 8002416:	d145      	bne.n	80024a4 <MX_TIM2_Init+0xd4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800241c:	4832      	ldr	r0, [pc, #200]	; (80024e8 <MX_TIM2_Init+0x118>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800241e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002420:	a908      	add	r1, sp, #32
 8002422:	f003 fb77 	bl	8005b14 <HAL_TIM_ConfigClockSource>
 8002426:	2800      	cmp	r0, #0
 8002428:	d156      	bne.n	80024d8 <MX_TIM2_Init+0x108>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800242a:	482f      	ldr	r0, [pc, #188]	; (80024e8 <MX_TIM2_Init+0x118>)
 800242c:	f003 f964 	bl	80056f8 <HAL_TIM_IC_Init>
 8002430:	2800      	cmp	r0, #0
 8002432:	d14e      	bne.n	80024d2 <MX_TIM2_Init+0x102>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002434:	482c      	ldr	r0, [pc, #176]	; (80024e8 <MX_TIM2_Init+0x118>)
 8002436:	f003 f827 	bl	8005488 <HAL_TIM_PWM_Init>
 800243a:	2800      	cmp	r0, #0
 800243c:	d146      	bne.n	80024cc <MX_TIM2_Init+0xfc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002440:	4829      	ldr	r0, [pc, #164]	; (80024e8 <MX_TIM2_Init+0x118>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002442:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002444:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002446:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002448:	f003 fe5c 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 800244c:	2800      	cmp	r0, #0
 800244e:	d13a      	bne.n	80024c6 <MX_TIM2_Init+0xf6>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002450:	2200      	movs	r2, #0
 8002452:	2301      	movs	r3, #1
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002454:	4824      	ldr	r0, [pc, #144]	; (80024e8 <MX_TIM2_Init+0x118>)
 8002456:	a904      	add	r1, sp, #16
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002458:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfigIC.ICFilter = 1;
 800245c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002460:	f003 fa7e 	bl	8005960 <HAL_TIM_IC_ConfigChannel>
 8002464:	bb60      	cbnz	r0, 80024c0 <MX_TIM2_Init+0xf0>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002466:	2202      	movs	r2, #2
 8002468:	2302      	movs	r3, #2
 800246a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800246e:	481e      	ldr	r0, [pc, #120]	; (80024e8 <MX_TIM2_Init+0x118>)
  sConfigIC.ICFilter = 0;
 8002470:	2300      	movs	r3, #0
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002472:	a904      	add	r1, sp, #16
 8002474:	2204      	movs	r2, #4
  sConfigIC.ICFilter = 0;
 8002476:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002478:	f003 fa72 	bl	8005960 <HAL_TIM_IC_ConfigChannel>
 800247c:	b9e8      	cbnz	r0, 80024ba <MX_TIM2_Init+0xea>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247e:	ed9f 7b18 	vldr	d7, [pc, #96]	; 80024e0 <MX_TIM2_Init+0x110>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002482:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002484:	4818      	ldr	r0, [pc, #96]	; (80024e8 <MX_TIM2_Init+0x118>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002486:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002488:	a90c      	add	r1, sp, #48	; 0x30
 800248a:	2208      	movs	r2, #8
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800248c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002490:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002492:	f003 fcfd 	bl	8005e90 <HAL_TIM_PWM_ConfigChannel>
 8002496:	b940      	cbnz	r0, 80024aa <MX_TIM2_Init+0xda>
  HAL_TIM_MspPostInit(&htim2);
 8002498:	4813      	ldr	r0, [pc, #76]	; (80024e8 <MX_TIM2_Init+0x118>)
 800249a:	f7ff ff09 	bl	80022b0 <HAL_TIM_MspPostInit>
}
 800249e:	b015      	add	sp, #84	; 0x54
 80024a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80024a4:	f7ff fdcc 	bl	8002040 <Error_Handler>
 80024a8:	e7b6      	b.n	8002418 <MX_TIM2_Init+0x48>
    Error_Handler();
 80024aa:	f7ff fdc9 	bl	8002040 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80024ae:	480e      	ldr	r0, [pc, #56]	; (80024e8 <MX_TIM2_Init+0x118>)
 80024b0:	f7ff fefe 	bl	80022b0 <HAL_TIM_MspPostInit>
}
 80024b4:	b015      	add	sp, #84	; 0x54
 80024b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80024ba:	f7ff fdc1 	bl	8002040 <Error_Handler>
 80024be:	e7de      	b.n	800247e <MX_TIM2_Init+0xae>
    Error_Handler();
 80024c0:	f7ff fdbe 	bl	8002040 <Error_Handler>
 80024c4:	e7cf      	b.n	8002466 <MX_TIM2_Init+0x96>
    Error_Handler();
 80024c6:	f7ff fdbb 	bl	8002040 <Error_Handler>
 80024ca:	e7c1      	b.n	8002450 <MX_TIM2_Init+0x80>
    Error_Handler();
 80024cc:	f7ff fdb8 	bl	8002040 <Error_Handler>
 80024d0:	e7b5      	b.n	800243e <MX_TIM2_Init+0x6e>
    Error_Handler();
 80024d2:	f7ff fdb5 	bl	8002040 <Error_Handler>
 80024d6:	e7ad      	b.n	8002434 <MX_TIM2_Init+0x64>
    Error_Handler();
 80024d8:	f7ff fdb2 	bl	8002040 <Error_Handler>
 80024dc:	e7a5      	b.n	800242a <MX_TIM2_Init+0x5a>
 80024de:	bf00      	nop
 80024e0:	00000060 	.word	0x00000060
 80024e4:	0000000a 	.word	0x0000000a
 80024e8:	2000048c 	.word	0x2000048c
 80024ec:	0001869f 	.word	0x0001869f

080024f0 <MX_TIM3_Init>:
{
 80024f0:	b500      	push	{lr}
  htim3.Instance = TIM3;
 80024f2:	482f      	ldr	r0, [pc, #188]	; (80025b0 <MX_TIM3_Init+0xc0>)
  htim3.Init.Prescaler = 79;
 80024f4:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <MX_TIM3_Init+0xc4>)
{
 80024f6:	b091      	sub	sp, #68	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f8:	2300      	movs	r3, #0
 80024fa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80024fe:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002502:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800250a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800250e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002512:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002514:	930e      	str	r3, [sp, #56]	; 0x38
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002518:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	6183      	str	r3, [r0, #24]
  htim3.Init.Prescaler = 79;
 800251c:	234f      	movs	r3, #79	; 0x4f
 800251e:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.Period = 99;
 8002522:	2363      	movs	r3, #99	; 0x63
 8002524:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002526:	f002 ff21 	bl	800536c <HAL_TIM_Base_Init>
 800252a:	bb30      	cbnz	r0, 800257a <MX_TIM3_Init+0x8a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002530:	481f      	ldr	r0, [pc, #124]	; (80025b0 <MX_TIM3_Init+0xc0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002532:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002534:	a904      	add	r1, sp, #16
 8002536:	f003 faed 	bl	8005b14 <HAL_TIM_ConfigClockSource>
 800253a:	bb78      	cbnz	r0, 800259c <MX_TIM3_Init+0xac>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800253c:	481c      	ldr	r0, [pc, #112]	; (80025b0 <MX_TIM3_Init+0xc0>)
 800253e:	f002 ffa3 	bl	8005488 <HAL_TIM_PWM_Init>
 8002542:	bb40      	cbnz	r0, 8002596 <MX_TIM3_Init+0xa6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002544:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002546:	481a      	ldr	r0, [pc, #104]	; (80025b0 <MX_TIM3_Init+0xc0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002548:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800254a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800254e:	f003 fdd9 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	b9e8      	cbnz	r0, 8002590 <MX_TIM3_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002554:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80025a8 <MX_TIM3_Init+0xb8>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002558:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800255a:	4815      	ldr	r0, [pc, #84]	; (80025b0 <MX_TIM3_Init+0xc0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800255c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800255e:	a908      	add	r1, sp, #32
 8002560:	2204      	movs	r2, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002562:	ed8d 7b08 	vstr	d7, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002566:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002568:	f003 fc92 	bl	8005e90 <HAL_TIM_PWM_ConfigChannel>
 800256c:	b940      	cbnz	r0, 8002580 <MX_TIM3_Init+0x90>
  HAL_TIM_MspPostInit(&htim3);
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <MX_TIM3_Init+0xc0>)
 8002570:	f7ff fe9e 	bl	80022b0 <HAL_TIM_MspPostInit>
}
 8002574:	b011      	add	sp, #68	; 0x44
 8002576:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800257a:	f7ff fd61 	bl	8002040 <Error_Handler>
 800257e:	e7d5      	b.n	800252c <MX_TIM3_Init+0x3c>
    Error_Handler();
 8002580:	f7ff fd5e 	bl	8002040 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8002584:	480a      	ldr	r0, [pc, #40]	; (80025b0 <MX_TIM3_Init+0xc0>)
 8002586:	f7ff fe93 	bl	80022b0 <HAL_TIM_MspPostInit>
}
 800258a:	b011      	add	sp, #68	; 0x44
 800258c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002590:	f7ff fd56 	bl	8002040 <Error_Handler>
 8002594:	e7de      	b.n	8002554 <MX_TIM3_Init+0x64>
    Error_Handler();
 8002596:	f7ff fd53 	bl	8002040 <Error_Handler>
 800259a:	e7d3      	b.n	8002544 <MX_TIM3_Init+0x54>
    Error_Handler();
 800259c:	f7ff fd50 	bl	8002040 <Error_Handler>
 80025a0:	e7cc      	b.n	800253c <MX_TIM3_Init+0x4c>
 80025a2:	bf00      	nop
 80025a4:	f3af 8000 	nop.w
 80025a8:	00000060 	.word	0x00000060
 80025ac:	00000000 	.word	0x00000000
 80025b0:	200004d8 	.word	0x200004d8
 80025b4:	40000400 	.word	0x40000400

080025b8 <MX_TIM4_Init>:
{
 80025b8:	b500      	push	{lr}
  htim4.Instance = TIM4;
 80025ba:	482d      	ldr	r0, [pc, #180]	; (8002670 <MX_TIM4_Init+0xb8>)
  htim4.Init.Prescaler = 79;
 80025bc:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <MX_TIM4_Init+0xbc>)
{
 80025be:	b091      	sub	sp, #68	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c0:	2300      	movs	r3, #0
 80025c2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80025c6:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ce:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80025d2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80025d6:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025da:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025dc:	930e      	str	r3, [sp, #56]	; 0x38
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e2:	6183      	str	r3, [r0, #24]
  htim4.Init.Prescaler = 79;
 80025e4:	234f      	movs	r3, #79	; 0x4f
 80025e6:	e9c0 2300 	strd	r2, r3, [r0]
  htim4.Init.Period = 99;
 80025ea:	2363      	movs	r3, #99	; 0x63
 80025ec:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ee:	f002 febd 	bl	800536c <HAL_TIM_Base_Init>
 80025f2:	bb28      	cbnz	r0, 8002640 <MX_TIM4_Init+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025f8:	481d      	ldr	r0, [pc, #116]	; (8002670 <MX_TIM4_Init+0xb8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fa:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025fc:	a904      	add	r1, sp, #16
 80025fe:	f003 fa89 	bl	8005b14 <HAL_TIM_ConfigClockSource>
 8002602:	bb70      	cbnz	r0, 8002662 <MX_TIM4_Init+0xaa>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002604:	481a      	ldr	r0, [pc, #104]	; (8002670 <MX_TIM4_Init+0xb8>)
 8002606:	f002 ff3f 	bl	8005488 <HAL_TIM_PWM_Init>
 800260a:	bb38      	cbnz	r0, 800265c <MX_TIM4_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800260e:	4818      	ldr	r0, [pc, #96]	; (8002670 <MX_TIM4_Init+0xb8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002610:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002612:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002614:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002616:	f003 fd75 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 800261a:	b9e0      	cbnz	r0, 8002656 <MX_TIM4_Init+0x9e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8002668 <MX_TIM4_Init+0xb0>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002620:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002622:	4813      	ldr	r0, [pc, #76]	; (8002670 <MX_TIM4_Init+0xb8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002624:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002626:	a908      	add	r1, sp, #32
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002628:	ed8d 7b08 	vstr	d7, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262c:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800262e:	f003 fc2f 	bl	8005e90 <HAL_TIM_PWM_ConfigChannel>
 8002632:	b940      	cbnz	r0, 8002646 <MX_TIM4_Init+0x8e>
  HAL_TIM_MspPostInit(&htim4);
 8002634:	480e      	ldr	r0, [pc, #56]	; (8002670 <MX_TIM4_Init+0xb8>)
 8002636:	f7ff fe3b 	bl	80022b0 <HAL_TIM_MspPostInit>
}
 800263a:	b011      	add	sp, #68	; 0x44
 800263c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002640:	f7ff fcfe 	bl	8002040 <Error_Handler>
 8002644:	e7d6      	b.n	80025f4 <MX_TIM4_Init+0x3c>
    Error_Handler();
 8002646:	f7ff fcfb 	bl	8002040 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 800264a:	4809      	ldr	r0, [pc, #36]	; (8002670 <MX_TIM4_Init+0xb8>)
 800264c:	f7ff fe30 	bl	80022b0 <HAL_TIM_MspPostInit>
}
 8002650:	b011      	add	sp, #68	; 0x44
 8002652:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002656:	f7ff fcf3 	bl	8002040 <Error_Handler>
 800265a:	e7df      	b.n	800261c <MX_TIM4_Init+0x64>
    Error_Handler();
 800265c:	f7ff fcf0 	bl	8002040 <Error_Handler>
 8002660:	e7d4      	b.n	800260c <MX_TIM4_Init+0x54>
    Error_Handler();
 8002662:	f7ff fced 	bl	8002040 <Error_Handler>
 8002666:	e7cd      	b.n	8002604 <MX_TIM4_Init+0x4c>
 8002668:	00000060 	.word	0x00000060
 800266c:	00000000 	.word	0x00000000
 8002670:	20000524 	.word	0x20000524
 8002674:	40000800 	.word	0x40000800

08002678 <MX_TIM8_Init>:
{
 8002678:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	2400      	movs	r4, #0
{
 800267c:	b09c      	sub	sp, #112	; 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800267e:	222c      	movs	r2, #44	; 0x2c
 8002680:	4621      	mov	r1, r4
 8002682:	a810      	add	r0, sp, #64	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002684:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002688:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800268c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002690:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002694:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002698:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269a:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800269c:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269e:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026a0:	f005 fce5 	bl	800806e <memset>
  htim8.Instance = TIM8;
 80026a4:	483a      	ldr	r0, [pc, #232]	; (8002790 <MX_TIM8_Init+0x118>)
  htim8.Init.Prescaler = 79;
 80026a6:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <MX_TIM8_Init+0x11c>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a8:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 79;
 80026aa:	234f      	movs	r3, #79	; 0x4f
 80026ac:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 49999;
 80026b0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80026b4:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 80026b8:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026bc:	f002 fe56 	bl	800536c <HAL_TIM_Base_Init>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d144      	bne.n	800274e <MX_TIM8_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026c8:	4831      	ldr	r0, [pc, #196]	; (8002790 <MX_TIM8_Init+0x118>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ca:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026cc:	a904      	add	r1, sp, #16
 80026ce:	f003 fa21 	bl	8005b14 <HAL_TIM_ConfigClockSource>
 80026d2:	2800      	cmp	r0, #0
 80026d4:	d14e      	bne.n	8002774 <MX_TIM8_Init+0xfc>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026d6:	482e      	ldr	r0, [pc, #184]	; (8002790 <MX_TIM8_Init+0x118>)
 80026d8:	f002 fed6 	bl	8005488 <HAL_TIM_PWM_Init>
 80026dc:	2800      	cmp	r0, #0
 80026de:	d146      	bne.n	800276e <MX_TIM8_Init+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	2200      	movs	r2, #0
 80026e4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026e8:	4829      	ldr	r0, [pc, #164]	; (8002790 <MX_TIM8_Init+0x118>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ea:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026ec:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026f0:	f003 fd08 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d137      	bne.n	8002768 <MX_TIM8_Init+0xf0>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8002780 <MX_TIM8_Init+0x108>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026fc:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 10;
 80026fe:	230a      	movs	r3, #10
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002700:	2200      	movs	r2, #0
  sConfigOC.Pulse = 10;
 8002702:	e9cd 0308 	strd	r0, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002706:	a908      	add	r1, sp, #32
 8002708:	4821      	ldr	r0, [pc, #132]	; (8002790 <MX_TIM8_Init+0x118>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800270a:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800270c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002710:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002714:	f003 fbbc 	bl	8005e90 <HAL_TIM_PWM_ConfigChannel>
 8002718:	bb18      	cbnz	r0, 8002762 <MX_TIM8_Init+0xea>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800271a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002788 <MX_TIM8_Init+0x110>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800271e:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002724:	481a      	ldr	r0, [pc, #104]	; (8002790 <MX_TIM8_Init+0x118>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002726:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002728:	a910      	add	r1, sp, #64	; 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800272a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 0;
 800272e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002732:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002736:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800273a:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800273e:	f003 fd2b 	bl	8006198 <HAL_TIMEx_ConfigBreakDeadTime>
 8002742:	b938      	cbnz	r0, 8002754 <MX_TIM8_Init+0xdc>
  HAL_TIM_MspPostInit(&htim8);
 8002744:	4812      	ldr	r0, [pc, #72]	; (8002790 <MX_TIM8_Init+0x118>)
 8002746:	f7ff fdb3 	bl	80022b0 <HAL_TIM_MspPostInit>
}
 800274a:	b01c      	add	sp, #112	; 0x70
 800274c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800274e:	f7ff fc77 	bl	8002040 <Error_Handler>
 8002752:	e7b7      	b.n	80026c4 <MX_TIM8_Init+0x4c>
    Error_Handler();
 8002754:	f7ff fc74 	bl	8002040 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_TIM8_Init+0x118>)
 800275a:	f7ff fda9 	bl	80022b0 <HAL_TIM_MspPostInit>
}
 800275e:	b01c      	add	sp, #112	; 0x70
 8002760:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002762:	f7ff fc6d 	bl	8002040 <Error_Handler>
 8002766:	e7d8      	b.n	800271a <MX_TIM8_Init+0xa2>
    Error_Handler();
 8002768:	f7ff fc6a 	bl	8002040 <Error_Handler>
 800276c:	e7c4      	b.n	80026f8 <MX_TIM8_Init+0x80>
    Error_Handler();
 800276e:	f7ff fc67 	bl	8002040 <Error_Handler>
 8002772:	e7b5      	b.n	80026e0 <MX_TIM8_Init+0x68>
    Error_Handler();
 8002774:	f7ff fc64 	bl	8002040 <Error_Handler>
 8002778:	e7ad      	b.n	80026d6 <MX_TIM8_Init+0x5e>
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w
	...
 8002788:	02000000 	.word	0x02000000
 800278c:	00000000 	.word	0x00000000
 8002790:	20000570 	.word	0x20000570
 8002794:	40013400 	.word	0x40013400

08002798 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002798:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800279a:	480c      	ldr	r0, [pc, #48]	; (80027cc <MX_USART2_UART_Init+0x34>)
 800279c:	4c0c      	ldr	r4, [pc, #48]	; (80027d0 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800279e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 80027a0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a4:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80027a6:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027ae:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ba:	f004 fdbf 	bl	800733c <HAL_UART_Init>
 80027be:	b900      	cbnz	r0, 80027c2 <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80027c6:	f7ff bc3b 	b.w	8002040 <Error_Handler>
 80027ca:	bf00      	nop
 80027cc:	20000604 	.word	0x20000604
 80027d0:	40004400 	.word	0x40004400

080027d4 <MX_USART3_UART_Init>:
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027d4:	480f      	ldr	r0, [pc, #60]	; (8002814 <MX_USART3_UART_Init+0x40>)
 80027d6:	4910      	ldr	r1, [pc, #64]	; (8002818 <MX_USART3_UART_Init+0x44>)
  huart3.Init.BaudRate = 9600;
 80027d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
{
 80027dc:	b510      	push	{r4, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 9600;
 80027e0:	e9c0 1200 	strd	r1, r2, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80027e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027e8:	e9c0 3206 	strd	r3, r2, [r0, #24]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027ec:	240c      	movs	r4, #12
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80027ee:	2110      	movs	r1, #16
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80027f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027f4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027f8:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80027fc:	e9c0 3108 	strd	r3, r1, [r0, #32]
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002800:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8002802:	f004 fdcd 	bl	80073a0 <HAL_HalfDuplex_Init>
 8002806:	b900      	cbnz	r0, 800280a <MX_USART3_UART_Init+0x36>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002808:	bd10      	pop	{r4, pc}
 800280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800280e:	f7ff bc17 	b.w	8002040 <Error_Handler>
 8002812:	bf00      	nop
 8002814:	2000068c 	.word	0x2000068c
 8002818:	40004800 	.word	0x40004800

0800281c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800281c:	b530      	push	{r4, r5, lr}
 800281e:	4604      	mov	r4, r0
 8002820:	b0ad      	sub	sp, #180	; 0xb4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002822:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002824:	2288      	movs	r2, #136	; 0x88
 8002826:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800282c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8002830:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002832:	f005 fc1c 	bl	800806e <memset>
  if(uartHandle->Instance==USART2)
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	4a3d      	ldr	r2, [pc, #244]	; (8002930 <HAL_UART_MspInit+0x114>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800283e:	4a3d      	ldr	r2, [pc, #244]	; (8002934 <HAL_UART_MspInit+0x118>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d042      	beq.n	80028ca <HAL_UART_MspInit+0xae>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002844:	b02d      	add	sp, #180	; 0xb4
 8002846:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002848:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800284a:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800284c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800284e:	f002 faf1 	bl	8004e34 <HAL_RCCEx_PeriphCLKConfig>
 8002852:	2800      	cmp	r0, #0
 8002854:	d166      	bne.n	8002924 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002856:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_UART_MspInit+0x11c>)
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002858:	4d38      	ldr	r5, [pc, #224]	; (800293c <HAL_UART_MspInit+0x120>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800285a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800285c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002860:	659a      	str	r2, [r3, #88]	; 0x58
 8002862:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002864:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002868:	9200      	str	r2, [sp, #0]
 800286a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	64da      	str	r2, [r3, #76]	; 0x4c
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800287c:	220c      	movs	r2, #12
 800287e:	2302      	movs	r3, #2
 8002880:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002884:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002888:	2303      	movs	r3, #3
 800288a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002890:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002896:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f001 fb4c 	bl	8003f34 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800289c:	4928      	ldr	r1, [pc, #160]	; (8002940 <HAL_UART_MspInit+0x124>)
 800289e:	2202      	movs	r2, #2
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a0:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80028a2:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028a6:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a8:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028aa:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ac:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b0:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028b4:	e9c5 3307 	strd	r3, r3, [r5, #28]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028ba:	f001 f9e9 	bl	8003c90 <HAL_DMA_Init>
 80028be:	2800      	cmp	r0, #0
 80028c0:	d12d      	bne.n	800291e <HAL_UART_MspInit+0x102>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80028c2:	6725      	str	r5, [r4, #112]	; 0x70
 80028c4:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80028c6:	b02d      	add	sp, #180	; 0xb4
 80028c8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028ca:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028cc:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028ce:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d0:	f002 fab0 	bl	8004e34 <HAL_RCCEx_PeriphCLKConfig>
 80028d4:	bb48      	cbnz	r0, 800292a <HAL_UART_MspInit+0x10e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_UART_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d8:	481a      	ldr	r0, [pc, #104]	; (8002944 <HAL_UART_MspInit+0x128>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80028da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58
 80028e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028e4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80028e8:	9202      	str	r2, [sp, #8]
 80028ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ee:	f042 0204 	orr.w	r2, r2, #4
 80028f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80028fa:	2512      	movs	r5, #18
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fc:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002900:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002904:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002906:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002908:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800290a:	2401      	movs	r4, #1
 800290c:	2503      	movs	r5, #3
 800290e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002914:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002916:	f001 fb0d 	bl	8003f34 <HAL_GPIO_Init>
}
 800291a:	b02d      	add	sp, #180	; 0xb4
 800291c:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800291e:	f7ff fb8f 	bl	8002040 <Error_Handler>
 8002922:	e7ce      	b.n	80028c2 <HAL_UART_MspInit+0xa6>
      Error_Handler();
 8002924:	f7ff fb8c 	bl	8002040 <Error_Handler>
 8002928:	e795      	b.n	8002856 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800292a:	f7ff fb89 	bl	8002040 <Error_Handler>
 800292e:	e7d2      	b.n	80028d6 <HAL_UART_MspInit+0xba>
 8002930:	40004400 	.word	0x40004400
 8002934:	40004800 	.word	0x40004800
 8002938:	40021000 	.word	0x40021000
 800293c:	200005bc 	.word	0x200005bc
 8002940:	40020080 	.word	0x40020080
 8002944:	48000800 	.word	0x48000800

08002948 <OW_Reset>:
	   Error_Handler();
	 }
}

HAL_StatusTypeDef OW_Reset(void)
{
 8002948:	b510      	push	{r4, lr}
	 USART_INSTANCE.Instance = USART_USED;
 800294a:	4c29      	ldr	r4, [pc, #164]	; (80029f0 <OW_Reset+0xa8>)
 800294c:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <OW_Reset+0xac>)
 800294e:	6022      	str	r2, [r4, #0]
{
 8002950:	b082      	sub	sp, #8
	  uint8_t data_out = 0xF0;
	  uint8_t data_in = 0;
 8002952:	2300      	movs	r3, #0
	  uint8_t data_out = 0xF0;
 8002954:	21f0      	movs	r1, #240	; 0xf0
	 USART_INSTANCE.Init.BaudRate = baudrate;
 8002956:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	 USART_INSTANCE.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	e9c4 0301 	strd	r0, r3, [r4, #4]
	  uint8_t data_out = 0xF0;
 800295e:	f88d 1006 	strb.w	r1, [sp, #6]
	 USART_INSTANCE.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002962:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	 USART_INSTANCE.Init.Mode = UART_MODE_TX_RX;
 8002966:	210c      	movs	r1, #12
	 if (HAL_HalfDuplex_Init(&USART_INSTANCE) != HAL_OK)
 8002968:	4620      	mov	r0, r4
	 USART_INSTANCE.Init.Parity = UART_PARITY_NONE;
 800296a:	e9c4 3303 	strd	r3, r3, [r4, #12]
	 USART_INSTANCE.Init.OverSampling = UART_OVERSAMPLING_16;
 800296e:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 USART_INSTANCE.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002972:	e9c4 3308 	strd	r3, r3, [r4, #32]
	  uint8_t data_in = 0;
 8002976:	f88d 3007 	strb.w	r3, [sp, #7]
	 USART_INSTANCE.Init.Mode = UART_MODE_TX_RX;
 800297a:	6161      	str	r1, [r4, #20]
	 USART_INSTANCE.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800297c:	63a2      	str	r2, [r4, #56]	; 0x38
	 if (HAL_HalfDuplex_Init(&USART_INSTANCE) != HAL_OK)
 800297e:	f004 fd0f 	bl	80073a0 <HAL_HalfDuplex_Init>
 8002982:	bb70      	cbnz	r0, 80029e2 <OW_Reset+0x9a>

	  OW_Set_Baudrate(9600);
	  HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	2201      	movs	r2, #1
 800298a:	f10d 0106 	add.w	r1, sp, #6
 800298e:	4818      	ldr	r0, [pc, #96]	; (80029f0 <OW_Reset+0xa8>)
 8002990:	f003 fc4e 	bl	8006230 <HAL_UART_Transmit>
	  HAL_UART_Receive(&USART_INSTANCE, &data_in, 1, HAL_MAX_DELAY);
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	2201      	movs	r2, #1
 800299a:	f10d 0107 	add.w	r1, sp, #7
 800299e:	4814      	ldr	r0, [pc, #80]	; (80029f0 <OW_Reset+0xa8>)
 80029a0:	f003 fd76 	bl	8006490 <HAL_UART_Receive>
	 USART_INSTANCE.Instance = USART_USED;
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <OW_Reset+0xac>)
 80029a6:	6022      	str	r2, [r4, #0]
	 USART_INSTANCE.Init.Mode = UART_MODE_TX_RX;
 80029a8:	220c      	movs	r2, #12
	 USART_INSTANCE.Init.WordLength = UART_WORDLENGTH_8B;
 80029aa:	2300      	movs	r3, #0
	 USART_INSTANCE.Init.BaudRate = baudrate;
 80029ac:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
	 USART_INSTANCE.Init.Mode = UART_MODE_TX_RX;
 80029b0:	6162      	str	r2, [r4, #20]
	 if (HAL_HalfDuplex_Init(&USART_INSTANCE) != HAL_OK)
 80029b2:	480f      	ldr	r0, [pc, #60]	; (80029f0 <OW_Reset+0xa8>)
	 USART_INSTANCE.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80029b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	 USART_INSTANCE.Init.WordLength = UART_WORDLENGTH_8B;
 80029b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
	 USART_INSTANCE.Init.Parity = UART_PARITY_NONE;
 80029bc:	e9c4 3303 	strd	r3, r3, [r4, #12]
	 USART_INSTANCE.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c0:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 USART_INSTANCE.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	 USART_INSTANCE.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80029c8:	63a2      	str	r2, [r4, #56]	; 0x38
	 if (HAL_HalfDuplex_Init(&USART_INSTANCE) != HAL_OK)
 80029ca:	f004 fce9 	bl	80073a0 <HAL_HalfDuplex_Init>
 80029ce:	b958      	cbnz	r0, 80029e8 <OW_Reset+0xa0>
	  OW_Set_Baudrate(115200);

	  if (data_in != 0xF0)
 80029d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
	    return HAL_OK;
	  else
	    return HAL_ERROR;
}
 80029d4:	f1a0 00f0 	sub.w	r0, r0, #240	; 0xf0
 80029d8:	fab0 f080 	clz	r0, r0
 80029dc:	0940      	lsrs	r0, r0, #5
 80029de:	b002      	add	sp, #8
 80029e0:	bd10      	pop	{r4, pc}
	   Error_Handler();
 80029e2:	f7ff fb2d 	bl	8002040 <Error_Handler>
 80029e6:	e7cd      	b.n	8002984 <OW_Reset+0x3c>
 80029e8:	f7ff fb2a 	bl	8002040 <Error_Handler>
 80029ec:	e7f0      	b.n	80029d0 <OW_Reset+0x88>
 80029ee:	bf00      	nop
 80029f0:	2000068c 	.word	0x2000068c
 80029f4:	40004800 	.word	0x40004800

080029f8 <OW_Read_Byte>:

	return data_in & 0x01;
}

uint8_t OW_Read_Byte(void)
{
 80029f8:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 80029fa:	4e14      	ldr	r6, [pc, #80]	; (8002a4c <OW_Read_Byte+0x54>)
{
 80029fc:	b082      	sub	sp, #8
 80029fe:	2508      	movs	r5, #8
  uint8_t value = 0;
 8002a00:	2400      	movs	r4, #0
	uint8_t data_out = 0xFF;
 8002a02:	f04f 0eff 	mov.w	lr, #255	; 0xff
	uint8_t data_in = 0;
 8002a06:	f04f 0c00 	mov.w	ip, #0
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f10d 0106 	add.w	r1, sp, #6
 8002a14:	4630      	mov	r0, r6
	uint8_t data_out = 0xFF;
 8002a16:	f88d e006 	strb.w	lr, [sp, #6]
	uint8_t data_in = 0;
 8002a1a:	f88d c007 	strb.w	ip, [sp, #7]
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002a1e:	f003 fc07 	bl	8006230 <HAL_UART_Transmit>
	HAL_UART_Receive(&USART_INSTANCE, &data_in, 1, HAL_MAX_DELAY);
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	2201      	movs	r2, #1
 8002a28:	f10d 0107 	add.w	r1, sp, #7
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f003 fd2f 	bl	8006490 <HAL_UART_Receive>
  int i;
  for (i = 0; i < 8; i++) {
    value >>= 1;
    if (OW_Read_Bit())
      value |= 0x80;
 8002a32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    value >>= 1;
 8002a36:	0864      	lsrs	r4, r4, #1
    if (OW_Read_Bit())
 8002a38:	07db      	lsls	r3, r3, #31
      value |= 0x80;
 8002a3a:	bf44      	itt	mi
 8002a3c:	f064 047f 	ornmi	r4, r4, #127	; 0x7f
 8002a40:	b2e4      	uxtbmi	r4, r4
  for (i = 0; i < 8; i++) {
 8002a42:	3d01      	subs	r5, #1
 8002a44:	d1dd      	bne.n	8002a02 <OW_Read_Byte+0xa>
  }
  return value;
}
 8002a46:	4620      	mov	r0, r4
 8002a48:	b002      	add	sp, #8
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
 8002a4c:	2000068c 	.word	0x2000068c

08002a50 <OW_Write_Byte>:
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
	  }
}

void OW_Write_Byte(uint8_t byte)
{
 8002a50:	b570      	push	{r4, r5, r6, lr}
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002a52:	4e14      	ldr	r6, [pc, #80]	; (8002aa4 <OW_Write_Byte+0x54>)
{
 8002a54:	b082      	sub	sp, #8
 8002a56:	4604      	mov	r4, r0
 8002a58:	2508      	movs	r5, #8
 8002a5a:	e007      	b.n	8002a6c <OW_Write_Byte+0x1c>
	      uint8_t data_out = 0xff;
 8002a5c:	f88d e007 	strb.w	lr, [sp, #7]
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002a60:	f003 fbe6 	bl	8006230 <HAL_UART_Transmit>
  int i;
  for (i = 0; i < 8; i++) {
 8002a64:	3d01      	subs	r5, #1
    OW_Write_Bit(byte & 0x01);
    byte >>= 1;
 8002a66:	ea4f 0454 	mov.w	r4, r4, lsr #1
  for (i = 0; i < 8; i++) {
 8002a6a:	d018      	beq.n	8002a9e <OW_Write_Byte+0x4e>
	if (value) {
 8002a6c:	f014 0c01 	ands.w	ip, r4, #1
	      uint8_t data_out = 0xff;
 8002a70:	f04f 0eff 	mov.w	lr, #255	; 0xff
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	f04f 0201 	mov.w	r2, #1
 8002a7c:	f10d 0107 	add.w	r1, sp, #7
 8002a80:	4630      	mov	r0, r6
	if (value) {
 8002a82:	d1eb      	bne.n	8002a5c <OW_Write_Byte+0xc>
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f10d 0107 	add.w	r1, sp, #7
	      uint8_t data_out = 0x0;
 8002a8e:	f88d c007 	strb.w	ip, [sp, #7]
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002a92:	f003 fbcd 	bl	8006230 <HAL_UART_Transmit>
  for (i = 0; i < 8; i++) {
 8002a96:	3d01      	subs	r5, #1
    byte >>= 1;
 8002a98:	ea4f 0454 	mov.w	r4, r4, lsr #1
  for (i = 0; i < 8; i++) {
 8002a9c:	d1e6      	bne.n	8002a6c <OW_Write_Byte+0x1c>
  }
}
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd70      	pop	{r4, r5, r6, pc}
 8002aa2:	bf00      	nop
 8002aa4:	2000068c 	.word	0x2000068c

08002aa8 <OW_CRC>:
uint8_t OW_CRC(const uint8_t* data, int len)
{
  int i;
    uint8_t crc = 0;

    for (i = 0; i < len; i++)
 8002aa8:	1e0a      	subs	r2, r1, #0
 8002aaa:	dd55      	ble.n	8002b58 <OW_CRC+0xb0>
{
 8002aac:	b500      	push	{lr}
 8002aae:	1e43      	subs	r3, r0, #1
 8002ab0:	441a      	add	r2, r3
    uint8_t crc = 0;
 8002ab2:	2000      	movs	r0, #0
      crc = OW_CRC_BYTE(crc, data[i]);
 8002ab4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    crc >>= 1;
 8002ab8:	ea4f 0c50 	mov.w	ip, r0, lsr #1
    uint8_t b = crc ^ byte;
 8002abc:	4048      	eors	r0, r1
    if (b & 0x01)
 8002abe:	07c0      	lsls	r0, r0, #31
      crc ^= 0x8c;
 8002ac0:	bf48      	it	mi
 8002ac2:	f08c 0c8c 	eormi.w	ip, ip, #140	; 0x8c
    uint8_t b = crc ^ byte;
 8002ac6:	ea8c 0e51 	eor.w	lr, ip, r1, lsr #1
    crc >>= 1;
 8002aca:	ea4f 005c 	mov.w	r0, ip, lsr #1
    if (b & 0x01)
 8002ace:	f01e 0f01 	tst.w	lr, #1
      crc ^= 0x8c;
 8002ad2:	bf1c      	itt	ne
 8002ad4:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8002ad8:	b2c0      	uxtbne	r0, r0
    uint8_t b = crc ^ byte;
 8002ada:	ea80 0c91 	eor.w	ip, r0, r1, lsr #2
    if (b & 0x01)
 8002ade:	f01c 0f01 	tst.w	ip, #1
    crc >>= 1;
 8002ae2:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8002ae6:	bf1c      	itt	ne
 8002ae8:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8002aec:	b2c0      	uxtbne	r0, r0
    uint8_t b = crc ^ byte;
 8002aee:	ea80 0cd1 	eor.w	ip, r0, r1, lsr #3
    if (b & 0x01)
 8002af2:	f01c 0f01 	tst.w	ip, #1
    crc >>= 1;
 8002af6:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8002afa:	bf1c      	itt	ne
 8002afc:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8002b00:	b2c0      	uxtbne	r0, r0
    uint8_t b = crc ^ byte;
 8002b02:	ea80 1c11 	eor.w	ip, r0, r1, lsr #4
    if (b & 0x01)
 8002b06:	f01c 0f01 	tst.w	ip, #1
    crc >>= 1;
 8002b0a:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8002b0e:	bf1c      	itt	ne
 8002b10:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8002b14:	b2c0      	uxtbne	r0, r0
    uint8_t b = crc ^ byte;
 8002b16:	ea80 1c51 	eor.w	ip, r0, r1, lsr #5
    if (b & 0x01)
 8002b1a:	f01c 0f01 	tst.w	ip, #1
    crc >>= 1;
 8002b1e:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8002b22:	bf1c      	itt	ne
 8002b24:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8002b28:	b2c0      	uxtbne	r0, r0
    uint8_t b = crc ^ byte;
 8002b2a:	ea80 1c91 	eor.w	ip, r0, r1, lsr #6
    if (b & 0x01)
 8002b2e:	f01c 0f01 	tst.w	ip, #1
    crc >>= 1;
 8002b32:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8002b36:	bf1c      	itt	ne
 8002b38:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
 8002b3c:	b2c0      	uxtbne	r0, r0
    uint8_t b = crc ^ byte;
 8002b3e:	ea80 11d1 	eor.w	r1, r0, r1, lsr #7
    if (b & 0x01)
 8002b42:	07c9      	lsls	r1, r1, #31
    crc >>= 1;
 8002b44:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc ^= 0x8c;
 8002b48:	bf44      	itt	mi
 8002b4a:	f080 008c 	eormi.w	r0, r0, #140	; 0x8c
 8002b4e:	b2c0      	uxtbmi	r0, r0
    for (i = 0; i < len; i++)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d1af      	bne.n	8002ab4 <OW_CRC+0xc>

    return crc;
}
 8002b54:	f85d fb04 	ldr.w	pc, [sp], #4
    uint8_t crc = 0;
 8002b58:	2000      	movs	r0, #0
}
 8002b5a:	4770      	bx	lr

08002b5c <OW_Search>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
int OW_Search() {
 8002b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rom_byte_mask = 1;
	search_result = 0;
	crc8 = 0;

	// if the last call was not the last one
	if (!LastDeviceFlag) {
 8002b60:	4b6e      	ldr	r3, [pc, #440]	; (8002d1c <OW_Search+0x1c0>)
	crc8 = 0;
 8002b62:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8002d30 <OW_Search+0x1d4>
	if (!LastDeviceFlag) {
 8002b66:	681b      	ldr	r3, [r3, #0]
int OW_Search() {
 8002b68:	b085      	sub	sp, #20
	if (!LastDeviceFlag) {
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	9301      	str	r3, [sp, #4]
	crc8 = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f88a 3000 	strb.w	r3, [sl]
	if (!LastDeviceFlag) {
 8002b74:	b15a      	cbz	r2, 8002b8e <OW_Search+0x32>
 8002b76:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8002d34 <OW_Search+0x1d8>
		// 1-Wire reset
		if (OW_Reset() != HAL_OK) {
			// reset the search
			LastDiscrepancy = 0;
			LastDeviceFlag = FALSE;
			LastFamilyDiscrepancy = 0;
 8002b7a:	4b69      	ldr	r3, [pc, #420]	; (8002d20 <OW_Search+0x1c4>)
			LastDeviceFlag = FALSE;
 8002b7c:	4a67      	ldr	r2, [pc, #412]	; (8002d1c <OW_Search+0x1c0>)
			LastDiscrepancy = 0;
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f8cb 0000 	str.w	r0, [fp]
			LastDeviceFlag = FALSE;
 8002b84:	6010      	str	r0, [r2, #0]
			LastFamilyDiscrepancy = 0;
 8002b86:	6018      	str	r0, [r3, #0]
		LastFamilyDiscrepancy = 0;
		search_result = FALSE;
	}

	return search_result;
}
 8002b88:	b005      	add	sp, #20
 8002b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (OW_Reset() != HAL_OK) {
 8002b8e:	f7ff fedb 	bl	8002948 <OW_Reset>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d1ef      	bne.n	8002b76 <OW_Search+0x1a>
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002b96:	4e63      	ldr	r6, [pc, #396]	; (8002d24 <OW_Search+0x1c8>)
 8002b98:	2508      	movs	r5, #8
 8002b9a:	24f0      	movs	r4, #240	; 0xf0
 8002b9c:	e007      	b.n	8002bae <OW_Search+0x52>
	      uint8_t data_out = 0xff;
 8002b9e:	f88d c00f 	strb.w	ip, [sp, #15]
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002ba2:	f003 fb45 	bl	8006230 <HAL_UART_Transmit>
  for (i = 0; i < 8; i++) {
 8002ba6:	3d01      	subs	r5, #1
    byte >>= 1;
 8002ba8:	ea4f 0454 	mov.w	r4, r4, lsr #1
  for (i = 0; i < 8; i++) {
 8002bac:	d018      	beq.n	8002be0 <OW_Search+0x84>
	if (value) {
 8002bae:	f014 0701 	ands.w	r7, r4, #1
	      uint8_t data_out = 0xff;
 8002bb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	f04f 0201 	mov.w	r2, #1
 8002bbe:	f10d 010f 	add.w	r1, sp, #15
 8002bc2:	4630      	mov	r0, r6
	if (value) {
 8002bc4:	d1eb      	bne.n	8002b9e <OW_Search+0x42>
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f10d 010f 	add.w	r1, sp, #15
	      uint8_t data_out = 0x0;
 8002bd0:	f88d 700f 	strb.w	r7, [sp, #15]
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002bd4:	f003 fb2c 	bl	8006230 <HAL_UART_Transmit>
  for (i = 0; i < 8; i++) {
 8002bd8:	3d01      	subs	r5, #1
    byte >>= 1;
 8002bda:	ea4f 0454 	mov.w	r4, r4, lsr #1
  for (i = 0; i < 8; i++) {
 8002bde:	d1e6      	bne.n	8002bae <OW_Search+0x52>
	rom_byte_mask = 1;
 8002be0:	2401      	movs	r4, #1
 8002be2:	f8df b150 	ldr.w	fp, [pc, #336]	; 8002d34 <OW_Search+0x1d8>
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002be6:	4e4f      	ldr	r6, [pc, #316]	; (8002d24 <OW_Search+0x1c8>)
	id_bit_number = 1;
 8002be8:	46a1      	mov	r9, r4
	uint8_t data_out = 0xFF;
 8002bea:	27ff      	movs	r7, #255	; 0xff
	uint8_t data_in = 0;
 8002bec:	f04f 0800 	mov.w	r8, #0
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f10d 010e 	add.w	r1, sp, #14
 8002bfa:	4630      	mov	r0, r6
	uint8_t data_out = 0xFF;
 8002bfc:	f88d 700e 	strb.w	r7, [sp, #14]
	uint8_t data_in = 0;
 8002c00:	f88d 800f 	strb.w	r8, [sp, #15]
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002c04:	f003 fb14 	bl	8006230 <HAL_UART_Transmit>
	HAL_UART_Receive(&USART_INSTANCE, &data_in, 1, HAL_MAX_DELAY);
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f10d 010f 	add.w	r1, sp, #15
 8002c12:	4630      	mov	r0, r6
 8002c14:	f003 fc3c 	bl	8006490 <HAL_UART_Receive>
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f10d 010e 	add.w	r1, sp, #14
 8002c22:	4630      	mov	r0, r6
	uint8_t data_out = 0xFF;
 8002c24:	f88d 700e 	strb.w	r7, [sp, #14]
 8002c28:	f89d 700f 	ldrb.w	r7, [sp, #15]
	uint8_t data_in = 0;
 8002c2c:	f88d 800f 	strb.w	r8, [sp, #15]
	HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002c30:	f003 fafe 	bl	8006230 <HAL_UART_Transmit>
	HAL_UART_Receive(&USART_INSTANCE, &data_in, 1, HAL_MAX_DELAY);
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f10d 010f 	add.w	r1, sp, #15
 8002c3e:	4630      	mov	r0, r6
 8002c40:	f003 fc26 	bl	8006490 <HAL_UART_Receive>
 8002c44:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002c48:	f007 0701 	and.w	r7, r7, #1
	return data_in & 0x01;
 8002c4c:	f003 0301 	and.w	r3, r3, #1
			if ((id_bit == 1) && (cmp_id_bit == 1))
 8002c50:	2f00      	cmp	r7, #0
 8002c52:	d13d      	bne.n	8002cd0 <OW_Search+0x174>
				if (id_bit != cmp_id_bit)
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d043      	beq.n	8002ce0 <OW_Search+0x184>
					ROM_NO[rom_byte_number] |= rom_byte_mask;
 8002c58:	4f33      	ldr	r7, [pc, #204]	; (8002d28 <OW_Search+0x1cc>)
 8002c5a:	5d7b      	ldrb	r3, [r7, r5]
					ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002c5c:	ea23 0304 	bic.w	r3, r3, r4
 8002c60:	557b      	strb	r3, [r7, r5]
	      uint8_t data_out = 0x0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f88d 300f 	strb.w	r3, [sp, #15]
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	f10d 010f 	add.w	r1, sp, #15
 8002c72:	4630      	mov	r0, r6
				rom_byte_mask <<= 1;
 8002c74:	0064      	lsls	r4, r4, #1
	    HAL_UART_Transmit(&USART_INSTANCE, &data_out, 1, HAL_MAX_DELAY);
 8002c76:	f003 fadb 	bl	8006230 <HAL_UART_Transmit>
				if (rom_byte_mask == 0) {
 8002c7a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
				id_bit_number++;
 8002c7e:	f109 0901 	add.w	r9, r9, #1
				if (rom_byte_mask == 0) {
 8002c82:	d10c      	bne.n	8002c9e <OW_Search+0x142>
//
uint8_t OW_Crc_LUT(uint8_t value) {
	// See Application Note 27

	// TEST BUILD
	crc8 = dscrc_table[crc8 ^ value];
 8002c84:	f89a 2000 	ldrb.w	r2, [sl]
 8002c88:	5d7b      	ldrb	r3, [r7, r5]
 8002c8a:	4053      	eors	r3, r2
 8002c8c:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <OW_Search+0x1d0>)
					rom_byte_number++;
 8002c8e:	3501      	adds	r5, #1
	crc8 = dscrc_table[crc8 ^ value];
 8002c90:	5cd3      	ldrb	r3, [r2, r3]
 8002c92:	f88a 3000 	strb.w	r3, [sl]
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8002c96:	2d08      	cmp	r5, #8
 8002c98:	d003      	beq.n	8002ca2 <OW_Search+0x146>
					rom_byte_mask = 1;
 8002c9a:	2401      	movs	r4, #1
 8002c9c:	e7a5      	b.n	8002bea <OW_Search+0x8e>
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8002c9e:	2d08      	cmp	r5, #8
 8002ca0:	d1a3      	bne.n	8002bea <OW_Search+0x8e>
		if (!((id_bit_number < 65) || (crc8 != 0))) {
 8002ca2:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8002ca6:	f77f af68 	ble.w	8002b7a <OW_Search+0x1e>
 8002caa:	f89a 3000 	ldrb.w	r3, [sl]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f af63 	bne.w	8002b7a <OW_Search+0x1e>
			LastDiscrepancy = last_zero;
 8002cb4:	9b01      	ldr	r3, [sp, #4]
 8002cb6:	f8cb 3000 	str.w	r3, [fp]
			if (LastDiscrepancy == 0)
 8002cba:	b913      	cbnz	r3, 8002cc2 <OW_Search+0x166>
				LastDeviceFlag = TRUE;
 8002cbc:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <OW_Search+0x1c0>)
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	6013      	str	r3, [r2, #0]
	if (!search_result || !ROM_NO[0]) {
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <OW_Search+0x1cc>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f43f af57 	beq.w	8002b7a <OW_Search+0x1e>
			search_result = TRUE;
 8002ccc:	2001      	movs	r0, #1
 8002cce:	e75b      	b.n	8002b88 <OW_Search+0x2c>
			if ((id_bit == 1) && (cmp_id_bit == 1))
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e6      	bne.n	8002ca2 <OW_Search+0x146>
					ROM_NO[rom_byte_number] |= rom_byte_mask;
 8002cd4:	4f14      	ldr	r7, [pc, #80]	; (8002d28 <OW_Search+0x1cc>)
 8002cd6:	5d7b      	ldrb	r3, [r7, r5]
 8002cd8:	4323      	orrs	r3, r4
 8002cda:	557b      	strb	r3, [r7, r5]
	      uint8_t data_out = 0xff;
 8002cdc:	23ff      	movs	r3, #255	; 0xff
 8002cde:	e7c1      	b.n	8002c64 <OW_Search+0x108>
					if (id_bit_number < LastDiscrepancy)
 8002ce0:	f8db 3000 	ldr.w	r3, [fp]
						search_direction = ((ROM_NO[rom_byte_number]
 8002ce4:	4f10      	ldr	r7, [pc, #64]	; (8002d28 <OW_Search+0x1cc>)
					if (id_bit_number < LastDiscrepancy)
 8002ce6:	454b      	cmp	r3, r9
 8002ce8:	dd0f      	ble.n	8002d0a <OW_Search+0x1ae>
						search_direction = ((ROM_NO[rom_byte_number]
 8002cea:	5d7b      	ldrb	r3, [r7, r5]
								& rom_byte_mask) > 0);
 8002cec:	4223      	tst	r3, r4
						search_direction = ((ROM_NO[rom_byte_number]
 8002cee:	bf14      	ite	ne
 8002cf0:	2201      	movne	r2, #1
 8002cf2:	2200      	moveq	r2, #0
					if (search_direction == 0) {
 8002cf4:	2a00      	cmp	r2, #0
 8002cf6:	d1ef      	bne.n	8002cd8 <OW_Search+0x17c>
						if (last_zero < 9)
 8002cf8:	f1b9 0f08 	cmp.w	r9, #8
 8002cfc:	dc0a      	bgt.n	8002d14 <OW_Search+0x1b8>
							LastFamilyDiscrepancy = last_zero;
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <OW_Search+0x1c4>)
 8002d00:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d04:	f8c2 9000 	str.w	r9, [r2]
				if (search_direction == 1)
 8002d08:	e7a8      	b.n	8002c5c <OW_Search+0x100>
					ROM_NO[rom_byte_number] |= rom_byte_mask;
 8002d0a:	5d7b      	ldrb	r3, [r7, r5]
						search_direction = (id_bit_number == LastDiscrepancy);
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2201      	moveq	r2, #1
 8002d10:	2200      	movne	r2, #0
 8002d12:	e7ef      	b.n	8002cf4 <OW_Search+0x198>
 8002d14:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d18:	e7a0      	b.n	8002c5c <OW_Search+0x100>
 8002d1a:	bf00      	nop
 8002d1c:	20000714 	.word	0x20000714
 8002d20:	2000071c 	.word	0x2000071c
 8002d24:	2000068c 	.word	0x2000068c
 8002d28:	20000720 	.word	0x20000720
 8002d2c:	0800a398 	.word	0x0800a398
 8002d30:	20000728 	.word	0x20000728
 8002d34:	20000718 	.word	0x20000718

08002d38 <OW_Search_First>:
	LastDiscrepancy = 0;
 8002d38:	4804      	ldr	r0, [pc, #16]	; (8002d4c <OW_Search_First+0x14>)
	LastDeviceFlag = FALSE;
 8002d3a:	4905      	ldr	r1, [pc, #20]	; (8002d50 <OW_Search_First+0x18>)
	LastFamilyDiscrepancy = 0;
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <OW_Search_First+0x1c>)
	LastDiscrepancy = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	6003      	str	r3, [r0, #0]
	LastDeviceFlag = FALSE;
 8002d42:	600b      	str	r3, [r1, #0]
	LastFamilyDiscrepancy = 0;
 8002d44:	6013      	str	r3, [r2, #0]
	return OW_Search();
 8002d46:	f7ff bf09 	b.w	8002b5c <OW_Search>
 8002d4a:	bf00      	nop
 8002d4c:	20000718 	.word	0x20000718
 8002d50:	20000714 	.word	0x20000714
 8002d54:	2000071c 	.word	0x2000071c

08002d58 <OW_Search_Next>:
	return OW_Search();
 8002d58:	f7ff bf00 	b.w	8002b5c <OW_Search>

08002d5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d60:	f7ff fa26 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d64:	480c      	ldr	r0, [pc, #48]	; (8002d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d66:	490d      	ldr	r1, [pc, #52]	; (8002d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <LoopForever+0xe>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	; (8002da8 <LoopForever+0x16>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f005 f9c9 	bl	8008120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d8e:	f7fe fdb3 	bl	80018f8 <main>

08002d92 <LoopForever>:

LoopForever:
    b LoopForever
 8002d92:	e7fe      	b.n	8002d92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d9c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002da0:	0800a83c 	.word	0x0800a83c
  ldr r2, =_sbss
 8002da4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002da8:	2000087c 	.word	0x2000087c

08002dac <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <CAN1_RX0_IRQHandler>
	...

08002db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <HAL_InitTick+0x40>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b90b      	cbnz	r3, 8002dbc <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002db8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dbc:	490d      	ldr	r1, [pc, #52]	; (8002df4 <HAL_InitTick+0x44>)
 8002dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	6808      	ldr	r0, [r1, #0]
 8002dca:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dce:	f000 ff45 	bl	8003c5c <HAL_SYSTICK_Config>
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d1ef      	bne.n	8002db8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd8:	2d0f      	cmp	r5, #15
 8002dda:	d8ed      	bhi.n	8002db8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4629      	mov	r1, r5
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f000 feee 	bl	8003bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_InitTick+0x48>)
 8002dea:	4620      	mov	r0, r4
 8002dec:	601d      	str	r5, [r3, #0]
}
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
 8002df0:	20000004 	.word	0x20000004
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000008 	.word	0x20000008

08002dfc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_Init+0x2c>)
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002e04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e06:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e08:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e0a:	f000 fec9 	bl	8003ba0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7ff ffce 	bl	8002db0 <HAL_InitTick>
 8002e14:	b110      	cbz	r0, 8002e1c <HAL_Init+0x20>
    status = HAL_ERROR;
 8002e16:	2401      	movs	r4, #1
}
 8002e18:	4620      	mov	r0, r4
 8002e1a:	bd10      	pop	{r4, pc}
 8002e1c:	4604      	mov	r4, r0
    HAL_MspInit();
 8002e1e:	f7ff f911 	bl	8002044 <HAL_MspInit>
}
 8002e22:	4620      	mov	r0, r4
 8002e24:	bd10      	pop	{r4, pc}
 8002e26:	bf00      	nop
 8002e28:	40022000 	.word	0x40022000

08002e2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002e2c:	4a03      	ldr	r2, [pc, #12]	; (8002e3c <HAL_IncTick+0x10>)
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_IncTick+0x14>)
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	440b      	add	r3, r1
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	2000072c 	.word	0x2000072c
 8002e40:	20000004 	.word	0x20000004

08002e44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <HAL_GetTick+0x8>)
 8002e46:	6818      	ldr	r0, [r3, #0]
}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	2000072c 	.word	0x2000072c

08002e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff fff6 	bl	8002e44 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e58:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002e5a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002e5c:	d002      	beq.n	8002e64 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_Delay+0x20>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e64:	f7ff ffee 	bl	8002e44 <HAL_GetTick>
 8002e68:	1b43      	subs	r3, r0, r5
 8002e6a:	42a3      	cmp	r3, r4
 8002e6c:	d3fa      	bcc.n	8002e64 <HAL_Delay+0x14>
  {
  }
}
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	20000004 	.word	0x20000004

08002e74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e74:	b530      	push	{r4, r5, lr}
 8002e76:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	f000 80ba 	beq.w	8002ff6 <HAL_ADC_Init+0x182>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e82:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002e84:	4604      	mov	r4, r0
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	f000 80a2 	beq.w	8002fd0 <HAL_ADC_Init+0x15c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e8c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e8e:	6893      	ldr	r3, [r2, #8]
 8002e90:	009d      	lsls	r5, r3, #2
 8002e92:	d505      	bpl.n	8002ea0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e94:	6893      	ldr	r3, [r2, #8]
 8002e96:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e9e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ea0:	6893      	ldr	r3, [r2, #8]
 8002ea2:	00d8      	lsls	r0, r3, #3
 8002ea4:	d419      	bmi.n	8002eda <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea6:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_ADC_Init+0x1ac>)
 8002ea8:	485e      	ldr	r0, [pc, #376]	; (8003024 <HAL_ADC_Init+0x1b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002eac:	6891      	ldr	r1, [r2, #8]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	fba0 0303 	umull	r0, r3, r0, r3
 8002eb4:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002ec6:	6091      	str	r1, [r2, #8]
 8002ec8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002eca:	9b01      	ldr	r3, [sp, #4]
 8002ecc:	b12b      	cbz	r3, 8002eda <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8002ece:	9b01      	ldr	r3, [sp, #4]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002ed4:	9b01      	ldr	r3, [sp, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002eda:	6893      	ldr	r3, [r2, #8]
 8002edc:	00d9      	lsls	r1, r3, #3
 8002ede:	d469      	bmi.n	8002fb4 <HAL_ADC_Init+0x140>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ee2:	f043 0310 	orr.w	r3, r3, #16
 8002ee6:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee8:	6da3      	ldr	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eec:	4303      	orrs	r3, r0
 8002eee:	65a3      	str	r3, [r4, #88]	; 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ef0:	6893      	ldr	r3, [r2, #8]
 8002ef2:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ef6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ef8:	d163      	bne.n	8002fc2 <HAL_ADC_Init+0x14e>
 8002efa:	06db      	lsls	r3, r3, #27
 8002efc:	d461      	bmi.n	8002fc2 <HAL_ADC_Init+0x14e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f0a:	6893      	ldr	r3, [r2, #8]
 8002f0c:	07dd      	lsls	r5, r3, #31
 8002f0e:	d410      	bmi.n	8002f32 <HAL_ADC_Init+0xbe>
 8002f10:	4945      	ldr	r1, [pc, #276]	; (8003028 <HAL_ADC_Init+0x1b4>)
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_ADC_Init+0x1b8>)
 8002f14:	6889      	ldr	r1, [r1, #8]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	4945      	ldr	r1, [pc, #276]	; (8003030 <HAL_ADC_Init+0x1bc>)
 8002f1c:	6889      	ldr	r1, [r1, #8]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	07d9      	lsls	r1, r3, #31
 8002f22:	d406      	bmi.n	8002f32 <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f24:	4943      	ldr	r1, [pc, #268]	; (8003034 <HAL_ADC_Init+0x1c0>)
 8002f26:	6865      	ldr	r5, [r4, #4]
 8002f28:	688b      	ldr	r3, [r1, #8]
 8002f2a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f2e:	432b      	orrs	r3, r5
 8002f30:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8002f32:	68e5      	ldr	r5, [r4, #12]
 8002f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f36:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8002f3a:	432b      	orrs	r3, r5
 8002f3c:	68a5      	ldr	r5, [r4, #8]
 8002f3e:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f40:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f42:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8002f44:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f4c:	d04e      	beq.n	8002fec <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f50:	b121      	cbz	r1, 8002f5c <HAL_ADC_Init+0xe8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8002f52:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f54:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002f58:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f5a:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f5c:	68d5      	ldr	r5, [r2, #12]
 8002f5e:	4936      	ldr	r1, [pc, #216]	; (8003038 <HAL_ADC_Init+0x1c4>)
 8002f60:	4029      	ands	r1, r5
 8002f62:	4319      	orrs	r1, r3
 8002f64:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f66:	6893      	ldr	r3, [r2, #8]
 8002f68:	071b      	lsls	r3, r3, #28
 8002f6a:	d414      	bmi.n	8002f96 <HAL_ADC_Init+0x122>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f6c:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f6e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f72:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f74:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f78:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f7a:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f7e:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f86:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d036      	beq.n	8002ffc <HAL_ADC_Init+0x188>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f8e:	6913      	ldr	r3, [r2, #16]
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f96:	6923      	ldr	r3, [r4, #16]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d01f      	beq.n	8002fdc <HAL_ADC_Init+0x168>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f9e:	f023 030f 	bic.w	r3, r3, #15
 8002fa2:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002fb0:	b003      	add	sp, #12
 8002fb2:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fb4:	6893      	ldr	r3, [r2, #8]
 8002fb6:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fba:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fc0:	d09b      	beq.n	8002efa <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002fc4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	f043 0310 	orr.w	r3, r3, #16
 8002fca:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002fcc:	b003      	add	sp, #12
 8002fce:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002fd0:	f7fe f99a 	bl	8001308 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd4:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002fd6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002fda:	e757      	b.n	8002e8c <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fdc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002fde:	69e3      	ldr	r3, [r4, #28]
 8002fe0:	f021 010f 	bic.w	r1, r1, #15
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	e7db      	b.n	8002fa4 <HAL_ADC_Init+0x130>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fee:	3901      	subs	r1, #1
 8002ff0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002ff4:	e7ab      	b.n	8002f4e <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 8002ff6:	2001      	movs	r0, #1
}
 8002ff8:	b003      	add	sp, #12
 8002ffa:	bd30      	pop	{r4, r5, pc}
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ffc:	6911      	ldr	r1, [r2, #16]
 8002ffe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003000:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003002:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003006:	f021 0104 	bic.w	r1, r1, #4
 800300a:	432b      	orrs	r3, r5
 800300c:	430b      	orrs	r3, r1
 800300e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003010:	430b      	orrs	r3, r1
 8003012:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003014:	430b      	orrs	r3, r1
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6113      	str	r3, [r2, #16]
 800301c:	e7bb      	b.n	8002f96 <HAL_ADC_Init+0x122>
 800301e:	bf00      	nop
 8003020:	20000000 	.word	0x20000000
 8003024:	053e2d63 	.word	0x053e2d63
 8003028:	50040000 	.word	0x50040000
 800302c:	50040100 	.word	0x50040100
 8003030:	50040200 	.word	0x50040200
 8003034:	50040300 	.word	0x50040300
 8003038:	fff0c007 	.word	0xfff0c007

0800303c <HAL_ADC_ConvHalfCpltCallback>:
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop

08003040 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003040:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003042:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003044:	f7ff fffa 	bl	800303c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003048:	bd08      	pop	{r3, pc}
 800304a:	bf00      	nop

0800304c <HAL_ADC_LevelOutOfWindowCallback>:
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <HAL_ADC_ErrorCallback>:
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop

08003054 <HAL_ADC_IRQHandler>:
{
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003056:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003058:	4a8c      	ldr	r2, [pc, #560]	; (800328c <HAL_ADC_IRQHandler+0x238>)
 800305a:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800305c:	685e      	ldr	r6, [r3, #4]
 800305e:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003060:	07a9      	lsls	r1, r5, #30
{
 8003062:	4604      	mov	r4, r0
 8003064:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003068:	d502      	bpl.n	8003070 <HAL_ADC_IRQHandler+0x1c>
 800306a:	07b2      	lsls	r2, r6, #30
 800306c:	f100 809f 	bmi.w	80031ae <HAL_ADC_IRQHandler+0x15a>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003070:	0769      	lsls	r1, r5, #29
 8003072:	d579      	bpl.n	8003168 <HAL_ADC_IRQHandler+0x114>
 8003074:	0772      	lsls	r2, r6, #29
 8003076:	d577      	bpl.n	8003168 <HAL_ADC_IRQHandler+0x114>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003078:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800307a:	06d2      	lsls	r2, r2, #27
 800307c:	d403      	bmi.n	8003086 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800307e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003084:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800308c:	d11c      	bne.n	80030c8 <HAL_ADC_IRQHandler+0x74>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800308e:	4a80      	ldr	r2, [pc, #512]	; (8003290 <HAL_ADC_IRQHandler+0x23c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	f000 80dc 	beq.w	800324e <HAL_ADC_IRQHandler+0x1fa>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003096:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003098:	0490      	lsls	r0, r2, #18
 800309a:	d415      	bmi.n	80030c8 <HAL_ADC_IRQHandler+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	0711      	lsls	r1, r2, #28
 80030a0:	d512      	bpl.n	80030c8 <HAL_ADC_IRQHandler+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	0752      	lsls	r2, r2, #29
 80030a6:	f100 80df 	bmi.w	8003268 <HAL_ADC_IRQHandler+0x214>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	f022 020c 	bic.w	r2, r2, #12
 80030b0:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b8:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030bc:	04db      	lsls	r3, r3, #19
 80030be:	d403      	bmi.n	80030c8 <HAL_ADC_IRQHandler+0x74>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7fe ffb7 	bl	800203c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	220c      	movs	r2, #12
 80030d2:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030d4:	06a8      	lsls	r0, r5, #26
 80030d6:	d54d      	bpl.n	8003174 <HAL_ADC_IRQHandler+0x120>
 80030d8:	06b1      	lsls	r1, r6, #26
 80030da:	d54b      	bpl.n	8003174 <HAL_ADC_IRQHandler+0x120>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80030de:	06d1      	lsls	r1, r2, #27
 80030e0:	d403      	bmi.n	80030ea <HAL_ADC_IRQHandler+0x96>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80030e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e8:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030ea:	4969      	ldr	r1, [pc, #420]	; (8003290 <HAL_ADC_IRQHandler+0x23c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80030ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030ee:	68d8      	ldr	r0, [r3, #12]
 80030f0:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80030f2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80030f6:	d068      	beq.n	80031ca <HAL_ADC_IRQHandler+0x176>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80030f8:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80030fa:	b9d2      	cbnz	r2, 8003132 <HAL_ADC_IRQHandler+0xde>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	f100 809e 	bmi.w	800323e <HAL_ADC_IRQHandler+0x1ea>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	0650      	lsls	r0, r2, #25
 8003106:	d514      	bpl.n	8003132 <HAL_ADC_IRQHandler+0xde>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003108:	0289      	lsls	r1, r1, #10
 800310a:	d412      	bmi.n	8003132 <HAL_ADC_IRQHandler+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	0712      	lsls	r2, r2, #28
 8003110:	f100 80b3 	bmi.w	800327a <HAL_ADC_IRQHandler+0x226>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800311a:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800311c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800311e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003122:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003124:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003126:	05d8      	lsls	r0, r3, #23
 8003128:	d403      	bmi.n	8003132 <HAL_ADC_IRQHandler+0xde>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800312a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003132:	4620      	mov	r0, r4
 8003134:	f000 fcb2 	bl	8003a9c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	2260      	movs	r2, #96	; 0x60
 800313c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800313e:	0629      	lsls	r1, r5, #24
 8003140:	d501      	bpl.n	8003146 <HAL_ADC_IRQHandler+0xf2>
 8003142:	0632      	lsls	r2, r6, #24
 8003144:	d454      	bmi.n	80031f0 <HAL_ADC_IRQHandler+0x19c>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003146:	05e8      	lsls	r0, r5, #23
 8003148:	d501      	bpl.n	800314e <HAL_ADC_IRQHandler+0xfa>
 800314a:	05f1      	lsls	r1, r6, #23
 800314c:	d45b      	bmi.n	8003206 <HAL_ADC_IRQHandler+0x1b2>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800314e:	05aa      	lsls	r2, r5, #22
 8003150:	d501      	bpl.n	8003156 <HAL_ADC_IRQHandler+0x102>
 8003152:	05b0      	lsls	r0, r6, #22
 8003154:	d440      	bmi.n	80031d8 <HAL_ADC_IRQHandler+0x184>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003156:	06e9      	lsls	r1, r5, #27
 8003158:	d501      	bpl.n	800315e <HAL_ADC_IRQHandler+0x10a>
 800315a:	06f2      	lsls	r2, r6, #27
 800315c:	d40f      	bmi.n	800317e <HAL_ADC_IRQHandler+0x12a>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800315e:	056d      	lsls	r5, r5, #21
 8003160:	d501      	bpl.n	8003166 <HAL_ADC_IRQHandler+0x112>
 8003162:	0570      	lsls	r0, r6, #21
 8003164:	d45b      	bmi.n	800321e <HAL_ADC_IRQHandler+0x1ca>
}
 8003166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003168:	0728      	lsls	r0, r5, #28
 800316a:	d5b3      	bpl.n	80030d4 <HAL_ADC_IRQHandler+0x80>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800316c:	0731      	lsls	r1, r6, #28
 800316e:	d483      	bmi.n	8003078 <HAL_ADC_IRQHandler+0x24>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003170:	06a8      	lsls	r0, r5, #26
 8003172:	d4b1      	bmi.n	80030d8 <HAL_ADC_IRQHandler+0x84>
 8003174:	066a      	lsls	r2, r5, #25
 8003176:	d5e2      	bpl.n	800313e <HAL_ADC_IRQHandler+0xea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003178:	0670      	lsls	r0, r6, #25
 800317a:	d5e0      	bpl.n	800313e <HAL_ADC_IRQHandler+0xea>
 800317c:	e7ae      	b.n	80030dc <HAL_ADC_IRQHandler+0x88>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800317e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003180:	b132      	cbz	r2, 8003190 <HAL_ADC_IRQHandler+0x13c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003182:	2f00      	cmp	r7, #0
 8003184:	d06c      	beq.n	8003260 <HAL_ADC_IRQHandler+0x20c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003186:	4a41      	ldr	r2, [pc, #260]	; (800328c <HAL_ADC_IRQHandler+0x238>)
 8003188:	6892      	ldr	r2, [r2, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800318a:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 800318e:	d00b      	beq.n	80031a8 <HAL_ADC_IRQHandler+0x154>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003190:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003196:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003198:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80031a0:	4620      	mov	r0, r4
 80031a2:	f7ff ff55 	bl	8003050 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	2210      	movs	r2, #16
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e7d7      	b.n	800315e <HAL_ADC_IRQHandler+0x10a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80031b0:	06d8      	lsls	r0, r3, #27
 80031b2:	d403      	bmi.n	80031bc <HAL_ADC_IRQHandler+0x168>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80031b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031ba:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80031bc:	4620      	mov	r0, r4
 80031be:	f000 fc75 	bl	8003aac <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	2202      	movs	r2, #2
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e752      	b.n	8003070 <HAL_ADC_IRQHandler+0x1c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ca:	21c1      	movs	r1, #193	; 0xc1
 80031cc:	40f9      	lsrs	r1, r7
 80031ce:	07c9      	lsls	r1, r1, #31
 80031d0:	d492      	bmi.n	80030f8 <HAL_ADC_IRQHandler+0xa4>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031d2:	4930      	ldr	r1, [pc, #192]	; (8003294 <HAL_ADC_IRQHandler+0x240>)
 80031d4:	68c9      	ldr	r1, [r1, #12]
 80031d6:	e790      	b.n	80030fa <HAL_ADC_IRQHandler+0xa6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80031d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031de:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 fc61 	bl	8003aa8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e7b2      	b.n	8003156 <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7ff ff27 	bl	800304c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e79f      	b.n	8003146 <HAL_ADC_IRQHandler+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003206:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800320e:	4620      	mov	r0, r4
 8003210:	f000 fc48 	bl	8003aa4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e797      	b.n	800314e <HAL_ADC_IRQHandler+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800321e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003224:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003226:	6da2      	ldr	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003228:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800322c:	f042 0208 	orr.w	r2, r2, #8
 8003230:	65a2      	str	r2, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003232:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003234:	6019      	str	r1, [r3, #0]
}
 8003236:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800323a:	f000 bc31 	b.w	8003aa0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800323e:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003242:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003246:	4302      	orrs	r2, r0
 8003248:	f47f af73 	bne.w	8003132 <HAL_ADC_IRQHandler+0xde>
 800324c:	e759      	b.n	8003102 <HAL_ADC_IRQHandler+0xae>
 800324e:	f240 2221 	movw	r2, #545	; 0x221
 8003252:	40fa      	lsrs	r2, r7
 8003254:	07d2      	lsls	r2, r2, #31
 8003256:	f53f af1e 	bmi.w	8003096 <HAL_ADC_IRQHandler+0x42>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800325a:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <HAL_ADC_IRQHandler+0x240>)
 800325c:	68d2      	ldr	r2, [r2, #12]
 800325e:	e71b      	b.n	8003098 <HAL_ADC_IRQHandler+0x44>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	07d7      	lsls	r7, r2, #31
 8003264:	d5a0      	bpl.n	80031a8 <HAL_ADC_IRQHandler+0x154>
 8003266:	e793      	b.n	8003190 <HAL_ADC_IRQHandler+0x13c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003268:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800326a:	f043 0310 	orr.w	r3, r3, #16
 800326e:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003270:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	65a3      	str	r3, [r4, #88]	; 0x58
 8003278:	e726      	b.n	80030c8 <HAL_ADC_IRQHandler+0x74>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800327c:	f043 0310 	orr.w	r3, r3, #16
 8003280:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	65a3      	str	r3, [r4, #88]	; 0x58
 800328a:	e752      	b.n	8003132 <HAL_ADC_IRQHandler+0xde>
 800328c:	50040300 	.word	0x50040300
 8003290:	50040100 	.word	0x50040100
 8003294:	50040000 	.word	0x50040000

08003298 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003298:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800329a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800329c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80032a0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032a4:	d11d      	bne.n	80032e2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032a6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032ae:	680a      	ldr	r2, [r1, #0]
 80032b0:	f012 0f08 	tst.w	r2, #8
 80032b4:	68ca      	ldr	r2, [r1, #12]
 80032b6:	d01b      	beq.n	80032f0 <ADC_DMAConvCplt+0x58>
 80032b8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80032bc:	d10d      	bne.n	80032da <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032be:	68ca      	ldr	r2, [r1, #12]
 80032c0:	0494      	lsls	r4, r2, #18
 80032c2:	d40a      	bmi.n	80032da <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ce:	04d1      	lsls	r1, r2, #19
 80032d0:	d403      	bmi.n	80032da <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe feae 	bl	800203c <HAL_ADC_ConvCpltCallback>
}
 80032e0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032e2:	06d2      	lsls	r2, r2, #27
 80032e4:	d40a      	bmi.n	80032fc <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032f0:	0790      	lsls	r0, r2, #30
 80032f2:	d5e7      	bpl.n	80032c4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fea1 	bl	800203c <HAL_ADC_ConvCpltCallback>
 80032fa:	e7f1      	b.n	80032e0 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fea7 	bl	8003050 <HAL_ADC_ErrorCallback>
}
 8003302:	bd10      	pop	{r4, pc}

08003304 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003304:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003306:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003308:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800330a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003310:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003318:	f7ff fe9a 	bl	8003050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800331c:	bd08      	pop	{r3, pc}
 800331e:	bf00      	nop

08003320 <HAL_ADC_ConfigChannel>:
{
 8003320:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8003322:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8003326:	b083      	sub	sp, #12
 8003328:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800332a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800332c:	f04f 0000 	mov.w	r0, #0
 8003330:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003332:	f000 813a 	beq.w	80035aa <HAL_ADC_ConfigChannel+0x28a>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003336:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8003338:	2001      	movs	r0, #1
 800333a:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800333e:	68a2      	ldr	r2, [r4, #8]
 8003340:	f012 0c04 	ands.w	ip, r2, #4
 8003344:	d158      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0xd8>
    uint32_t config_rank = pConfig->Rank;
 8003346:	6848      	ldr	r0, [r1, #4]
    if (pConfig->Rank <= 5U)
 8003348:	2805      	cmp	r0, #5
 800334a:	f240 8095 	bls.w	8003478 <HAL_ADC_ConfigChannel+0x158>
  MODIFY_REG(*preg,
 800334e:	f000 051f 	and.w	r5, r0, #31
 8003352:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003356:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8003358:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800335c:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8003360:	ea6f 0e0e 	mvn.w	lr, lr
 8003364:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003366:	f104 0030 	add.w	r0, r4, #48	; 0x30
  MODIFY_REG(*preg,
 800336a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800336e:	40aa      	lsls	r2, r5
 8003370:	f850 500c 	ldr.w	r5, [r0, ip]
 8003374:	ea05 0e0e 	and.w	lr, r5, lr
 8003378:	ea42 020e 	orr.w	r2, r2, lr
 800337c:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003380:	68a2      	ldr	r2, [r4, #8]
 8003382:	0756      	lsls	r6, r2, #29
 8003384:	d546      	bpl.n	8003414 <HAL_ADC_ConfigChannel+0xf4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003386:	68a2      	ldr	r2, [r4, #8]
 8003388:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800338a:	68a0      	ldr	r0, [r4, #8]
 800338c:	07c5      	lsls	r5, r0, #31
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800338e:	4616      	mov	r6, r2
 8003390:	d413      	bmi.n	80033ba <HAL_ADC_ConfigChannel+0x9a>
 8003392:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003394:	48b4      	ldr	r0, [pc, #720]	; (8003668 <HAL_ADC_ConfigChannel+0x348>)
 8003396:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 800339a:	f007 0c18 	and.w	ip, r7, #24
 800339e:	fa20 f00c 	lsr.w	r0, r0, ip
 80033a2:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80033a6:	4010      	ands	r0, r2
 80033a8:	ea25 050c 	bic.w	r5, r5, ip
 80033ac:	4328      	orrs	r0, r5
 80033ae:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033b2:	48ae      	ldr	r0, [pc, #696]	; (800366c <HAL_ADC_ConfigChannel+0x34c>)
 80033b4:	4287      	cmp	r7, r0
 80033b6:	f000 80a7 	beq.w	8003508 <HAL_ADC_ConfigChannel+0x1e8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033ba:	4aad      	ldr	r2, [pc, #692]	; (8003670 <HAL_ADC_ConfigChannel+0x350>)
 80033bc:	4216      	tst	r6, r2
 80033be:	d027      	beq.n	8003410 <HAL_ADC_ConfigChannel+0xf0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033c0:	4aac      	ldr	r2, [pc, #688]	; (8003674 <HAL_ADC_ConfigChannel+0x354>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033c2:	49ad      	ldr	r1, [pc, #692]	; (8003678 <HAL_ADC_ConfigChannel+0x358>)
 80033c4:	6890      	ldr	r0, [r2, #8]
 80033c6:	428e      	cmp	r6, r1
 80033c8:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 80033cc:	d01d      	beq.n	800340a <HAL_ADC_ConfigChannel+0xea>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033ce:	49ab      	ldr	r1, [pc, #684]	; (800367c <HAL_ADC_ConfigChannel+0x35c>)
 80033d0:	428e      	cmp	r6, r1
 80033d2:	f000 80ed 	beq.w	80035b0 <HAL_ADC_ConfigChannel+0x290>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033d6:	49aa      	ldr	r1, [pc, #680]	; (8003680 <HAL_ADC_ConfigChannel+0x360>)
 80033d8:	428e      	cmp	r6, r1
 80033da:	d119      	bne.n	8003410 <HAL_ADC_ConfigChannel+0xf0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033dc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80033e0:	d116      	bne.n	8003410 <HAL_ADC_ConfigChannel+0xf0>
        if (ADC_VREFINT_INSTANCE(hadc))
 80033e2:	49a8      	ldr	r1, [pc, #672]	; (8003684 <HAL_ADC_ConfigChannel+0x364>)
 80033e4:	428c      	cmp	r4, r1
 80033e6:	d113      	bne.n	8003410 <HAL_ADC_ConfigChannel+0xf0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033e8:	6891      	ldr	r1, [r2, #8]
 80033ea:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80033ee:	4329      	orrs	r1, r5
 80033f0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80033f4:	6091      	str	r1, [r2, #8]
}
 80033f6:	e003      	b.n	8003400 <HAL_ADC_ConfigChannel+0xe0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003406:	b003      	add	sp, #12
 8003408:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800340a:	0200      	lsls	r0, r0, #8
 800340c:	f140 80f5 	bpl.w	80035fa <HAL_ADC_ConfigChannel+0x2da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003410:	2000      	movs	r0, #0
 8003412:	e7f5      	b.n	8003400 <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003414:	68a2      	ldr	r2, [r4, #8]
 8003416:	0712      	lsls	r2, r2, #28
 8003418:	d465      	bmi.n	80034e6 <HAL_ADC_ConfigChannel+0x1c6>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800341a:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(*preg,
 800341c:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800341e:	0dc5      	lsrs	r5, r0, #23
 8003420:	f005 0504 	and.w	r5, r5, #4
 8003424:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8003428:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800342c:	fa02 f700 	lsl.w	r7, r2, r0
 8003430:	f04f 0c07 	mov.w	ip, #7
 8003434:	5972      	ldr	r2, [r6, r5]
 8003436:	fa0c f000 	lsl.w	r0, ip, r0
 800343a:	ea22 0200 	bic.w	r2, r2, r0
 800343e:	433a      	orrs	r2, r7
 8003440:	5172      	str	r2, [r6, r5]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003442:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003446:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003448:	68e2      	ldr	r2, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800344a:	d01c      	beq.n	8003486 <HAL_ADC_ConfigChannel+0x166>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800344c:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003450:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003454:	0052      	lsls	r2, r2, #1
  MODIFY_REG(*preg,
 8003456:	f850 c025 	ldr.w	ip, [r0, r5, lsl #2]
 800345a:	4f8b      	ldr	r7, [pc, #556]	; (8003688 <HAL_ADC_ConfigChannel+0x368>)
 800345c:	4096      	lsls	r6, r2
 800345e:	680a      	ldr	r2, [r1, #0]
 8003460:	ea0c 0707 	and.w	r7, ip, r7
 8003464:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003468:	433a      	orrs	r2, r7
 800346a:	4332      	orrs	r2, r6
 800346c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003470:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
 8003474:	680a      	ldr	r2, [r1, #0]
}
 8003476:	e788      	b.n	800338a <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 8003478:	3802      	subs	r0, #2
 800347a:	2803      	cmp	r0, #3
 800347c:	d935      	bls.n	80034ea <HAL_ADC_ConfigChannel+0x1ca>
    if (pConfig->Rank <= 5U)
 800347e:	f46f 6ef8 	mvn.w	lr, #1984	; 0x7c0
 8003482:	2506      	movs	r5, #6
 8003484:	e76e      	b.n	8003364 <HAL_ADC_ConfigChannel+0x44>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003486:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003488:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800348a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800348c:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003490:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003494:	2d00      	cmp	r5, #0
 8003496:	f040 80ff 	bne.w	8003698 <HAL_ADC_ConfigChannel+0x378>
 800349a:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800349e:	42a8      	cmp	r0, r5
 80034a0:	f000 8173 	beq.w	800378a <HAL_ADC_ConfigChannel+0x46a>
 80034a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80034a6:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a8:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034ac:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80034b0:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80034b4:	42ae      	cmp	r6, r5
 80034b6:	f000 8156 	beq.w	8003766 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034ba:	6886      	ldr	r6, [r0, #8]
 80034bc:	6886      	ldr	r6, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034be:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034c2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80034c6:	42ae      	cmp	r6, r5
 80034c8:	f000 813b 	beq.w	8003742 <HAL_ADC_ConfigChannel+0x422>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034cc:	68c6      	ldr	r6, [r0, #12]
 80034ce:	68c6      	ldr	r6, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d0:	f100 070c 	add.w	r7, r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034d4:	f3c6 6084 	ubfx	r0, r6, #26, #5
 80034d8:	4285      	cmp	r5, r0
 80034da:	f47f af56 	bne.w	800338a <HAL_ADC_ConfigChannel+0x6a>
  MODIFY_REG(*preg,
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034e4:	603a      	str	r2, [r7, #0]
 80034e6:	680a      	ldr	r2, [r1, #0]
}
 80034e8:	e74f      	b.n	800338a <HAL_ADC_ConfigChannel+0x6a>
 80034ea:	4a68      	ldr	r2, [pc, #416]	; (800368c <HAL_ADC_ConfigChannel+0x36c>)
 80034ec:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 80034f0:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80034f4:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 80034f6:	f005 051f 	and.w	r5, r5, #31
 80034fa:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80034fe:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8003502:	ea6f 0e0e 	mvn.w	lr, lr
 8003506:	e72d      	b.n	8003364 <HAL_ADC_ConfigChannel+0x44>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003508:	f1bc 0f00 	cmp.w	ip, #0
 800350c:	d065      	beq.n	80035da <HAL_ADC_ConfigChannel+0x2ba>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003512:	2800      	cmp	r0, #0
 8003514:	f000 80f1 	beq.w	80036fa <HAL_ADC_ConfigChannel+0x3da>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003518:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351c:	3001      	adds	r0, #1
 800351e:	f000 001f 	and.w	r0, r0, #31
 8003522:	2809      	cmp	r0, #9
 8003524:	f240 80e9 	bls.w	80036fa <HAL_ADC_ConfigChannel+0x3da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800352c:	2800      	cmp	r0, #0
 800352e:	f000 8148 	beq.w	80037c2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003532:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003536:	3001      	adds	r0, #1
 8003538:	0680      	lsls	r0, r0, #26
 800353a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8003542:	2d00      	cmp	r5, #0
 8003544:	f000 8142 	beq.w	80037cc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003548:	fab5 f585 	clz	r5, r5
 800354c:	3501      	adds	r5, #1
 800354e:	f005 051f 	and.w	r5, r5, #31
 8003552:	2601      	movs	r6, #1
 8003554:	fa06 f505 	lsl.w	r5, r6, r5
 8003558:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800355e:	2a00      	cmp	r2, #0
 8003560:	f000 8132 	beq.w	80037c8 <HAL_ADC_ConfigChannel+0x4a8>
  return __builtin_clz(value);
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	1c55      	adds	r5, r2, #1
 800356a:	f005 051f 	and.w	r5, r5, #31
 800356e:	2203      	movs	r2, #3
 8003570:	f06f 061d 	mvn.w	r6, #29
 8003574:	fb12 6205 	smlabb	r2, r2, r5, r6
 8003578:	0512      	lsls	r2, r2, #20
 800357a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800357e:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003580:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 8003582:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003584:	f006 0604 	and.w	r6, r6, #4
 8003588:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 800358c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003590:	fa00 f702 	lsl.w	r7, r0, r2
 8003594:	f04f 0c07 	mov.w	ip, #7
 8003598:	59a8      	ldr	r0, [r5, r6]
 800359a:	fa0c f202 	lsl.w	r2, ip, r2
 800359e:	ea20 0202 	bic.w	r2, r0, r2
 80035a2:	433a      	orrs	r2, r7
 80035a4:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035a6:	680e      	ldr	r6, [r1, #0]
}
 80035a8:	e707      	b.n	80033ba <HAL_ADC_ConfigChannel+0x9a>
  __HAL_LOCK(hadc);
 80035aa:	2002      	movs	r0, #2
}
 80035ac:	b003      	add	sp, #12
 80035ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b0:	01c1      	lsls	r1, r0, #7
 80035b2:	f53f af2d 	bmi.w	8003410 <HAL_ADC_ConfigChannel+0xf0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b6:	4a33      	ldr	r2, [pc, #204]	; (8003684 <HAL_ADC_ConfigChannel+0x364>)
 80035b8:	4294      	cmp	r4, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_ADC_ConfigChannel+0x2a6>
 80035bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80035c0:	4294      	cmp	r4, r2
 80035c2:	f47f af25 	bne.w	8003410 <HAL_ADC_ConfigChannel+0xf0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035c6:	492b      	ldr	r1, [pc, #172]	; (8003674 <HAL_ADC_ConfigChannel+0x354>)
 80035c8:	688a      	ldr	r2, [r1, #8]
 80035ca:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80035ce:	432a      	orrs	r2, r5
 80035d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d4:	2000      	movs	r0, #0
 80035d6:	608a      	str	r2, [r1, #8]
}
 80035d8:	e712      	b.n	8003400 <HAL_ADC_ConfigChannel+0xe0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035da:	0e92      	lsrs	r2, r2, #26
 80035dc:	3201      	adds	r2, #1
 80035de:	f002 051f 	and.w	r5, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e2:	2d09      	cmp	r5, #9
 80035e4:	d831      	bhi.n	800364a <HAL_ADC_ConfigChannel+0x32a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035e6:	0690      	lsls	r0, r2, #26
 80035e8:	2201      	movs	r2, #1
 80035ea:	40aa      	lsls	r2, r5
 80035ec:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80035f0:	4310      	orrs	r0, r2
 80035f2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80035f6:	0512      	lsls	r2, r2, #20
 80035f8:	e7c1      	b.n	800357e <HAL_ADC_ConfigChannel+0x25e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035fa:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 80035fe:	4294      	cmp	r4, r2
 8003600:	d004      	beq.n	800360c <HAL_ADC_ConfigChannel+0x2ec>
 8003602:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003606:	4294      	cmp	r4, r2
 8003608:	f47f af02 	bne.w	8003410 <HAL_ADC_ConfigChannel+0xf0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800360c:	4919      	ldr	r1, [pc, #100]	; (8003674 <HAL_ADC_ConfigChannel+0x354>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360e:	4820      	ldr	r0, [pc, #128]	; (8003690 <HAL_ADC_ConfigChannel+0x370>)
 8003610:	688a      	ldr	r2, [r1, #8]
 8003612:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003616:	432a      	orrs	r2, r5
 8003618:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800361c:	608a      	str	r2, [r1, #8]
 800361e:	6802      	ldr	r2, [r0, #0]
 8003620:	491c      	ldr	r1, [pc, #112]	; (8003694 <HAL_ADC_ConfigChannel+0x374>)
 8003622:	0992      	lsrs	r2, r2, #6
 8003624:	fba1 1202 	umull	r1, r2, r1, r2
 8003628:	0992      	lsrs	r2, r2, #6
 800362a:	3201      	adds	r2, #1
 800362c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003634:	9a01      	ldr	r2, [sp, #4]
 8003636:	2a00      	cmp	r2, #0
 8003638:	f43f aeea 	beq.w	8003410 <HAL_ADC_ConfigChannel+0xf0>
            wait_loop_index--;
 800363c:	9a01      	ldr	r2, [sp, #4]
 800363e:	3a01      	subs	r2, #1
 8003640:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003642:	9a01      	ldr	r2, [sp, #4]
 8003644:	2a00      	cmp	r2, #0
 8003646:	d1f9      	bne.n	800363c <HAL_ADC_ConfigChannel+0x31c>
 8003648:	e6e2      	b.n	8003410 <HAL_ADC_ConfigChannel+0xf0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800364a:	0690      	lsls	r0, r2, #26
 800364c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8003650:	3a1e      	subs	r2, #30
 8003652:	2601      	movs	r6, #1
 8003654:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003658:	0512      	lsls	r2, r2, #20
 800365a:	fa06 f505 	lsl.w	r5, r6, r5
 800365e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003662:	4328      	orrs	r0, r5
 8003664:	e78b      	b.n	800357e <HAL_ADC_ConfigChannel+0x25e>
 8003666:	bf00      	nop
 8003668:	0007ffff 	.word	0x0007ffff
 800366c:	407f0000 	.word	0x407f0000
 8003670:	80080000 	.word	0x80080000
 8003674:	50040300 	.word	0x50040300
 8003678:	c7520000 	.word	0xc7520000
 800367c:	cb840000 	.word	0xcb840000
 8003680:	80000001 	.word	0x80000001
 8003684:	50040000 	.word	0x50040000
 8003688:	03fff000 	.word	0x03fff000
 800368c:	0800a498 	.word	0x0800a498
 8003690:	20000000 	.word	0x20000000
 8003694:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800369c:	b11d      	cbz	r5, 80036a6 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800369e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036a2:	42a8      	cmp	r0, r5
 80036a4:	d071      	beq.n	800378a <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036a6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80036a8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036aa:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036ae:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80036b2:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80036ba:	b11d      	cbz	r5, 80036c4 <HAL_ADC_ConfigChannel+0x3a4>
  return __builtin_clz(value);
 80036bc:	fab5 f585 	clz	r5, r5
 80036c0:	42ae      	cmp	r6, r5
 80036c2:	d050      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036c4:	6885      	ldr	r5, [r0, #8]
 80036c6:	6886      	ldr	r6, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036c8:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036cc:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80036d4:	b11d      	cbz	r5, 80036de <HAL_ADC_ConfigChannel+0x3be>
  return __builtin_clz(value);
 80036d6:	fab5 f585 	clz	r5, r5
 80036da:	42ae      	cmp	r6, r5
 80036dc:	d031      	beq.n	8003742 <HAL_ADC_ConfigChannel+0x422>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036de:	68c5      	ldr	r5, [r0, #12]
 80036e0:	68c5      	ldr	r5, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036e2:	f100 070c 	add.w	r7, r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e6:	f3c5 6084 	ubfx	r0, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	f43f ae4b 	beq.w	800338a <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 80036f4:	fab5 f585 	clz	r5, r5
 80036f8:	e6ee      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x1b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80036fe:	2800      	cmp	r0, #0
 8003700:	d059      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8003702:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003706:	3001      	adds	r0, #1
 8003708:	0680      	lsls	r0, r0, #26
 800370a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8003712:	2d00      	cmp	r5, #0
 8003714:	d04d      	beq.n	80037b2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003716:	fab5 f585 	clz	r5, r5
 800371a:	3501      	adds	r5, #1
 800371c:	f005 051f 	and.w	r5, r5, #31
 8003720:	2601      	movs	r6, #1
 8003722:	fa06 f505 	lsl.w	r5, r6, r5
 8003726:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800372c:	2a00      	cmp	r2, #0
 800372e:	d045      	beq.n	80037bc <HAL_ADC_ConfigChannel+0x49c>
  return __builtin_clz(value);
 8003730:	fab2 f282 	clz	r2, r2
 8003734:	3201      	adds	r2, #1
 8003736:	f002 021f 	and.w	r2, r2, #31
 800373a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800373e:	0512      	lsls	r2, r2, #20
 8003740:	e71d      	b.n	800357e <HAL_ADC_ConfigChannel+0x25e>
  MODIFY_REG(*preg,
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003748:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800374a:	68c2      	ldr	r2, [r0, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800374c:	680a      	ldr	r2, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800374e:	f100 070c 	add.w	r7, r0, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003752:	68c0      	ldr	r0, [r0, #12]
 8003754:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003758:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800375c:	2d00      	cmp	r5, #0
 800375e:	d1c4      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x3ca>
 8003760:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8003764:	e6b8      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x1b8>
  MODIFY_REG(*preg,
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800376c:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800376e:	6882      	ldr	r2, [r0, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003770:	680a      	ldr	r2, [r1, #0]
 8003772:	6886      	ldr	r6, [r0, #8]
 8003774:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003778:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800377c:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003780:	2d00      	cmp	r5, #0
 8003782:	d1a5      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x3b0>
 8003784:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8003788:	e69d      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x1a6>
  MODIFY_REG(*preg,
 800378a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800378c:	4620      	mov	r0, r4
 800378e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003792:	f840 2f60 	str.w	r2, [r0, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003796:	6e62      	ldr	r2, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003798:	680a      	ldr	r2, [r1, #0]
 800379a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800379c:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037a0:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037a4:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037a8:	2d00      	cmp	r5, #0
 80037aa:	d184      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x396>
 80037ac:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80037b0:	e680      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x194>
 80037b2:	2502      	movs	r5, #2
 80037b4:	e7b7      	b.n	8003726 <HAL_ADC_ConfigChannel+0x406>
 80037b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80037ba:	e7a8      	b.n	800370e <HAL_ADC_ConfigChannel+0x3ee>
 80037bc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80037c0:	e6dd      	b.n	800357e <HAL_ADC_ConfigChannel+0x25e>
 80037c2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80037c6:	e6ba      	b.n	800353e <HAL_ADC_ConfigChannel+0x21e>
 80037c8:	4a01      	ldr	r2, [pc, #4]	; (80037d0 <HAL_ADC_ConfigChannel+0x4b0>)
 80037ca:	e6d8      	b.n	800357e <HAL_ADC_ConfigChannel+0x25e>
 80037cc:	2502      	movs	r5, #2
 80037ce:	e6c3      	b.n	8003558 <HAL_ADC_ConfigChannel+0x238>
 80037d0:	fe500000 	.word	0xfe500000

080037d4 <ADC_Enable>:
{
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80037d8:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037da:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80037dc:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	07d2      	lsls	r2, r2, #31
 80037e2:	d42c      	bmi.n	800383e <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037e4:	6899      	ldr	r1, [r3, #8]
 80037e6:	4a27      	ldr	r2, [pc, #156]	; (8003884 <ADC_Enable+0xb0>)
 80037e8:	4211      	tst	r1, r2
 80037ea:	4604      	mov	r4, r0
 80037ec:	d12a      	bne.n	8003844 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80037ee:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037f0:	4925      	ldr	r1, [pc, #148]	; (8003888 <ADC_Enable+0xb4>)
  MODIFY_REG(ADCx->CR,
 80037f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037f6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003800:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	d428      	bmi.n	8003858 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8003806:	f7ff fb1d 	bl	8002e44 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8003810:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003812:	d414      	bmi.n	800383e <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8003814:	4e1d      	ldr	r6, [pc, #116]	; (800388c <ADC_Enable+0xb8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	07d0      	lsls	r0, r2, #31
 800381a:	d404      	bmi.n	8003826 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	4032      	ands	r2, r6
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003826:	f7ff fb0d 	bl	8002e44 <HAL_GetTick>
 800382a:	1b43      	subs	r3, r0, r5
 800382c:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800382e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003830:	d902      	bls.n	8003838 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	07d1      	lsls	r1, r2, #31
 8003836:	d505      	bpl.n	8003844 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	07d2      	lsls	r2, r2, #31
 800383c:	d5eb      	bpl.n	8003816 <ADC_Enable+0x42>
  return HAL_OK;
 800383e:	2000      	movs	r0, #0
}
 8003840:	b002      	add	sp, #8
 8003842:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003844:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003846:	f043 0310 	orr.w	r3, r3, #16
 800384a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384c:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 800384e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003850:	4303      	orrs	r3, r0
 8003852:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003854:	b002      	add	sp, #8
 8003856:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003858:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <ADC_Enable+0xbc>)
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <ADC_Enable+0xc0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	3301      	adds	r3, #1
 8003868:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003870:	9b01      	ldr	r3, [sp, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0c7      	beq.n	8003806 <ADC_Enable+0x32>
        wait_loop_index--;
 8003876:	9b01      	ldr	r3, [sp, #4]
 8003878:	3b01      	subs	r3, #1
 800387a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800387c:	9b01      	ldr	r3, [sp, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f9      	bne.n	8003876 <ADC_Enable+0xa2>
 8003882:	e7c0      	b.n	8003806 <ADC_Enable+0x32>
 8003884:	8000003f 	.word	0x8000003f
 8003888:	50040300 	.word	0x50040300
 800388c:	7fffffc0 	.word	0x7fffffc0
 8003890:	20000000 	.word	0x20000000
 8003894:	053e2d63 	.word	0x053e2d63

08003898 <HAL_ADC_Start_DMA>:
{
 8003898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_ADC_Start_DMA+0xe0>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800389e:	6806      	ldr	r6, [r0, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
{
 80038a2:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a4:	68b1      	ldr	r1, [r6, #8]
 80038a6:	0749      	lsls	r1, r1, #29
 80038a8:	d417      	bmi.n	80038da <HAL_ADC_Start_DMA+0x42>
 80038aa:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 80038ac:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80038b0:	2a01      	cmp	r2, #1
 80038b2:	4604      	mov	r4, r0
 80038b4:	d011      	beq.n	80038da <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038b6:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038ba:	4b30      	ldr	r3, [pc, #192]	; (800397c <HAL_ADC_Start_DMA+0xe4>)
    __HAL_LOCK(hadc);
 80038bc:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038be:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 80038c0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038c4:	d00c      	beq.n	80038e0 <HAL_ADC_Start_DMA+0x48>
 80038c6:	f240 2121 	movw	r1, #545	; 0x221
 80038ca:	fa21 f108 	lsr.w	r1, r1, r8
 80038ce:	4001      	ands	r1, r0
 80038d0:	d106      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 80038d2:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
}
 80038d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 80038da:	2002      	movs	r0, #2
}
 80038dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff ff77 	bl	80037d4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d13c      	bne.n	8003964 <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 80038ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ec:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80038ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_ADC_Start_DMA+0xe8>)
 80038fe:	4299      	cmp	r1, r3
 8003900:	d035      	beq.n	800396e <HAL_ADC_Start_DMA+0xd6>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003902:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003904:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003908:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800390a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800390c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800390e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003912:	bf18      	it	ne
 8003914:	6da3      	ldrne	r3, [r4, #88]	; 0x58
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003916:	462a      	mov	r2, r5
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003918:	bf18      	it	ne
 800391a:	f023 0306 	bicne.w	r3, r3, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800391e:	4d19      	ldr	r5, [pc, #100]	; (8003984 <HAL_ADC_Start_DMA+0xec>)
          ADC_CLEAR_ERRORCODE(hadc);
 8003920:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003922:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003924:	4d18      	ldr	r5, [pc, #96]	; (8003988 <HAL_ADC_Start_DMA+0xf0>)
 8003926:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003928:	4d18      	ldr	r5, [pc, #96]	; (800398c <HAL_ADC_Start_DMA+0xf4>)
 800392a:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800392c:	251c      	movs	r5, #28
 800392e:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8003930:	2500      	movs	r5, #0
 8003932:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003936:	684d      	ldr	r5, [r1, #4]
 8003938:	f045 0510 	orr.w	r5, r5, #16
 800393c:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800393e:	68cd      	ldr	r5, [r1, #12]
 8003940:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003944:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003946:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003948:	3140      	adds	r1, #64	; 0x40
 800394a:	f000 fa13 	bl	8003d74 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800394e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003950:	6893      	ldr	r3, [r2, #8]
 8003952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003956:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	6093      	str	r3, [r2, #8]
}
 8003960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003964:	2300      	movs	r3, #0
 8003966:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800396a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800396e:	f1b8 0f00 	cmp.w	r8, #0
 8003972:	d0c6      	beq.n	8003902 <HAL_ADC_Start_DMA+0x6a>
 8003974:	e7c9      	b.n	800390a <HAL_ADC_Start_DMA+0x72>
 8003976:	bf00      	nop
 8003978:	50040300 	.word	0x50040300
 800397c:	50040200 	.word	0x50040200
 8003980:	50040100 	.word	0x50040100
 8003984:	08003299 	.word	0x08003299
 8003988:	08003041 	.word	0x08003041
 800398c:	08003305 	.word	0x08003305

08003990 <ADC_Disable>:
{
 8003990:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003992:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	0795      	lsls	r5, r2, #30
 8003998:	d502      	bpl.n	80039a0 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800399a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 800399c:	2000      	movs	r0, #0
}
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	07d4      	lsls	r4, r2, #31
 80039a4:	d52b      	bpl.n	80039fe <ADC_Disable+0x6e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	f002 020d 	and.w	r2, r2, #13
 80039ac:	2a01      	cmp	r2, #1
 80039ae:	4604      	mov	r4, r0
 80039b0:	d008      	beq.n	80039c4 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039b4:	f043 0310 	orr.w	r3, r3, #16
 80039b8:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80039bc:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039be:	4303      	orrs	r3, r0
 80039c0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039ca:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ce:	2103      	movs	r1, #3
 80039d0:	f042 0202 	orr.w	r2, r2, #2
 80039d4:	609a      	str	r2, [r3, #8]
 80039d6:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80039d8:	f7ff fa34 	bl	8002e44 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80039e2:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039e4:	d50b      	bpl.n	80039fe <ADC_Disable+0x6e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039e6:	f7ff fa2d 	bl	8002e44 <HAL_GetTick>
 80039ea:	1b40      	subs	r0, r0, r5
 80039ec:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039ee:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039f0:	d902      	bls.n	80039f8 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	07d2      	lsls	r2, r2, #31
 80039f6:	d4dc      	bmi.n	80039b2 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	07db      	lsls	r3, r3, #31
 80039fc:	d4f3      	bmi.n	80039e6 <ADC_Disable+0x56>
  return HAL_OK;
 80039fe:	2000      	movs	r0, #0
}
 8003a00:	bd38      	pop	{r3, r4, r5, pc}
 8003a02:	bf00      	nop

08003a04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003a04:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a06:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8003a0a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003a0c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003a0e:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003a10:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003a12:	d03f      	beq.n	8003a94 <HAL_ADCEx_Calibration_Start+0x90>
 8003a14:	2301      	movs	r3, #1
 8003a16:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	f7ff ffb7 	bl	8003990 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a22:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 8003a24:	b9e0      	cbnz	r0, 8003a60 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8003a26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a2a:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a2e:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	6563      	str	r3, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8003a36:	6893      	ldr	r3, [r2, #8]
 8003a38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003a3c:	f005 4180 	and.w	r1, r5, #1073741824	; 0x40000000
 8003a40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a44:	4319      	orrs	r1, r3
 8003a46:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003a4a:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a4c:	6893      	ldr	r3, [r2, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	db0e      	blt.n	8003a70 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6563      	str	r3, [r4, #84]	; 0x54
 8003a5e:	e002      	b.n	8003a66 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a60:	f043 0310 	orr.w	r3, r3, #16
 8003a64:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a66:	2300      	movs	r3, #0
 8003a68:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003a6c:	b003      	add	sp, #12
 8003a6e:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	3301      	adds	r3, #1
 8003a74:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a76:	9b01      	ldr	r3, [sp, #4]
 8003a78:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003a7c:	d3e6      	bcc.n	8003a4c <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a80:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8003a84:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8003a86:	f043 0310 	orr.w	r3, r3, #16
 8003a8a:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003a8c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        return HAL_ERROR;
 8003a90:	2001      	movs	r0, #1
 8003a92:	e7eb      	b.n	8003a6c <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8003a94:	2002      	movs	r0, #2
}
 8003a96:	b003      	add	sp, #12
 8003a98:	bd30      	pop	{r4, r5, pc}
 8003a9a:	bf00      	nop

08003a9c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop

08003aa4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop

08003aa8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop

08003aac <HAL_ADCEx_EndOfSamplingCallback>:
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop

08003ab0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8003ab8:	2a01      	cmp	r2, #1
{
 8003aba:	b09b      	sub	sp, #108	; 0x6c
  __HAL_LOCK(hadc);
 8003abc:	d04b      	beq.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003abe:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ac0:	4c33      	ldr	r4, [pc, #204]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8003ac2:	681d      	ldr	r5, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ac4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003ac6:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ac8:	42a5      	cmp	r5, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003aca:	9216      	str	r2, [sp, #88]	; 0x58
  __HAL_LOCK(hadc);
 8003acc:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ad0:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ad2:	d007      	beq.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad4:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ada:	f041 0120 	orr.w	r1, r1, #32
 8003ade:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003ae0:	b01b      	add	sp, #108	; 0x6c
 8003ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ae4:	4c2b      	ldr	r4, [pc, #172]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8003ae6:	68a2      	ldr	r2, [r4, #8]
 8003ae8:	0752      	lsls	r2, r2, #29
 8003aea:	d50a      	bpl.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003aec:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003af0:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8003af4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003afe:	b01b      	add	sp, #108	; 0x6c
 8003b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b02:	68a8      	ldr	r0, [r5, #8]
 8003b04:	f010 0004 	ands.w	r0, r0, #4
 8003b08:	d1f1      	bne.n	8003aee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b0a:	b33e      	cbz	r6, 8003b5c <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b0c:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8003b9c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8003b10:	684f      	ldr	r7, [r1, #4]
 8003b12:	f8de 2008 	ldr.w	r2, [lr, #8]
 8003b16:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8003b1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b1e:	433a      	orrs	r2, r7
 8003b20:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8003b24:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b28:	68ad      	ldr	r5, [r5, #8]
 8003b2a:	68a2      	ldr	r2, [r4, #8]
 8003b2c:	f012 0f01 	tst.w	r2, #1
 8003b30:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8003b32:	d12a      	bne.n	8003b8a <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8003b34:	6890      	ldr	r0, [r2, #8]
 8003b36:	4328      	orrs	r0, r5
 8003b38:	f010 0001 	ands.w	r0, r0, #1
 8003b3c:	d11c      	bne.n	8003b78 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
        MODIFY_REG(tmpADC_Common->CCR,
 8003b3e:	688a      	ldr	r2, [r1, #8]
 8003b40:	f8de 1008 	ldr.w	r1, [lr, #8]
 8003b44:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8003b48:	4332      	orrs	r2, r6
 8003b4a:	f021 010f 	bic.w	r1, r1, #15
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	f8ce 2008 	str.w	r2, [lr, #8]
 8003b54:	e7d0      	b.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8003b56:	2002      	movs	r0, #2
}
 8003b58:	b01b      	add	sp, #108	; 0x6c
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b5c:	490f      	ldr	r1, [pc, #60]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8003b5e:	688a      	ldr	r2, [r1, #8]
 8003b60:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b64:	608a      	str	r2, [r1, #8]
 8003b66:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8003b68:	68ad      	ldr	r5, [r5, #8]
 8003b6a:	68a0      	ldr	r0, [r4, #8]
 8003b6c:	6892      	ldr	r2, [r2, #8]
 8003b6e:	4328      	orrs	r0, r5
 8003b70:	4310      	orrs	r0, r2
 8003b72:	f010 0001 	ands.w	r0, r0, #1
 8003b76:	d001      	beq.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e7bd      	b.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b7c:	688a      	ldr	r2, [r1, #8]
 8003b7e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8003b82:	f022 020f 	bic.w	r2, r2, #15
 8003b86:	608a      	str	r2, [r1, #8]
 8003b88:	e7b6      	b.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	e7b4      	b.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8003b8e:	bf00      	nop
 8003b90:	50040000 	.word	0x50040000
 8003b94:	50040100 	.word	0x50040100
 8003b98:	50040200 	.word	0x50040200
 8003b9c:	50040300 	.word	0x50040300

08003ba0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	4907      	ldr	r1, [pc, #28]	; (8003bc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003ba2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bae:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003bba:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <HAL_NVIC_SetPriority+0x74>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bce:	f1c3 0e07 	rsb	lr, r3, #7
 8003bd2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bda:	bf28      	it	cs
 8003bdc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be0:	f1bc 0f06 	cmp.w	ip, #6
 8003be4:	d91b      	bls.n	8003c1e <HAL_NVIC_SetPriority+0x5a>
 8003be6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be8:	f04f 3cff 	mov.w	ip, #4294967295
 8003bec:	fa0c fc03 	lsl.w	ip, ip, r3
 8003bf0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	f04f 3cff 	mov.w	ip, #4294967295
 8003bf8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003bfc:	ea21 010c 	bic.w	r1, r1, ip
 8003c00:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003c02:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003c08:	db0c      	blt.n	8003c24 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003c0e:	0109      	lsls	r1, r1, #4
 8003c10:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003c14:	b2c9      	uxtb	r1, r1
 8003c16:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c1e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c20:	4613      	mov	r3, r2
 8003c22:	e7e7      	b.n	8003bf4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_NVIC_SetPriority+0x78>)
 8003c26:	f000 000f 	and.w	r0, r0, #15
 8003c2a:	0109      	lsls	r1, r1, #4
 8003c2c:	4403      	add	r3, r0
 8003c2e:	b2c9      	uxtb	r1, r1
 8003c30:	7619      	strb	r1, [r3, #24]
 8003c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c36:	bf00      	nop
 8003c38:	e000ed00 	.word	0xe000ed00
 8003c3c:	e000ecfc 	.word	0xe000ecfc

08003c40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c40:	2800      	cmp	r0, #0
 8003c42:	db07      	blt.n	8003c54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <HAL_NVIC_EnableIRQ+0x18>)
 8003c46:	0941      	lsrs	r1, r0, #5
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f000 001f 	and.w	r0, r0, #31
 8003c4e:	4083      	lsls	r3, r0
 8003c50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c5c:	3801      	subs	r0, #1
 8003c5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003c62:	d210      	bcs.n	8003c86 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c64:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	4c08      	ldr	r4, [pc, #32]	; (8003c8c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003c72:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c76:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c78:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c7a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c7c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c82:	6119      	str	r1, [r3, #16]
 8003c84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003c86:	2001      	movs	r0, #1
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d04f      	beq.n	8003d34 <HAL_DMA_Init+0xa4>
{
 8003c94:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <HAL_DMA_Init+0xcc>)
 8003c98:	6804      	ldr	r4, [r0, #0]
 8003c9a:	429c      	cmp	r4, r3
 8003c9c:	d941      	bls.n	8003d22 <HAL_DMA_Init+0x92>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c9e:	4a30      	ldr	r2, [pc, #192]	; (8003d60 <HAL_DMA_Init+0xd0>)
 8003ca0:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <HAL_DMA_Init+0xd4>)
    hdma->DmaBaseAddress = DMA2;
 8003ca2:	4d31      	ldr	r5, [pc, #196]	; (8003d68 <HAL_DMA_Init+0xd8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ca4:	4422      	add	r2, r4
 8003ca6:	fba3 3202 	umull	r3, r2, r3, r2
 8003caa:	0912      	lsrs	r2, r2, #4
 8003cac:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cb4:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb8:	6907      	ldr	r7, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003cba:	6821      	ldr	r1, [r4, #0]
 8003cbc:	6405      	str	r5, [r0, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 8003cbe:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc0:	433b      	orrs	r3, r7
 8003cc2:	6947      	ldr	r7, [r0, #20]
 8003cc4:	6442      	str	r2, [r0, #68]	; 0x44
 8003cc6:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc8:	6987      	ldr	r7, [r0, #24]
 8003cca:	433b      	orrs	r3, r7
 8003ccc:	69c7      	ldr	r7, [r0, #28]
 8003cce:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd0:	6a07      	ldr	r7, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cd2:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8003cd6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cda:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003cdc:	430b      	orrs	r3, r1
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cde:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8003ce2:	6023      	str	r3, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ce4:	d013      	beq.n	8003d0e <HAL_DMA_Init+0x7e>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <HAL_DMA_Init+0xdc>)
 8003ce8:	429d      	cmp	r5, r3
 8003cea:	d025      	beq.n	8003d38 <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cec:	f8d3 14a8 	ldr.w	r1, [r3, #1192]	; 0x4a8
 8003cf0:	f002 021c 	and.w	r2, r2, #28
 8003cf4:	240f      	movs	r4, #15
 8003cf6:	4094      	lsls	r4, r2
 8003cf8:	ea21 0104 	bic.w	r1, r1, r4
 8003cfc:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d00:	6841      	ldr	r1, [r0, #4]
 8003d02:	f8d3 44a8 	ldr.w	r4, [r3, #1192]	; 0x4a8
 8003d06:	4091      	lsls	r1, r2
 8003d08:	4321      	orrs	r1, r4
 8003d0a:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d10:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d12:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d14:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003d18:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
}
 8003d1c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003d1e:	4618      	mov	r0, r3
}
 8003d20:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <HAL_DMA_Init+0xe0>)
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_DMA_Init+0xd4>)
    hdma->DmaBaseAddress = DMA1;
 8003d26:	4d11      	ldr	r5, [pc, #68]	; (8003d6c <HAL_DMA_Init+0xdc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d28:	4422      	add	r2, r4
 8003d2a:	fba3 3202 	umull	r3, r2, r3, r2
 8003d2e:	0912      	lsrs	r2, r2, #4
 8003d30:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8003d32:	e7bc      	b.n	8003cae <HAL_DMA_Init+0x1e>
    return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
}
 8003d36:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d38:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8003d3c:	f002 021c 	and.w	r2, r2, #28
 8003d40:	210f      	movs	r1, #15
 8003d42:	4091      	lsls	r1, r2
 8003d44:	ea23 0301 	bic.w	r3, r3, r1
 8003d48:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d4c:	6843      	ldr	r3, [r0, #4]
 8003d4e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8003d52:	4093      	lsls	r3, r2
 8003d54:	430b      	orrs	r3, r1
 8003d56:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8003d5a:	e7d8      	b.n	8003d0e <HAL_DMA_Init+0x7e>
 8003d5c:	40020407 	.word	0x40020407
 8003d60:	bffdfbf8 	.word	0xbffdfbf8
 8003d64:	cccccccd 	.word	0xcccccccd
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	bffdfff8 	.word	0xbffdfff8

08003d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d76:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003d7a:	2c01      	cmp	r4, #1
 8003d7c:	d03d      	beq.n	8003dfa <HAL_DMA_Start_IT+0x86>
 8003d7e:	2401      	movs	r4, #1
 8003d80:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d84:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8003d88:	2c01      	cmp	r4, #1
 8003d8a:	fa5f fc84 	uxtb.w	ip, r4
 8003d8e:	d005      	beq.n	8003d9c <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d90:	2300      	movs	r3, #0
 8003d92:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8003d96:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8003d98:	2002      	movs	r0, #2
}
 8003d9a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9c:	2502      	movs	r5, #2
 8003d9e:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    __HAL_DMA_DISABLE(hdma);
 8003da2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da4:	2500      	movs	r5, #0
 8003da6:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003da8:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003daa:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003dac:	f026 0601 	bic.w	r6, r6, #1
 8003db0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003db2:	f005 051c 	and.w	r5, r5, #28
 8003db6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003db8:	fa0c f505 	lsl.w	r5, ip, r5
 8003dbc:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dbe:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dc0:	6883      	ldr	r3, [r0, #8]
 8003dc2:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8003dc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dc6:	bf0b      	itete	eq
 8003dc8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003dca:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003dcc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003dce:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003dd0:	b153      	cbz	r3, 8003de8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	f043 030e 	orr.w	r3, r3, #14
 8003dd8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003de2:	6023      	str	r3, [r4, #0]
}
 8003de4:	bc70      	pop	{r4, r5, r6}
 8003de6:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	f023 0304 	bic.w	r3, r3, #4
 8003dee:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	f043 030a 	orr.w	r3, r3, #10
 8003df6:	6023      	str	r3, [r4, #0]
 8003df8:	e7ef      	b.n	8003dda <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 8003dfa:	2002      	movs	r0, #2
}
 8003dfc:	bc70      	pop	{r4, r5, r6}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e00:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003e04:	2a02      	cmp	r2, #2
{
 8003e06:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e08:	d006      	beq.n	8003e18 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003e0e:	2200      	movs	r2, #0
    return HAL_ERROR;
 8003e10:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003e16:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e18:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1c:	6808      	ldr	r0, [r1, #0]
 8003e1e:	f020 000e 	bic.w	r0, r0, #14
 8003e22:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003e24:	6808      	ldr	r0, [r1, #0]
 8003e26:	f020 0001 	bic.w	r0, r0, #1
 8003e2a:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e2c:	f04f 0c01 	mov.w	ip, #1
 8003e30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e32:	f002 021c 	and.w	r2, r2, #28
 8003e36:	fa0c f202 	lsl.w	r2, ip, r2
 8003e3a:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003e3c:	2200      	movs	r2, #0
    return status;
 8003e3e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003e40:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop

08003e4c <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e4c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003e50:	2a02      	cmp	r2, #2
 8003e52:	d003      	beq.n	8003e5c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e54:	2204      	movs	r2, #4
 8003e56:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003e58:	2001      	movs	r0, #1
}
 8003e5a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8003e60:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e62:	680c      	ldr	r4, [r1, #0]
 8003e64:	f024 040e 	bic.w	r4, r4, #14
 8003e68:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003e6a:	680c      	ldr	r4, [r1, #0]
 8003e6c:	f024 0401 	bic.w	r4, r4, #1
 8003e70:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e72:	f002 021c 	and.w	r2, r2, #28
 8003e76:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	6062      	str	r2, [r4, #4]
    if (hdma->XferAbortCallback != NULL)
 8003e80:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003e82:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e86:	2400      	movs	r4, #0
 8003e88:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003e8c:	b112      	cbz	r2, 8003e94 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8003e8e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	4620      	mov	r0, r4
}
 8003e92:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003e94:	4610      	mov	r0, r2
}
 8003e96:	bd10      	pop	{r4, pc}

08003e98 <HAL_DMA_IRQHandler>:
{
 8003e98:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e9c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003e9e:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ea0:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003ea2:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ea4:	f003 031c 	and.w	r3, r3, #28
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	420a      	tst	r2, r1
 8003eae:	d00e      	beq.n	8003ece <HAL_DMA_IRQHandler+0x36>
 8003eb0:	f014 0f04 	tst.w	r4, #4
 8003eb4:	d00b      	beq.n	8003ece <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb6:	682b      	ldr	r3, [r5, #0]
 8003eb8:	069b      	lsls	r3, r3, #26
 8003eba:	d403      	bmi.n	8003ec4 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	f023 0304 	bic.w	r3, r3, #4
 8003ec2:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8003ec4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ec6:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003ec8:	b1cb      	cbz	r3, 8003efe <HAL_DMA_IRQHandler+0x66>
}
 8003eca:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003ecc:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ece:	2202      	movs	r2, #2
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	420a      	tst	r2, r1
 8003ed4:	d015      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x6a>
 8003ed6:	f014 0f02 	tst.w	r4, #2
 8003eda:	d012      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	0699      	lsls	r1, r3, #26
 8003ee0:	d406      	bmi.n	8003ef0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ee2:	682b      	ldr	r3, [r5, #0]
 8003ee4:	f023 030a 	bic.w	r3, r3, #10
 8003ee8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8003ef0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ef2:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e5      	bne.n	8003eca <HAL_DMA_IRQHandler+0x32>
}
 8003efe:	bc70      	pop	{r4, r5, r6}
 8003f00:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f02:	2208      	movs	r2, #8
 8003f04:	409a      	lsls	r2, r3
 8003f06:	420a      	tst	r2, r1
 8003f08:	d0f9      	beq.n	8003efe <HAL_DMA_IRQHandler+0x66>
 8003f0a:	0722      	lsls	r2, r4, #28
 8003f0c:	d5f7      	bpl.n	8003efe <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f0e:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8003f10:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f12:	f022 020e 	bic.w	r2, r2, #14
 8003f16:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f18:	2201      	movs	r2, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8003f1e:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f20:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f22:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003f24:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003f28:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	d0e6      	beq.n	8003efe <HAL_DMA_IRQHandler+0x66>
}
 8003f30:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003f32:	4708      	bx	r1

08003f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f38:	680c      	ldr	r4, [r1, #0]
{
 8003f3a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f3c:	2c00      	cmp	r4, #0
 8003f3e:	f000 808e 	beq.w	800405e <HAL_GPIO_Init+0x12a>
 8003f42:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f46:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8004134 <HAL_GPIO_Init+0x200>
  uint32_t position = 0x00u;
 8003f4a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f4c:	f04f 0a01 	mov.w	sl, #1
 8003f50:	4688      	mov	r8, r1
 8003f52:	fa0a f603 	lsl.w	r6, sl, r3
    if (iocurrent != 0x00u)
 8003f56:	ea16 0904 	ands.w	r9, r6, r4
 8003f5a:	d079      	beq.n	8004050 <HAL_GPIO_Init+0x11c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003f60:	f001 0203 	and.w	r2, r1, #3
 8003f64:	1e55      	subs	r5, r2, #1
 8003f66:	2d01      	cmp	r5, #1
 8003f68:	d97c      	bls.n	8004064 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f6a:	2a03      	cmp	r2, #3
 8003f6c:	f040 80b7 	bne.w	80040de <HAL_GPIO_Init+0x1aa>
        temp = GPIOx->ASCR;
 8003f70:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f72:	ea25 0606 	bic.w	r6, r5, r6
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f76:	f3c1 05c0 	ubfx	r5, r1, #3, #1
 8003f7a:	409d      	lsls	r5, r3
 8003f7c:	4335      	orrs	r5, r6
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f7e:	fa02 f20c 	lsl.w	r2, r2, ip
        GPIOx->ASCR = temp;
 8003f82:	62c5      	str	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f84:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8003f86:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f88:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f8a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f8c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003f90:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f92:	d05d      	beq.n	8004050 <HAL_GPIO_Init+0x11c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f94:	4d60      	ldr	r5, [pc, #384]	; (8004118 <HAL_GPIO_Init+0x1e4>)
 8003f96:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	662a      	str	r2, [r5, #96]	; 0x60
 8003f9e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003fa0:	f002 0201 	and.w	r2, r2, #1
 8003fa4:	9203      	str	r2, [sp, #12]
 8003fa6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003fa8:	f023 0203 	bic.w	r2, r3, #3
 8003fac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003fb0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fb4:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003fb8:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fba:	00b6      	lsls	r6, r6, #2
 8003fbc:	270f      	movs	r7, #15
 8003fbe:	40b7      	lsls	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fc0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fc4:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fc8:	d01b      	beq.n	8004002 <HAL_GPIO_Init+0xce>
 8003fca:	4f54      	ldr	r7, [pc, #336]	; (800411c <HAL_GPIO_Init+0x1e8>)
 8003fcc:	42b8      	cmp	r0, r7
 8003fce:	f000 8090 	beq.w	80040f2 <HAL_GPIO_Init+0x1be>
 8003fd2:	4f53      	ldr	r7, [pc, #332]	; (8004120 <HAL_GPIO_Init+0x1ec>)
 8003fd4:	42b8      	cmp	r0, r7
 8003fd6:	f000 8090 	beq.w	80040fa <HAL_GPIO_Init+0x1c6>
 8003fda:	4f52      	ldr	r7, [pc, #328]	; (8004124 <HAL_GPIO_Init+0x1f0>)
 8003fdc:	42b8      	cmp	r0, r7
 8003fde:	f000 8083 	beq.w	80040e8 <HAL_GPIO_Init+0x1b4>
 8003fe2:	4f51      	ldr	r7, [pc, #324]	; (8004128 <HAL_GPIO_Init+0x1f4>)
 8003fe4:	42b8      	cmp	r0, r7
 8003fe6:	f000 808d 	beq.w	8004104 <HAL_GPIO_Init+0x1d0>
 8003fea:	4f50      	ldr	r7, [pc, #320]	; (800412c <HAL_GPIO_Init+0x1f8>)
 8003fec:	42b8      	cmp	r0, r7
 8003fee:	f000 808e 	beq.w	800410e <HAL_GPIO_Init+0x1da>
 8003ff2:	4f4f      	ldr	r7, [pc, #316]	; (8004130 <HAL_GPIO_Init+0x1fc>)
 8003ff4:	42b8      	cmp	r0, r7
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2706      	moveq	r7, #6
 8003ffa:	2707      	movne	r7, #7
 8003ffc:	fa07 f606 	lsl.w	r6, r7, r6
 8004000:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004002:	6095      	str	r5, [r2, #8]
        temp = EXTI->RTSR1;
 8004004:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
 8004008:	ea6f 0509 	mvn.w	r5, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800400c:	02ce      	lsls	r6, r1, #11
        temp &= ~(iocurrent);
 800400e:	bf54      	ite	pl
 8004010:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004012:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8004016:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR1;
 800401a:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800401e:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8004020:	bf54      	ite	pl
 8004022:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004024:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = temp;
 8004028:	f8cb 200c 	str.w	r2, [fp, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800402c:	f8db 2004 	ldr.w	r2, [fp, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004030:	038e      	lsls	r6, r1, #14
        temp &= ~(iocurrent);
 8004032:	bf54      	ite	pl
 8004034:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004036:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR1 = temp;
 800403a:	f8cb 2004 	str.w	r2, [fp, #4]

        temp = EXTI->IMR1;
 800403e:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004042:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8004044:	bf54      	ite	pl
 8004046:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004048:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 800404c:	f8cb 2000 	str.w	r2, [fp]
      }
    }

    position++;
 8004050:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004052:	fa34 f203 	lsrs.w	r2, r4, r3
 8004056:	f10c 0c02 	add.w	ip, ip, #2
 800405a:	f47f af7a 	bne.w	8003f52 <HAL_GPIO_Init+0x1e>
  }
}
 800405e:	b005      	add	sp, #20
 8004060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004064:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004068:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800406c:	2703      	movs	r7, #3
 800406e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004072:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004076:	fa05 f50c 	lsl.w	r5, r5, ip
 800407a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OSPEEDR = temp;
 800407e:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004080:	43fd      	mvns	r5, r7
        temp = GPIOx->OTYPER;
 8004082:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004084:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004088:	f3c1 1600 	ubfx	r6, r1, #4, #1
 800408c:	409e      	lsls	r6, r3
 800408e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8004090:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8004092:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004094:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004098:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409a:	fa06 f60c 	lsl.w	r6, r6, ip
 800409e:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a0:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80040a2:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a4:	fa02 f20c 	lsl.w	r2, r2, ip
 80040a8:	f47f af6d 	bne.w	8003f86 <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3u];
 80040ac:	08df      	lsrs	r7, r3, #3
 80040ae:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040b2:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80040b6:	6a3e      	ldr	r6, [r7, #32]
 80040b8:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040ba:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040c2:	fa06 f60e 	lsl.w	r6, r6, lr
 80040c6:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040c8:	260f      	movs	r6, #15
 80040ca:	fa06 fe0e 	lsl.w	lr, r6, lr
 80040ce:	9e00      	ldr	r6, [sp, #0]
 80040d0:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040d4:	9e01      	ldr	r6, [sp, #4]
 80040d6:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 80040da:	623e      	str	r6, [r7, #32]
 80040dc:	e753      	b.n	8003f86 <HAL_GPIO_Init+0x52>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040de:	2503      	movs	r5, #3
 80040e0:	fa05 f50c 	lsl.w	r5, r5, ip
 80040e4:	43ed      	mvns	r5, r5
 80040e6:	e7d4      	b.n	8004092 <HAL_GPIO_Init+0x15e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040e8:	2703      	movs	r7, #3
 80040ea:	fa07 f606 	lsl.w	r6, r7, r6
 80040ee:	4335      	orrs	r5, r6
 80040f0:	e787      	b.n	8004002 <HAL_GPIO_Init+0xce>
 80040f2:	fa0a f606 	lsl.w	r6, sl, r6
 80040f6:	4335      	orrs	r5, r6
 80040f8:	e783      	b.n	8004002 <HAL_GPIO_Init+0xce>
 80040fa:	2702      	movs	r7, #2
 80040fc:	fa07 f606 	lsl.w	r6, r7, r6
 8004100:	4335      	orrs	r5, r6
 8004102:	e77e      	b.n	8004002 <HAL_GPIO_Init+0xce>
 8004104:	2704      	movs	r7, #4
 8004106:	fa07 f606 	lsl.w	r6, r7, r6
 800410a:	4335      	orrs	r5, r6
 800410c:	e779      	b.n	8004002 <HAL_GPIO_Init+0xce>
 800410e:	2705      	movs	r7, #5
 8004110:	fa07 f606 	lsl.w	r6, r7, r6
 8004114:	4335      	orrs	r5, r6
 8004116:	e774      	b.n	8004002 <HAL_GPIO_Init+0xce>
 8004118:	40021000 	.word	0x40021000
 800411c:	48000400 	.word	0x48000400
 8004120:	48000800 	.word	0x48000800
 8004124:	48000c00 	.word	0x48000c00
 8004128:	48001000 	.word	0x48001000
 800412c:	48001400 	.word	0x48001400
 8004130:	48001800 	.word	0x48001800
 8004134:	40010400 	.word	0x40010400

08004138 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004138:	b10a      	cbz	r2, 800413e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800413a:	6181      	str	r1, [r0, #24]
 800413c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800413e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004144:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004146:	ea01 0203 	and.w	r2, r1, r3
 800414a:	ea21 0103 	bic.w	r1, r1, r3
 800414e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004152:	6181      	str	r1, [r0, #24]
}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop

08004158 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004158:	2800      	cmp	r0, #0
 800415a:	d054      	beq.n	8004206 <HAL_I2C_Init+0xae>
{
 800415c:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004162:	4604      	mov	r4, r0
 8004164:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004168:	2b00      	cmp	r3, #0
 800416a:	d047      	beq.n	80041fc <HAL_I2C_Init+0xa4>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800416c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800416e:	2224      	movs	r2, #36	; 0x24
 8004170:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004174:	6819      	ldr	r1, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004176:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8004178:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800417c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8004180:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004182:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004184:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004186:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800418c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800418e:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004190:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004192:	d009      	beq.n	80041a8 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004194:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004198:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800419a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800419c:	d107      	bne.n	80041ae <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	e006      	b.n	80041b6 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b6:	6859      	ldr	r1, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041b8:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041ba:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80041be:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80041c2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041c4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041c6:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041c8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041ca:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041cc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041d4:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041d6:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041d8:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041da:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041dc:	4301      	orrs	r1, r0
 80041de:	6019      	str	r1, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	f041 0101 	orr.w	r1, r1, #1
 80041e6:	6019      	str	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e8:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ec:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041f2:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42

  return HAL_OK;
 80041f8:	4610      	mov	r0, r2
}
 80041fa:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80041fc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004200:	f7fd fac2 	bl	8001788 <HAL_I2C_MspInit>
 8004204:	e7b2      	b.n	800416c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8004206:	2001      	movs	r0, #1
}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop

0800420c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004210:	2a20      	cmp	r2, #32
 8004212:	d123      	bne.n	800425c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004214:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004218:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800421c:	2a01      	cmp	r2, #1
 800421e:	4603      	mov	r3, r0
 8004220:	d01c      	beq.n	800425c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004222:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004224:	2024      	movs	r0, #36	; 0x24
{
 8004226:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004228:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800422c:	6810      	ldr	r0, [r2, #0]
 800422e:	f020 0001 	bic.w	r0, r0, #1
 8004232:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004234:	6810      	ldr	r0, [r2, #0]
 8004236:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800423a:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800423c:	6810      	ldr	r0, [r2, #0]
 800423e:	4301      	orrs	r1, r0
 8004240:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004242:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004244:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8004248:	f041 0101 	orr.w	r1, r1, #1
 800424c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800424e:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004252:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 8004256:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004258:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800425c:	2002      	movs	r0, #2
}
 800425e:	4770      	bx	lr

08004260 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004260:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004264:	2a20      	cmp	r2, #32
 8004266:	d122      	bne.n	80042ae <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8004268:	b500      	push	{lr}
 800426a:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004272:	2a01      	cmp	r2, #1
 8004274:	4603      	mov	r3, r0
 8004276:	d01c      	beq.n	80042b2 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004278:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800427a:	2024      	movs	r0, #36	; 0x24
 800427c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8004280:	6810      	ldr	r0, [r2, #0]
 8004282:	f020 0001 	bic.w	r0, r0, #1
 8004286:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004288:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800428a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800428e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004292:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004294:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004296:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800429a:	f041 0101 	orr.w	r1, r1, #1
 800429e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80042a4:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 80042a8:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 80042aa:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80042ae:	2002      	movs	r0, #2
}
 80042b0:	4770      	bx	lr
    return HAL_BUSY;
 80042b2:	2002      	movs	r0, #2
}
 80042b4:	f85d fb04 	ldr.w	pc, [sp], #4

080042b8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042b8:	4b02      	ldr	r3, [pc, #8]	; (80042c4 <HAL_PWREx_GetVoltageRange+0xc>)
 80042ba:	6818      	ldr	r0, [r3, #0]
#endif
}
 80042bc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40007000 	.word	0x40007000

080042c8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80042cc:	d00e      	beq.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80042d0:	6813      	ldr	r3, [r2, #0]
 80042d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d02d      	beq.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042e6:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ec:	4914      	ldr	r1, [pc, #80]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80042ee:	680b      	ldr	r3, [r1, #0]
 80042f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f8:	d01e      	beq.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042fa:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042fc:	4a11      	ldr	r2, [pc, #68]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x7c>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004306:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004308:	6813      	ldr	r3, [r2, #0]
 800430a:	4a0f      	ldr	r2, [pc, #60]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0x80>)
 800430c:	2032      	movs	r0, #50	; 0x32
 800430e:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004312:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800431a:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800431c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004320:	d506      	bpl.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x68>
 8004322:	e000      	b.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8004324:	b123      	cbz	r3, 8004330 <HAL_PWREx_ControlVoltageScaling+0x68>
 8004326:	694a      	ldr	r2, [r1, #20]
 8004328:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800432a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800432e:	d4f9      	bmi.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	055b      	lsls	r3, r3, #21
 8004336:	d401      	bmi.n	800433c <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 8004338:	2000      	movs	r0, #0
 800433a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800433c:	2003      	movs	r0, #3
}
 800433e:	4770      	bx	lr
 8004340:	40007000 	.word	0x40007000
 8004344:	20000000 	.word	0x20000000
 8004348:	431bde83 	.word	0x431bde83

0800434c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800434c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800434e:	4d20      	ldr	r5, [pc, #128]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8004350:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004352:	00db      	lsls	r3, r3, #3
{
 8004354:	b083      	sub	sp, #12
 8004356:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004358:	d51c      	bpl.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800435a:	f7ff ffad 	bl	80042b8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800435e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004362:	d029      	beq.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004364:	2c80      	cmp	r4, #128	; 0x80
 8004366:	d813      	bhi.n	8004390 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004368:	d02f      	beq.n	80043ca <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800436a:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 800436e:	fab4 f484 	clz	r4, r4
 8004372:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004374:	4917      	ldr	r1, [pc, #92]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8004376:	680b      	ldr	r3, [r1, #0]
 8004378:	f023 0307 	bic.w	r3, r3, #7
 800437c:	4323      	orrs	r3, r4
 800437e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004380:	6808      	ldr	r0, [r1, #0]
 8004382:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004386:	1b00      	subs	r0, r0, r4
 8004388:	bf18      	it	ne
 800438a:	2001      	movne	r0, #1
 800438c:	b003      	add	sp, #12
 800438e:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 8004390:	2403      	movs	r4, #3
 8004392:	e7ef      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004394:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439a:	65ab      	str	r3, [r5, #88]	; 0x58
 800439c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80043a6:	f7ff ff87 	bl	80042b8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80043aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80043b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b4:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b6:	d1d5      	bne.n	8004364 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80043b8:	2c80      	cmp	r4, #128	; 0x80
 80043ba:	d904      	bls.n	80043c6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80043bc:	2ca0      	cmp	r4, #160	; 0xa0
 80043be:	bf8c      	ite	hi
 80043c0:	2402      	movhi	r4, #2
 80043c2:	2401      	movls	r4, #1
 80043c4:	e7d6      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043c6:	2400      	movs	r4, #0
 80043c8:	e7d4      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ca:	2402      	movs	r4, #2
 80043cc:	e7d2      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40022000 	.word	0x40022000

080043d8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d8:	4a28      	ldr	r2, [pc, #160]	; (800447c <HAL_RCC_GetSysClockFreq+0xa4>)
 80043da:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043dc:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043de:	f013 030c 	ands.w	r3, r3, #12
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x1e>
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d038      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d034      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	4824      	ldr	r0, [pc, #144]	; (8004480 <HAL_RCC_GetSysClockFreq+0xa8>)
 80043f0:	bf18      	it	ne
 80043f2:	2000      	movne	r0, #0
 80043f4:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043f6:	4a21      	ldr	r2, [pc, #132]	; (800447c <HAL_RCC_GetSysClockFreq+0xa4>)
 80043f8:	6811      	ldr	r1, [r2, #0]
 80043fa:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043fc:	bf54      	ite	pl
 80043fe:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004402:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8004404:	491f      	ldr	r1, [pc, #124]	; (8004484 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004406:	bf54      	ite	pl
 8004408:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800440c:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8004410:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004414:	b303      	cbz	r3, 8004458 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004416:	2b0c      	cmp	r3, #12
 8004418:	d12d      	bne.n	8004476 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <HAL_RCC_GetSysClockFreq+0xa4>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004422:	2b02      	cmp	r3, #2
 8004424:	d025      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x9a>
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004428:	2b03      	cmp	r3, #3
 800442a:	bf08      	it	eq
 800442c:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004430:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004432:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800443a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800443e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004442:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004444:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004448:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800444a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800444c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8004450:	fbb2 f0f3 	udiv	r0, r2, r3
 8004454:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004456:	480c      	ldr	r0, [pc, #48]	; (8004488 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8004458:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800445a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800445e:	2a01      	cmp	r2, #1
 8004460:	d0c9      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800446a:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800446c:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8004470:	d1d9      	bne.n	8004426 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004474:	e7db      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x56>
 8004476:	2000      	movs	r0, #0
  return sysclockfreq;
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	007a1200 	.word	0x007a1200
 8004484:	0800a368 	.word	0x0800a368
 8004488:	00f42400 	.word	0x00f42400

0800448c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800448c:	2800      	cmp	r0, #0
 800448e:	f000 824a 	beq.w	8004926 <HAL_RCC_OscConfig+0x49a>
{
 8004492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004496:	4aa8      	ldr	r2, [pc, #672]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004498:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449c:	68d6      	ldr	r6, [r2, #12]
 800449e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044a0:	06d8      	lsls	r0, r3, #27
{
 80044a2:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044ac:	d52e      	bpl.n	800450c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044ae:	2d00      	cmp	r5, #0
 80044b0:	f000 8103 	beq.w	80046ba <HAL_RCC_OscConfig+0x22e>
 80044b4:	2d0c      	cmp	r5, #12
 80044b6:	f000 80fd 	beq.w	80046b4 <HAL_RCC_OscConfig+0x228>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044ba:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80044bc:	4f9e      	ldr	r7, [pc, #632]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 81d7 	beq.w	8004872 <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_MSI_ENABLE();
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80044cc:	f7fe fcba 	bl	8002e44 <HAL_GetTick>
 80044d0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d2:	e006      	b.n	80044e2 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d4:	f7fe fcb6 	bl	8002e44 <HAL_GetTick>
 80044d8:	eba0 0008 	sub.w	r0, r0, r8
 80044dc:	2802      	cmp	r0, #2
 80044de:	f200 81d9 	bhi.w	8004894 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	079b      	lsls	r3, r3, #30
 80044e6:	d5f5      	bpl.n	80044d4 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f043 0308 	orr.w	r3, r3, #8
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6a22      	ldr	r2, [r4, #32]
 80044f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f8:	4313      	orrs	r3, r2
 80044fa:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69e2      	ldr	r2, [r4, #28]
 8004500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004504:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004508:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	07d9      	lsls	r1, r3, #31
 800450e:	f100 80a6 	bmi.w	800465e <HAL_RCC_OscConfig+0x1d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004512:	0799      	lsls	r1, r3, #30
 8004514:	d523      	bpl.n	800455e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004516:	2d04      	cmp	r5, #4
 8004518:	f000 819a 	beq.w	8004850 <HAL_RCC_OscConfig+0x3c4>
 800451c:	2d0c      	cmp	r5, #12
 800451e:	f000 8194 	beq.w	800484a <HAL_RCC_OscConfig+0x3be>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004522:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004524:	4e84      	ldr	r6, [pc, #528]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 81cf 	beq.w	80048ca <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_HSI_ENABLE();
 800452c:	6833      	ldr	r3, [r6, #0]
 800452e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004532:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004534:	f7fe fc86 	bl	8002e44 <HAL_GetTick>
 8004538:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800453a:	e005      	b.n	8004548 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453c:	f7fe fc82 	bl	8002e44 <HAL_GetTick>
 8004540:	1bc0      	subs	r0, r0, r7
 8004542:	2802      	cmp	r0, #2
 8004544:	f200 81a6 	bhi.w	8004894 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	055b      	lsls	r3, r3, #21
 800454c:	d5f6      	bpl.n	800453c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454e:	6873      	ldr	r3, [r6, #4]
 8004550:	6922      	ldr	r2, [r4, #16]
 8004552:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004556:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800455a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	0719      	lsls	r1, r3, #28
 8004560:	d519      	bpl.n	8004596 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004562:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004564:	4e74      	ldr	r6, [pc, #464]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 815b 	beq.w	8004822 <HAL_RCC_OscConfig+0x396>
      __HAL_RCC_LSI_ENABLE();
 800456c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004578:	f7fe fc64 	bl	8002e44 <HAL_GetTick>
 800457c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800457e:	e005      	b.n	800458c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004580:	f7fe fc60 	bl	8002e44 <HAL_GetTick>
 8004584:	1bc0      	subs	r0, r0, r7
 8004586:	2802      	cmp	r0, #2
 8004588:	f200 8184 	bhi.w	8004894 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800458c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004590:	079a      	lsls	r2, r3, #30
 8004592:	d5f5      	bpl.n	8004580 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	075f      	lsls	r7, r3, #29
 8004598:	d53e      	bpl.n	8004618 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800459a:	4b67      	ldr	r3, [pc, #412]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
 800459c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800459e:	00d6      	lsls	r6, r2, #3
 80045a0:	f100 8191 	bmi.w	80048c6 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80045aa:	659a      	str	r2, [r3, #88]	; 0x58
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80045b6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b8:	4f60      	ldr	r7, [pc, #384]	; (800473c <HAL_RCC_OscConfig+0x2b0>)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	05d8      	lsls	r0, r3, #23
 80045be:	f140 81cc 	bpl.w	800495a <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c2:	68a3      	ldr	r3, [r4, #8]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	f000 8192 	beq.w	80048ee <HAL_RCC_OscConfig+0x462>
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	f000 81f0 	beq.w	80049b0 <HAL_RCC_OscConfig+0x524>
 80045d0:	4f59      	ldr	r7, [pc, #356]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
 80045d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80045de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 8186 	bne.w	80048fc <HAL_RCC_OscConfig+0x470>
      tickstart = HAL_GetTick();
 80045f0:	f7fe fc28 	bl	8002e44 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80045f8:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045fa:	e006      	b.n	800460a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fe fc22 	bl	8002e44 <HAL_GetTick>
 8004600:	eba0 0008 	sub.w	r0, r0, r8
 8004604:	4548      	cmp	r0, r9
 8004606:	f200 8145 	bhi.w	8004894 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800460a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800460e:	079b      	lsls	r3, r3, #30
 8004610:	d4f4      	bmi.n	80045fc <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8004612:	2e00      	cmp	r6, #0
 8004614:	f040 81b3 	bne.w	800497e <HAL_RCC_OscConfig+0x4f2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80f0 	beq.w	8004800 <HAL_RCC_OscConfig+0x374>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004620:	2b02      	cmp	r3, #2
 8004622:	f000 809c 	beq.w	800475e <HAL_RCC_OscConfig+0x2d2>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004626:	2d0c      	cmp	r5, #12
 8004628:	f000 8095 	beq.w	8004756 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 800462c:	4c42      	ldr	r4, [pc, #264]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004634:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004636:	f7fe fc05 	bl	8002e44 <HAL_GetTick>
 800463a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463c:	e005      	b.n	800464a <HAL_RCC_OscConfig+0x1be>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463e:	f7fe fc01 	bl	8002e44 <HAL_GetTick>
 8004642:	1b40      	subs	r0, r0, r5
 8004644:	2802      	cmp	r0, #2
 8004646:	f200 8125 	bhi.w	8004894 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8004650:	d1f5      	bne.n	800463e <HAL_RCC_OscConfig+0x1b2>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004652:	68e1      	ldr	r1, [r4, #12]
 8004654:	4a3a      	ldr	r2, [pc, #232]	; (8004740 <HAL_RCC_OscConfig+0x2b4>)
 8004656:	400a      	ands	r2, r1
  return HAL_OK;
 8004658:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800465a:	60e2      	str	r2, [r4, #12]
 800465c:	e0d1      	b.n	8004802 <HAL_RCC_OscConfig+0x376>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800465e:	2d08      	cmp	r5, #8
 8004660:	f000 80d5 	beq.w	800480e <HAL_RCC_OscConfig+0x382>
 8004664:	2d0c      	cmp	r5, #12
 8004666:	f000 80cf 	beq.w	8004808 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466a:	6863      	ldr	r3, [r4, #4]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	f000 8114 	beq.w	800489c <HAL_RCC_OscConfig+0x410>
 8004674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004678:	f000 818d 	beq.w	8004996 <HAL_RCC_OscConfig+0x50a>
 800467c:	4f2e      	ldr	r7, [pc, #184]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004684:	603a      	str	r2, [r7, #0]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800468c:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800468e:	2b00      	cmp	r3, #0
 8004690:	f040 8109 	bne.w	80048a6 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8004694:	f7fe fbd6 	bl	8002e44 <HAL_GetTick>
 8004698:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800469a:	e006      	b.n	80046aa <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800469c:	f7fe fbd2 	bl	8002e44 <HAL_GetTick>
 80046a0:	eba0 0008 	sub.w	r0, r0, r8
 80046a4:	2864      	cmp	r0, #100	; 0x64
 80046a6:	f200 80f5 	bhi.w	8004894 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	0398      	lsls	r0, r3, #14
 80046ae:	d4f5      	bmi.n	800469c <HAL_RCC_OscConfig+0x210>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	e72e      	b.n	8004512 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046b4:	2e01      	cmp	r6, #1
 80046b6:	f47f af00 	bne.w	80044ba <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046ba:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	0799      	lsls	r1, r3, #30
 80046c0:	d446      	bmi.n	8004750 <HAL_RCC_OscConfig+0x2c4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	6a20      	ldr	r0, [r4, #32]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	0712      	lsls	r2, r2, #28
 80046ca:	bf56      	itet	pl
 80046cc:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80046d0:	681b      	ldrmi	r3, [r3, #0]
 80046d2:	091b      	lsrpl	r3, r3, #4
 80046d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d8:	4298      	cmp	r0, r3
 80046da:	f200 8126 	bhi.w	800492a <HAL_RCC_OscConfig+0x49e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	f042 0208 	orr.w	r2, r2, #8
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046ee:	4302      	orrs	r2, r0
 80046f0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	69e1      	ldr	r1, [r4, #28]
 80046f6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80046fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046fe:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004700:	2d00      	cmp	r5, #0
 8004702:	f000 8142 	beq.w	800498a <HAL_RCC_OscConfig+0x4fe>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004706:	f7ff fe67 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	4a0d      	ldr	r2, [pc, #52]	; (8004744 <HAL_RCC_OscConfig+0x2b8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004714:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8004716:	4a0c      	ldr	r2, [pc, #48]	; (8004748 <HAL_RCC_OscConfig+0x2bc>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8004720:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <HAL_RCC_OscConfig+0x2c0>)
 8004724:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8004726:	f7fe fb43 	bl	8002db0 <HAL_InitTick>
        if(status != HAL_OK)
 800472a:	2800      	cmp	r0, #0
 800472c:	d169      	bne.n	8004802 <HAL_RCC_OscConfig+0x376>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	07d9      	lsls	r1, r3, #31
 8004732:	f57f aeee 	bpl.w	8004512 <HAL_RCC_OscConfig+0x86>
 8004736:	e792      	b.n	800465e <HAL_RCC_OscConfig+0x1d2>
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
 8004740:	feeefffc 	.word	0xfeeefffc
 8004744:	0800a350 	.word	0x0800a350
 8004748:	20000008 	.word	0x20000008
 800474c:	20000000 	.word	0x20000000
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004750:	69a3      	ldr	r3, [r4, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1b5      	bne.n	80046c2 <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 8004756:	2001      	movs	r0, #1
}
 8004758:	b003      	add	sp, #12
 800475a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pll_config = RCC->PLLCFGR;
 800475e:	4e9b      	ldr	r6, [pc, #620]	; (80049cc <HAL_RCC_OscConfig+0x540>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004760:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8004762:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004764:	f003 0103 	and.w	r1, r3, #3
 8004768:	4291      	cmp	r1, r2
 800476a:	f000 8133 	beq.w	80049d4 <HAL_RCC_OscConfig+0x548>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800476e:	2d0c      	cmp	r5, #12
 8004770:	d0f1      	beq.n	8004756 <HAL_RCC_OscConfig+0x2ca>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004772:	4d96      	ldr	r5, [pc, #600]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	015f      	lsls	r7, r3, #5
 8004778:	d4ed      	bmi.n	8004756 <HAL_RCC_OscConfig+0x2ca>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	00de      	lsls	r6, r3, #3
 800477e:	d4ea      	bmi.n	8004756 <HAL_RCC_OscConfig+0x2ca>
            __HAL_RCC_PLL_DISABLE();
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004786:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004788:	f7fe fb5c 	bl	8002e44 <HAL_GetTick>
 800478c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478e:	e004      	b.n	800479a <HAL_RCC_OscConfig+0x30e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fe fb58 	bl	8002e44 <HAL_GetTick>
 8004794:	1b80      	subs	r0, r0, r6
 8004796:	2802      	cmp	r0, #2
 8004798:	d87c      	bhi.n	8004894 <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479a:	682b      	ldr	r3, [r5, #0]
 800479c:	0198      	lsls	r0, r3, #6
 800479e:	d4f7      	bmi.n	8004790 <HAL_RCC_OscConfig+0x304>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a0:	68e9      	ldr	r1, [r5, #12]
 80047a2:	4b8b      	ldr	r3, [pc, #556]	; (80049d0 <HAL_RCC_OscConfig+0x544>)
 80047a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a6:	4e89      	ldr	r6, [pc, #548]	; (80049cc <HAL_RCC_OscConfig+0x540>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a8:	400b      	ands	r3, r1
 80047aa:	4313      	orrs	r3, r2
 80047ac:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
 80047b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047b4:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80047b8:	3a01      	subs	r2, #1
 80047ba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80047be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047c0:	0900      	lsrs	r0, r0, #4
 80047c2:	0849      	lsrs	r1, r1, #1
 80047c4:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80047c8:	3901      	subs	r1, #1
 80047ca:	0852      	lsrs	r2, r2, #1
 80047cc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80047d0:	3a01      	subs	r2, #1
 80047d2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80047d6:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047de:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047e0:	68eb      	ldr	r3, [r5, #12]
 80047e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e6:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80047e8:	f7fe fb2c 	bl	8002e44 <HAL_GetTick>
 80047ec:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ee:	e004      	b.n	80047fa <HAL_RCC_OscConfig+0x36e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f0:	f7fe fb28 	bl	8002e44 <HAL_GetTick>
 80047f4:	1b00      	subs	r0, r0, r4
 80047f6:	2802      	cmp	r0, #2
 80047f8:	d84c      	bhi.n	8004894 <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fa:	6833      	ldr	r3, [r6, #0]
 80047fc:	0199      	lsls	r1, r3, #6
 80047fe:	d5f7      	bpl.n	80047f0 <HAL_RCC_OscConfig+0x364>
  return HAL_OK;
 8004800:	2000      	movs	r0, #0
}
 8004802:	b003      	add	sp, #12
 8004804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004808:	2e03      	cmp	r6, #3
 800480a:	f47f af2e 	bne.w	800466a <HAL_RCC_OscConfig+0x1de>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480e:	4a6f      	ldr	r2, [pc, #444]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	0392      	lsls	r2, r2, #14
 8004814:	f57f ae7d 	bpl.w	8004512 <HAL_RCC_OscConfig+0x86>
 8004818:	6862      	ldr	r2, [r4, #4]
 800481a:	2a00      	cmp	r2, #0
 800481c:	f47f ae79 	bne.w	8004512 <HAL_RCC_OscConfig+0x86>
 8004820:	e799      	b.n	8004756 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_LSI_DISABLE();
 8004822:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800482e:	f7fe fb09 	bl	8002e44 <HAL_GetTick>
 8004832:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004834:	e004      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004836:	f7fe fb05 	bl	8002e44 <HAL_GetTick>
 800483a:	1bc0      	subs	r0, r0, r7
 800483c:	2802      	cmp	r0, #2
 800483e:	d829      	bhi.n	8004894 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004840:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004844:	079b      	lsls	r3, r3, #30
 8004846:	d4f6      	bmi.n	8004836 <HAL_RCC_OscConfig+0x3aa>
 8004848:	e6a4      	b.n	8004594 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800484a:	2e02      	cmp	r6, #2
 800484c:	f47f ae69 	bne.w	8004522 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004850:	4a5e      	ldr	r2, [pc, #376]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	0552      	lsls	r2, r2, #21
 8004856:	d503      	bpl.n	8004860 <HAL_RCC_OscConfig+0x3d4>
 8004858:	68e2      	ldr	r2, [r4, #12]
 800485a:	2a00      	cmp	r2, #0
 800485c:	f43f af7b 	beq.w	8004756 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	495a      	ldr	r1, [pc, #360]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 8004862:	6920      	ldr	r0, [r4, #16]
 8004864:	684a      	ldr	r2, [r1, #4]
 8004866:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 800486a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800486e:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004870:	e675      	b.n	800455e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800487a:	f7fe fae3 	bl	8002e44 <HAL_GetTick>
 800487e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	0798      	lsls	r0, r3, #30
 8004884:	f57f af53 	bpl.w	800472e <HAL_RCC_OscConfig+0x2a2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004888:	f7fe fadc 	bl	8002e44 <HAL_GetTick>
 800488c:	eba0 0008 	sub.w	r0, r0, r8
 8004890:	2802      	cmp	r0, #2
 8004892:	d9f5      	bls.n	8004880 <HAL_RCC_OscConfig+0x3f4>
            return HAL_TIMEOUT;
 8004894:	2003      	movs	r0, #3
}
 8004896:	b003      	add	sp, #12
 8004898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489c:	4a4b      	ldr	r2, [pc, #300]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80048a6:	f7fe facd 	bl	8002e44 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048aa:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80049cc <HAL_RCC_OscConfig+0x540>
        tickstart = HAL_GetTick();
 80048ae:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b0:	e004      	b.n	80048bc <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b2:	f7fe fac7 	bl	8002e44 <HAL_GetTick>
 80048b6:	1bc0      	subs	r0, r0, r7
 80048b8:	2864      	cmp	r0, #100	; 0x64
 80048ba:	d8eb      	bhi.n	8004894 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048bc:	f8d8 3000 	ldr.w	r3, [r8]
 80048c0:	039b      	lsls	r3, r3, #14
 80048c2:	d5f6      	bpl.n	80048b2 <HAL_RCC_OscConfig+0x426>
 80048c4:	e6f4      	b.n	80046b0 <HAL_RCC_OscConfig+0x224>
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2600      	movs	r6, #0
 80048c8:	e676      	b.n	80045b8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80048ca:	6833      	ldr	r3, [r6, #0]
 80048cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80048d2:	f7fe fab7 	bl	8002e44 <HAL_GetTick>
 80048d6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d8:	e004      	b.n	80048e4 <HAL_RCC_OscConfig+0x458>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048da:	f7fe fab3 	bl	8002e44 <HAL_GetTick>
 80048de:	1bc0      	subs	r0, r0, r7
 80048e0:	2802      	cmp	r0, #2
 80048e2:	d8d7      	bhi.n	8004894 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048e4:	6833      	ldr	r3, [r6, #0]
 80048e6:	0558      	lsls	r0, r3, #21
 80048e8:	d4f7      	bmi.n	80048da <HAL_RCC_OscConfig+0x44e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	e637      	b.n	800455e <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ee:	4a37      	ldr	r2, [pc, #220]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 80048f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80048fc:	f7fe faa2 	bl	8002e44 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004900:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80049cc <HAL_RCC_OscConfig+0x540>
      tickstart = HAL_GetTick();
 8004904:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490a:	e004      	b.n	8004916 <HAL_RCC_OscConfig+0x48a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fe fa9a 	bl	8002e44 <HAL_GetTick>
 8004910:	1bc0      	subs	r0, r0, r7
 8004912:	4548      	cmp	r0, r9
 8004914:	d8be      	bhi.n	8004894 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004916:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800491a:	079a      	lsls	r2, r3, #30
 800491c:	d5f6      	bpl.n	800490c <HAL_RCC_OscConfig+0x480>
    if(pwrclkchanged == SET)
 800491e:	2e00      	cmp	r6, #0
 8004920:	f43f ae7a 	beq.w	8004618 <HAL_RCC_OscConfig+0x18c>
 8004924:	e02b      	b.n	800497e <HAL_RCC_OscConfig+0x4f2>
    return HAL_ERROR;
 8004926:	2001      	movs	r0, #1
}
 8004928:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800492a:	f7ff fd0f 	bl	800434c <RCC_SetFlashLatencyFromMSIRange>
 800492e:	2800      	cmp	r0, #0
 8004930:	f47f af11 	bne.w	8004756 <HAL_RCC_OscConfig+0x2ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004934:	4b25      	ldr	r3, [pc, #148]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	f042 0208 	orr.w	r2, r2, #8
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6a21      	ldr	r1, [r4, #32]
 8004942:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	69e1      	ldr	r1, [r4, #28]
 800494e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004952:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	e6d5      	b.n	8004706 <HAL_RCC_OscConfig+0x27a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004960:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004962:	f7fe fa6f 	bl	8002e44 <HAL_GetTick>
 8004966:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	05d9      	lsls	r1, r3, #23
 800496c:	f53f ae29 	bmi.w	80045c2 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004970:	f7fe fa68 	bl	8002e44 <HAL_GetTick>
 8004974:	eba0 0008 	sub.w	r0, r0, r8
 8004978:	2802      	cmp	r0, #2
 800497a:	d9f5      	bls.n	8004968 <HAL_RCC_OscConfig+0x4dc>
 800497c:	e78a      	b.n	8004894 <HAL_RCC_OscConfig+0x408>
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4a13      	ldr	r2, [pc, #76]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 8004980:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004986:	6593      	str	r3, [r2, #88]	; 0x58
 8004988:	e646      	b.n	8004618 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800498a:	f7ff fcdf 	bl	800434c <RCC_SetFlashLatencyFromMSIRange>
 800498e:	2800      	cmp	r0, #0
 8004990:	f43f aeb9 	beq.w	8004706 <HAL_RCC_OscConfig+0x27a>
 8004994:	e6df      	b.n	8004756 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004996:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800499a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049ac:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ae:	e77a      	b.n	80048a6 <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_RCC_OscConfig+0x540>)
 80049b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80049b6:	f042 0204 	orr.w	r2, r2, #4
 80049ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80049be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ca:	e797      	b.n	80048fc <HAL_RCC_OscConfig+0x470>
 80049cc:	40021000 	.word	0x40021000
 80049d0:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049da:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049dc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80049e0:	f47f aec5 	bne.w	800476e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ea:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80049ee:	f47f aebe 	bne.w	800476e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049f4:	3a07      	subs	r2, #7
 80049f6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80049fa:	bf18      	it	ne
 80049fc:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049fe:	4291      	cmp	r1, r2
 8004a00:	f47f aeb5 	bne.w	800476e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a06:	0852      	lsrs	r2, r2, #1
 8004a08:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004a0c:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a0e:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004a12:	f47f aeac 	bne.w	800476e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a18:	0852      	lsrs	r2, r2, #1
 8004a1a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004a1e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a20:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004a24:	f47f aea3 	bne.w	800476e <HAL_RCC_OscConfig+0x2e2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	019a      	lsls	r2, r3, #6
 8004a2c:	f53f aee8 	bmi.w	8004800 <HAL_RCC_OscConfig+0x374>
          __HAL_RCC_PLL_ENABLE();
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a36:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a38:	68f3      	ldr	r3, [r6, #12]
 8004a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3e:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8004a40:	f7fe fa00 	bl	8002e44 <HAL_GetTick>
 8004a44:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_OscConfig+0x5c8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fe f9fc 	bl	8002e44 <HAL_GetTick>
 8004a4c:	1b00      	subs	r0, r0, r4
 8004a4e:	2802      	cmp	r0, #2
 8004a50:	f63f af20 	bhi.w	8004894 <HAL_RCC_OscConfig+0x408>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a54:	6833      	ldr	r3, [r6, #0]
 8004a56:	019b      	lsls	r3, r3, #6
 8004a58:	d5f6      	bpl.n	8004a48 <HAL_RCC_OscConfig+0x5bc>
 8004a5a:	e6d1      	b.n	8004800 <HAL_RCC_OscConfig+0x374>

08004a5c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	f000 809f 	beq.w	8004ba0 <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a62:	4a53      	ldr	r2, [pc, #332]	; (8004bb0 <HAL_RCC_ClockConfig+0x154>)
 8004a64:	6813      	ldr	r3, [r2, #0]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	428b      	cmp	r3, r1
{
 8004a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a70:	460d      	mov	r5, r1
 8004a72:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a74:	d20c      	bcs.n	8004a90 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	f023 0307 	bic.w	r3, r3, #7
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a80:	6813      	ldr	r3, [r2, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	428b      	cmp	r3, r1
 8004a88:	d002      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004a8a:	2001      	movs	r0, #1
}
 8004a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	079e      	lsls	r6, r3, #30
 8004a94:	d571      	bpl.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a96:	4847      	ldr	r0, [pc, #284]	; (8004bb4 <HAL_RCC_ClockConfig+0x158>)
 8004a98:	68a1      	ldr	r1, [r4, #8]
 8004a9a:	6882      	ldr	r2, [r0, #8]
 8004a9c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004aa0:	4291      	cmp	r1, r2
 8004aa2:	d904      	bls.n	8004aae <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa4:	6882      	ldr	r2, [r0, #8]
 8004aa6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aae:	07da      	lsls	r2, r3, #31
 8004ab0:	d526      	bpl.n	8004b00 <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab2:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab6:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab8:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aba:	d065      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abc:	2a02      	cmp	r2, #2
 8004abe:	d06c      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ac0:	2a00      	cmp	r2, #0
 8004ac2:	d171      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac4:	079b      	lsls	r3, r3, #30
 8004ac6:	d5e0      	bpl.n	8004a8a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ac8:	4e3a      	ldr	r6, [pc, #232]	; (8004bb4 <HAL_RCC_ClockConfig+0x158>)
 8004aca:	68b3      	ldr	r3, [r6, #8]
 8004acc:	f023 0303 	bic.w	r3, r3, #3
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004ad4:	f7fe f9b6 	bl	8002e44 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004adc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	e004      	b.n	8004aea <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae0:	f7fe f9b0 	bl	8002e44 <HAL_GetTick>
 8004ae4:	1bc0      	subs	r0, r0, r7
 8004ae6:	4540      	cmp	r0, r8
 8004ae8:	d85c      	bhi.n	8004ba4 <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	68b3      	ldr	r3, [r6, #8]
 8004aec:	6862      	ldr	r2, [r4, #4]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004af6:	d1f3      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	079e      	lsls	r6, r3, #30
 8004afc:	d506      	bpl.n	8004b0c <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004afe:	68a1      	ldr	r1, [r4, #8]
 8004b00:	482c      	ldr	r0, [pc, #176]	; (8004bb4 <HAL_RCC_ClockConfig+0x158>)
 8004b02:	6882      	ldr	r2, [r0, #8]
 8004b04:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004b08:	428a      	cmp	r2, r1
 8004b0a:	d840      	bhi.n	8004b8e <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b0c:	4928      	ldr	r1, [pc, #160]	; (8004bb0 <HAL_RCC_ClockConfig+0x154>)
 8004b0e:	680a      	ldr	r2, [r1, #0]
 8004b10:	f002 0207 	and.w	r2, r2, #7
 8004b14:	42aa      	cmp	r2, r5
 8004b16:	d909      	bls.n	8004b2c <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b18:	680a      	ldr	r2, [r1, #0]
 8004b1a:	f022 0207 	bic.w	r2, r2, #7
 8004b1e:	432a      	orrs	r2, r5
 8004b20:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	680a      	ldr	r2, [r1, #0]
 8004b24:	f002 0207 	and.w	r2, r2, #7
 8004b28:	42aa      	cmp	r2, r5
 8004b2a:	d1ae      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2c:	075d      	lsls	r5, r3, #29
 8004b2e:	d506      	bpl.n	8004b3e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b30:	4920      	ldr	r1, [pc, #128]	; (8004bb4 <HAL_RCC_ClockConfig+0x158>)
 8004b32:	68e0      	ldr	r0, [r4, #12]
 8004b34:	688a      	ldr	r2, [r1, #8]
 8004b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b3a:	4302      	orrs	r2, r0
 8004b3c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3e:	0718      	lsls	r0, r3, #28
 8004b40:	d507      	bpl.n	8004b52 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_RCC_ClockConfig+0x158>)
 8004b44:	6921      	ldr	r1, [r4, #16]
 8004b46:	6893      	ldr	r3, [r2, #8]
 8004b48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b50:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b52:	f7ff fc41 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004b56:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <HAL_RCC_ClockConfig+0x158>)
 8004b58:	4c17      	ldr	r4, [pc, #92]	; (8004bb8 <HAL_RCC_ClockConfig+0x15c>)
 8004b5a:	6892      	ldr	r2, [r2, #8]
 8004b5c:	4917      	ldr	r1, [pc, #92]	; (8004bbc <HAL_RCC_ClockConfig+0x160>)
 8004b5e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004b62:	4603      	mov	r3, r0
 8004b64:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8004b66:	4816      	ldr	r0, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b68:	f002 021f 	and.w	r2, r2, #31
 8004b6c:	40d3      	lsrs	r3, r2
}
 8004b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8004b72:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b74:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8004b76:	f7fe b91b 	b.w	8002db0 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7a:	07d9      	lsls	r1, r3, #31
 8004b7c:	d5c6      	bpl.n	8004b0c <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b7e:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b82:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b84:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b86:	d199      	bne.n	8004abc <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b88:	0198      	lsls	r0, r3, #6
 8004b8a:	d49d      	bmi.n	8004ac8 <HAL_RCC_ClockConfig+0x6c>
 8004b8c:	e77d      	b.n	8004a8a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8e:	6882      	ldr	r2, [r0, #8]
 8004b90:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b94:	430a      	orrs	r2, r1
 8004b96:	6082      	str	r2, [r0, #8]
 8004b98:	e7b8      	b.n	8004b0c <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b9a:	0399      	lsls	r1, r3, #14
 8004b9c:	d494      	bmi.n	8004ac8 <HAL_RCC_ClockConfig+0x6c>
 8004b9e:	e774      	b.n	8004a8a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004ba0:	2001      	movs	r0, #1
}
 8004ba2:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004ba4:	2003      	movs	r0, #3
 8004ba6:	e771      	b.n	8004a8c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba8:	055f      	lsls	r7, r3, #21
 8004baa:	f57f af6e 	bpl.w	8004a8a <HAL_RCC_ClockConfig+0x2e>
 8004bae:	e78b      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x6c>
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	0800a350 	.word	0x0800a350
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	20000008 	.word	0x20000008

08004bc4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x18>)
 8004bc6:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004bca:	4906      	ldr	r1, [pc, #24]	; (8004be4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bcc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004bd0:	6808      	ldr	r0, [r1, #0]
 8004bd2:	5cd3      	ldrb	r3, [r2, r3]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
}
 8004bd8:	40d8      	lsrs	r0, r3
 8004bda:	4770      	bx	lr
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	0800a360 	.word	0x0800a360
 8004be4:	20000000 	.word	0x20000000

08004be8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004bea:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004bec:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004bee:	4906      	ldr	r1, [pc, #24]	; (8004c08 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bf0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	5cd3      	ldrb	r3, [r2, r3]
 8004bf8:	f003 031f 	and.w	r3, r3, #31
}
 8004bfc:	40d8      	lsrs	r0, r3
 8004bfe:	4770      	bx	lr
 8004c00:	40021000 	.word	0x40021000
 8004c04:	0800a360 	.word	0x0800a360
 8004c08:	20000000 	.word	0x20000000

08004c0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c0e:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <RCCEx_PLLSAI1_Config+0x120>)
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	0792      	lsls	r2, r2, #30
{
 8004c14:	4604      	mov	r4, r0
 8004c16:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c18:	d007      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	6801      	ldr	r1, [r0, #0]
 8004c1e:	f002 0203 	and.w	r2, r2, #3
 8004c22:	428a      	cmp	r2, r1
 8004c24:	d04c      	beq.n	8004cc0 <RCCEx_PLLSAI1_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c26:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	2802      	cmp	r0, #2
 8004c2e:	d058      	beq.n	8004ce2 <RCCEx_PLLSAI1_Config+0xd6>
 8004c30:	2803      	cmp	r0, #3
 8004c32:	d04f      	beq.n	8004cd4 <RCCEx_PLLSAI1_Config+0xc8>
 8004c34:	2801      	cmp	r0, #1
 8004c36:	d1f6      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	079b      	lsls	r3, r3, #30
 8004c3c:	d5f4      	bpl.n	8004c28 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c3e:	493b      	ldr	r1, [pc, #236]	; (8004d2c <RCCEx_PLLSAI1_Config+0x120>)
 8004c40:	6862      	ldr	r2, [r4, #4]
 8004c42:	68cb      	ldr	r3, [r1, #12]
 8004c44:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004c48:	4303      	orrs	r3, r0
 8004c4a:	3a01      	subs	r2, #1
 8004c4c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004c50:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c52:	4d36      	ldr	r5, [pc, #216]	; (8004d2c <RCCEx_PLLSAI1_Config+0x120>)
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c5a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004c5c:	f7fe f8f2 	bl	8002e44 <HAL_GetTick>
 8004c60:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c62:	e004      	b.n	8004c6e <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c64:	f7fe f8ee 	bl	8002e44 <HAL_GetTick>
 8004c68:	1b83      	subs	r3, r0, r6
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d83d      	bhi.n	8004cea <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c6e:	682b      	ldr	r3, [r5, #0]
 8004c70:	011a      	lsls	r2, r3, #4
 8004c72:	d4f7      	bmi.n	8004c64 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8004c74:	2f00      	cmp	r7, #0
 8004c76:	d13a      	bne.n	8004cee <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c78:	692b      	ldr	r3, [r5, #16]
 8004c7a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004c7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c8a:	0912      	lsrs	r2, r2, #4
 8004c8c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8004c90:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c92:	4d26      	ldr	r5, [pc, #152]	; (8004d2c <RCCEx_PLLSAI1_Config+0x120>)
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c9a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004c9c:	f7fe f8d2 	bl	8002e44 <HAL_GetTick>
 8004ca0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca2:	e004      	b.n	8004cae <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca4:	f7fe f8ce 	bl	8002e44 <HAL_GetTick>
 8004ca8:	1b83      	subs	r3, r0, r6
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d81d      	bhi.n	8004cea <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cae:	682b      	ldr	r3, [r5, #0]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	d5f7      	bpl.n	8004ca4 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cb4:	692b      	ldr	r3, [r5, #16]
 8004cb6:	69a2      	ldr	r2, [r4, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	2000      	movs	r0, #0
 8004cbc:	612b      	str	r3, [r5, #16]
}
 8004cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	d0b0      	beq.n	8004c26 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cc4:	68db      	ldr	r3, [r3, #12]
       ||
 8004cc6:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cc8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004ccc:	3301      	adds	r3, #1
       ||
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d1a9      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0x1a>
 8004cd2:	e7be      	b.n	8004c52 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	0395      	lsls	r5, r2, #14
 8004cd8:	d4b1      	bmi.n	8004c3e <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0359      	lsls	r1, r3, #13
 8004cde:	d5a2      	bpl.n	8004c26 <RCCEx_PLLSAI1_Config+0x1a>
 8004ce0:	e7ad      	b.n	8004c3e <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	055e      	lsls	r6, r3, #21
 8004ce6:	d59e      	bpl.n	8004c26 <RCCEx_PLLSAI1_Config+0x1a>
 8004ce8:	e7a9      	b.n	8004c3e <RCCEx_PLLSAI1_Config+0x32>
    switch(PllSai1->PLLSAI1Source)
 8004cea:	2003      	movs	r0, #3
}
 8004cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cee:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf0:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cf2:	d00d      	beq.n	8004d10 <RCCEx_PLLSAI1_Config+0x104>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf4:	6962      	ldr	r2, [r4, #20]
 8004cf6:	68a1      	ldr	r1, [r4, #8]
 8004cf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cfc:	0852      	lsrs	r2, r2, #1
 8004cfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d02:	3a01      	subs	r2, #1
 8004d04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d08:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004d0c:	612b      	str	r3, [r5, #16]
 8004d0e:	e7c0      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d10:	6922      	ldr	r2, [r4, #16]
 8004d12:	68a1      	ldr	r1, [r4, #8]
 8004d14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d18:	0852      	lsrs	r2, r2, #1
 8004d1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d24:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004d28:	612b      	str	r3, [r5, #16]
 8004d2a:	e7b2      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0x86>
 8004d2c:	40021000 	.word	0x40021000

08004d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d32:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <RCCEx_PLLSAI2_Config+0x100>)
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	0792      	lsls	r2, r2, #30
{
 8004d38:	4604      	mov	r4, r0
 8004d3a:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d3c:	d007      	beq.n	8004d4e <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	6801      	ldr	r1, [r0, #0]
 8004d42:	f002 0203 	and.w	r2, r2, #3
 8004d46:	428a      	cmp	r2, r1
 8004d48:	d04c      	beq.n	8004de4 <RCCEx_PLLSAI2_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d4a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8004d4e:	6800      	ldr	r0, [r0, #0]
 8004d50:	2802      	cmp	r0, #2
 8004d52:	d058      	beq.n	8004e06 <RCCEx_PLLSAI2_Config+0xd6>
 8004d54:	2803      	cmp	r0, #3
 8004d56:	d04f      	beq.n	8004df8 <RCCEx_PLLSAI2_Config+0xc8>
 8004d58:	2801      	cmp	r0, #1
 8004d5a:	d1f6      	bne.n	8004d4a <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	079b      	lsls	r3, r3, #30
 8004d60:	d5f4      	bpl.n	8004d4c <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d62:	4933      	ldr	r1, [pc, #204]	; (8004e30 <RCCEx_PLLSAI2_Config+0x100>)
 8004d64:	6862      	ldr	r2, [r4, #4]
 8004d66:	68cb      	ldr	r3, [r1, #12]
 8004d68:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004d6c:	4303      	orrs	r3, r0
 8004d6e:	3a01      	subs	r2, #1
 8004d70:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004d74:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d76:	4d2e      	ldr	r5, [pc, #184]	; (8004e30 <RCCEx_PLLSAI2_Config+0x100>)
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004d80:	f7fe f860 	bl	8002e44 <HAL_GetTick>
 8004d84:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d86:	e004      	b.n	8004d92 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d88:	f7fe f85c 	bl	8002e44 <HAL_GetTick>
 8004d8c:	1b83      	subs	r3, r0, r6
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d83d      	bhi.n	8004e0e <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d92:	682b      	ldr	r3, [r5, #0]
 8004d94:	009a      	lsls	r2, r3, #2
 8004d96:	d4f7      	bmi.n	8004d88 <RCCEx_PLLSAI2_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8004d98:	2f00      	cmp	r7, #0
 8004d9a:	d13a      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d9c:	696b      	ldr	r3, [r5, #20]
 8004d9e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004da2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004dae:	0912      	lsrs	r2, r2, #4
 8004db0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8004db4:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004db6:	4d1e      	ldr	r5, [pc, #120]	; (8004e30 <RCCEx_PLLSAI2_Config+0x100>)
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004dc0:	f7fe f840 	bl	8002e44 <HAL_GetTick>
 8004dc4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dc6:	e004      	b.n	8004dd2 <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dc8:	f7fe f83c 	bl	8002e44 <HAL_GetTick>
 8004dcc:	1b83      	subs	r3, r0, r6
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d81d      	bhi.n	8004e0e <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dd2:	682b      	ldr	r3, [r5, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	d5f7      	bpl.n	8004dc8 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dd8:	696b      	ldr	r3, [r5, #20]
 8004dda:	6962      	ldr	r2, [r4, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	2000      	movs	r0, #0
 8004de0:	616b      	str	r3, [r5, #20]
}
 8004de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	d0b0      	beq.n	8004d4a <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004de8:	68db      	ldr	r3, [r3, #12]
       ||
 8004dea:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dec:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004df0:	3301      	adds	r3, #1
       ||
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d1a9      	bne.n	8004d4a <RCCEx_PLLSAI2_Config+0x1a>
 8004df6:	e7be      	b.n	8004d76 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	0395      	lsls	r5, r2, #14
 8004dfc:	d4b1      	bmi.n	8004d62 <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	0359      	lsls	r1, r3, #13
 8004e02:	d5a2      	bpl.n	8004d4a <RCCEx_PLLSAI2_Config+0x1a>
 8004e04:	e7ad      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	055e      	lsls	r6, r3, #21
 8004e0a:	d59e      	bpl.n	8004d4a <RCCEx_PLLSAI2_Config+0x1a>
 8004e0c:	e7a9      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0x32>
    switch(PllSai2->PLLSAI2Source)
 8004e0e:	2003      	movs	r0, #3
}
 8004e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e12:	696b      	ldr	r3, [r5, #20]
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	68a1      	ldr	r1, [r4, #8]
 8004e18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e1c:	0852      	lsrs	r2, r2, #1
 8004e1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e22:	3a01      	subs	r2, #1
 8004e24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004e28:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004e2c:	616b      	str	r3, [r5, #20]
 8004e2e:	e7c2      	b.n	8004db6 <RCCEx_PLLSAI2_Config+0x86>
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e38:	6803      	ldr	r3, [r0, #0]
 8004e3a:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 8004e3e:	b083      	sub	sp, #12
 8004e40:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e42:	d020      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e44:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8004e46:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004e4a:	f000 81d4 	beq.w	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8004e4e:	f200 8122 	bhi.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004e52:	2900      	cmp	r1, #0
 8004e54:	f000 81ab 	beq.w	80051ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004e58:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004e5c:	f040 811f 	bne.w	800509e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e60:	2100      	movs	r1, #0
 8004e62:	3020      	adds	r0, #32
 8004e64:	f7ff ff64 	bl	8004d30 <RCCEx_PLLSAI2_Config>
 8004e68:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004e6a:	2d00      	cmp	r5, #0
 8004e6c:	f040 81d0 	bne.w	8005210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e70:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e72:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e74:	48ae      	ldr	r0, [pc, #696]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004e76:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e7a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8004e84:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e86:	04d8      	lsls	r0, r3, #19
 8004e88:	f140 810e 	bpl.w	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004e8c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004e8e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004e92:	f000 81b6 	beq.w	8005202 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004e96:	f200 816c 	bhi.w	8005172 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	f000 8181 	beq.w	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004ea0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004ea4:	f040 819a 	bne.w	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	f104 0020 	add.w	r0, r4, #32
 8004eae:	f7ff ff3f 	bl	8004d30 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eb2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb4:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8004eb6:	f1b8 0f00 	cmp.w	r8, #0
 8004eba:	f040 8162 	bne.w	8005182 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ebe:	499c      	ldr	r1, [pc, #624]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004ec0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004ec2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ec6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004eca:	4302      	orrs	r2, r0
 8004ecc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ed0:	0399      	lsls	r1, r3, #14
 8004ed2:	f100 80ed 	bmi.w	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ed6:	07da      	lsls	r2, r3, #31
 8004ed8:	d508      	bpl.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eda:	4995      	ldr	r1, [pc, #596]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004edc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ede:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ee2:	f022 0203 	bic.w	r2, r2, #3
 8004ee6:	4302      	orrs	r2, r0
 8004ee8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eec:	079f      	lsls	r7, r3, #30
 8004eee:	d508      	bpl.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ef0:	498f      	ldr	r1, [pc, #572]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004ef2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ef4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ef8:	f022 020c 	bic.w	r2, r2, #12
 8004efc:	4302      	orrs	r2, r0
 8004efe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f02:	075e      	lsls	r6, r3, #29
 8004f04:	d508      	bpl.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f06:	498a      	ldr	r1, [pc, #552]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f08:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004f0a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f0e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004f12:	4302      	orrs	r2, r0
 8004f14:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f18:	0718      	lsls	r0, r3, #28
 8004f1a:	d508      	bpl.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f1c:	4984      	ldr	r1, [pc, #528]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f1e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004f20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f24:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f28:	4302      	orrs	r2, r0
 8004f2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f2e:	06d9      	lsls	r1, r3, #27
 8004f30:	d508      	bpl.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f32:	497f      	ldr	r1, [pc, #508]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f34:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004f36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f3e:	4302      	orrs	r2, r0
 8004f40:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f44:	069a      	lsls	r2, r3, #26
 8004f46:	d508      	bpl.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f48:	4979      	ldr	r1, [pc, #484]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f4a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004f4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f54:	4302      	orrs	r2, r0
 8004f56:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f5a:	059f      	lsls	r7, r3, #22
 8004f5c:	d508      	bpl.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f5e:	4974      	ldr	r1, [pc, #464]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f60:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004f62:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f66:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004f6a:	4302      	orrs	r2, r0
 8004f6c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f70:	055e      	lsls	r6, r3, #21
 8004f72:	d508      	bpl.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f74:	496e      	ldr	r1, [pc, #440]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f76:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004f78:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f7c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004f80:	4302      	orrs	r2, r0
 8004f82:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f86:	0658      	lsls	r0, r3, #25
 8004f88:	d508      	bpl.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f8a:	4969      	ldr	r1, [pc, #420]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f8c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004f8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f92:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004f96:	4302      	orrs	r2, r0
 8004f98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f9c:	0619      	lsls	r1, r3, #24
 8004f9e:	d508      	bpl.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fa0:	4963      	ldr	r1, [pc, #396]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004fa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fa4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004fa8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004fac:	4302      	orrs	r2, r0
 8004fae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fb2:	05da      	lsls	r2, r3, #23
 8004fb4:	d508      	bpl.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fb6:	495e      	ldr	r1, [pc, #376]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004fbe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004fc2:	4302      	orrs	r2, r0
 8004fc4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fc8:	049f      	lsls	r7, r3, #18
 8004fca:	d510      	bpl.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fcc:	4958      	ldr	r1, [pc, #352]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004fce:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004fd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004fd4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004fd8:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fda:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fde:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fe2:	f000 80f1 	beq.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fe6:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004fea:	f000 8128 	beq.w	800523e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fee:	031e      	lsls	r6, r3, #12
 8004ff0:	d510      	bpl.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ff2:	494f      	ldr	r1, [pc, #316]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004ff4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004ff6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ffa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004ffe:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005000:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005004:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005008:	f000 80e3 	beq.w	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800500c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005010:	f000 811f 	beq.w	8005252 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005014:	0358      	lsls	r0, r3, #13
 8005016:	d510      	bpl.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005018:	4945      	ldr	r1, [pc, #276]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800501a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800501c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005020:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005024:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005026:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800502a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800502e:	f000 80c6 	beq.w	80051be <HAL_RCCEx_PeriphCLKConfig+0x38a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005032:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005036:	f000 80f8 	beq.w	800522a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800503a:	0459      	lsls	r1, r3, #17
 800503c:	d510      	bpl.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800503e:	483c      	ldr	r0, [pc, #240]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005040:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005042:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005046:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800504a:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800504c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005050:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005054:	f000 80c5 	beq.w	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005058:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800505c:	f000 80da 	beq.w	8005214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005060:	041a      	lsls	r2, r3, #16
 8005062:	d508      	bpl.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005064:	4932      	ldr	r1, [pc, #200]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005066:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005068:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800506c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005070:	4302      	orrs	r2, r0
 8005072:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005076:	03db      	lsls	r3, r3, #15
 8005078:	d509      	bpl.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800507a:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800507c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005080:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005088:	430b      	orrs	r3, r1
 800508a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800508e:	4628      	mov	r0, r5
 8005090:	b003      	add	sp, #12
 8005092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8005096:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800509a:	f43f aeeb 	beq.w	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800509e:	04d8      	lsls	r0, r3, #19
    switch(PeriphClkInit->Sai1ClockSelection)
 80050a0:	f04f 0501 	mov.w	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050a4:	f53f aef2 	bmi.w	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x58>
 80050a8:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050aa:	0399      	lsls	r1, r3, #14
 80050ac:	f57f af13 	bpl.w	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050b0:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80050b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050b4:	00d2      	lsls	r2, r2, #3
 80050b6:	d566      	bpl.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x352>
    FlagStatus       pwrclkchanged = RESET;
 80050b8:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050bc:	4e1d      	ldr	r6, [pc, #116]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050be:	6833      	ldr	r3, [r6, #0]
 80050c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80050c6:	f7fd febd 	bl	8002e44 <HAL_GetTick>
 80050ca:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050cc:	e004      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ce:	f7fd feb9 	bl	8002e44 <HAL_GetTick>
 80050d2:	1bc3      	subs	r3, r0, r7
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d862      	bhi.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	05db      	lsls	r3, r3, #23
 80050dc:	d5f7      	bpl.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x29a>
    if(ret == HAL_OK)
 80050de:	f1b8 0f00 	cmp.w	r8, #0
 80050e2:	f040 80c0 	bne.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x432>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050e6:	4e12      	ldr	r6, [pc, #72]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80050e8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80050f0:	d02b      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x316>
 80050f2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d029      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050fa:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80050fe:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005106:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800510a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800510e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005112:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005116:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005118:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 800511c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005120:	f140 80a3 	bpl.w	800526a <HAL_RCCEx_PeriphCLKConfig+0x436>
        tickstart = HAL_GetTick();
 8005124:	f7fd fe8e 	bl	8002e44 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800512c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8005130:	40021000 	.word	0x40021000
 8005134:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7fd fe84 	bl	8002e44 <HAL_GetTick>
 800513c:	1bc0      	subs	r0, r0, r7
 800513e:	4540      	cmp	r0, r8
 8005140:	d82d      	bhi.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005142:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005146:	0799      	lsls	r1, r3, #30
 8005148:	d5f6      	bpl.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800514a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800514e:	4948      	ldr	r1, [pc, #288]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005150:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005154:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 800515e:	f1b9 0f00 	cmp.w	r9, #0
 8005162:	d004      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005164:	4a42      	ldr	r2, [pc, #264]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005166:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	e6b1      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005172:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005176:	d131      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8005178:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 800517a:	f1b8 0f00 	cmp.w	r8, #0
 800517e:	f43f ae9e 	beq.w	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8005182:	4645      	mov	r5, r8
 8005184:	e791      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x276>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005188:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800518c:	659a      	str	r2, [r3, #88]	; 0x58
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005198:	f04f 0901 	mov.w	r9, #1
 800519c:	e78e      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = HAL_TIMEOUT;
 800519e:	2503      	movs	r5, #3
 80051a0:	e7dd      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051a2:	1d20      	adds	r0, r4, #4
 80051a4:	f7ff fd32 	bl	8004c0c <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051a8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051aa:	4680      	mov	r8, r0
      break;
 80051ac:	e683      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ae:	3004      	adds	r0, #4
 80051b0:	f7ff fd2c 	bl	8004c0c <RCCEx_PLLSAI1_Config>
 80051b4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80051b6:	2d00      	cmp	r5, #0
 80051b8:	f43f ae5a 	beq.w	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80051bc:	e028      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051be:	68ca      	ldr	r2, [r1, #12]
 80051c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051c4:	60ca      	str	r2, [r1, #12]
 80051c6:	e738      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	68ca      	ldr	r2, [r1, #12]
 80051ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051ce:	60ca      	str	r2, [r1, #12]
 80051d0:	e70d      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d2:	68ca      	ldr	r2, [r1, #12]
 80051d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051d8:	60ca      	str	r2, [r1, #12]
 80051da:	e71b      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai2ClockSelection)
 80051dc:	2501      	movs	r5, #1
 80051de:	46a8      	mov	r8, r5
 80051e0:	e763      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x276>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051e2:	2102      	movs	r1, #2
 80051e4:	1d20      	adds	r0, r4, #4
 80051e6:	f7ff fd11 	bl	8004c0c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051ea:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80051ec:	2800      	cmp	r0, #0
 80051ee:	f43f af37 	beq.w	8005060 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051f2:	4605      	mov	r5, r0
 80051f4:	e734      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051f6:	481e      	ldr	r0, [pc, #120]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80051f8:	68c2      	ldr	r2, [r0, #12]
 80051fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80051fe:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8005200:	e638      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005202:	491b      	ldr	r1, [pc, #108]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005204:	68ca      	ldr	r2, [r1, #12]
 8005206:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800520a:	60ca      	str	r2, [r1, #12]
      break;
 800520c:	46a8      	mov	r8, r5
 800520e:	e652      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	e638      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x52>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005214:	2102      	movs	r1, #2
 8005216:	f104 0020 	add.w	r0, r4, #32
 800521a:	f7ff fd89 	bl	8004d30 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800521e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005220:	2800      	cmp	r0, #0
 8005222:	f43f af1d 	beq.w	8005060 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005226:	4605      	mov	r5, r0
 8005228:	e71a      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800522a:	2101      	movs	r1, #1
 800522c:	1d20      	adds	r0, r4, #4
 800522e:	f7ff fced 	bl	8004c0c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005232:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005234:	2800      	cmp	r0, #0
 8005236:	f43f af00 	beq.w	800503a <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800523a:	4605      	mov	r5, r0
 800523c:	e6fd      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800523e:	2101      	movs	r1, #1
 8005240:	1d20      	adds	r0, r4, #4
 8005242:	f7ff fce3 	bl	8004c0c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005246:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8005248:	2800      	cmp	r0, #0
 800524a:	f43f aed0 	beq.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800524e:	4605      	mov	r5, r0
 8005250:	e6cd      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005252:	2101      	movs	r1, #1
 8005254:	1d20      	adds	r0, r4, #4
 8005256:	f7ff fcd9 	bl	8004c0c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800525a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800525c:	2800      	cmp	r0, #0
 800525e:	f43f aed9 	beq.w	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005262:	4605      	mov	r5, r0
 8005264:	e6d6      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8005266:	4645      	mov	r5, r8
 8005268:	e779      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800526a:	4613      	mov	r3, r2
 800526c:	e76f      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000

08005274 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005274:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005276:	6a02      	ldr	r2, [r0, #32]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	6202      	str	r2, [r0, #32]
{
 800527e:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005284:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005286:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800528a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800528e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005290:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005292:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005296:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005298:	4d13      	ldr	r5, [pc, #76]	; (80052e8 <TIM_OC1_SetConfig+0x74>)
 800529a:	42a8      	cmp	r0, r5
 800529c:	d00f      	beq.n	80052be <TIM_OC1_SetConfig+0x4a>
 800529e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80052a2:	42a8      	cmp	r0, r5
 80052a4:	d00b      	beq.n	80052be <TIM_OC1_SetConfig+0x4a>
 80052a6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80052aa:	42a8      	cmp	r0, r5
 80052ac:	d007      	beq.n	80052be <TIM_OC1_SetConfig+0x4a>
 80052ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052b2:	42a8      	cmp	r0, r5
 80052b4:	d003      	beq.n	80052be <TIM_OC1_SetConfig+0x4a>
 80052b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052ba:	42a8      	cmp	r0, r5
 80052bc:	d10d      	bne.n	80052da <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052be:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052c6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ca:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80052ce:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80052d2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80052d6:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052da:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80052dc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80052de:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80052e0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80052e2:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80052e4:	6203      	str	r3, [r0, #32]
}
 80052e6:	4770      	bx	lr
 80052e8:	40012c00 	.word	0x40012c00

080052ec <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ec:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ee:	6a02      	ldr	r2, [r0, #32]
 80052f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f4:	6202      	str	r2, [r0, #32]
{
 80052f6:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005302:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005306:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005308:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800530a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005312:	4d15      	ldr	r5, [pc, #84]	; (8005368 <TIM_OC3_SetConfig+0x7c>)
 8005314:	42a8      	cmp	r0, r5
 8005316:	d010      	beq.n	800533a <TIM_OC3_SetConfig+0x4e>
 8005318:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800531c:	42a8      	cmp	r0, r5
 800531e:	d00c      	beq.n	800533a <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005320:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005324:	42a8      	cmp	r0, r5
 8005326:	d00f      	beq.n	8005348 <TIM_OC3_SetConfig+0x5c>
 8005328:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800532c:	42a8      	cmp	r0, r5
 800532e:	d00b      	beq.n	8005348 <TIM_OC3_SetConfig+0x5c>
 8005330:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005334:	42a8      	cmp	r0, r5
 8005336:	d10f      	bne.n	8005358 <TIM_OC3_SetConfig+0x6c>
 8005338:	e006      	b.n	8005348 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800533a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800533c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005340:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005348:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800534c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005350:	ea46 0c05 	orr.w	ip, r6, r5
 8005354:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005358:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800535a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800535c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800535e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8005360:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005362:	6203      	str	r3, [r0, #32]
}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40012c00 	.word	0x40012c00

0800536c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800536c:	2800      	cmp	r0, #0
 800536e:	f000 8085 	beq.w	800547c <HAL_TIM_Base_Init+0x110>
{
 8005372:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005374:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005378:	4604      	mov	r4, r0
 800537a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800537e:	2b00      	cmp	r3, #0
 8005380:	d071      	beq.n	8005466 <HAL_TIM_Base_Init+0xfa>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005382:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005384:	493e      	ldr	r1, [pc, #248]	; (8005480 <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005386:	2302      	movs	r3, #2
 8005388:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800538c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800538e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005390:	d055      	beq.n	800543e <HAL_TIM_Base_Init+0xd2>
 8005392:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005396:	d025      	beq.n	80053e4 <HAL_TIM_Base_Init+0x78>
 8005398:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800539c:	428a      	cmp	r2, r1
 800539e:	d021      	beq.n	80053e4 <HAL_TIM_Base_Init+0x78>
 80053a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053a4:	428a      	cmp	r2, r1
 80053a6:	d01d      	beq.n	80053e4 <HAL_TIM_Base_Init+0x78>
 80053a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053ac:	428a      	cmp	r2, r1
 80053ae:	d019      	beq.n	80053e4 <HAL_TIM_Base_Init+0x78>
 80053b0:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80053b4:	428a      	cmp	r2, r1
 80053b6:	d042      	beq.n	800543e <HAL_TIM_Base_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b8:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80053bc:	428a      	cmp	r2, r1
 80053be:	d057      	beq.n	8005470 <HAL_TIM_Base_Init+0x104>
 80053c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053c4:	428a      	cmp	r2, r1
 80053c6:	d053      	beq.n	8005470 <HAL_TIM_Base_Init+0x104>
 80053c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053cc:	428a      	cmp	r2, r1
 80053ce:	d04f      	beq.n	8005470 <HAL_TIM_Base_Init+0x104>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d0:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80053da:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80053dc:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053de:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053e0:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e2:	e010      	b.n	8005406 <HAL_TIM_Base_Init+0x9a>
    tmpcr1 |= Structure->CounterMode;
 80053e4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80053ec:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053fa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053fc:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80053fe:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005400:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005402:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005404:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005406:	2301      	movs	r3, #1
 8005408:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005412:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005416:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800541a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800541e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800542a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800542e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005432:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800543a:	2000      	movs	r0, #0
}
 800543c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800543e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005440:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005446:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800544e:	69a1      	ldr	r1, [r4, #24]
 8005450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005454:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005456:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005458:	68e3      	ldr	r3, [r4, #12]
 800545a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005460:	6963      	ldr	r3, [r4, #20]
 8005462:	6313      	str	r3, [r2, #48]	; 0x30
 8005464:	e7cf      	b.n	8005406 <HAL_TIM_Base_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 8005466:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800546a:	f7fc fead 	bl	80021c8 <HAL_TIM_Base_MspInit>
 800546e:	e788      	b.n	8005382 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005470:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005472:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005478:	4303      	orrs	r3, r0
 800547a:	e7e9      	b.n	8005450 <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 800547c:	2001      	movs	r0, #1
}
 800547e:	4770      	bx	lr
 8005480:	40012c00 	.word	0x40012c00

08005484 <HAL_TIM_PWM_MspInit>:
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop

08005488 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005488:	2800      	cmp	r0, #0
 800548a:	f000 8085 	beq.w	8005598 <HAL_TIM_PWM_Init+0x110>
{
 800548e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005490:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005494:	4604      	mov	r4, r0
 8005496:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800549a:	2b00      	cmp	r3, #0
 800549c:	d071      	beq.n	8005582 <HAL_TIM_PWM_Init+0xfa>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	493e      	ldr	r1, [pc, #248]	; (800559c <HAL_TIM_PWM_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 80054a2:	2302      	movs	r3, #2
 80054a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80054aa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	d055      	beq.n	800555a <HAL_TIM_PWM_Init+0xd2>
 80054ae:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80054b2:	d025      	beq.n	8005500 <HAL_TIM_PWM_Init+0x78>
 80054b4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80054b8:	428a      	cmp	r2, r1
 80054ba:	d021      	beq.n	8005500 <HAL_TIM_PWM_Init+0x78>
 80054bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054c0:	428a      	cmp	r2, r1
 80054c2:	d01d      	beq.n	8005500 <HAL_TIM_PWM_Init+0x78>
 80054c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054c8:	428a      	cmp	r2, r1
 80054ca:	d019      	beq.n	8005500 <HAL_TIM_PWM_Init+0x78>
 80054cc:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80054d0:	428a      	cmp	r2, r1
 80054d2:	d042      	beq.n	800555a <HAL_TIM_PWM_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80054d8:	428a      	cmp	r2, r1
 80054da:	d057      	beq.n	800558c <HAL_TIM_PWM_Init+0x104>
 80054dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054e0:	428a      	cmp	r2, r1
 80054e2:	d053      	beq.n	800558c <HAL_TIM_PWM_Init+0x104>
 80054e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054e8:	428a      	cmp	r2, r1
 80054ea:	d04f      	beq.n	800558c <HAL_TIM_PWM_Init+0x104>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ee:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80054f6:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80054f8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fa:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054fc:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fe:	e010      	b.n	8005522 <HAL_TIM_PWM_Init+0x9a>
    tmpcr1 |= Structure->CounterMode;
 8005500:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005502:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005508:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800550e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005510:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005516:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005518:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800551a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800551c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005520:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005522:	2301      	movs	r3, #1
 8005524:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005526:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800552e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005532:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800553a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800553e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800554a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800554e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005552:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005556:	2000      	movs	r0, #0
}
 8005558:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800555a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005562:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005568:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800556a:	69a1      	ldr	r1, [r4, #24]
 800556c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005570:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005572:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005574:	68e3      	ldr	r3, [r4, #12]
 8005576:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800557c:	6963      	ldr	r3, [r4, #20]
 800557e:	6313      	str	r3, [r2, #48]	; 0x30
 8005580:	e7cf      	b.n	8005522 <HAL_TIM_PWM_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 8005582:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005586:	f7ff ff7d 	bl	8005484 <HAL_TIM_PWM_MspInit>
 800558a:	e788      	b.n	800549e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005594:	4303      	orrs	r3, r0
 8005596:	e7e9      	b.n	800556c <HAL_TIM_PWM_Init+0xe4>
    return HAL_ERROR;
 8005598:	2001      	movs	r0, #1
}
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00

080055a0 <HAL_TIM_PWM_Start>:
 80055a0:	2910      	cmp	r1, #16
 80055a2:	d80a      	bhi.n	80055ba <HAL_TIM_PWM_Start+0x1a>
 80055a4:	e8df f001 	tbb	[pc, r1]
 80055a8:	09090959 	.word	0x09090959
 80055ac:	0909095f 	.word	0x0909095f
 80055b0:	09090967 	.word	0x09090967
 80055b4:	0909096c 	.word	0x0909096c
 80055b8:	75          	.byte	0x75
 80055b9:	00          	.byte	0x00
 80055ba:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d14f      	bne.n	8005662 <HAL_TIM_PWM_Start+0xc2>
 80055c2:	2910      	cmp	r1, #16
 80055c4:	d80a      	bhi.n	80055dc <HAL_TIM_PWM_Start+0x3c>
 80055c6:	e8df f001 	tbb	[pc, r1]
 80055ca:	098b      	.short	0x098b
 80055cc:	09520909 	.word	0x09520909
 80055d0:	09740909 	.word	0x09740909
 80055d4:	09700909 	.word	0x09700909
 80055d8:	0909      	.short	0x0909
 80055da:	6c          	.byte	0x6c
 80055db:	00          	.byte	0x00
 80055dc:	2302      	movs	r3, #2
 80055de:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80055e2:	6803      	ldr	r3, [r0, #0]
 80055e4:	2201      	movs	r2, #1
 80055e6:	6a18      	ldr	r0, [r3, #32]
 80055e8:	f001 011f 	and.w	r1, r1, #31
 80055ec:	fa02 f101 	lsl.w	r1, r2, r1
 80055f0:	ea20 0001 	bic.w	r0, r0, r1
 80055f4:	6218      	str	r0, [r3, #32]
 80055f6:	6a18      	ldr	r0, [r3, #32]
 80055f8:	4a3b      	ldr	r2, [pc, #236]	; (80056e8 <HAL_TIM_PWM_Start+0x148>)
 80055fa:	4301      	orrs	r1, r0
 80055fc:	4293      	cmp	r3, r2
 80055fe:	6219      	str	r1, [r3, #32]
 8005600:	d05b      	beq.n	80056ba <HAL_TIM_PWM_Start+0x11a>
 8005602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005606:	4293      	cmp	r3, r2
 8005608:	d065      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x136>
 800560a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800560e:	4293      	cmp	r3, r2
 8005610:	d061      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x136>
 8005612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005616:	4293      	cmp	r3, r2
 8005618:	d05d      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x136>
 800561a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800561e:	4293      	cmp	r3, r2
 8005620:	d059      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x136>
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d04c      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x122>
 8005628:	4a30      	ldr	r2, [pc, #192]	; (80056ec <HAL_TIM_PWM_Start+0x14c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d049      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x122>
 800562e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005632:	4293      	cmp	r3, r2
 8005634:	d045      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x122>
 8005636:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800563a:	4293      	cmp	r3, r2
 800563c:	d041      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x122>
 800563e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005642:	4293      	cmp	r3, r2
 8005644:	d03d      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x122>
 8005646:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800564a:	4293      	cmp	r3, r2
 800564c:	d039      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x122>
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	2000      	movs	r0, #0
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800565e:	2b01      	cmp	r3, #1
 8005660:	d03e      	beq.n	80056e0 <HAL_TIM_PWM_Start+0x140>
 8005662:	2001      	movs	r0, #1
 8005664:	4770      	bx	lr
 8005666:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800566a:	2b01      	cmp	r3, #1
 800566c:	d1f9      	bne.n	8005662 <HAL_TIM_PWM_Start+0xc2>
 800566e:	2302      	movs	r3, #2
 8005670:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005674:	e7b5      	b.n	80055e2 <HAL_TIM_PWM_Start+0x42>
 8005676:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800567a:	2b01      	cmp	r3, #1
 800567c:	d0a1      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x22>
 800567e:	e7f0      	b.n	8005662 <HAL_TIM_PWM_Start+0xc2>
 8005680:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005684:	3b01      	subs	r3, #1
 8005686:	bf18      	it	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d099      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x22>
 800568e:	2001      	movs	r0, #1
 8005690:	4770      	bx	lr
 8005692:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8005696:	3b01      	subs	r3, #1
 8005698:	bf18      	it	ne
 800569a:	2301      	movne	r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d090      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x22>
 80056a0:	e7f5      	b.n	800568e <HAL_TIM_PWM_Start+0xee>
 80056a2:	2302      	movs	r3, #2
 80056a4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80056a8:	e79b      	b.n	80055e2 <HAL_TIM_PWM_Start+0x42>
 80056aa:	2302      	movs	r3, #2
 80056ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80056b0:	e797      	b.n	80055e2 <HAL_TIM_PWM_Start+0x42>
 80056b2:	2302      	movs	r3, #2
 80056b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80056b8:	e793      	b.n	80055e2 <HAL_TIM_PWM_Start+0x42>
 80056ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
 80056c2:	6899      	ldr	r1, [r3, #8]
 80056c4:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <HAL_TIM_PWM_Start+0x150>)
 80056c6:	400a      	ands	r2, r1
 80056c8:	2a06      	cmp	r2, #6
 80056ca:	d002      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x132>
 80056cc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80056d0:	d1bd      	bne.n	800564e <HAL_TIM_PWM_Start+0xae>
 80056d2:	2000      	movs	r0, #0
 80056d4:	4770      	bx	lr
 80056d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44
 80056de:	e7a0      	b.n	8005622 <HAL_TIM_PWM_Start+0x82>
 80056e0:	2302      	movs	r3, #2
 80056e2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80056e6:	e77c      	b.n	80055e2 <HAL_TIM_PWM_Start+0x42>
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40000400 	.word	0x40000400
 80056f0:	00010007 	.word	0x00010007

080056f4 <HAL_TIM_IC_MspInit>:
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop

080056f8 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80056f8:	2800      	cmp	r0, #0
 80056fa:	f000 8085 	beq.w	8005808 <HAL_TIM_IC_Init+0x110>
{
 80056fe:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005700:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005704:	4604      	mov	r4, r0
 8005706:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800570a:	2b00      	cmp	r3, #0
 800570c:	d071      	beq.n	80057f2 <HAL_TIM_IC_Init+0xfa>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005710:	493e      	ldr	r1, [pc, #248]	; (800580c <HAL_TIM_IC_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005712:	2302      	movs	r3, #2
 8005714:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800571a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	d055      	beq.n	80057ca <HAL_TIM_IC_Init+0xd2>
 800571e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005722:	d025      	beq.n	8005770 <HAL_TIM_IC_Init+0x78>
 8005724:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005728:	428a      	cmp	r2, r1
 800572a:	d021      	beq.n	8005770 <HAL_TIM_IC_Init+0x78>
 800572c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005730:	428a      	cmp	r2, r1
 8005732:	d01d      	beq.n	8005770 <HAL_TIM_IC_Init+0x78>
 8005734:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005738:	428a      	cmp	r2, r1
 800573a:	d019      	beq.n	8005770 <HAL_TIM_IC_Init+0x78>
 800573c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8005740:	428a      	cmp	r2, r1
 8005742:	d042      	beq.n	80057ca <HAL_TIM_IC_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005744:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005748:	428a      	cmp	r2, r1
 800574a:	d057      	beq.n	80057fc <HAL_TIM_IC_Init+0x104>
 800574c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005750:	428a      	cmp	r2, r1
 8005752:	d053      	beq.n	80057fc <HAL_TIM_IC_Init+0x104>
 8005754:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005758:	428a      	cmp	r2, r1
 800575a:	d04f      	beq.n	80057fc <HAL_TIM_IC_Init+0x104>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800575c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800575e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005764:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005766:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005768:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800576a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800576c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800576e:	e010      	b.n	8005792 <HAL_TIM_IC_Init+0x9a>
    tmpcr1 |= Structure->CounterMode;
 8005770:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005772:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005778:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800577a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005780:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005786:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005788:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800578a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800578c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800578e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005790:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005792:	2301      	movs	r3, #1
 8005794:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005796:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800579e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80057a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80057aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80057b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80057be:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80057c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80057c6:	2000      	movs	r0, #0
}
 80057c8:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80057ca:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057cc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80057d2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057da:	69a1      	ldr	r1, [r4, #24]
 80057dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80057e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057e4:	68e3      	ldr	r3, [r4, #12]
 80057e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	6963      	ldr	r3, [r4, #20]
 80057ee:	6313      	str	r3, [r2, #48]	; 0x30
 80057f0:	e7cf      	b.n	8005792 <HAL_TIM_IC_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 80057f2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80057f6:	f7ff ff7d 	bl	80056f4 <HAL_TIM_IC_MspInit>
 80057fa:	e788      	b.n	800570e <HAL_TIM_IC_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057fc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057fe:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005804:	4303      	orrs	r3, r0
 8005806:	e7e9      	b.n	80057dc <HAL_TIM_IC_Init+0xe4>
    return HAL_ERROR;
 8005808:	2001      	movs	r0, #1
}
 800580a:	4770      	bx	lr
 800580c:	40012c00 	.word	0x40012c00

08005810 <HAL_TIM_IC_Start>:
{
 8005810:	4602      	mov	r2, r0
 8005812:	2910      	cmp	r1, #16
 8005814:	d80a      	bhi.n	800582c <HAL_TIM_IC_Start+0x1c>
 8005816:	e8df f001 	tbb	[pc, r1]
 800581a:	0922      	.short	0x0922
 800581c:	09690909 	.word	0x09690909
 8005820:	09710909 	.word	0x09710909
 8005824:	09780909 	.word	0x09780909
 8005828:	0909      	.short	0x0909
 800582a:	7c          	.byte	0x7c
 800582b:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800582c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005830:	2908      	cmp	r1, #8
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005832:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005834:	d065      	beq.n	8005902 <HAL_TIM_IC_Start+0xf2>
 8005836:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
 800583a:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800583c:	2801      	cmp	r0, #1
 800583e:	d117      	bne.n	8005870 <HAL_TIM_IC_Start+0x60>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005840:	2b01      	cmp	r3, #1
 8005842:	d117      	bne.n	8005874 <HAL_TIM_IC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005844:	2910      	cmp	r1, #16
 8005846:	d816      	bhi.n	8005876 <HAL_TIM_IC_Start+0x66>
 8005848:	e8df f001 	tbb	[pc, r1]
 800584c:	15151567 	.word	0x15151567
 8005850:	15151576 	.word	0x15151576
 8005854:	15151580 	.word	0x15151580
 8005858:	1515156f 	.word	0x1515156f
 800585c:	7c          	.byte	0x7c
 800585d:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800585e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005862:	f890 c044 	ldrb.w	ip, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005866:	b2d8      	uxtb	r0, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005868:	2801      	cmp	r0, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800586a:	fa5f f38c 	uxtb.w	r3, ip
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800586e:	d0e7      	beq.n	8005840 <HAL_TIM_IC_Start+0x30>
    return HAL_ERROR;
 8005870:	2001      	movs	r0, #1
 8005872:	4770      	bx	lr
}
 8005874:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005876:	2302      	movs	r3, #2
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005878:	2908      	cmp	r1, #8
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800587a:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800587e:	d157      	bne.n	8005930 <HAL_TIM_IC_Start+0x120>
 8005880:	2302      	movs	r3, #2
 8005882:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005886:	6813      	ldr	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005888:	f001 001f 	and.w	r0, r1, #31
 800588c:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800588e:	6a19      	ldr	r1, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005890:	4082      	lsls	r2, r0
  TIMx->CCER &= ~tmp;
 8005892:	ea21 0102 	bic.w	r1, r1, r2
 8005896:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005898:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589a:	492e      	ldr	r1, [pc, #184]	; (8005954 <HAL_TIM_IC_Start+0x144>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800589c:	4302      	orrs	r2, r0
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058a0:	621a      	str	r2, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a2:	d015      	beq.n	80058d0 <HAL_TIM_IC_Start+0xc0>
 80058a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a8:	d012      	beq.n	80058d0 <HAL_TIM_IC_Start+0xc0>
 80058aa:	4a2b      	ldr	r2, [pc, #172]	; (8005958 <HAL_TIM_IC_Start+0x148>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00f      	beq.n	80058d0 <HAL_TIM_IC_Start+0xc0>
 80058b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <HAL_TIM_IC_Start+0xc0>
 80058b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <HAL_TIM_IC_Start+0xc0>
 80058c0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <HAL_TIM_IC_Start+0xc0>
 80058c8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d107      	bne.n	80058e0 <HAL_TIM_IC_Start+0xd0>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	4a22      	ldr	r2, [pc, #136]	; (800595c <HAL_TIM_IC_Start+0x14c>)
 80058d4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	2a06      	cmp	r2, #6
 80058d8:	d025      	beq.n	8005926 <HAL_TIM_IC_Start+0x116>
 80058da:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80058de:	d022      	beq.n	8005926 <HAL_TIM_IC_Start+0x116>
    __HAL_TIM_ENABLE(htim);
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80058e6:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058ec:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058f0:	f890 c045 	ldrb.w	ip, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058f4:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058f6:	fa5f f38c 	uxtb.w	r3, ip
 80058fa:	e79f      	b.n	800583c <HAL_TIM_IC_Start+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005900:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005902:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 8005906:	b2db      	uxtb	r3, r3
 8005908:	e798      	b.n	800583c <HAL_TIM_IC_Start+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800590a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800590e:	b2d8      	uxtb	r0, r3
 8005910:	e791      	b.n	8005836 <HAL_TIM_IC_Start+0x26>
 8005912:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8005916:	b2d8      	uxtb	r0, r3
 8005918:	e78d      	b.n	8005836 <HAL_TIM_IC_Start+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800591a:	2302      	movs	r3, #2
 800591c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005920:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
 8005924:	e7af      	b.n	8005886 <HAL_TIM_IC_Start+0x76>
  return HAL_OK;
 8005926:	2000      	movs	r0, #0
 8005928:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800592a:	2302      	movs	r3, #2
 800592c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005930:	2302      	movs	r3, #2
 8005932:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
 8005936:	e7a6      	b.n	8005886 <HAL_TIM_IC_Start+0x76>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005938:	2302      	movs	r3, #2
 800593a:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800593e:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
 8005942:	e7a0      	b.n	8005886 <HAL_TIM_IC_Start+0x76>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005944:	2302      	movs	r3, #2
 8005946:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 800594a:	e7f1      	b.n	8005930 <HAL_TIM_IC_Start+0x120>
 800594c:	2302      	movs	r3, #2
 800594e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 8005952:	e795      	b.n	8005880 <HAL_TIM_IC_Start+0x70>
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40000400 	.word	0x40000400
 800595c:	00010007 	.word	0x00010007

08005960 <HAL_TIM_IC_ConfigChannel>:
{
 8005960:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005962:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8005966:	2801      	cmp	r0, #1
 8005968:	f000 80d0 	beq.w	8005b0c <HAL_TIM_IC_ConfigChannel+0x1ac>
 800596c:	2001      	movs	r0, #1
{
 800596e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005970:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8005974:	b15a      	cbz	r2, 800598e <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 8005976:	2a04      	cmp	r2, #4
 8005978:	d050      	beq.n	8005a1c <HAL_TIM_IC_ConfigChannel+0xbc>
  else if (Channel == TIM_CHANNEL_3)
 800597a:	2a08      	cmp	r2, #8
 800597c:	f000 809e 	beq.w	8005abc <HAL_TIM_IC_ConfigChannel+0x15c>
  else if (Channel == TIM_CHANNEL_4)
 8005980:	2a0c      	cmp	r2, #12
 8005982:	d075      	beq.n	8005a70 <HAL_TIM_IC_ConfigChannel+0x110>
  __HAL_UNLOCK(htim);
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800598a:	bcf0      	pop	{r4, r5, r6, r7}
 800598c:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 800598e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005990:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8005b10 <HAL_TIM_IC_ConfigChannel+0x1b0>
  tmpccer = TIMx->CCER;
 8005994:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005996:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICFilter);
 8005998:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599a:	f027 0701 	bic.w	r7, r7, #1
                      sConfig->ICSelection,
 800599e:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059a2:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a4:	6217      	str	r7, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a6:	6997      	ldr	r7, [r2, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059a8:	d019      	beq.n	80059de <HAL_TIM_IC_ConfigChannel+0x7e>
 80059aa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80059ae:	d016      	beq.n	80059de <HAL_TIM_IC_ConfigChannel+0x7e>
 80059b0:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 80059b4:	4562      	cmp	r2, ip
 80059b6:	d012      	beq.n	80059de <HAL_TIM_IC_ConfigChannel+0x7e>
 80059b8:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80059bc:	4562      	cmp	r2, ip
 80059be:	d00e      	beq.n	80059de <HAL_TIM_IC_ConfigChannel+0x7e>
 80059c0:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80059c4:	4562      	cmp	r2, ip
 80059c6:	d00a      	beq.n	80059de <HAL_TIM_IC_ConfigChannel+0x7e>
 80059c8:	f50c 3c94 	add.w	ip, ip, #75776	; 0x12800
 80059cc:	4562      	cmp	r2, ip
 80059ce:	d006      	beq.n	80059de <HAL_TIM_IC_ConfigChannel+0x7e>
 80059d0:	f50c 6c40 	add.w	ip, ip, #3072	; 0xc00
 80059d4:	4562      	cmp	r2, ip
 80059d6:	d002      	beq.n	80059de <HAL_TIM_IC_ConfigChannel+0x7e>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059d8:	f047 0c01 	orr.w	ip, r7, #1
 80059dc:	e003      	b.n	80059e6 <HAL_TIM_IC_ConfigChannel+0x86>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80059de:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 80059e2:	ea45 0c07 	orr.w	ip, r5, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059e6:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e8:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059ec:	b2c0      	uxtb	r0, r0
 80059ee:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 80059f2:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f4:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059f8:	f004 000a 	and.w	r0, r4, #10
 80059fc:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 80059fe:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a00:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a02:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a04:	f020 000c 	bic.w	r0, r0, #12
 8005a08:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a0a:	6991      	ldr	r1, [r2, #24]
 8005a0c:	4321      	orrs	r1, r4
 8005a0e:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2000      	movs	r0, #0
}
 8005a18:	bcf0      	pop	{r4, r5, r6, r7}
 8005a1a:	4770      	bx	lr
                      sConfig->ICSelection,
 8005a1c:	e9d1 0600 	ldrd	r0, r6, [r1]
    TIM_TI2_SetConfig(htim->Instance,
 8005a20:	681a      	ldr	r2, [r3, #0]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a22:	0104      	lsls	r4, r0, #4
  tmpccer = TIMx->CCER;
 8005a24:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a26:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a28:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2c:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a30:	f004 04a0 	and.w	r4, r4, #160	; 0xa0
 8005a34:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 8005a36:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a38:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a3a:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8005a3c:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a3e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a42:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a46:	0300      	lsls	r0, r0, #12
 8005a48:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a4e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8005a50:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8005a52:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a54:	6991      	ldr	r1, [r2, #24]
 8005a56:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8005a5a:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a5c:	6991      	ldr	r1, [r2, #24]
 8005a5e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005a62:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2000      	movs	r0, #0
}
 8005a6c:	bcf0      	pop	{r4, r5, r6, r7}
 8005a6e:	4770      	bx	lr
                      sConfig->ICSelection,
 8005a70:	e9d1 0600 	ldrd	r0, r6, [r1]
    TIM_TI4_SetConfig(htim->Instance,
 8005a74:	681a      	ldr	r2, [r3, #0]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a76:	0304      	lsls	r4, r0, #12
  tmpccer = TIMx->CCER;
 8005a78:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a7a:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a7c:	f420 4020 	bic.w	r0, r0, #40960	; 0xa000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a80:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a84:	f404 4420 	and.w	r4, r4, #40960	; 0xa000
 8005a88:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 8005a8a:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8c:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a8e:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8005a90:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a92:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a96:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a98:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a9c:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a9e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005aa2:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8005aa4:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer ;
 8005aa6:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005aa8:	69d1      	ldr	r1, [r2, #28]
 8005aaa:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8005aae:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ab0:	69d1      	ldr	r1, [r2, #28]
 8005ab2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2000      	movs	r0, #0
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ab8:	61d1      	str	r1, [r2, #28]
 8005aba:	e763      	b.n	8005984 <HAL_TIM_IC_ConfigChannel+0x24>
                      sConfig->ICSelection,
 8005abc:	e9d1 0500 	ldrd	r0, r5, [r1]
    TIM_TI3_SetConfig(htim->Instance,
 8005ac0:	681a      	ldr	r2, [r3, #0]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ac2:	0204      	lsls	r4, r0, #8
  tmpccer = TIMx->CCER;
 8005ac4:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ac6:	6a16      	ldr	r6, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ac8:	f420 6020 	bic.w	r0, r0, #2560	; 0xa00
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005acc:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ad0:	f404 6420 	and.w	r4, r4, #2560	; 0xa00
 8005ad4:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 8005ad6:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ad8:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ada:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8005adc:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ade:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 8005ae2:	4329      	orrs	r1, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ae4:	0100      	lsls	r0, r0, #4
 8005ae6:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ae8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005aec:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8005aee:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 8005af0:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005af2:	69d1      	ldr	r1, [r2, #28]
 8005af4:	f021 010c 	bic.w	r1, r1, #12
 8005af8:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005afa:	69d1      	ldr	r1, [r2, #28]
 8005afc:	4331      	orrs	r1, r6
 8005afe:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005b06:	2000      	movs	r0, #0
}
 8005b08:	bcf0      	pop	{r4, r5, r6, r7}
 8005b0a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005b0c:	2002      	movs	r0, #2
}
 8005b0e:	4770      	bx	lr
 8005b10:	40012c00 	.word	0x40012c00

08005b14 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005b14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d073      	beq.n	8005c04 <HAL_TIM_ConfigClockSource+0xf0>
 8005b1c:	4602      	mov	r2, r0
{
 8005b1e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005b22:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005b28:	2001      	movs	r0, #1
 8005b2a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005b2e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b30:	4b4f      	ldr	r3, [pc, #316]	; (8005c70 <HAL_TIM_ConfigClockSource+0x15c>)
 8005b32:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005b34:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005b36:	680b      	ldr	r3, [r1, #0]
 8005b38:	2b60      	cmp	r3, #96	; 0x60
 8005b3a:	d065      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0xf4>
 8005b3c:	d824      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x74>
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d07c      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x128>
 8005b42:	d94b      	bls.n	8005bdc <HAL_TIM_ConfigClockSource+0xc8>
 8005b44:	2b50      	cmp	r3, #80	; 0x50
 8005b46:	d117      	bne.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8005b48:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005b4c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005b52:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b54:	6a23      	ldr	r3, [r4, #32]
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b62:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005b66:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005b68:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005b6a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b70:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8005b74:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005b76:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005b7a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b80:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005b84:	bc30      	pop	{r4, r5}
 8005b86:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8c:	d038      	beq.n	8005c00 <HAL_TIM_ConfigClockSource+0xec>
 8005b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b92:	d110      	bne.n	8005bb6 <HAL_TIM_ConfigClockSource+0xa2>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b94:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005b98:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b9a:	432b      	orrs	r3, r5
 8005b9c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b9e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005ba6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005ba8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005baa:	68a3      	ldr	r3, [r4, #8]
 8005bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb2:	60a3      	str	r3, [r4, #8]
      break;
 8005bb4:	e7e0      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8005bb6:	2b70      	cmp	r3, #112	; 0x70
 8005bb8:	d1de      	bne.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bba:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005bbe:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc0:	432b      	orrs	r3, r5
 8005bc2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005bcc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005bce:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005bd0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8005bd6:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8005bd8:	60a3      	str	r3, [r4, #8]
      break;
 8005bda:	e7cd      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d002      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0xd2>
 8005be0:	d90a      	bls.n	8005bf8 <HAL_TIM_ConfigClockSource+0xe4>
 8005be2:	2b30      	cmp	r3, #48	; 0x30
 8005be4:	d1c8      	bne.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8005be6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bec:	430b      	orrs	r3, r1
 8005bee:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8005bf2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005bf4:	60a3      	str	r3, [r4, #8]
}
 8005bf6:	e7bf      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8005bf8:	f033 0110 	bics.w	r1, r3, #16
 8005bfc:	d1bc      	bne.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
 8005bfe:	e7f2      	b.n	8005be6 <HAL_TIM_ConfigClockSource+0xd2>
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2000      	movs	r0, #0
 8005c02:	e7b9      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8005c04:	2002      	movs	r0, #2
}
 8005c06:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8005c08:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8005c0a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0e:	6a21      	ldr	r1, [r4, #32]
 8005c10:	f021 0110 	bic.w	r1, r1, #16
 8005c14:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c16:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c1c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c20:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c24:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005c28:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005c2a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005c2c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c32:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8005c36:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005c38:	60a3      	str	r3, [r4, #8]
}
 8005c3a:	e79d      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8005c3c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005c3e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c40:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c42:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005c46:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c48:	6a23      	ldr	r3, [r4, #32]
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c50:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c56:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005c5a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005c5c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005c5e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c64:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8005c68:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005c6a:	60a3      	str	r3, [r4, #8]
}
 8005c6c:	e784      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x64>
 8005c6e:	bf00      	nop
 8005c70:	fffe0088 	.word	0xfffe0088

08005c74 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8005c74:	290c      	cmp	r1, #12
 8005c76:	d808      	bhi.n	8005c8a <HAL_TIM_ReadCapturedValue+0x16>
 8005c78:	e8df f001 	tbb	[pc, r1]
 8005c7c:	07070712 	.word	0x07070712
 8005c80:	0707070f 	.word	0x0707070f
 8005c84:	0707070c 	.word	0x0707070c
 8005c88:	09          	.byte	0x09
 8005c89:	00          	.byte	0x00
 8005c8a:	2000      	movs	r0, #0
}
 8005c8c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8005c8e:	6803      	ldr	r3, [r0, #0]
 8005c90:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8005c92:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8005c94:	6803      	ldr	r3, [r0, #0]
 8005c96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8005c98:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8005c9a:	6803      	ldr	r3, [r0, #0]
 8005c9c:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8005c9e:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 8005ca0:	6803      	ldr	r3, [r0, #0]
 8005ca2:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop

08005ca8 <HAL_TIM_PeriodElapsedCallback>:
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop

08005cac <HAL_TIM_OC_DelayElapsedCallback>:
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop

08005cb0 <HAL_TIM_IC_CaptureCallback>:
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop

08005cb8 <HAL_TIM_TriggerCallback>:
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop

08005cbc <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8005cbc:	6803      	ldr	r3, [r0, #0]
{
 8005cbe:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005cc0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cc2:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cc4:	07a1      	lsls	r1, r4, #30
{
 8005cc6:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cc8:	d501      	bpl.n	8005cce <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cca:	07b2      	lsls	r2, r6, #30
 8005ccc:	d454      	bmi.n	8005d78 <HAL_TIM_IRQHandler+0xbc>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cce:	0762      	lsls	r2, r4, #29
 8005cd0:	d501      	bpl.n	8005cd6 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cd2:	0773      	lsls	r3, r6, #29
 8005cd4:	d43d      	bmi.n	8005d52 <HAL_TIM_IRQHandler+0x96>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cd6:	0720      	lsls	r0, r4, #28
 8005cd8:	d501      	bpl.n	8005cde <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cda:	0731      	lsls	r1, r6, #28
 8005cdc:	d427      	bmi.n	8005d2e <HAL_TIM_IRQHandler+0x72>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cde:	06e3      	lsls	r3, r4, #27
 8005ce0:	d501      	bpl.n	8005ce6 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ce2:	06f0      	lsls	r0, r6, #27
 8005ce4:	d410      	bmi.n	8005d08 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ce6:	07e1      	lsls	r1, r4, #31
 8005ce8:	d501      	bpl.n	8005cee <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cea:	07f2      	lsls	r2, r6, #31
 8005cec:	d462      	bmi.n	8005db4 <HAL_TIM_IRQHandler+0xf8>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cee:	0623      	lsls	r3, r4, #24
 8005cf0:	d552      	bpl.n	8005d98 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cf2:	0630      	lsls	r0, r6, #24
 8005cf4:	d466      	bmi.n	8005dc4 <HAL_TIM_IRQHandler+0x108>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cf6:	0660      	lsls	r0, r4, #25
 8005cf8:	d501      	bpl.n	8005cfe <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cfa:	0671      	lsls	r1, r6, #25
 8005cfc:	d473      	bmi.n	8005de6 <HAL_TIM_IRQHandler+0x12a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cfe:	06a2      	lsls	r2, r4, #26
 8005d00:	d501      	bpl.n	8005d06 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d02:	06b3      	lsls	r3, r6, #26
 8005d04:	d44d      	bmi.n	8005da2 <HAL_TIM_IRQHandler+0xe6>
}
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	f06f 0210 	mvn.w	r2, #16
 8005d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d10:	2208      	movs	r2, #8
 8005d12:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1c:	d174      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	f7ff ffc5 	bl	8005cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d22:	4628      	mov	r0, r5
 8005d24:	f7ff ffc6 	bl	8005cb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	772b      	strb	r3, [r5, #28]
 8005d2c:	e7db      	b.n	8005ce6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d2e:	682b      	ldr	r3, [r5, #0]
 8005d30:	f06f 0208 	mvn.w	r2, #8
 8005d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d36:	2204      	movs	r2, #4
 8005d38:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	079a      	lsls	r2, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d40:	d15f      	bne.n	8005e02 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	f7ff ffb3 	bl	8005cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d46:	4628      	mov	r0, r5
 8005d48:	f7ff ffb4 	bl	8005cb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	772b      	strb	r3, [r5, #28]
 8005d50:	e7c5      	b.n	8005cde <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d52:	682b      	ldr	r3, [r5, #0]
 8005d54:	f06f 0204 	mvn.w	r2, #4
 8005d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005d64:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d66:	d149      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d68:	f7ff ffa0 	bl	8005cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f7ff ffa1 	bl	8005cb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	2300      	movs	r3, #0
 8005d74:	772b      	strb	r3, [r5, #28]
 8005d76:	e7ae      	b.n	8005cd6 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d78:	f06f 0202 	mvn.w	r2, #2
 8005d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d7e:	2201      	movs	r2, #1
 8005d80:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	0799      	lsls	r1, r3, #30
 8005d86:	d136      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d88:	f7ff ff90 	bl	8005cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f7ff ff91 	bl	8005cb4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	2300      	movs	r3, #0
 8005d94:	772b      	strb	r3, [r5, #28]
 8005d96:	e79a      	b.n	8005cce <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d98:	05e2      	lsls	r2, r4, #23
 8005d9a:	d5ac      	bpl.n	8005cf6 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d9c:	0633      	lsls	r3, r6, #24
 8005d9e:	d41a      	bmi.n	8005dd6 <HAL_TIM_IRQHandler+0x11a>
 8005da0:	e7a9      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005da8:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005daa:	611a      	str	r2, [r3, #16]
}
 8005dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005db0:	f000 ba38 	b.w	8006224 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	f06f 0201 	mvn.w	r2, #1
 8005dba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f7ff ff73 	bl	8005ca8 <HAL_TIM_PeriodElapsedCallback>
 8005dc2:	e794      	b.n	8005cee <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 fa2b 	bl	8006228 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005dd2:	05e1      	lsls	r1, r4, #23
 8005dd4:	d58f      	bpl.n	8005cf6 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dd6:	682b      	ldr	r3, [r5, #0]
 8005dd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ddc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005dde:	4628      	mov	r0, r5
 8005de0:	f000 fa24 	bl	800622c <HAL_TIMEx_Break2Callback>
 8005de4:	e787      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005de6:	682b      	ldr	r3, [r5, #0]
 8005de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005dee:	4628      	mov	r0, r5
 8005df0:	f7ff ff62 	bl	8005cb8 <HAL_TIM_TriggerCallback>
 8005df4:	e783      	b.n	8005cfe <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	f7ff ff5b 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005dfa:	e7ca      	b.n	8005d92 <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfc:	f7ff ff58 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005e00:	e7b7      	b.n	8005d72 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	f7ff ff55 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005e06:	e7a1      	b.n	8005d4c <HAL_TIM_IRQHandler+0x90>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e08:	f7ff ff52 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005e0c:	e78c      	b.n	8005d28 <HAL_TIM_IRQHandler+0x6c>
 8005e0e:	bf00      	nop

08005e10 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8005e10:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e12:	6a02      	ldr	r2, [r0, #32]
 8005e14:	f022 0210 	bic.w	r2, r2, #16
 8005e18:	6202      	str	r2, [r0, #32]
{
 8005e1a:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005e1c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005e1e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e22:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005e26:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e2e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005e30:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e38:	4d14      	ldr	r5, [pc, #80]	; (8005e8c <TIM_OC2_SetConfig+0x7c>)
 8005e3a:	42a8      	cmp	r0, r5
 8005e3c:	d010      	beq.n	8005e60 <TIM_OC2_SetConfig+0x50>
 8005e3e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005e42:	42a8      	cmp	r0, r5
 8005e44:	d00c      	beq.n	8005e60 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e46:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005e4a:	42a8      	cmp	r0, r5
 8005e4c:	d00f      	beq.n	8005e6e <TIM_OC2_SetConfig+0x5e>
 8005e4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e52:	42a8      	cmp	r0, r5
 8005e54:	d00b      	beq.n	8005e6e <TIM_OC2_SetConfig+0x5e>
 8005e56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005e5a:	42a8      	cmp	r0, r5
 8005e5c:	d10f      	bne.n	8005e7e <TIM_OC2_SetConfig+0x6e>
 8005e5e:	e006      	b.n	8005e6e <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e60:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e66:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e6e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e72:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e76:	ea46 0c05 	orr.w	ip, r6, r5
 8005e7a:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005e7e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e80:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e82:	6182      	str	r2, [r0, #24]
}
 8005e84:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005e86:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005e88:	6203      	str	r3, [r0, #32]
}
 8005e8a:	4770      	bx	lr
 8005e8c:	40012c00 	.word	0x40012c00

08005e90 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005e90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f000 812f 	beq.w	80060f8 <HAL_TIM_PWM_ConfigChannel+0x268>
 8005e9a:	2301      	movs	r3, #1
{
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005ea2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005ea6:	2a14      	cmp	r2, #20
 8005ea8:	d816      	bhi.n	8005ed8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005eaa:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005eae:	005f      	.short	0x005f
 8005eb0:	00150015 	.word	0x00150015
 8005eb4:	00740015 	.word	0x00740015
 8005eb8:	00150015 	.word	0x00150015
 8005ebc:	008a0015 	.word	0x008a0015
 8005ec0:	00150015 	.word	0x00150015
 8005ec4:	009f0015 	.word	0x009f0015
 8005ec8:	00150015 	.word	0x00150015
 8005ecc:	00e30015 	.word	0x00e30015
 8005ed0:	00150015 	.word	0x00150015
 8005ed4:	001b0015 	.word	0x001b0015
  __HAL_UNLOCK(htim);
 8005ed8:	2200      	movs	r2, #0
  switch (Channel)
 8005eda:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005edc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ee4:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee6:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8005ee8:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eea:	6a11      	ldr	r1, [r2, #32]
 8005eec:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8005ef0:	6211      	str	r1, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005ef2:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8005ef4:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ef6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005efa:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005efe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f02:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f08:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0c:	4e7c      	ldr	r6, [pc, #496]	; (8006100 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005f0e:	42b2      	cmp	r2, r6
 8005f10:	d00f      	beq.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8005f12:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005f16:	42b2      	cmp	r2, r6
 8005f18:	d00b      	beq.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8005f1a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005f1e:	42b2      	cmp	r2, r6
 8005f20:	d007      	beq.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8005f22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005f26:	42b2      	cmp	r2, r6
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8005f2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005f2e:	42b2      	cmp	r2, r6
 8005f30:	d104      	bne.n	8005f3c <HAL_TIM_PWM_ConfigChannel+0xac>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f32:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f34:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f38:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005f3c:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005f3e:	6551      	str	r1, [r2, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005f40:	6869      	ldr	r1, [r5, #4]
 8005f42:	65d1      	str	r1, [r2, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8005f44:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f46:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f48:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f4e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f50:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8005f52:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005f56:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f58:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8005f5a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8005f5e:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8005f60:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005f64:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	f7ff f981 	bl	8005274 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f72:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f74:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f76:	f043 0308 	orr.w	r3, r3, #8
 8005f7a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f7c:	6982      	ldr	r2, [r0, #24]
 8005f7e:	f022 0204 	bic.w	r2, r2, #4
 8005f82:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f84:	6982      	ldr	r2, [r0, #24]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8005f8a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005f8e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f96:	6800      	ldr	r0, [r0, #0]
 8005f98:	f7ff ff3a 	bl	8005e10 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f9c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f9e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fa4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fa6:	6982      	ldr	r2, [r0, #24]
 8005fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fac:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fae:	6982      	ldr	r2, [r0, #24]
 8005fb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005fb4:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8005fb6:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005fba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fc2:	6800      	ldr	r0, [r0, #0]
 8005fc4:	f7ff f992 	bl	80052ec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fc8:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fca:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fcc:	f043 0308 	orr.w	r3, r3, #8
 8005fd0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fd2:	69c2      	ldr	r2, [r0, #28]
 8005fd4:	f022 0204 	bic.w	r2, r2, #4
 8005fd8:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fda:	69c2      	ldr	r2, [r0, #28]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8005fe0:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005fe4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fec:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fee:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8005ff0:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ff2:	6a11      	ldr	r1, [r2, #32]
 8005ff4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8005ff8:	6211      	str	r1, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005ffa:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005ffc:	69d1      	ldr	r1, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ffe:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006002:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006006:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800600a:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800600c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006010:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006014:	4e3a      	ldr	r6, [pc, #232]	; (8006100 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006016:	42b2      	cmp	r2, r6
 8006018:	d00f      	beq.n	800603a <HAL_TIM_PWM_ConfigChannel+0x1aa>
 800601a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800601e:	42b2      	cmp	r2, r6
 8006020:	d00b      	beq.n	800603a <HAL_TIM_PWM_ConfigChannel+0x1aa>
 8006022:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006026:	42b2      	cmp	r2, r6
 8006028:	d007      	beq.n	800603a <HAL_TIM_PWM_ConfigChannel+0x1aa>
 800602a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800602e:	42b2      	cmp	r2, r6
 8006030:	d003      	beq.n	800603a <HAL_TIM_PWM_ConfigChannel+0x1aa>
 8006032:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006036:	42b2      	cmp	r2, r6
 8006038:	d104      	bne.n	8006044 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800603a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800603c:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006040:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8006044:	6050      	str	r0, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006046:	61d1      	str	r1, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006048:	6869      	ldr	r1, [r5, #4]
 800604a:	6411      	str	r1, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800604c:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800604e:	69d3      	ldr	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006050:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006052:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006056:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006058:	69d1      	ldr	r1, [r2, #28]
 800605a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800605e:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006060:	69d1      	ldr	r1, [r2, #28]
 8006062:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006066:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8006068:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800606a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800606c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006074:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006076:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8006078:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800607a:	6a11      	ldr	r1, [r2, #32]
 800607c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006080:	6211      	str	r1, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006082:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8006084:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006086:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800608a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800608e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006090:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006092:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006096:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609a:	4e19      	ldr	r6, [pc, #100]	; (8006100 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800609c:	42b2      	cmp	r2, r6
 800609e:	d00f      	beq.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x230>
 80060a0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80060a4:	42b2      	cmp	r2, r6
 80060a6:	d00b      	beq.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x230>
 80060a8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80060ac:	42b2      	cmp	r2, r6
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x230>
 80060b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060b4:	42b2      	cmp	r2, r6
 80060b6:	d003      	beq.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x230>
 80060b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060bc:	42b2      	cmp	r2, r6
 80060be:	d104      	bne.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x23a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060c0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060c2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060c6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80060ca:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 80060cc:	6551      	str	r1, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80060ce:	6869      	ldr	r1, [r5, #4]
 80060d0:	6591      	str	r1, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 80060d2:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060d4:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060d6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060d8:	f043 0308 	orr.w	r3, r3, #8
 80060dc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060de:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80060e0:	f021 0104 	bic.w	r1, r1, #4
 80060e4:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060e6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80060e8:	4301      	orrs	r1, r0
 80060ea:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80060ec:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80060ee:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80060f0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80060f8:	2302      	movs	r3, #2
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40012c00 	.word	0x40012c00

08006104 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006104:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d03e      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 800610c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800610e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006110:	4d1f      	ldr	r5, [pc, #124]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006112:	2302      	movs	r3, #2
 8006114:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006118:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800611a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800611c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800611e:	d02a      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006120:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006124:	42aa      	cmp	r2, r5
 8006126:	d026      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006128:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800612e:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006130:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006134:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006136:	d010      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800613a:	429a      	cmp	r2, r3
 800613c:	d00d      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800613e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006142:	429a      	cmp	r2, r3
 8006144:	d009      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800614a:	429a      	cmp	r2, r3
 800614c:	d005      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800614e:	42aa      	cmp	r2, r5
 8006150:	d003      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006152:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8006156:	429a      	cmp	r2, r3
 8006158:	d104      	bne.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800615c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006160:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006162:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006164:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006166:	2201      	movs	r2, #1
 8006168:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800616c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006170:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006172:	4618      	mov	r0, r3
}
 8006174:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006176:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006178:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800617c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800617e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006184:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006186:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006188:	e7e7      	b.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x56>
  __HAL_LOCK(htim);
 800618a:	2002      	movs	r0, #2
}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40000400 	.word	0x40000400

08006198 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006198:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d03d      	beq.n	800621c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 80061a0:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061a2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80061a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061aa:	4602      	mov	r2, r0
 80061ac:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061ae:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061b0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061bc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061be:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061c4:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061c6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061cc:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ce:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061d4:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061d8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061dc:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061e2:	4c0f      	ldr	r4, [pc, #60]	; (8006220 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80061e4:	42a0      	cmp	r0, r4
 80061e6:	d00b      	beq.n	8006200 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80061e8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d007      	beq.n	8006200 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80061f0:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80061f2:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80061f4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80061f8:	4608      	mov	r0, r1
}
 80061fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061fe:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006200:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006206:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800620a:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800620c:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800620e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006212:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006214:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006218:	430b      	orrs	r3, r1
 800621a:	e7e9      	b.n	80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800621c:	2002      	movs	r0, #2
}
 800621e:	4770      	bx	lr
 8006220:	40012c00 	.word	0x40012c00

08006224 <HAL_TIMEx_CommutCallback>:
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop

08006228 <HAL_TIMEx_BreakCallback>:
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <HAL_TIMEx_Break2Callback>:
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006234:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006236:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8006238:	2820      	cmp	r0, #32
 800623a:	f040 8088 	bne.w	800634e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800623e:	4688      	mov	r8, r1
 8006240:	b109      	cbz	r1, 8006246 <HAL_UART_Transmit+0x16>
 8006242:	4617      	mov	r7, r2
 8006244:	b912      	cbnz	r2, 800624c <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 8006246:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624c:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006252:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006258:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 800625a:	f7fc fdf3 	bl	8002e44 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800625e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8006260:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006268:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    tickstart = HAL_GetTick();
 800626c:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626e:	d071      	beq.n	8006354 <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 8006270:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006274:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006276:	b29b      	uxth	r3, r3
 8006278:	b1ab      	cbz	r3, 80062a6 <HAL_UART_Transmit+0x76>
 800627a:	1c6a      	adds	r2, r5, #1
 800627c:	d11c      	bne.n	80062b8 <HAL_UART_Transmit+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627e:	69c2      	ldr	r2, [r0, #28]
 8006280:	0613      	lsls	r3, r2, #24
 8006282:	d5fc      	bpl.n	800627e <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8006284:	f1b8 0f00 	cmp.w	r8, #0
 8006288:	d05c      	beq.n	8006344 <HAL_UART_Transmit+0x114>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800628a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800628e:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8006290:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006294:	3b01      	subs	r3, #1
 8006296:	b29b      	uxth	r3, r3
 8006298:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800629c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e9      	bne.n	800627a <HAL_UART_Transmit+0x4a>
 80062a6:	1c69      	adds	r1, r5, #1
 80062a8:	d15a      	bne.n	8006360 <HAL_UART_Transmit+0x130>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062aa:	69c3      	ldr	r3, [r0, #28]
 80062ac:	065a      	lsls	r2, r3, #25
 80062ae:	d5fc      	bpl.n	80062aa <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 80062b0:	2320      	movs	r3, #32
 80062b2:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80062b4:	2000      	movs	r0, #0
 80062b6:	e7c7      	b.n	8006248 <HAL_UART_Transmit+0x18>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b8:	69c3      	ldr	r3, [r0, #28]
 80062ba:	061f      	lsls	r7, r3, #24
 80062bc:	d4e2      	bmi.n	8006284 <HAL_UART_Transmit+0x54>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fc fdc1 	bl	8002e44 <HAL_GetTick>
 80062c2:	1b80      	subs	r0, r0, r6
 80062c4:	4285      	cmp	r5, r0
 80062c6:	d338      	bcc.n	800633a <HAL_UART_Transmit+0x10a>
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	d036      	beq.n	800633a <HAL_UART_Transmit+0x10a>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	0752      	lsls	r2, r2, #29
 80062d2:	4618      	mov	r0, r3
 80062d4:	d5d1      	bpl.n	800627a <HAL_UART_Transmit+0x4a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	0717      	lsls	r7, r2, #28
 80062da:	f100 8089 	bmi.w	80063f0 <HAL_UART_Transmit+0x1c0>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	0511      	lsls	r1, r2, #20
 80062e2:	d5ca      	bpl.n	800627a <HAL_UART_Transmit+0x4a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062e8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	e853 2f00 	ldrex	r2, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	e843 2100 	strex	r1, r2, [r3]
 80062f6:	b139      	cbz	r1, 8006308 <HAL_UART_Transmit+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	e853 2f00 	ldrex	r2, [r3]
 80062fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	e843 2100 	strex	r1, r2, [r3]
 8006304:	2900      	cmp	r1, #0
 8006306:	d1f7      	bne.n	80062f8 <HAL_UART_Transmit+0xc8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	f103 0208 	add.w	r2, r3, #8
 800630c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006310:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	f103 0008 	add.w	r0, r3, #8
 8006318:	e840 2100 	strex	r1, r2, [r0]
 800631c:	2900      	cmp	r1, #0
 800631e:	d1f3      	bne.n	8006308 <HAL_UART_Transmit+0xd8>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006322:	2a01      	cmp	r2, #1
 8006324:	d05b      	beq.n	80063de <HAL_UART_Transmit+0x1ae>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006328:	2220      	movs	r2, #32
 800632a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800632e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006330:	6623      	str	r3, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8006332:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006336:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800633a:	2320      	movs	r3, #32
 800633c:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800633e:	2003      	movs	r0, #3
}
 8006340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006344:	f839 3b02 	ldrh.w	r3, [r9], #2
 8006348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634c:	e79f      	b.n	800628e <HAL_UART_Transmit+0x5e>
    return HAL_BUSY;
 800634e:	2002      	movs	r0, #2
}
 8006350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d18a      	bne.n	8006270 <HAL_UART_Transmit+0x40>
 800635a:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800635c:	4698      	mov	r8, r3
 800635e:	e787      	b.n	8006270 <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006360:	69c3      	ldr	r3, [r0, #28]
 8006362:	065b      	lsls	r3, r3, #25
 8006364:	d4a4      	bmi.n	80062b0 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7fc fd6d 	bl	8002e44 <HAL_GetTick>
 800636a:	1b80      	subs	r0, r0, r6
 800636c:	4285      	cmp	r5, r0
 800636e:	d3e4      	bcc.n	800633a <HAL_UART_Transmit+0x10a>
 8006370:	2d00      	cmp	r5, #0
 8006372:	d0e2      	beq.n	800633a <HAL_UART_Transmit+0x10a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	0751      	lsls	r1, r2, #29
 800637a:	4618      	mov	r0, r3
 800637c:	d593      	bpl.n	80062a6 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	0712      	lsls	r2, r2, #28
 8006382:	d463      	bmi.n	800644c <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	0517      	lsls	r7, r2, #20
 8006388:	d58d      	bpl.n	80062a6 <HAL_UART_Transmit+0x76>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800638a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800638e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006394:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	e843 2100 	strex	r1, r2, [r3]
 800639c:	b139      	cbz	r1, 80063ae <HAL_UART_Transmit+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	e853 2f00 	ldrex	r2, [r3]
 80063a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	e843 2100 	strex	r1, r2, [r3]
 80063aa:	2900      	cmp	r1, #0
 80063ac:	d1f7      	bne.n	800639e <HAL_UART_Transmit+0x16e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	f103 0208 	add.w	r2, r3, #8
 80063b2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	f103 0008 	add.w	r0, r3, #8
 80063be:	e840 2100 	strex	r1, r2, [r0]
 80063c2:	2900      	cmp	r1, #0
 80063c4:	d1f3      	bne.n	80063ae <HAL_UART_Transmit+0x17e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80063c8:	2a01      	cmp	r2, #1
 80063ca:	d1ac      	bne.n	8006326 <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	e843 2100 	strex	r1, r2, [r3]
 80063d8:	2900      	cmp	r1, #0
 80063da:	d1f7      	bne.n	80063cc <HAL_UART_Transmit+0x19c>
 80063dc:	e7a3      	b.n	8006326 <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	e853 2f00 	ldrex	r2, [r3]
 80063e2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	e843 2100 	strex	r1, r2, [r3]
 80063ea:	2900      	cmp	r1, #0
 80063ec:	d1f7      	bne.n	80063de <HAL_UART_Transmit+0x1ae>
 80063ee:	e79a      	b.n	8006326 <HAL_UART_Transmit+0xf6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063f0:	2208      	movs	r2, #8
 80063f2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	e843 2100 	strex	r1, r2, [r3]
 8006400:	2900      	cmp	r1, #0
 8006402:	d1f7      	bne.n	80063f4 <HAL_UART_Transmit+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	f103 0208 	add.w	r2, r3, #8
 8006408:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	f103 0008 	add.w	r0, r3, #8
 8006414:	e840 2100 	strex	r1, r2, [r0]
 8006418:	2900      	cmp	r1, #0
 800641a:	d1f3      	bne.n	8006404 <HAL_UART_Transmit+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800641e:	2a01      	cmp	r2, #1
 8006420:	d00b      	beq.n	800643a <HAL_UART_Transmit+0x20a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006424:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006426:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800642c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	6623      	str	r3, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8006430:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006434:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          return HAL_ERROR;
 8006438:	e77f      	b.n	800633a <HAL_UART_Transmit+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	e843 2100 	strex	r1, r2, [r3]
 8006446:	2900      	cmp	r1, #0
 8006448:	d1f7      	bne.n	800643a <HAL_UART_Transmit+0x20a>
 800644a:	e7ea      	b.n	8006422 <HAL_UART_Transmit+0x1f2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800644c:	2208      	movs	r2, #8
 800644e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006454:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	e843 2100 	strex	r1, r2, [r3]
 800645c:	2900      	cmp	r1, #0
 800645e:	d1f7      	bne.n	8006450 <HAL_UART_Transmit+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	f103 0208 	add.w	r2, r3, #8
 8006464:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006468:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	f103 0008 	add.w	r0, r3, #8
 8006470:	e840 2100 	strex	r1, r2, [r0]
 8006474:	2900      	cmp	r1, #0
 8006476:	d1f3      	bne.n	8006460 <HAL_UART_Transmit+0x230>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800647a:	2a01      	cmp	r2, #1
 800647c:	d1d1      	bne.n	8006422 <HAL_UART_Transmit+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006482:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	e843 2100 	strex	r1, r2, [r3]
 800648a:	2900      	cmp	r1, #0
 800648c:	d1f7      	bne.n	800647e <HAL_UART_Transmit+0x24e>
 800648e:	e7c8      	b.n	8006422 <HAL_UART_Transmit+0x1f2>

08006490 <HAL_UART_Receive>:
{
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006496:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800649a:	2820      	cmp	r0, #32
 800649c:	d13e      	bne.n	800651c <HAL_UART_Receive+0x8c>
    if ((pData == NULL) || (Size == 0U))
 800649e:	468a      	mov	sl, r1
 80064a0:	b109      	cbz	r1, 80064a6 <HAL_UART_Receive+0x16>
 80064a2:	4614      	mov	r4, r2
 80064a4:	b912      	cbnz	r2, 80064ac <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 80064a6:	2001      	movs	r0, #1
}
 80064a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	2700      	movs	r7, #0
 80064ae:	461e      	mov	r6, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064b0:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b2:	f8c5 7084 	str.w	r7, [r5, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064b6:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ba:	662f      	str	r7, [r5, #96]	; 0x60
    tickstart = HAL_GetTick();
 80064bc:	f7fc fcc2 	bl	8002e44 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80064c0:	68ab      	ldr	r3, [r5, #8]
    huart->RxXferSize  = Size;
 80064c2:	f8a5 4058 	strh.w	r4, [r5, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 80064ca:	f8a5 405a 	strh.w	r4, [r5, #90]	; 0x5a
    tickstart = HAL_GetTick();
 80064ce:	4680      	mov	r8, r0
    UART_MASK_COMPUTATION(huart);
 80064d0:	d027      	beq.n	8006522 <HAL_UART_Receive+0x92>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 8082 	bne.w	80065dc <HAL_UART_Receive+0x14c>
 80064d8:	692b      	ldr	r3, [r5, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf0c      	ite	eq
 80064de:	27ff      	moveq	r7, #255	; 0xff
 80064e0:	277f      	movne	r7, #127	; 0x7f
 80064e2:	f8a5 705c 	strh.w	r7, [r5, #92]	; 0x5c
      pdata16bits = NULL;
 80064e6:	f04f 0900 	mov.w	r9, #0
    while (huart->RxXferCount > 0U)
 80064ea:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d06d      	beq.n	80065d0 <HAL_UART_Receive+0x140>
 80064f4:	682c      	ldr	r4, [r5, #0]
 80064f6:	1c71      	adds	r1, r6, #1
 80064f8:	d11d      	bne.n	8006536 <HAL_UART_Receive+0xa6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fa:	69e2      	ldr	r2, [r4, #28]
 80064fc:	0692      	lsls	r2, r2, #26
 80064fe:	d5fc      	bpl.n	80064fa <HAL_UART_Receive+0x6a>
      if (pdata8bits == NULL)
 8006500:	f1ba 0f00 	cmp.w	sl, #0
 8006504:	d055      	beq.n	80065b2 <HAL_UART_Receive+0x122>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006506:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8006508:	403b      	ands	r3, r7
 800650a:	f80a 3b01 	strb.w	r3, [sl], #1
      huart->RxXferCount--;
 800650e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 8006512:	3b01      	subs	r3, #1
 8006514:	b29b      	uxth	r3, r3
 8006516:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
 800651a:	e7e6      	b.n	80064ea <HAL_UART_Receive+0x5a>
    return HAL_BUSY;
 800651c:	2002      	movs	r0, #2
}
 800651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 8006522:	692b      	ldr	r3, [r5, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d163      	bne.n	80065f0 <HAL_UART_Receive+0x160>
 8006528:	f240 17ff 	movw	r7, #511	; 0x1ff
 800652c:	46d1      	mov	r9, sl
 800652e:	f8a5 705c 	strh.w	r7, [r5, #92]	; 0x5c
      pdata8bits  = NULL;
 8006532:	469a      	mov	sl, r3
 8006534:	e7d9      	b.n	80064ea <HAL_UART_Receive+0x5a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006536:	69e3      	ldr	r3, [r4, #28]
 8006538:	069b      	lsls	r3, r3, #26
 800653a:	d4e1      	bmi.n	8006500 <HAL_UART_Receive+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653c:	f7fc fc82 	bl	8002e44 <HAL_GetTick>
 8006540:	eba0 0008 	sub.w	r0, r0, r8
 8006544:	4286      	cmp	r6, r0
 8006546:	d32e      	bcc.n	80065a6 <HAL_UART_Receive+0x116>
 8006548:	b36e      	cbz	r6, 80065a6 <HAL_UART_Receive+0x116>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800654a:	682c      	ldr	r4, [r5, #0]
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	075a      	lsls	r2, r3, #29
 8006550:	d5d1      	bpl.n	80064f6 <HAL_UART_Receive+0x66>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006552:	69e3      	ldr	r3, [r4, #28]
 8006554:	071b      	lsls	r3, r3, #28
 8006556:	d459      	bmi.n	800660c <HAL_UART_Receive+0x17c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006558:	69e3      	ldr	r3, [r4, #28]
 800655a:	0518      	lsls	r0, r3, #20
 800655c:	d5cb      	bpl.n	80064f6 <HAL_UART_Receive+0x66>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800655e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006562:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	e854 3f00 	ldrex	r3, [r4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	e844 3200 	strex	r2, r3, [r4]
 8006570:	2a00      	cmp	r2, #0
 8006572:	d1f7      	bne.n	8006564 <HAL_UART_Receive+0xd4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	f104 0308 	add.w	r3, r4, #8
 8006578:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	f104 0108 	add.w	r1, r4, #8
 8006584:	e841 3200 	strex	r2, r3, [r1]
 8006588:	2a00      	cmp	r2, #0
 800658a:	d1f3      	bne.n	8006574 <HAL_UART_Receive+0xe4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800658c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800658e:	2b01      	cmp	r3, #1
 8006590:	d033      	beq.n	80065fa <HAL_UART_Receive+0x16a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006592:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006594:	2220      	movs	r2, #32
 8006596:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
  huart->RxISR = NULL;
 800659a:	66ab      	str	r3, [r5, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659c:	662b      	str	r3, [r5, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800659e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065a2:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065a6:	2320      	movs	r3, #32
 80065a8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80065ac:	2003      	movs	r0, #3
}
 80065ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065b2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80065b4:	403b      	ands	r3, r7
 80065b6:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 80065ba:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80065c6:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d192      	bne.n	80064f6 <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 80065d0:	2320      	movs	r3, #32
 80065d2:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    return HAL_OK;
 80065d6:	2000      	movs	r0, #0
}
 80065d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 80065dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065e0:	f47f af7f 	bne.w	80064e2 <HAL_UART_Receive+0x52>
 80065e4:	692b      	ldr	r3, [r5, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bf0c      	ite	eq
 80065ea:	277f      	moveq	r7, #127	; 0x7f
 80065ec:	273f      	movne	r7, #63	; 0x3f
 80065ee:	e778      	b.n	80064e2 <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 80065f0:	46b9      	mov	r9, r7
 80065f2:	27ff      	movs	r7, #255	; 0xff
 80065f4:	f8a5 705c 	strh.w	r7, [r5, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f8:	e777      	b.n	80064ea <HAL_UART_Receive+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	e844 3200 	strex	r2, r3, [r4]
 8006606:	2a00      	cmp	r2, #0
 8006608:	d1f7      	bne.n	80065fa <HAL_UART_Receive+0x16a>
 800660a:	e7c2      	b.n	8006592 <HAL_UART_Receive+0x102>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800660c:	2308      	movs	r3, #8
 800660e:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	e854 3f00 	ldrex	r3, [r4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	e844 3200 	strex	r2, r3, [r4]
 800661c:	2a00      	cmp	r2, #0
 800661e:	d1f7      	bne.n	8006610 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	f104 0308 	add.w	r3, r4, #8
 8006624:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006628:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	f104 0108 	add.w	r1, r4, #8
 8006630:	e841 3200 	strex	r2, r3, [r1]
 8006634:	2a00      	cmp	r2, #0
 8006636:	d1f3      	bne.n	8006620 <HAL_UART_Receive+0x190>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006638:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800663a:	2b01      	cmp	r3, #1
 800663c:	d00b      	beq.n	8006656 <HAL_UART_Receive+0x1c6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006640:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006642:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006644:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
  huart->RxISR = NULL;
 8006648:	66ab      	str	r3, [r5, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	662b      	str	r3, [r5, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800664c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006650:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          return HAL_ERROR;
 8006654:	e7a7      	b.n	80065a6 <HAL_UART_Receive+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	e844 3200 	strex	r2, r3, [r4]
 8006662:	2a00      	cmp	r2, #0
 8006664:	d1f7      	bne.n	8006656 <HAL_UART_Receive+0x1c6>
 8006666:	e7ea      	b.n	800663e <HAL_UART_Receive+0x1ae>

08006668 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006668:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800666c:	2b20      	cmp	r3, #32
 800666e:	d14e      	bne.n	800670e <HAL_UART_Receive_IT+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8006670:	b101      	cbz	r1, 8006674 <HAL_UART_Receive_IT+0xc>
 8006672:	b90a      	cbnz	r2, 8006678 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8006674:	2001      	movs	r0, #1
}
 8006676:	4770      	bx	lr
{
 8006678:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800667a:	4b39      	ldr	r3, [pc, #228]	; (8006760 <HAL_UART_Receive_IT+0xf8>)
 800667c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667e:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006680:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	6605      	str	r5, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006684:	d00a      	beq.n	800669c <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	d507      	bpl.n	800669c <HAL_UART_Receive_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006690:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	e844 3500 	strex	r5, r3, [r4]
 8006698:	2d00      	cmp	r5, #0
 800669a:	d1f7      	bne.n	800668c <HAL_UART_Receive_IT+0x24>
  UART_MASK_COMPUTATION(huart);
 800669c:	6885      	ldr	r5, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800669e:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 80066a0:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 80066a2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
  huart->RxXferSize  = Size;
 80066a6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80066aa:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066ae:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 80066b0:	d043      	beq.n	800673a <HAL_UART_Receive_IT+0xd2>
 80066b2:	2d00      	cmp	r5, #0
 80066b4:	d148      	bne.n	8006748 <HAL_UART_Receive_IT+0xe0>
 80066b6:	6903      	ldr	r3, [r0, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf14      	ite	ne
 80066bc:	237f      	movne	r3, #127	; 0x7f
 80066be:	23ff      	moveq	r3, #255	; 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066c2:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  UART_MASK_COMPUTATION(huart);
 80066c8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066cc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	f104 0308 	add.w	r3, r4, #8
 80066d4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	f104 0108 	add.w	r1, r4, #8
 80066e0:	e841 3200 	strex	r2, r3, [r1]
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	d1f3      	bne.n	80066d0 <HAL_UART_Receive_IT+0x68>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e8:	6883      	ldr	r3, [r0, #8]
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ee:	6903      	ldr	r3, [r0, #16]
 80066f0:	d00f      	beq.n	8006712 <HAL_UART_Receive_IT+0xaa>
    huart->RxISR = UART_RxISR_8BIT;
 80066f2:	4a1c      	ldr	r2, [pc, #112]	; (8006764 <HAL_UART_Receive_IT+0xfc>)
 80066f4:	6682      	str	r2, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 80066f6:	b17b      	cbz	r3, 8006718 <HAL_UART_Receive_IT+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	e844 3200 	strex	r2, r3, [r4]
 8006704:	2a00      	cmp	r2, #0
 8006706:	d1f7      	bne.n	80066f8 <HAL_UART_Receive_IT+0x90>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006708:	2000      	movs	r0, #0
}
 800670a:	bc30      	pop	{r4, r5}
 800670c:	4770      	bx	lr
    return HAL_BUSY;
 800670e:	2002      	movs	r0, #2
 8006710:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006712:	bb13      	cbnz	r3, 800675a <HAL_UART_Receive_IT+0xf2>
 8006714:	4b14      	ldr	r3, [pc, #80]	; (8006768 <HAL_UART_Receive_IT+0x100>)
 8006716:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800671c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	e844 3200 	strex	r2, r3, [r4]
 8006724:	2a00      	cmp	r2, #0
 8006726:	d0ef      	beq.n	8006708 <HAL_UART_Receive_IT+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	e854 3f00 	ldrex	r3, [r4]
 800672c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	e844 3200 	strex	r2, r3, [r4]
 8006734:	2a00      	cmp	r2, #0
 8006736:	d1ef      	bne.n	8006718 <HAL_UART_Receive_IT+0xb0>
 8006738:	e7e6      	b.n	8006708 <HAL_UART_Receive_IT+0xa0>
  UART_MASK_COMPUTATION(huart);
 800673a:	6902      	ldr	r2, [r0, #16]
 800673c:	2a00      	cmp	r2, #0
 800673e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006742:	bf18      	it	ne
 8006744:	23ff      	movne	r3, #255	; 0xff
 8006746:	e7bb      	b.n	80066c0 <HAL_UART_Receive_IT+0x58>
 8006748:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 800674c:	d1b8      	bne.n	80066c0 <HAL_UART_Receive_IT+0x58>
 800674e:	6903      	ldr	r3, [r0, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf0c      	ite	eq
 8006754:	237f      	moveq	r3, #127	; 0x7f
 8006756:	233f      	movne	r3, #63	; 0x3f
 8006758:	e7b2      	b.n	80066c0 <HAL_UART_Receive_IT+0x58>
    huart->RxISR = UART_RxISR_8BIT;
 800675a:	4b02      	ldr	r3, [pc, #8]	; (8006764 <HAL_UART_Receive_IT+0xfc>)
 800675c:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 800675e:	e7cb      	b.n	80066f8 <HAL_UART_Receive_IT+0x90>
 8006760:	40008000 	.word	0x40008000
 8006764:	08006d1d 	.word	0x08006d1d
 8006768:	08006ccd 	.word	0x08006ccd

0800676c <HAL_UART_Transmit_DMA>:
{
 800676c:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800676e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8006770:	2d20      	cmp	r5, #32
 8006772:	d12e      	bne.n	80067d2 <HAL_UART_Transmit_DMA+0x66>
    if ((pData == NULL) || (Size == 0U))
 8006774:	b359      	cbz	r1, 80067ce <HAL_UART_Transmit_DMA+0x62>
 8006776:	b352      	cbz	r2, 80067ce <HAL_UART_Transmit_DMA+0x62>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006778:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 800677a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
 800677e:	4604      	mov	r4, r0
    huart->pTxBuffPtr  = pData;
 8006780:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006782:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->TxXferSize  = Size;
 8006786:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    if (huart->hdmatx != NULL)
 800678a:	6f00      	ldr	r0, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800678c:	2621      	movs	r6, #33	; 0x21
 800678e:	67e6      	str	r6, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 8006790:	b160      	cbz	r0, 80067ac <HAL_UART_Transmit_DMA+0x40>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006792:	4e14      	ldr	r6, [pc, #80]	; (80067e4 <HAL_UART_Transmit_DMA+0x78>)
      huart->hdmatx->XferAbortCallback = NULL;
 8006794:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006796:	4613      	mov	r3, r2
 8006798:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800679a:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800679c:	4e12      	ldr	r6, [pc, #72]	; (80067e8 <HAL_UART_Transmit_DMA+0x7c>)
 800679e:	6306      	str	r6, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80067a0:	4e12      	ldr	r6, [pc, #72]	; (80067ec <HAL_UART_Transmit_DMA+0x80>)
 80067a2:	6346      	str	r6, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80067a4:	3228      	adds	r2, #40	; 0x28
 80067a6:	f7fd fae5 	bl	8003d74 <HAL_DMA_Start_IT>
 80067aa:	b9a0      	cbnz	r0, 80067d6 <HAL_UART_Transmit_DMA+0x6a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	2340      	movs	r3, #64	; 0x40
 80067b0:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	f102 0308 	add.w	r3, r2, #8
 80067b6:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	f102 0008 	add.w	r0, r2, #8
 80067c2:	e840 3100 	strex	r1, r3, [r0]
 80067c6:	2900      	cmp	r1, #0
 80067c8:	d1f3      	bne.n	80067b2 <HAL_UART_Transmit_DMA+0x46>
    return HAL_OK;
 80067ca:	2000      	movs	r0, #0
}
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80067ce:	2001      	movs	r0, #1
}
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80067d2:	2002      	movs	r0, #2
}
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067d6:	2310      	movs	r3, #16
 80067d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80067dc:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 80067de:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	bf00      	nop
 80067e4:	080067f5 	.word	0x080067f5
 80067e8:	0800683d 	.word	0x0800683d
 80067ec:	0800684d 	.word	0x0800684d

080067f0 <HAL_UART_TxCpltCallback>:
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067f4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80067f6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f013 0320 	ands.w	r3, r3, #32
 8006800:	d117      	bne.n	8006832 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8006802:	6802      	ldr	r2, [r0, #0]
 8006804:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	f102 0308 	add.w	r3, r2, #8
 800680c:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	f102 0008 	add.w	r0, r2, #8
 8006818:	e840 3100 	strex	r1, r3, [r0]
 800681c:	2900      	cmp	r1, #0
 800681e:	d1f3      	bne.n	8006808 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	e842 3100 	strex	r1, r3, [r2]
 800682c:	2900      	cmp	r1, #0
 800682e:	d1f7      	bne.n	8006820 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006830:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006832:	f7ff ffdd 	bl	80067f0 <HAL_UART_TxCpltCallback>
}
 8006836:	bd08      	pop	{r3, pc}

08006838 <HAL_UART_TxHalfCpltCallback>:
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop

0800683c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800683c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800683e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006840:	f7ff fffa 	bl	8006838 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006844:	bd08      	pop	{r3, pc}
 8006846:	bf00      	nop

08006848 <HAL_UART_ErrorCallback>:
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop

0800684c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800684c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800684e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006850:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
 8006852:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006854:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	0612      	lsls	r2, r2, #24
 800685c:	d501      	bpl.n	8006862 <UART_DMAError+0x16>
 800685e:	2921      	cmp	r1, #33	; 0x21
 8006860:	d00d      	beq.n	800687e <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	0652      	lsls	r2, r2, #25
 8006866:	d501      	bpl.n	800686c <UART_DMAError+0x20>
 8006868:	2c22      	cmp	r4, #34	; 0x22
 800686a:	d016      	beq.n	800689a <UART_DMAError+0x4e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800686c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006870:	f043 0310 	orr.w	r3, r3, #16
 8006874:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006878:	f7ff ffe6 	bl	8006848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800687c:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800687e:	2200      	movs	r2, #0
 8006880:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006888:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	e843 2100 	strex	r1, r2, [r3]
 8006890:	2900      	cmp	r1, #0
 8006892:	d1f7      	bne.n	8006884 <UART_DMAError+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8006894:	2220      	movs	r2, #32
 8006896:	67c2      	str	r2, [r0, #124]	; 0x7c
}
 8006898:	e7e3      	b.n	8006862 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 800689a:	2200      	movs	r2, #0
 800689c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	e843 2100 	strex	r1, r2, [r3]
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d1f7      	bne.n	80068a0 <UART_DMAError+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	f103 0208 	add.w	r2, r3, #8
 80068b4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	f103 0408 	add.w	r4, r3, #8
 80068c0:	e844 2100 	strex	r1, r2, [r4]
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d1f3      	bne.n	80068b0 <UART_DMAError+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80068ca:	2a01      	cmp	r2, #1
 80068cc:	d006      	beq.n	80068dc <UART_DMAError+0x90>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	2220      	movs	r2, #32
 80068d2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  huart->RxISR = NULL;
 80068d6:	6683      	str	r3, [r0, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d8:	6603      	str	r3, [r0, #96]	; 0x60
}
 80068da:	e7c7      	b.n	800686c <UART_DMAError+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	e843 2100 	strex	r1, r2, [r3]
 80068e8:	2900      	cmp	r1, #0
 80068ea:	d0f0      	beq.n	80068ce <UART_DMAError+0x82>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	e853 2f00 	ldrex	r2, [r3]
 80068f0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	e843 2100 	strex	r1, r2, [r3]
 80068f8:	2900      	cmp	r1, #0
 80068fa:	d1ef      	bne.n	80068dc <UART_DMAError+0x90>
 80068fc:	e7e7      	b.n	80068ce <UART_DMAError+0x82>
 80068fe:	bf00      	nop

08006900 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006900:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006902:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800690a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800690e:	f7ff ff9b 	bl	8006848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006912:	bd08      	pop	{r3, pc}

08006914 <HAL_UARTEx_RxEventCallback>:
}
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop

08006918 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006918:	6803      	ldr	r3, [r0, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800691c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800691e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8006922:	ea12 0f0c 	tst.w	r2, ip
{
 8006926:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006928:	689d      	ldr	r5, [r3, #8]
{
 800692a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800692c:	d150      	bne.n	80069d0 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800692e:	0696      	lsls	r6, r2, #26
 8006930:	d502      	bpl.n	8006938 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006932:	068e      	lsls	r6, r1, #26
 8006934:	f100 80e7 	bmi.w	8006b06 <HAL_UART_IRQHandler+0x1ee>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006938:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800693a:	2801      	cmp	r0, #1
 800693c:	d024      	beq.n	8006988 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800693e:	02d6      	lsls	r6, r2, #11
 8006940:	d502      	bpl.n	8006948 <HAL_UART_IRQHandler+0x30>
 8006942:	0268      	lsls	r0, r5, #9
 8006944:	f100 80e4 	bmi.w	8006b10 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006948:	0616      	lsls	r6, r2, #24
 800694a:	d414      	bmi.n	8006976 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800694c:	0650      	lsls	r0, r2, #25
 800694e:	d501      	bpl.n	8006954 <HAL_UART_IRQHandler+0x3c>
 8006950:	064a      	lsls	r2, r1, #25
 8006952:	d400      	bmi.n	8006956 <HAL_UART_IRQHandler+0x3e>
}
 8006954:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800695a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	e843 2100 	strex	r1, r2, [r3]
 8006962:	2900      	cmp	r1, #0
 8006964:	d1f7      	bne.n	8006956 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006966:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006968:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800696a:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 800696c:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800696e:	4620      	mov	r0, r4
 8006970:	f7ff ff3e 	bl	80067f0 <HAL_UART_TxCpltCallback>
}
 8006974:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006976:	060d      	lsls	r5, r1, #24
 8006978:	d5e8      	bpl.n	800694c <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800697a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0e9      	beq.n	8006954 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8006980:	4620      	mov	r0, r4
}
 8006982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006986:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006988:	06d6      	lsls	r6, r2, #27
 800698a:	d5d8      	bpl.n	800693e <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800698c:	06c8      	lsls	r0, r1, #27
 800698e:	d5d6      	bpl.n	800693e <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006990:	2210      	movs	r2, #16
 8006992:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	0651      	lsls	r1, r2, #25
 8006998:	f140 80d7 	bpl.w	8006b4a <HAL_UART_IRQHandler+0x232>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800699c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800699e:	6801      	ldr	r1, [r0, #0]
 80069a0:	684a      	ldr	r2, [r1, #4]
 80069a2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80069a4:	2a00      	cmp	r2, #0
 80069a6:	d0d5      	beq.n	8006954 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069a8:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 80069ac:	4295      	cmp	r5, r2
 80069ae:	d9d1      	bls.n	8006954 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 80069b0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069b4:	680a      	ldr	r2, [r1, #0]
 80069b6:	0692      	lsls	r2, r2, #26
 80069b8:	f140 80fe 	bpl.w	8006bb8 <HAL_UART_IRQHandler+0x2a0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069bc:	2302      	movs	r3, #2
 80069be:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069c0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80069c4:	1ae9      	subs	r1, r5, r3
 80069c6:	4620      	mov	r0, r4
 80069c8:	b289      	uxth	r1, r1
 80069ca:	f7ff ffa3 	bl	8006914 <HAL_UARTEx_RxEventCallback>
}
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069d0:	4895      	ldr	r0, [pc, #596]	; (8006c28 <HAL_UART_IRQHandler+0x310>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069d2:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069d6:	4008      	ands	r0, r1
 80069d8:	4330      	orrs	r0, r6
 80069da:	d0ad      	beq.n	8006938 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069dc:	07d5      	lsls	r5, r2, #31
 80069de:	d509      	bpl.n	80069f4 <HAL_UART_IRQHandler+0xdc>
 80069e0:	05c8      	lsls	r0, r1, #23
 80069e2:	d507      	bpl.n	80069f4 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069e4:	2001      	movs	r0, #1
 80069e6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069e8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80069ec:	f040 0001 	orr.w	r0, r0, #1
 80069f0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069f4:	0795      	lsls	r5, r2, #30
 80069f6:	f140 8081 	bpl.w	8006afc <HAL_UART_IRQHandler+0x1e4>
 80069fa:	b18e      	cbz	r6, 8006a20 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069fc:	2002      	movs	r0, #2
 80069fe:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a00:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006a04:	f040 0004 	orr.w	r0, r0, #4
 8006a08:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a0c:	0750      	lsls	r0, r2, #29
 8006a0e:	d507      	bpl.n	8006a20 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a10:	2004      	movs	r0, #4
 8006a12:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a14:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006a18:	f040 0002 	orr.w	r0, r0, #2
 8006a1c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a20:	0710      	lsls	r0, r2, #28
 8006a22:	d50b      	bpl.n	8006a3c <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a24:	f001 0020 	and.w	r0, r1, #32
 8006a28:	4330      	orrs	r0, r6
 8006a2a:	d007      	beq.n	8006a3c <HAL_UART_IRQHandler+0x124>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a2c:	2008      	movs	r0, #8
 8006a2e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a30:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006a34:	f040 0008 	orr.w	r0, r0, #8
 8006a38:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a3c:	0516      	lsls	r6, r2, #20
 8006a3e:	d50a      	bpl.n	8006a56 <HAL_UART_IRQHandler+0x13e>
 8006a40:	014d      	lsls	r5, r1, #5
 8006a42:	d508      	bpl.n	8006a56 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006a48:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a4a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006a4e:	f040 0020 	orr.w	r0, r0, #32
 8006a52:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a56:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	f43f af7a 	beq.w	8006954 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a60:	0690      	lsls	r0, r2, #26
 8006a62:	d506      	bpl.n	8006a72 <HAL_UART_IRQHandler+0x15a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a64:	0689      	lsls	r1, r1, #26
 8006a66:	d504      	bpl.n	8006a72 <HAL_UART_IRQHandler+0x15a>
        if (huart->RxISR != NULL)
 8006a68:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006a6a:	b112      	cbz	r2, 8006a72 <HAL_UART_IRQHandler+0x15a>
          huart->RxISR(huart);
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a70:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8006a72:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a76:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a78:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a7c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006a80:	ea52 0501 	orrs.w	r5, r2, r1
 8006a84:	f000 80c9 	beq.w	8006c1a <HAL_UART_IRQHandler+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	e843 2100 	strex	r1, r2, [r3]
 8006a94:	2900      	cmp	r1, #0
 8006a96:	d1f7      	bne.n	8006a88 <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	f103 0208 	add.w	r2, r3, #8
 8006a9c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	f103 0008 	add.w	r0, r3, #8
 8006aa8:	e840 2100 	strex	r1, r2, [r0]
 8006aac:	2900      	cmp	r1, #0
 8006aae:	d1f3      	bne.n	8006a98 <HAL_UART_IRQHandler+0x180>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006ab2:	2a01      	cmp	r2, #1
 8006ab4:	d034      	beq.n	8006b20 <HAL_UART_IRQHandler+0x208>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	2120      	movs	r1, #32
 8006aba:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac0:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8006ac2:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	064a      	lsls	r2, r1, #25
 8006ac6:	d53c      	bpl.n	8006b42 <HAL_UART_IRQHandler+0x22a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	f103 0208 	add.w	r2, r3, #8
 8006acc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	f103 0008 	add.w	r0, r3, #8
 8006ad8:	e840 2100 	strex	r1, r2, [r0]
 8006adc:	2900      	cmp	r1, #0
 8006ade:	d1f3      	bne.n	8006ac8 <HAL_UART_IRQHandler+0x1b0>
          if (huart->hdmarx != NULL)
 8006ae0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006ae2:	b370      	cbz	r0, 8006b42 <HAL_UART_IRQHandler+0x22a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ae4:	4b51      	ldr	r3, [pc, #324]	; (8006c2c <HAL_UART_IRQHandler+0x314>)
 8006ae6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ae8:	f7fd f9b0 	bl	8003e4c <HAL_DMA_Abort_IT>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f43f af31 	beq.w	8006954 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8006af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006afa:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006afc:	0755      	lsls	r5, r2, #29
 8006afe:	d58f      	bpl.n	8006a20 <HAL_UART_IRQHandler+0x108>
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	d185      	bne.n	8006a10 <HAL_UART_IRQHandler+0xf8>
 8006b04:	e78c      	b.n	8006a20 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8006b06:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f47f af3a 	bne.w	8006982 <HAL_UART_IRQHandler+0x6a>
 8006b0e:	e721      	b.n	8006954 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8006b14:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b16:	621a      	str	r2, [r3, #32]
}
 8006b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006b1c:	f000 bc78 	b.w	8007410 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	e843 2100 	strex	r1, r2, [r3]
 8006b2c:	2900      	cmp	r1, #0
 8006b2e:	d0c2      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	e853 2f00 	ldrex	r2, [r3]
 8006b34:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	e843 2100 	strex	r1, r2, [r3]
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d1ef      	bne.n	8006b20 <HAL_UART_IRQHandler+0x208>
 8006b40:	e7b9      	b.n	8006ab6 <HAL_UART_IRQHandler+0x19e>
            HAL_UART_ErrorCallback(huart);
 8006b42:	4620      	mov	r0, r4
 8006b44:	f7ff fe80 	bl	8006848 <HAL_UART_ErrorCallback>
}
 8006b48:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b4a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8006b4e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b52:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8006b56:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b58:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	f43f aefa 	beq.w	8006954 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b60:	1a41      	subs	r1, r0, r1
 8006b62:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006b64:	2900      	cmp	r1, #0
 8006b66:	f43f aef5 	beq.w	8006954 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	e843 2000 	strex	r0, r2, [r3]
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d1f7      	bne.n	8006b6a <HAL_UART_IRQHandler+0x252>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	f103 0208 	add.w	r2, r3, #8
 8006b7e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	f103 0508 	add.w	r5, r3, #8
 8006b8a:	e845 2000 	strex	r0, r2, [r5]
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d1f3      	bne.n	8006b7a <HAL_UART_IRQHandler+0x262>
        huart->RxState = HAL_UART_STATE_READY;
 8006b92:	2220      	movs	r2, #32
 8006b94:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8006b98:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	e843 2000 	strex	r0, r2, [r3]
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d1f7      	bne.n	8006b9c <HAL_UART_IRQHandler+0x284>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bac:	2302      	movs	r3, #2
 8006bae:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7ff feaf 	bl	8006914 <HAL_UARTEx_RxEventCallback>
}
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	e843 2100 	strex	r1, r2, [r3]
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	d1f7      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	f103 0208 	add.w	r2, r3, #8
 8006bcc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	f103 0508 	add.w	r5, r3, #8
 8006bd8:	e845 2100 	strex	r1, r2, [r5]
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d1f3      	bne.n	8006bc8 <HAL_UART_IRQHandler+0x2b0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	f103 0208 	add.w	r2, r3, #8
 8006be4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	f103 0508 	add.w	r5, r3, #8
 8006bf0:	e845 2100 	strex	r1, r2, [r5]
 8006bf4:	2900      	cmp	r1, #0
 8006bf6:	d1f3      	bne.n	8006be0 <HAL_UART_IRQHandler+0x2c8>
          huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c04:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	e843 2100 	strex	r1, r2, [r3]
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	d1f7      	bne.n	8006c00 <HAL_UART_IRQHandler+0x2e8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c10:	f7fd f8f6 	bl	8003e00 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c14:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 8006c18:	e6d0      	b.n	80069bc <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f7ff fe14 	bl	8006848 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c20:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
 8006c26:	bf00      	nop
 8006c28:	04000120 	.word	0x04000120
 8006c2c:	08006901 	.word	0x08006901

08006c30 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8006c30:	b510      	push	{r4, lr}
 8006c32:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	e843 2100 	strex	r1, r2, [r3]
 8006c40:	2900      	cmp	r1, #0
 8006c42:	d1f7      	bne.n	8006c34 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	f103 0208 	add.w	r2, r3, #8
 8006c48:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	f103 0408 	add.w	r4, r3, #8
 8006c54:	e844 2100 	strex	r1, r2, [r4]
 8006c58:	2900      	cmp	r1, #0
 8006c5a:	d1f3      	bne.n	8006c44 <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxISR = NULL;
 8006c5e:	6681      	str	r1, [r0, #104]	; 0x68
      huart->RxState = HAL_UART_STATE_READY;
 8006c60:	2420      	movs	r4, #32
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c62:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 8006c64:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c68:	6641      	str	r1, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c6a:	d002      	beq.n	8006c72 <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	0211      	lsls	r1, r2, #8
 8006c70:	d416      	bmi.n	8006ca0 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c72:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006c74:	2a01      	cmp	r2, #1
 8006c76:	d124      	bne.n	8006cc2 <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c78:	2200      	movs	r2, #0
 8006c7a:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c80:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	e843 2100 	strex	r1, r2, [r3]
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	d1f7      	bne.n	8006c7c <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c8c:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c8e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c92:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c94:	bf44      	itt	mi
 8006c96:	2210      	movmi	r2, #16
 8006c98:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c9a:	f7ff fe3b 	bl	8006914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c9e:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ca4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	e843 2100 	strex	r1, r2, [r3]
 8006cac:	2900      	cmp	r1, #0
 8006cae:	d0e0      	beq.n	8006c72 <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	e853 2f00 	ldrex	r2, [r3]
 8006cb4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	e843 2100 	strex	r1, r2, [r3]
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d1ef      	bne.n	8006ca0 <UART_RxISR_16BIT.part.0+0x70>
 8006cc0:	e7d7      	b.n	8006c72 <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 8006cc2:	f7fb f97d 	bl	8001fc0 <HAL_UART_RxCpltCallback>
}
 8006cc6:	bd10      	pop	{r4, pc}
 8006cc8:	40008000 	.word	0x40008000

08006ccc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ccc:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8006cd0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd4:	2922      	cmp	r1, #34	; 0x22
 8006cd6:	d006      	beq.n	8006ce6 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cd8:	6802      	ldr	r2, [r0, #0]
 8006cda:	8b13      	ldrh	r3, [r2, #24]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f043 0308 	orr.w	r3, r3, #8
 8006ce2:	8313      	strh	r3, [r2, #24]
 8006ce4:	4770      	bx	lr
{
 8006ce6:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ce8:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cea:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cec:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cf0:	ea02 020c 	and.w	r2, r2, ip
 8006cf4:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8006cf8:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8006cfc:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006cfe:	3a01      	subs	r2, #1
 8006d00:	b292      	uxth	r2, r2
 8006d02:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8006d06:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	b91b      	cbnz	r3, 8006d16 <UART_RxISR_16BIT+0x4a>
  }
}
 8006d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d12:	f7ff bf8d 	b.w	8006c30 <UART_RxISR_16BIT.part.0>
 8006d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8006d20:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d24:	2922      	cmp	r1, #34	; 0x22
 8006d26:	d006      	beq.n	8006d36 <UART_RxISR_8BIT+0x1a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d28:	6802      	ldr	r2, [r0, #0]
 8006d2a:	8b13      	ldrh	r3, [r2, #24]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f043 0308 	orr.w	r3, r3, #8
 8006d32:	8313      	strh	r3, [r2, #24]
 8006d34:	4770      	bx	lr
{
 8006d36:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d38:	6804      	ldr	r4, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d3a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d3c:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d40:	ea02 020c 	and.w	r2, r2, ip
 8006d44:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8006d46:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8006d4a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006d4c:	3a01      	subs	r2, #1
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8006d54:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8006d58:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8006d5a:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8006d5c:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8006d5e:	b91a      	cbnz	r2, 8006d68 <UART_RxISR_8BIT+0x4c>
}
 8006d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d64:	f7ff bf64 	b.w	8006c30 <UART_RxISR_16BIT.part.0>
 8006d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <UART_SetConfig>:
{
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d74:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d76:	6882      	ldr	r2, [r0, #8]
 8006d78:	6900      	ldr	r0, [r0, #16]
 8006d7a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d7c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d7e:	4302      	orrs	r2, r0
 8006d80:	430a      	orrs	r2, r1
 8006d82:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d84:	499f      	ldr	r1, [pc, #636]	; (8007004 <UART_SetConfig+0x294>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d86:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d88:	4029      	ands	r1, r5
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	68e1      	ldr	r1, [r4, #12]
 8006d92:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006d96:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d98:	499b      	ldr	r1, [pc, #620]	; (8007008 <UART_SetConfig+0x298>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d9a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d9c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d9e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006da0:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006da2:	d071      	beq.n	8006e88 <UART_SetConfig+0x118>
    tmpreg |= huart->Init.OneBitSampling;
 8006da4:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006da6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006daa:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dac:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dae:	4997      	ldr	r1, [pc, #604]	; (800700c <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006db0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006db2:	428b      	cmp	r3, r1
 8006db4:	d024      	beq.n	8006e00 <UART_SetConfig+0x90>
 8006db6:	4a96      	ldr	r2, [pc, #600]	; (8007010 <UART_SetConfig+0x2a0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d043      	beq.n	8006e44 <UART_SetConfig+0xd4>
 8006dbc:	4a95      	ldr	r2, [pc, #596]	; (8007014 <UART_SetConfig+0x2a4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	f000 80d7 	beq.w	8006f72 <UART_SetConfig+0x202>
 8006dc4:	4a94      	ldr	r2, [pc, #592]	; (8007018 <UART_SetConfig+0x2a8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	f000 80a1 	beq.w	8006f0e <UART_SetConfig+0x19e>
 8006dcc:	4a93      	ldr	r2, [pc, #588]	; (800701c <UART_SetConfig+0x2ac>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d111      	bne.n	8006df6 <UART_SetConfig+0x86>
 8006dd2:	4b93      	ldr	r3, [pc, #588]	; (8007020 <UART_SetConfig+0x2b0>)
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de0:	f000 80ff 	beq.w	8006fe2 <UART_SetConfig+0x272>
 8006de4:	f200 80be 	bhi.w	8006f64 <UART_SetConfig+0x1f4>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80dc 	beq.w	8006fa6 <UART_SetConfig+0x236>
 8006dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df2:	f000 8099 	beq.w	8006f28 <UART_SetConfig+0x1b8>
        ret = HAL_ERROR;
 8006df6:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006df8:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8006dfa:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
}
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e00:	4b87      	ldr	r3, [pc, #540]	; (8007020 <UART_SetConfig+0x2b0>)
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d978      	bls.n	8006f02 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006e14:	f000 80f0 	beq.w	8006ff8 <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e18:	f7fd fee6 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d048      	beq.n	8006eb2 <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e20:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e22:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e26:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8006e2a:	fbb0 f2f2 	udiv	r2, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e2e:	f1a2 0310 	sub.w	r3, r2, #16
 8006e32:	428b      	cmp	r3, r1
 8006e34:	d8df      	bhi.n	8006df6 <UART_SetConfig+0x86>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8006e3a:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8006e3c:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
 8006e40:	2000      	movs	r0, #0
}
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e44:	4b76      	ldr	r3, [pc, #472]	; (8007020 <UART_SetConfig+0x2b0>)
 8006e46:	4a77      	ldr	r2, [pc, #476]	; (8007024 <UART_SetConfig+0x2b4>)
 8006e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4c:	f003 030c 	and.w	r3, r3, #12
 8006e50:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e52:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006e56:	d06d      	beq.n	8006f34 <UART_SetConfig+0x1c4>
    switch (clocksource)
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d8cc      	bhi.n	8006df6 <UART_SetConfig+0x86>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0xf4>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006f6d 	.word	0x08006f6d
 8006e68:	08006e19 	.word	0x08006e19
 8006e6c:	08006fe9 	.word	0x08006fe9
 8006e70:	08006df7 	.word	0x08006df7
 8006e74:	08006f2f 	.word	0x08006f2f
 8006e78:	08006df7 	.word	0x08006df7
 8006e7c:	08006df7 	.word	0x08006df7
 8006e80:	08006df7 	.word	0x08006df7
 8006e84:	08006f97 	.word	0x08006f97
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e88:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e8c:	4864      	ldr	r0, [pc, #400]	; (8007020 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e92:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006e96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9e:	f000 8080 	beq.w	8006fa2 <UART_SetConfig+0x232>
 8006ea2:	d80b      	bhi.n	8006ebc <UART_SetConfig+0x14c>
 8006ea4:	b383      	cbz	r3, 8006f08 <UART_SetConfig+0x198>
 8006ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eaa:	d1a4      	bne.n	8006df6 <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetSysClockFreq();
 8006eac:	f7fd fa94 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006eb0:	b948      	cbnz	r0, 8006ec6 <UART_SetConfig+0x156>
  huart->RxISR = NULL;
 8006eb2:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8006eb4:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
 8006eb8:	2000      	movs	r0, #0
}
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ec0:	d199      	bne.n	8006df6 <UART_SetConfig+0x86>
        pclk = (uint32_t) LSE_VALUE;
 8006ec2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ec6:	6862      	ldr	r2, [r4, #4]
 8006ec8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006ecc:	4283      	cmp	r3, r0
 8006ece:	d892      	bhi.n	8006df6 <UART_SetConfig+0x86>
 8006ed0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006ed4:	d88f      	bhi.n	8006df6 <UART_SetConfig+0x86>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ed6:	2500      	movs	r5, #0
 8006ed8:	0853      	lsrs	r3, r2, #1
 8006eda:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8006ede:	4629      	mov	r1, r5
 8006ee0:	fbe0 310c 	umlal	r3, r1, r0, ip
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	f7f9 fe5e 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006eec:	4a4e      	ldr	r2, [pc, #312]	; (8007028 <UART_SetConfig+0x2b8>)
 8006eee:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006ef2:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ef4:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ef6:	f63f af7e 	bhi.w	8006df6 <UART_SetConfig+0x86>
          huart->Instance->BRR = usartdiv;
 8006efa:	6822      	ldr	r2, [r4, #0]
 8006efc:	4628      	mov	r0, r5
 8006efe:	60d3      	str	r3, [r2, #12]
 8006f00:	e77a      	b.n	8006df8 <UART_SetConfig+0x88>
 8006f02:	4a4a      	ldr	r2, [pc, #296]	; (800702c <UART_SetConfig+0x2bc>)
 8006f04:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f06:	e7a4      	b.n	8006e52 <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f08:	f7fd fe5c 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
        break;
 8006f0c:	e7d0      	b.n	8006eb0 <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f0e:	4b44      	ldr	r3, [pc, #272]	; (8007020 <UART_SetConfig+0x2b0>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d062      	beq.n	8006fe2 <UART_SetConfig+0x272>
 8006f1c:	d83e      	bhi.n	8006f9c <UART_SetConfig+0x22c>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d041      	beq.n	8006fa6 <UART_SetConfig+0x236>
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	f47f af67 	bne.w	8006df6 <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f28:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006f2c:	d05e      	beq.n	8006fec <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fd fa53 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
        break;
 8006f32:	e773      	b.n	8006e1c <UART_SetConfig+0xac>
    switch (clocksource)
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	f63f af5e 	bhi.w	8006df6 <UART_SetConfig+0x86>
 8006f3a:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <UART_SetConfig+0x1d0>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006fad 	.word	0x08006fad
 8006f44:	08006ff9 	.word	0x08006ff9
 8006f48:	08006fff 	.word	0x08006fff
 8006f4c:	08006df7 	.word	0x08006df7
 8006f50:	08006fed 	.word	0x08006fed
 8006f54:	08006df7 	.word	0x08006df7
 8006f58:	08006df7 	.word	0x08006df7
 8006f5c:	08006df7 	.word	0x08006df7
 8006f60:	08006ff3 	.word	0x08006ff3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f68:	d012      	beq.n	8006f90 <UART_SetConfig+0x220>
 8006f6a:	e744      	b.n	8006df6 <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f6c:	f7fd fe2a 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
        break;
 8006f70:	e754      	b.n	8006e1c <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f72:	4b2b      	ldr	r3, [pc, #172]	; (8007020 <UART_SetConfig+0x2b0>)
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d030      	beq.n	8006fe2 <UART_SetConfig+0x272>
 8006f80:	d803      	bhi.n	8006f8a <UART_SetConfig+0x21a>
 8006f82:	b183      	cbz	r3, 8006fa6 <UART_SetConfig+0x236>
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d0cf      	beq.n	8006f28 <UART_SetConfig+0x1b8>
 8006f88:	e735      	b.n	8006df6 <UART_SetConfig+0x86>
 8006f8a:	2b30      	cmp	r3, #48	; 0x30
 8006f8c:	f47f af33 	bne.w	8006df6 <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006f94:	d02d      	beq.n	8006ff2 <UART_SetConfig+0x282>
    switch (clocksource)
 8006f96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006f9a:	e741      	b.n	8006e20 <UART_SetConfig+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9c:	2bc0      	cmp	r3, #192	; 0xc0
 8006f9e:	d0f7      	beq.n	8006f90 <UART_SetConfig+0x220>
 8006fa0:	e729      	b.n	8006df6 <UART_SetConfig+0x86>
 8006fa2:	4823      	ldr	r0, [pc, #140]	; (8007030 <UART_SetConfig+0x2c0>)
 8006fa4:	e78f      	b.n	8006ec6 <UART_SetConfig+0x156>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006faa:	d1df      	bne.n	8006f6c <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fac:	f7fd fe0a 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f43f af7e 	beq.w	8006eb2 <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fb6:	0043      	lsls	r3, r0, #1
 8006fb8:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fba:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fbe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006fc2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc6:	f1a3 0210 	sub.w	r2, r3, #16
 8006fca:	428a      	cmp	r2, r1
 8006fcc:	f63f af13 	bhi.w	8006df6 <UART_SetConfig+0x86>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fd0:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006fd4:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fd6:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fd8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60cb      	str	r3, [r1, #12]
 8006fe0:	e767      	b.n	8006eb2 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006fe6:	d00a      	beq.n	8006ffe <UART_SetConfig+0x28e>
        pclk = (uint32_t) HSI_VALUE;
 8006fe8:	4811      	ldr	r0, [pc, #68]	; (8007030 <UART_SetConfig+0x2c0>)
 8006fea:	e719      	b.n	8006e20 <UART_SetConfig+0xb0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006fec:	f7fd f9f4 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
        break;
 8006ff0:	e7de      	b.n	8006fb0 <UART_SetConfig+0x240>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ff6:	e7df      	b.n	8006fb8 <UART_SetConfig+0x248>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff8:	f7fd fdf6 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006ffc:	e7d8      	b.n	8006fb0 <UART_SetConfig+0x240>
    switch (clocksource)
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <UART_SetConfig+0x2c4>)
 8007000:	e7da      	b.n	8006fb8 <UART_SetConfig+0x248>
 8007002:	bf00      	nop
 8007004:	efff69f3 	.word	0xefff69f3
 8007008:	40008000 	.word	0x40008000
 800700c:	40013800 	.word	0x40013800
 8007010:	40004400 	.word	0x40004400
 8007014:	40004800 	.word	0x40004800
 8007018:	40004c00 	.word	0x40004c00
 800701c:	40005000 	.word	0x40005000
 8007020:	40021000 	.word	0x40021000
 8007024:	0800a4ac 	.word	0x0800a4ac
 8007028:	000ffcff 	.word	0x000ffcff
 800702c:	0800a4a8 	.word	0x0800a4a8
 8007030:	00f42400 	.word	0x00f42400
 8007034:	01e84800 	.word	0x01e84800

08007038 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007038:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800703a:	071a      	lsls	r2, r3, #28
{
 800703c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800703e:	d506      	bpl.n	800704e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007040:	6801      	ldr	r1, [r0, #0]
 8007042:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007044:	684a      	ldr	r2, [r1, #4]
 8007046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800704a:	4322      	orrs	r2, r4
 800704c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800704e:	07dc      	lsls	r4, r3, #31
 8007050:	d506      	bpl.n	8007060 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007052:	6801      	ldr	r1, [r0, #0]
 8007054:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007056:	684a      	ldr	r2, [r1, #4]
 8007058:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800705c:	4322      	orrs	r2, r4
 800705e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007060:	0799      	lsls	r1, r3, #30
 8007062:	d506      	bpl.n	8007072 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007064:	6801      	ldr	r1, [r0, #0]
 8007066:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007068:	684a      	ldr	r2, [r1, #4]
 800706a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800706e:	4322      	orrs	r2, r4
 8007070:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007072:	075a      	lsls	r2, r3, #29
 8007074:	d506      	bpl.n	8007084 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007076:	6801      	ldr	r1, [r0, #0]
 8007078:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800707a:	684a      	ldr	r2, [r1, #4]
 800707c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007080:	4322      	orrs	r2, r4
 8007082:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007084:	06dc      	lsls	r4, r3, #27
 8007086:	d506      	bpl.n	8007096 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007088:	6801      	ldr	r1, [r0, #0]
 800708a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800708c:	688a      	ldr	r2, [r1, #8]
 800708e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007092:	4322      	orrs	r2, r4
 8007094:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007096:	0699      	lsls	r1, r3, #26
 8007098:	d506      	bpl.n	80070a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800709a:	6801      	ldr	r1, [r0, #0]
 800709c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800709e:	688a      	ldr	r2, [r1, #8]
 80070a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070a4:	4322      	orrs	r2, r4
 80070a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a8:	065a      	lsls	r2, r3, #25
 80070aa:	d509      	bpl.n	80070c0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070ac:	6801      	ldr	r1, [r0, #0]
 80070ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80070b0:	684a      	ldr	r2, [r1, #4]
 80070b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80070b6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070bc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070be:	d00b      	beq.n	80070d8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c0:	061b      	lsls	r3, r3, #24
 80070c2:	d506      	bpl.n	80070d2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070c4:	6802      	ldr	r2, [r0, #0]
 80070c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80070c8:	6853      	ldr	r3, [r2, #4]
 80070ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80070ce:	430b      	orrs	r3, r1
 80070d0:	6053      	str	r3, [r2, #4]
}
 80070d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070d6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070d8:	684a      	ldr	r2, [r1, #4]
 80070da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80070dc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80070e0:	4322      	orrs	r2, r4
 80070e2:	604a      	str	r2, [r1, #4]
 80070e4:	e7ec      	b.n	80070c0 <UART_AdvFeatureConfig+0x88>
 80070e6:	bf00      	nop

080070e8 <UART_CheckIdleState>:
{
 80070e8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ea:	2300      	movs	r3, #0
{
 80070ec:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 80070f2:	f7fb fea7 	bl	8002e44 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	6813      	ldr	r3, [r2, #0]
 80070fa:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 80070fc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070fe:	d40e      	bmi.n	800711e <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007100:	6813      	ldr	r3, [r2, #0]
 8007102:	0759      	lsls	r1, r3, #29
 8007104:	d42f      	bmi.n	8007166 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007108:	2220      	movs	r2, #32
 800710a:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 800710c:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800710e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007112:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007114:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8007116:	2300      	movs	r3, #0
 8007118:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 800711c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711e:	69d3      	ldr	r3, [r2, #28]
 8007120:	0298      	lsls	r0, r3, #10
 8007122:	d4ed      	bmi.n	8007100 <UART_CheckIdleState+0x18>
 8007124:	e00c      	b.n	8007140 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007126:	6819      	ldr	r1, [r3, #0]
 8007128:	0749      	lsls	r1, r1, #29
 800712a:	461a      	mov	r2, r3
 800712c:	d505      	bpl.n	800713a <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800712e:	69d9      	ldr	r1, [r3, #28]
 8007130:	0708      	lsls	r0, r1, #28
 8007132:	d44a      	bmi.n	80071ca <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007134:	69d9      	ldr	r1, [r3, #28]
 8007136:	0509      	lsls	r1, r1, #20
 8007138:	d475      	bmi.n	8007226 <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	0298      	lsls	r0, r3, #10
 800713e:	d4df      	bmi.n	8007100 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007140:	f7fb fe80 	bl	8002e44 <HAL_GetTick>
 8007144:	1b43      	subs	r3, r0, r5
 8007146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	d3eb      	bcc.n	8007126 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	e843 2100 	strex	r1, r2, [r3]
 800715a:	2900      	cmp	r1, #0
 800715c:	d1f7      	bne.n	800714e <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 800715e:	2320      	movs	r3, #32
 8007160:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8007162:	2003      	movs	r0, #3
 8007164:	e7d7      	b.n	8007116 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007166:	69d3      	ldr	r3, [r2, #28]
 8007168:	025b      	lsls	r3, r3, #9
 800716a:	d4cc      	bmi.n	8007106 <UART_CheckIdleState+0x1e>
 800716c:	e00d      	b.n	800718a <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	0750      	lsls	r0, r2, #29
 8007172:	d507      	bpl.n	8007184 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007174:	69da      	ldr	r2, [r3, #28]
 8007176:	0711      	lsls	r1, r2, #28
 8007178:	f100 8083 	bmi.w	8007282 <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800717c:	69da      	ldr	r2, [r3, #28]
 800717e:	0512      	lsls	r2, r2, #20
 8007180:	f100 80ad 	bmi.w	80072de <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	025b      	lsls	r3, r3, #9
 8007188:	d4bd      	bmi.n	8007106 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718a:	f7fb fe5b 	bl	8002e44 <HAL_GetTick>
 800718e:	1b43      	subs	r3, r0, r5
 8007190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	d3ea      	bcc.n	800716e <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800719c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	e843 2100 	strex	r1, r2, [r3]
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d1f7      	bne.n	8007198 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	f103 0208 	add.w	r2, r3, #8
 80071ac:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	f103 0008 	add.w	r0, r3, #8
 80071b8:	e840 2100 	strex	r1, r2, [r0]
 80071bc:	2900      	cmp	r1, #0
 80071be:	d1f3      	bne.n	80071a8 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 80071c0:	2320      	movs	r3, #32
 80071c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 80071c6:	2003      	movs	r0, #3
 80071c8:	e7a5      	b.n	8007116 <UART_CheckIdleState+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ca:	2208      	movs	r2, #8
 80071cc:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	e843 2100 	strex	r1, r2, [r3]
 80071da:	2900      	cmp	r1, #0
 80071dc:	d1f7      	bne.n	80071ce <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	f103 0208 	add.w	r2, r3, #8
 80071e2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	f103 0008 	add.w	r0, r3, #8
 80071ee:	e840 2100 	strex	r1, r2, [r0]
 80071f2:	2900      	cmp	r1, #0
 80071f4:	d1f3      	bne.n	80071de <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80071f8:	2a01      	cmp	r2, #1
 80071fa:	d00b      	beq.n	8007214 <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80071fe:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007200:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007202:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8007206:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007208:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800720a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800720e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_ERROR;
 8007212:	e79c      	b.n	800714e <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007218:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	e843 2100 	strex	r1, r2, [r3]
 8007220:	2900      	cmp	r1, #0
 8007222:	d1f7      	bne.n	8007214 <UART_CheckIdleState+0x12c>
 8007224:	e7ea      	b.n	80071fc <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800722a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007230:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	e843 2100 	strex	r1, r2, [r3]
 8007238:	2900      	cmp	r1, #0
 800723a:	d1f7      	bne.n	800722c <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	f103 0208 	add.w	r2, r3, #8
 8007240:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007244:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	f103 0008 	add.w	r0, r3, #8
 800724c:	e840 2100 	strex	r1, r2, [r0]
 8007250:	2900      	cmp	r1, #0
 8007252:	d1f3      	bne.n	800723c <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007254:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007256:	2a01      	cmp	r2, #1
 8007258:	d00a      	beq.n	8007270 <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800725c:	2120      	movs	r1, #32
 800725e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8007262:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007264:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8007266:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800726a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 800726e:	e76e      	b.n	800714e <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007274:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	e843 2100 	strex	r1, r2, [r3]
 800727c:	2900      	cmp	r1, #0
 800727e:	d1f7      	bne.n	8007270 <UART_CheckIdleState+0x188>
 8007280:	e7eb      	b.n	800725a <UART_CheckIdleState+0x172>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007282:	2208      	movs	r2, #8
 8007284:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800728a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	e843 2100 	strex	r1, r2, [r3]
 8007292:	2900      	cmp	r1, #0
 8007294:	d1f7      	bne.n	8007286 <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	f103 0208 	add.w	r2, r3, #8
 800729a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	f103 0008 	add.w	r0, r3, #8
 80072a6:	e840 2100 	strex	r1, r2, [r0]
 80072aa:	2900      	cmp	r1, #0
 80072ac:	d1f3      	bne.n	8007296 <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80072b0:	2a01      	cmp	r2, #1
 80072b2:	d00b      	beq.n	80072cc <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80072b6:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072b8:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80072ba:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80072be:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c0:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80072c2:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072c6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_ERROR;
 80072ca:	e765      	b.n	8007198 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	e843 2100 	strex	r1, r2, [r3]
 80072d8:	2900      	cmp	r1, #0
 80072da:	d1f7      	bne.n	80072cc <UART_CheckIdleState+0x1e4>
 80072dc:	e7ea      	b.n	80072b4 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	e843 2100 	strex	r1, r2, [r3]
 80072f0:	2900      	cmp	r1, #0
 80072f2:	d1f7      	bne.n	80072e4 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	f103 0208 	add.w	r2, r3, #8
 80072f8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	f103 0008 	add.w	r0, r3, #8
 8007304:	e840 2100 	strex	r1, r2, [r0]
 8007308:	2900      	cmp	r1, #0
 800730a:	d1f3      	bne.n	80072f4 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800730e:	2a01      	cmp	r2, #1
 8007310:	d00a      	beq.n	8007328 <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007312:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007314:	2120      	movs	r1, #32
 8007316:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800731a:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731c:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800731e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007322:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8007326:	e737      	b.n	8007198 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	e843 2100 	strex	r1, r2, [r3]
 8007334:	2900      	cmp	r1, #0
 8007336:	d1f7      	bne.n	8007328 <UART_CheckIdleState+0x240>
 8007338:	e7eb      	b.n	8007312 <UART_CheckIdleState+0x22a>
 800733a:	bf00      	nop

0800733c <HAL_UART_Init>:
  if (huart == NULL)
 800733c:	b370      	cbz	r0, 800739c <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800733e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8007340:	b510      	push	{r4, lr}
 8007342:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007344:	b32b      	cbz	r3, 8007392 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8007346:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007348:	6a61      	ldr	r1, [r4, #36]	; 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 800734a:	2324      	movs	r3, #36	; 0x24
 800734c:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800734e:	6813      	ldr	r3, [r2, #0]
 8007350:	f023 0301 	bic.w	r3, r3, #1
 8007354:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007356:	b9c1      	cbnz	r1, 800738a <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007358:	4620      	mov	r0, r4
 800735a:	f7ff fd09 	bl	8006d70 <UART_SetConfig>
 800735e:	2801      	cmp	r0, #1
 8007360:	d011      	beq.n	8007386 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800736a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007372:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800737a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800737c:	601a      	str	r2, [r3, #0]
}
 800737e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007382:	f7ff beb1 	b.w	80070e8 <UART_CheckIdleState>
}
 8007386:	2001      	movs	r0, #1
 8007388:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800738a:	4620      	mov	r0, r4
 800738c:	f7ff fe54 	bl	8007038 <UART_AdvFeatureConfig>
 8007390:	e7e2      	b.n	8007358 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8007392:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8007396:	f7fb fa41 	bl	800281c <HAL_UART_MspInit>
 800739a:	e7d4      	b.n	8007346 <HAL_UART_Init+0xa>
}
 800739c:	2001      	movs	r0, #1
 800739e:	4770      	bx	lr

080073a0 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d032      	beq.n	800740a <HAL_HalfDuplex_Init+0x6a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80073a4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80073a6:	b510      	push	{r4, lr}
 80073a8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80073aa:	b34b      	cbz	r3, 8007400 <HAL_HalfDuplex_Init+0x60>
  __HAL_UART_DISABLE(huart);
 80073ac:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 80073b0:	2324      	movs	r3, #36	; 0x24
 80073b2:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80073b4:	6813      	ldr	r3, [r2, #0]
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073bc:	b9e1      	cbnz	r1, 80073f8 <HAL_HalfDuplex_Init+0x58>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff fcd6 	bl	8006d70 <UART_SetConfig>
 80073c4:	2801      	cmp	r0, #1
 80073c6:	d015      	beq.n	80073f4 <HAL_HalfDuplex_Init+0x54>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80073d8:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	f042 0208 	orr.w	r2, r2, #8
 80073e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80073e8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80073ea:	601a      	str	r2, [r3, #0]
}
 80073ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80073f0:	f7ff be7a 	b.w	80070e8 <UART_CheckIdleState>
}
 80073f4:	2001      	movs	r0, #1
 80073f6:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80073f8:	4620      	mov	r0, r4
 80073fa:	f7ff fe1d 	bl	8007038 <UART_AdvFeatureConfig>
 80073fe:	e7de      	b.n	80073be <HAL_HalfDuplex_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8007400:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8007404:	f7fb fa0a 	bl	800281c <HAL_UART_MspInit>
 8007408:	e7d0      	b.n	80073ac <HAL_HalfDuplex_Init+0xc>
}
 800740a:	2001      	movs	r0, #1
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop

08007410 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop

08007414 <atoi>:
 8007414:	220a      	movs	r2, #10
 8007416:	2100      	movs	r1, #0
 8007418:	f000 b882 	b.w	8007520 <strtol>

0800741c <_strtol_l.constprop.0>:
 800741c:	2b01      	cmp	r3, #1
 800741e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007422:	d001      	beq.n	8007428 <_strtol_l.constprop.0+0xc>
 8007424:	2b24      	cmp	r3, #36	; 0x24
 8007426:	d906      	bls.n	8007436 <_strtol_l.constprop.0+0x1a>
 8007428:	f000 fe74 	bl	8008114 <__errno>
 800742c:	2316      	movs	r3, #22
 800742e:	6003      	str	r3, [r0, #0]
 8007430:	2000      	movs	r0, #0
 8007432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007436:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800751c <_strtol_l.constprop.0+0x100>
 800743a:	460d      	mov	r5, r1
 800743c:	462e      	mov	r6, r5
 800743e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007442:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007446:	f017 0708 	ands.w	r7, r7, #8
 800744a:	d1f7      	bne.n	800743c <_strtol_l.constprop.0+0x20>
 800744c:	2c2d      	cmp	r4, #45	; 0x2d
 800744e:	d132      	bne.n	80074b6 <_strtol_l.constprop.0+0x9a>
 8007450:	782c      	ldrb	r4, [r5, #0]
 8007452:	2701      	movs	r7, #1
 8007454:	1cb5      	adds	r5, r6, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d05b      	beq.n	8007512 <_strtol_l.constprop.0+0xf6>
 800745a:	2b10      	cmp	r3, #16
 800745c:	d109      	bne.n	8007472 <_strtol_l.constprop.0+0x56>
 800745e:	2c30      	cmp	r4, #48	; 0x30
 8007460:	d107      	bne.n	8007472 <_strtol_l.constprop.0+0x56>
 8007462:	782c      	ldrb	r4, [r5, #0]
 8007464:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007468:	2c58      	cmp	r4, #88	; 0x58
 800746a:	d14d      	bne.n	8007508 <_strtol_l.constprop.0+0xec>
 800746c:	786c      	ldrb	r4, [r5, #1]
 800746e:	2310      	movs	r3, #16
 8007470:	3502      	adds	r5, #2
 8007472:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007476:	f108 38ff 	add.w	r8, r8, #4294967295
 800747a:	f04f 0e00 	mov.w	lr, #0
 800747e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007482:	4676      	mov	r6, lr
 8007484:	fb03 8a19 	mls	sl, r3, r9, r8
 8007488:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800748c:	f1bc 0f09 	cmp.w	ip, #9
 8007490:	d816      	bhi.n	80074c0 <_strtol_l.constprop.0+0xa4>
 8007492:	4664      	mov	r4, ip
 8007494:	42a3      	cmp	r3, r4
 8007496:	dd24      	ble.n	80074e2 <_strtol_l.constprop.0+0xc6>
 8007498:	f1be 3fff 	cmp.w	lr, #4294967295
 800749c:	d008      	beq.n	80074b0 <_strtol_l.constprop.0+0x94>
 800749e:	45b1      	cmp	r9, r6
 80074a0:	d31c      	bcc.n	80074dc <_strtol_l.constprop.0+0xc0>
 80074a2:	d101      	bne.n	80074a8 <_strtol_l.constprop.0+0x8c>
 80074a4:	45a2      	cmp	sl, r4
 80074a6:	db19      	blt.n	80074dc <_strtol_l.constprop.0+0xc0>
 80074a8:	fb06 4603 	mla	r6, r6, r3, r4
 80074ac:	f04f 0e01 	mov.w	lr, #1
 80074b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074b4:	e7e8      	b.n	8007488 <_strtol_l.constprop.0+0x6c>
 80074b6:	2c2b      	cmp	r4, #43	; 0x2b
 80074b8:	bf04      	itt	eq
 80074ba:	782c      	ldrbeq	r4, [r5, #0]
 80074bc:	1cb5      	addeq	r5, r6, #2
 80074be:	e7ca      	b.n	8007456 <_strtol_l.constprop.0+0x3a>
 80074c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80074c4:	f1bc 0f19 	cmp.w	ip, #25
 80074c8:	d801      	bhi.n	80074ce <_strtol_l.constprop.0+0xb2>
 80074ca:	3c37      	subs	r4, #55	; 0x37
 80074cc:	e7e2      	b.n	8007494 <_strtol_l.constprop.0+0x78>
 80074ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80074d2:	f1bc 0f19 	cmp.w	ip, #25
 80074d6:	d804      	bhi.n	80074e2 <_strtol_l.constprop.0+0xc6>
 80074d8:	3c57      	subs	r4, #87	; 0x57
 80074da:	e7db      	b.n	8007494 <_strtol_l.constprop.0+0x78>
 80074dc:	f04f 3eff 	mov.w	lr, #4294967295
 80074e0:	e7e6      	b.n	80074b0 <_strtol_l.constprop.0+0x94>
 80074e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80074e6:	d105      	bne.n	80074f4 <_strtol_l.constprop.0+0xd8>
 80074e8:	2322      	movs	r3, #34	; 0x22
 80074ea:	6003      	str	r3, [r0, #0]
 80074ec:	4646      	mov	r6, r8
 80074ee:	b942      	cbnz	r2, 8007502 <_strtol_l.constprop.0+0xe6>
 80074f0:	4630      	mov	r0, r6
 80074f2:	e79e      	b.n	8007432 <_strtol_l.constprop.0+0x16>
 80074f4:	b107      	cbz	r7, 80074f8 <_strtol_l.constprop.0+0xdc>
 80074f6:	4276      	negs	r6, r6
 80074f8:	2a00      	cmp	r2, #0
 80074fa:	d0f9      	beq.n	80074f0 <_strtol_l.constprop.0+0xd4>
 80074fc:	f1be 0f00 	cmp.w	lr, #0
 8007500:	d000      	beq.n	8007504 <_strtol_l.constprop.0+0xe8>
 8007502:	1e69      	subs	r1, r5, #1
 8007504:	6011      	str	r1, [r2, #0]
 8007506:	e7f3      	b.n	80074f0 <_strtol_l.constprop.0+0xd4>
 8007508:	2430      	movs	r4, #48	; 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1b1      	bne.n	8007472 <_strtol_l.constprop.0+0x56>
 800750e:	2308      	movs	r3, #8
 8007510:	e7af      	b.n	8007472 <_strtol_l.constprop.0+0x56>
 8007512:	2c30      	cmp	r4, #48	; 0x30
 8007514:	d0a5      	beq.n	8007462 <_strtol_l.constprop.0+0x46>
 8007516:	230a      	movs	r3, #10
 8007518:	e7ab      	b.n	8007472 <_strtol_l.constprop.0+0x56>
 800751a:	bf00      	nop
 800751c:	0800a4ba 	.word	0x0800a4ba

08007520 <strtol>:
 8007520:	4613      	mov	r3, r2
 8007522:	460a      	mov	r2, r1
 8007524:	4601      	mov	r1, r0
 8007526:	4802      	ldr	r0, [pc, #8]	; (8007530 <strtol+0x10>)
 8007528:	6800      	ldr	r0, [r0, #0]
 800752a:	f7ff bf77 	b.w	800741c <_strtol_l.constprop.0>
 800752e:	bf00      	nop
 8007530:	20000064 	.word	0x20000064

08007534 <__cvt>:
 8007534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	ec55 4b10 	vmov	r4, r5, d0
 800753c:	2d00      	cmp	r5, #0
 800753e:	460e      	mov	r6, r1
 8007540:	4619      	mov	r1, r3
 8007542:	462b      	mov	r3, r5
 8007544:	bfbb      	ittet	lt
 8007546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800754a:	461d      	movlt	r5, r3
 800754c:	2300      	movge	r3, #0
 800754e:	232d      	movlt	r3, #45	; 0x2d
 8007550:	700b      	strb	r3, [r1, #0]
 8007552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007554:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007558:	4691      	mov	r9, r2
 800755a:	f023 0820 	bic.w	r8, r3, #32
 800755e:	bfbc      	itt	lt
 8007560:	4622      	movlt	r2, r4
 8007562:	4614      	movlt	r4, r2
 8007564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007568:	d005      	beq.n	8007576 <__cvt+0x42>
 800756a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800756e:	d100      	bne.n	8007572 <__cvt+0x3e>
 8007570:	3601      	adds	r6, #1
 8007572:	2102      	movs	r1, #2
 8007574:	e000      	b.n	8007578 <__cvt+0x44>
 8007576:	2103      	movs	r1, #3
 8007578:	ab03      	add	r3, sp, #12
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	ab02      	add	r3, sp, #8
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	ec45 4b10 	vmov	d0, r4, r5
 8007584:	4653      	mov	r3, sl
 8007586:	4632      	mov	r2, r6
 8007588:	f000 fe7a 	bl	8008280 <_dtoa_r>
 800758c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007590:	4607      	mov	r7, r0
 8007592:	d102      	bne.n	800759a <__cvt+0x66>
 8007594:	f019 0f01 	tst.w	r9, #1
 8007598:	d022      	beq.n	80075e0 <__cvt+0xac>
 800759a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800759e:	eb07 0906 	add.w	r9, r7, r6
 80075a2:	d110      	bne.n	80075c6 <__cvt+0x92>
 80075a4:	783b      	ldrb	r3, [r7, #0]
 80075a6:	2b30      	cmp	r3, #48	; 0x30
 80075a8:	d10a      	bne.n	80075c0 <__cvt+0x8c>
 80075aa:	2200      	movs	r2, #0
 80075ac:	2300      	movs	r3, #0
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f9 fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 80075b6:	b918      	cbnz	r0, 80075c0 <__cvt+0x8c>
 80075b8:	f1c6 0601 	rsb	r6, r6, #1
 80075bc:	f8ca 6000 	str.w	r6, [sl]
 80075c0:	f8da 3000 	ldr.w	r3, [sl]
 80075c4:	4499      	add	r9, r3
 80075c6:	2200      	movs	r2, #0
 80075c8:	2300      	movs	r3, #0
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f9 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80075d2:	b108      	cbz	r0, 80075d8 <__cvt+0xa4>
 80075d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80075d8:	2230      	movs	r2, #48	; 0x30
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	454b      	cmp	r3, r9
 80075de:	d307      	bcc.n	80075f0 <__cvt+0xbc>
 80075e0:	9b03      	ldr	r3, [sp, #12]
 80075e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075e4:	1bdb      	subs	r3, r3, r7
 80075e6:	4638      	mov	r0, r7
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	b004      	add	sp, #16
 80075ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f0:	1c59      	adds	r1, r3, #1
 80075f2:	9103      	str	r1, [sp, #12]
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	e7f0      	b.n	80075da <__cvt+0xa6>

080075f8 <__exponent>:
 80075f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075fa:	4603      	mov	r3, r0
 80075fc:	2900      	cmp	r1, #0
 80075fe:	bfb8      	it	lt
 8007600:	4249      	neglt	r1, r1
 8007602:	f803 2b02 	strb.w	r2, [r3], #2
 8007606:	bfb4      	ite	lt
 8007608:	222d      	movlt	r2, #45	; 0x2d
 800760a:	222b      	movge	r2, #43	; 0x2b
 800760c:	2909      	cmp	r1, #9
 800760e:	7042      	strb	r2, [r0, #1]
 8007610:	dd2a      	ble.n	8007668 <__exponent+0x70>
 8007612:	f10d 0207 	add.w	r2, sp, #7
 8007616:	4617      	mov	r7, r2
 8007618:	260a      	movs	r6, #10
 800761a:	4694      	mov	ip, r2
 800761c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007620:	fb06 1415 	mls	r4, r6, r5, r1
 8007624:	3430      	adds	r4, #48	; 0x30
 8007626:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800762a:	460c      	mov	r4, r1
 800762c:	2c63      	cmp	r4, #99	; 0x63
 800762e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007632:	4629      	mov	r1, r5
 8007634:	dcf1      	bgt.n	800761a <__exponent+0x22>
 8007636:	3130      	adds	r1, #48	; 0x30
 8007638:	f1ac 0402 	sub.w	r4, ip, #2
 800763c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007640:	1c41      	adds	r1, r0, #1
 8007642:	4622      	mov	r2, r4
 8007644:	42ba      	cmp	r2, r7
 8007646:	d30a      	bcc.n	800765e <__exponent+0x66>
 8007648:	f10d 0209 	add.w	r2, sp, #9
 800764c:	eba2 020c 	sub.w	r2, r2, ip
 8007650:	42bc      	cmp	r4, r7
 8007652:	bf88      	it	hi
 8007654:	2200      	movhi	r2, #0
 8007656:	4413      	add	r3, r2
 8007658:	1a18      	subs	r0, r3, r0
 800765a:	b003      	add	sp, #12
 800765c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800765e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007662:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007666:	e7ed      	b.n	8007644 <__exponent+0x4c>
 8007668:	2330      	movs	r3, #48	; 0x30
 800766a:	3130      	adds	r1, #48	; 0x30
 800766c:	7083      	strb	r3, [r0, #2]
 800766e:	70c1      	strb	r1, [r0, #3]
 8007670:	1d03      	adds	r3, r0, #4
 8007672:	e7f1      	b.n	8007658 <__exponent+0x60>

08007674 <_printf_float>:
 8007674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	ed2d 8b02 	vpush	{d8}
 800767c:	b08d      	sub	sp, #52	; 0x34
 800767e:	460c      	mov	r4, r1
 8007680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007684:	4616      	mov	r6, r2
 8007686:	461f      	mov	r7, r3
 8007688:	4605      	mov	r5, r0
 800768a:	f000 fcf9 	bl	8008080 <_localeconv_r>
 800768e:	f8d0 a000 	ldr.w	sl, [r0]
 8007692:	4650      	mov	r0, sl
 8007694:	f7f8 fdec 	bl	8000270 <strlen>
 8007698:	2300      	movs	r3, #0
 800769a:	930a      	str	r3, [sp, #40]	; 0x28
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	9305      	str	r3, [sp, #20]
 80076a0:	f8d8 3000 	ldr.w	r3, [r8]
 80076a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076a8:	3307      	adds	r3, #7
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	f103 0208 	add.w	r2, r3, #8
 80076b2:	f8c8 2000 	str.w	r2, [r8]
 80076b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80076c4:	ee08 0a10 	vmov	s16, r0
 80076c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80076cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076d0:	4b9e      	ldr	r3, [pc, #632]	; (800794c <_printf_float+0x2d8>)
 80076d2:	f04f 32ff 	mov.w	r2, #4294967295
 80076d6:	f7f9 fa29 	bl	8000b2c <__aeabi_dcmpun>
 80076da:	bb88      	cbnz	r0, 8007740 <_printf_float+0xcc>
 80076dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076e0:	4b9a      	ldr	r3, [pc, #616]	; (800794c <_printf_float+0x2d8>)
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	f7f9 fa03 	bl	8000af0 <__aeabi_dcmple>
 80076ea:	bb48      	cbnz	r0, 8007740 <_printf_float+0xcc>
 80076ec:	2200      	movs	r2, #0
 80076ee:	2300      	movs	r3, #0
 80076f0:	4640      	mov	r0, r8
 80076f2:	4649      	mov	r1, r9
 80076f4:	f7f9 f9f2 	bl	8000adc <__aeabi_dcmplt>
 80076f8:	b110      	cbz	r0, 8007700 <_printf_float+0x8c>
 80076fa:	232d      	movs	r3, #45	; 0x2d
 80076fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007700:	4a93      	ldr	r2, [pc, #588]	; (8007950 <_printf_float+0x2dc>)
 8007702:	4b94      	ldr	r3, [pc, #592]	; (8007954 <_printf_float+0x2e0>)
 8007704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007708:	bf94      	ite	ls
 800770a:	4690      	movls	r8, r2
 800770c:	4698      	movhi	r8, r3
 800770e:	2303      	movs	r3, #3
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	9b05      	ldr	r3, [sp, #20]
 8007714:	f023 0304 	bic.w	r3, r3, #4
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	f04f 0900 	mov.w	r9, #0
 800771e:	9700      	str	r7, [sp, #0]
 8007720:	4633      	mov	r3, r6
 8007722:	aa0b      	add	r2, sp, #44	; 0x2c
 8007724:	4621      	mov	r1, r4
 8007726:	4628      	mov	r0, r5
 8007728:	f000 f9da 	bl	8007ae0 <_printf_common>
 800772c:	3001      	adds	r0, #1
 800772e:	f040 8090 	bne.w	8007852 <_printf_float+0x1de>
 8007732:	f04f 30ff 	mov.w	r0, #4294967295
 8007736:	b00d      	add	sp, #52	; 0x34
 8007738:	ecbd 8b02 	vpop	{d8}
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	4642      	mov	r2, r8
 8007742:	464b      	mov	r3, r9
 8007744:	4640      	mov	r0, r8
 8007746:	4649      	mov	r1, r9
 8007748:	f7f9 f9f0 	bl	8000b2c <__aeabi_dcmpun>
 800774c:	b140      	cbz	r0, 8007760 <_printf_float+0xec>
 800774e:	464b      	mov	r3, r9
 8007750:	2b00      	cmp	r3, #0
 8007752:	bfbc      	itt	lt
 8007754:	232d      	movlt	r3, #45	; 0x2d
 8007756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800775a:	4a7f      	ldr	r2, [pc, #508]	; (8007958 <_printf_float+0x2e4>)
 800775c:	4b7f      	ldr	r3, [pc, #508]	; (800795c <_printf_float+0x2e8>)
 800775e:	e7d1      	b.n	8007704 <_printf_float+0x90>
 8007760:	6863      	ldr	r3, [r4, #4]
 8007762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007766:	9206      	str	r2, [sp, #24]
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	d13f      	bne.n	80077ec <_printf_float+0x178>
 800776c:	2306      	movs	r3, #6
 800776e:	6063      	str	r3, [r4, #4]
 8007770:	9b05      	ldr	r3, [sp, #20]
 8007772:	6861      	ldr	r1, [r4, #4]
 8007774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007778:	2300      	movs	r3, #0
 800777a:	9303      	str	r3, [sp, #12]
 800777c:	ab0a      	add	r3, sp, #40	; 0x28
 800777e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007782:	ab09      	add	r3, sp, #36	; 0x24
 8007784:	ec49 8b10 	vmov	d0, r8, r9
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	6022      	str	r2, [r4, #0]
 800778c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007790:	4628      	mov	r0, r5
 8007792:	f7ff fecf 	bl	8007534 <__cvt>
 8007796:	9b06      	ldr	r3, [sp, #24]
 8007798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800779a:	2b47      	cmp	r3, #71	; 0x47
 800779c:	4680      	mov	r8, r0
 800779e:	d108      	bne.n	80077b2 <_printf_float+0x13e>
 80077a0:	1cc8      	adds	r0, r1, #3
 80077a2:	db02      	blt.n	80077aa <_printf_float+0x136>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	4299      	cmp	r1, r3
 80077a8:	dd41      	ble.n	800782e <_printf_float+0x1ba>
 80077aa:	f1ab 0302 	sub.w	r3, fp, #2
 80077ae:	fa5f fb83 	uxtb.w	fp, r3
 80077b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077b6:	d820      	bhi.n	80077fa <_printf_float+0x186>
 80077b8:	3901      	subs	r1, #1
 80077ba:	465a      	mov	r2, fp
 80077bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077c0:	9109      	str	r1, [sp, #36]	; 0x24
 80077c2:	f7ff ff19 	bl	80075f8 <__exponent>
 80077c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077c8:	1813      	adds	r3, r2, r0
 80077ca:	2a01      	cmp	r2, #1
 80077cc:	4681      	mov	r9, r0
 80077ce:	6123      	str	r3, [r4, #16]
 80077d0:	dc02      	bgt.n	80077d8 <_printf_float+0x164>
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	07d2      	lsls	r2, r2, #31
 80077d6:	d501      	bpl.n	80077dc <_printf_float+0x168>
 80077d8:	3301      	adds	r3, #1
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d09c      	beq.n	800771e <_printf_float+0xaa>
 80077e4:	232d      	movs	r3, #45	; 0x2d
 80077e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ea:	e798      	b.n	800771e <_printf_float+0xaa>
 80077ec:	9a06      	ldr	r2, [sp, #24]
 80077ee:	2a47      	cmp	r2, #71	; 0x47
 80077f0:	d1be      	bne.n	8007770 <_printf_float+0xfc>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1bc      	bne.n	8007770 <_printf_float+0xfc>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e7b9      	b.n	800776e <_printf_float+0xfa>
 80077fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077fe:	d118      	bne.n	8007832 <_printf_float+0x1be>
 8007800:	2900      	cmp	r1, #0
 8007802:	6863      	ldr	r3, [r4, #4]
 8007804:	dd0b      	ble.n	800781e <_printf_float+0x1aa>
 8007806:	6121      	str	r1, [r4, #16]
 8007808:	b913      	cbnz	r3, 8007810 <_printf_float+0x19c>
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	07d0      	lsls	r0, r2, #31
 800780e:	d502      	bpl.n	8007816 <_printf_float+0x1a2>
 8007810:	3301      	adds	r3, #1
 8007812:	440b      	add	r3, r1
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	65a1      	str	r1, [r4, #88]	; 0x58
 8007818:	f04f 0900 	mov.w	r9, #0
 800781c:	e7de      	b.n	80077dc <_printf_float+0x168>
 800781e:	b913      	cbnz	r3, 8007826 <_printf_float+0x1b2>
 8007820:	6822      	ldr	r2, [r4, #0]
 8007822:	07d2      	lsls	r2, r2, #31
 8007824:	d501      	bpl.n	800782a <_printf_float+0x1b6>
 8007826:	3302      	adds	r3, #2
 8007828:	e7f4      	b.n	8007814 <_printf_float+0x1a0>
 800782a:	2301      	movs	r3, #1
 800782c:	e7f2      	b.n	8007814 <_printf_float+0x1a0>
 800782e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007834:	4299      	cmp	r1, r3
 8007836:	db05      	blt.n	8007844 <_printf_float+0x1d0>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	6121      	str	r1, [r4, #16]
 800783c:	07d8      	lsls	r0, r3, #31
 800783e:	d5ea      	bpl.n	8007816 <_printf_float+0x1a2>
 8007840:	1c4b      	adds	r3, r1, #1
 8007842:	e7e7      	b.n	8007814 <_printf_float+0x1a0>
 8007844:	2900      	cmp	r1, #0
 8007846:	bfd4      	ite	le
 8007848:	f1c1 0202 	rsble	r2, r1, #2
 800784c:	2201      	movgt	r2, #1
 800784e:	4413      	add	r3, r2
 8007850:	e7e0      	b.n	8007814 <_printf_float+0x1a0>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	055a      	lsls	r2, r3, #21
 8007856:	d407      	bmi.n	8007868 <_printf_float+0x1f4>
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	4642      	mov	r2, r8
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	d12c      	bne.n	80078c0 <_printf_float+0x24c>
 8007866:	e764      	b.n	8007732 <_printf_float+0xbe>
 8007868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800786c:	f240 80e0 	bls.w	8007a30 <_printf_float+0x3bc>
 8007870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007874:	2200      	movs	r2, #0
 8007876:	2300      	movs	r3, #0
 8007878:	f7f9 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800787c:	2800      	cmp	r0, #0
 800787e:	d034      	beq.n	80078ea <_printf_float+0x276>
 8007880:	4a37      	ldr	r2, [pc, #220]	; (8007960 <_printf_float+0x2ec>)
 8007882:	2301      	movs	r3, #1
 8007884:	4631      	mov	r1, r6
 8007886:	4628      	mov	r0, r5
 8007888:	47b8      	blx	r7
 800788a:	3001      	adds	r0, #1
 800788c:	f43f af51 	beq.w	8007732 <_printf_float+0xbe>
 8007890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007894:	429a      	cmp	r2, r3
 8007896:	db02      	blt.n	800789e <_printf_float+0x22a>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	07d8      	lsls	r0, r3, #31
 800789c:	d510      	bpl.n	80078c0 <_printf_float+0x24c>
 800789e:	ee18 3a10 	vmov	r3, s16
 80078a2:	4652      	mov	r2, sl
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f af41 	beq.w	8007732 <_printf_float+0xbe>
 80078b0:	f04f 0800 	mov.w	r8, #0
 80078b4:	f104 091a 	add.w	r9, r4, #26
 80078b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ba:	3b01      	subs	r3, #1
 80078bc:	4543      	cmp	r3, r8
 80078be:	dc09      	bgt.n	80078d4 <_printf_float+0x260>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	079b      	lsls	r3, r3, #30
 80078c4:	f100 8107 	bmi.w	8007ad6 <_printf_float+0x462>
 80078c8:	68e0      	ldr	r0, [r4, #12]
 80078ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078cc:	4298      	cmp	r0, r3
 80078ce:	bfb8      	it	lt
 80078d0:	4618      	movlt	r0, r3
 80078d2:	e730      	b.n	8007736 <_printf_float+0xc2>
 80078d4:	2301      	movs	r3, #1
 80078d6:	464a      	mov	r2, r9
 80078d8:	4631      	mov	r1, r6
 80078da:	4628      	mov	r0, r5
 80078dc:	47b8      	blx	r7
 80078de:	3001      	adds	r0, #1
 80078e0:	f43f af27 	beq.w	8007732 <_printf_float+0xbe>
 80078e4:	f108 0801 	add.w	r8, r8, #1
 80078e8:	e7e6      	b.n	80078b8 <_printf_float+0x244>
 80078ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dc39      	bgt.n	8007964 <_printf_float+0x2f0>
 80078f0:	4a1b      	ldr	r2, [pc, #108]	; (8007960 <_printf_float+0x2ec>)
 80078f2:	2301      	movs	r3, #1
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f af19 	beq.w	8007732 <_printf_float+0xbe>
 8007900:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007904:	4313      	orrs	r3, r2
 8007906:	d102      	bne.n	800790e <_printf_float+0x29a>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	07d9      	lsls	r1, r3, #31
 800790c:	d5d8      	bpl.n	80078c0 <_printf_float+0x24c>
 800790e:	ee18 3a10 	vmov	r3, s16
 8007912:	4652      	mov	r2, sl
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f af09 	beq.w	8007732 <_printf_float+0xbe>
 8007920:	f04f 0900 	mov.w	r9, #0
 8007924:	f104 0a1a 	add.w	sl, r4, #26
 8007928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792a:	425b      	negs	r3, r3
 800792c:	454b      	cmp	r3, r9
 800792e:	dc01      	bgt.n	8007934 <_printf_float+0x2c0>
 8007930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007932:	e792      	b.n	800785a <_printf_float+0x1e6>
 8007934:	2301      	movs	r3, #1
 8007936:	4652      	mov	r2, sl
 8007938:	4631      	mov	r1, r6
 800793a:	4628      	mov	r0, r5
 800793c:	47b8      	blx	r7
 800793e:	3001      	adds	r0, #1
 8007940:	f43f aef7 	beq.w	8007732 <_printf_float+0xbe>
 8007944:	f109 0901 	add.w	r9, r9, #1
 8007948:	e7ee      	b.n	8007928 <_printf_float+0x2b4>
 800794a:	bf00      	nop
 800794c:	7fefffff 	.word	0x7fefffff
 8007950:	0800a5ba 	.word	0x0800a5ba
 8007954:	0800a5be 	.word	0x0800a5be
 8007958:	0800a5c2 	.word	0x0800a5c2
 800795c:	0800a5c6 	.word	0x0800a5c6
 8007960:	0800a5ca 	.word	0x0800a5ca
 8007964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007968:	429a      	cmp	r2, r3
 800796a:	bfa8      	it	ge
 800796c:	461a      	movge	r2, r3
 800796e:	2a00      	cmp	r2, #0
 8007970:	4691      	mov	r9, r2
 8007972:	dc37      	bgt.n	80079e4 <_printf_float+0x370>
 8007974:	f04f 0b00 	mov.w	fp, #0
 8007978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800797c:	f104 021a 	add.w	r2, r4, #26
 8007980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007982:	9305      	str	r3, [sp, #20]
 8007984:	eba3 0309 	sub.w	r3, r3, r9
 8007988:	455b      	cmp	r3, fp
 800798a:	dc33      	bgt.n	80079f4 <_printf_float+0x380>
 800798c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007990:	429a      	cmp	r2, r3
 8007992:	db3b      	blt.n	8007a0c <_printf_float+0x398>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	07da      	lsls	r2, r3, #31
 8007998:	d438      	bmi.n	8007a0c <_printf_float+0x398>
 800799a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800799e:	eba2 0903 	sub.w	r9, r2, r3
 80079a2:	9b05      	ldr	r3, [sp, #20]
 80079a4:	1ad2      	subs	r2, r2, r3
 80079a6:	4591      	cmp	r9, r2
 80079a8:	bfa8      	it	ge
 80079aa:	4691      	movge	r9, r2
 80079ac:	f1b9 0f00 	cmp.w	r9, #0
 80079b0:	dc35      	bgt.n	8007a1e <_printf_float+0x3aa>
 80079b2:	f04f 0800 	mov.w	r8, #0
 80079b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079ba:	f104 0a1a 	add.w	sl, r4, #26
 80079be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	eba3 0309 	sub.w	r3, r3, r9
 80079c8:	4543      	cmp	r3, r8
 80079ca:	f77f af79 	ble.w	80078c0 <_printf_float+0x24c>
 80079ce:	2301      	movs	r3, #1
 80079d0:	4652      	mov	r2, sl
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f aeaa 	beq.w	8007732 <_printf_float+0xbe>
 80079de:	f108 0801 	add.w	r8, r8, #1
 80079e2:	e7ec      	b.n	80079be <_printf_float+0x34a>
 80079e4:	4613      	mov	r3, r2
 80079e6:	4631      	mov	r1, r6
 80079e8:	4642      	mov	r2, r8
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	d1c0      	bne.n	8007974 <_printf_float+0x300>
 80079f2:	e69e      	b.n	8007732 <_printf_float+0xbe>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	9205      	str	r2, [sp, #20]
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f ae97 	beq.w	8007732 <_printf_float+0xbe>
 8007a04:	9a05      	ldr	r2, [sp, #20]
 8007a06:	f10b 0b01 	add.w	fp, fp, #1
 8007a0a:	e7b9      	b.n	8007980 <_printf_float+0x30c>
 8007a0c:	ee18 3a10 	vmov	r3, s16
 8007a10:	4652      	mov	r2, sl
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d1be      	bne.n	800799a <_printf_float+0x326>
 8007a1c:	e689      	b.n	8007732 <_printf_float+0xbe>
 8007a1e:	9a05      	ldr	r2, [sp, #20]
 8007a20:	464b      	mov	r3, r9
 8007a22:	4442      	add	r2, r8
 8007a24:	4631      	mov	r1, r6
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b8      	blx	r7
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d1c1      	bne.n	80079b2 <_printf_float+0x33e>
 8007a2e:	e680      	b.n	8007732 <_printf_float+0xbe>
 8007a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a32:	2a01      	cmp	r2, #1
 8007a34:	dc01      	bgt.n	8007a3a <_printf_float+0x3c6>
 8007a36:	07db      	lsls	r3, r3, #31
 8007a38:	d53a      	bpl.n	8007ab0 <_printf_float+0x43c>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	f43f ae74 	beq.w	8007732 <_printf_float+0xbe>
 8007a4a:	ee18 3a10 	vmov	r3, s16
 8007a4e:	4652      	mov	r2, sl
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	f43f ae6b 	beq.w	8007732 <_printf_float+0xbe>
 8007a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a60:	2200      	movs	r2, #0
 8007a62:	2300      	movs	r3, #0
 8007a64:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007a68:	f7f9 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a6c:	b9d8      	cbnz	r0, 8007aa6 <_printf_float+0x432>
 8007a6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a72:	f108 0201 	add.w	r2, r8, #1
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d10e      	bne.n	8007a9e <_printf_float+0x42a>
 8007a80:	e657      	b.n	8007732 <_printf_float+0xbe>
 8007a82:	2301      	movs	r3, #1
 8007a84:	4652      	mov	r2, sl
 8007a86:	4631      	mov	r1, r6
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b8      	blx	r7
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	f43f ae50 	beq.w	8007732 <_printf_float+0xbe>
 8007a92:	f108 0801 	add.w	r8, r8, #1
 8007a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	4543      	cmp	r3, r8
 8007a9c:	dcf1      	bgt.n	8007a82 <_printf_float+0x40e>
 8007a9e:	464b      	mov	r3, r9
 8007aa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007aa4:	e6da      	b.n	800785c <_printf_float+0x1e8>
 8007aa6:	f04f 0800 	mov.w	r8, #0
 8007aaa:	f104 0a1a 	add.w	sl, r4, #26
 8007aae:	e7f2      	b.n	8007a96 <_printf_float+0x422>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4642      	mov	r2, r8
 8007ab4:	e7df      	b.n	8007a76 <_printf_float+0x402>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	464a      	mov	r2, r9
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f43f ae36 	beq.w	8007732 <_printf_float+0xbe>
 8007ac6:	f108 0801 	add.w	r8, r8, #1
 8007aca:	68e3      	ldr	r3, [r4, #12]
 8007acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ace:	1a5b      	subs	r3, r3, r1
 8007ad0:	4543      	cmp	r3, r8
 8007ad2:	dcf0      	bgt.n	8007ab6 <_printf_float+0x442>
 8007ad4:	e6f8      	b.n	80078c8 <_printf_float+0x254>
 8007ad6:	f04f 0800 	mov.w	r8, #0
 8007ada:	f104 0919 	add.w	r9, r4, #25
 8007ade:	e7f4      	b.n	8007aca <_printf_float+0x456>

08007ae0 <_printf_common>:
 8007ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	4616      	mov	r6, r2
 8007ae6:	4699      	mov	r9, r3
 8007ae8:	688a      	ldr	r2, [r1, #8]
 8007aea:	690b      	ldr	r3, [r1, #16]
 8007aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007af0:	4293      	cmp	r3, r2
 8007af2:	bfb8      	it	lt
 8007af4:	4613      	movlt	r3, r2
 8007af6:	6033      	str	r3, [r6, #0]
 8007af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007afc:	4607      	mov	r7, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	b10a      	cbz	r2, 8007b06 <_printf_common+0x26>
 8007b02:	3301      	adds	r3, #1
 8007b04:	6033      	str	r3, [r6, #0]
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	0699      	lsls	r1, r3, #26
 8007b0a:	bf42      	ittt	mi
 8007b0c:	6833      	ldrmi	r3, [r6, #0]
 8007b0e:	3302      	addmi	r3, #2
 8007b10:	6033      	strmi	r3, [r6, #0]
 8007b12:	6825      	ldr	r5, [r4, #0]
 8007b14:	f015 0506 	ands.w	r5, r5, #6
 8007b18:	d106      	bne.n	8007b28 <_printf_common+0x48>
 8007b1a:	f104 0a19 	add.w	sl, r4, #25
 8007b1e:	68e3      	ldr	r3, [r4, #12]
 8007b20:	6832      	ldr	r2, [r6, #0]
 8007b22:	1a9b      	subs	r3, r3, r2
 8007b24:	42ab      	cmp	r3, r5
 8007b26:	dc26      	bgt.n	8007b76 <_printf_common+0x96>
 8007b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b2c:	1e13      	subs	r3, r2, #0
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	bf18      	it	ne
 8007b32:	2301      	movne	r3, #1
 8007b34:	0692      	lsls	r2, r2, #26
 8007b36:	d42b      	bmi.n	8007b90 <_printf_common+0xb0>
 8007b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	4638      	mov	r0, r7
 8007b40:	47c0      	blx	r8
 8007b42:	3001      	adds	r0, #1
 8007b44:	d01e      	beq.n	8007b84 <_printf_common+0xa4>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	6922      	ldr	r2, [r4, #16]
 8007b4a:	f003 0306 	and.w	r3, r3, #6
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	bf02      	ittt	eq
 8007b52:	68e5      	ldreq	r5, [r4, #12]
 8007b54:	6833      	ldreq	r3, [r6, #0]
 8007b56:	1aed      	subeq	r5, r5, r3
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	bf0c      	ite	eq
 8007b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b60:	2500      	movne	r5, #0
 8007b62:	4293      	cmp	r3, r2
 8007b64:	bfc4      	itt	gt
 8007b66:	1a9b      	subgt	r3, r3, r2
 8007b68:	18ed      	addgt	r5, r5, r3
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	341a      	adds	r4, #26
 8007b6e:	42b5      	cmp	r5, r6
 8007b70:	d11a      	bne.n	8007ba8 <_printf_common+0xc8>
 8007b72:	2000      	movs	r0, #0
 8007b74:	e008      	b.n	8007b88 <_printf_common+0xa8>
 8007b76:	2301      	movs	r3, #1
 8007b78:	4652      	mov	r2, sl
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	47c0      	blx	r8
 8007b80:	3001      	adds	r0, #1
 8007b82:	d103      	bne.n	8007b8c <_printf_common+0xac>
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8c:	3501      	adds	r5, #1
 8007b8e:	e7c6      	b.n	8007b1e <_printf_common+0x3e>
 8007b90:	18e1      	adds	r1, r4, r3
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	2030      	movs	r0, #48	; 0x30
 8007b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b9a:	4422      	add	r2, r4
 8007b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	e7c7      	b.n	8007b38 <_printf_common+0x58>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	4622      	mov	r2, r4
 8007bac:	4649      	mov	r1, r9
 8007bae:	4638      	mov	r0, r7
 8007bb0:	47c0      	blx	r8
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d0e6      	beq.n	8007b84 <_printf_common+0xa4>
 8007bb6:	3601      	adds	r6, #1
 8007bb8:	e7d9      	b.n	8007b6e <_printf_common+0x8e>
	...

08007bbc <_printf_i>:
 8007bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc0:	7e0f      	ldrb	r7, [r1, #24]
 8007bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bc4:	2f78      	cmp	r7, #120	; 0x78
 8007bc6:	4691      	mov	r9, r2
 8007bc8:	4680      	mov	r8, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	469a      	mov	sl, r3
 8007bce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bd2:	d807      	bhi.n	8007be4 <_printf_i+0x28>
 8007bd4:	2f62      	cmp	r7, #98	; 0x62
 8007bd6:	d80a      	bhi.n	8007bee <_printf_i+0x32>
 8007bd8:	2f00      	cmp	r7, #0
 8007bda:	f000 80d4 	beq.w	8007d86 <_printf_i+0x1ca>
 8007bde:	2f58      	cmp	r7, #88	; 0x58
 8007be0:	f000 80c0 	beq.w	8007d64 <_printf_i+0x1a8>
 8007be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bec:	e03a      	b.n	8007c64 <_printf_i+0xa8>
 8007bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bf2:	2b15      	cmp	r3, #21
 8007bf4:	d8f6      	bhi.n	8007be4 <_printf_i+0x28>
 8007bf6:	a101      	add	r1, pc, #4	; (adr r1, 8007bfc <_printf_i+0x40>)
 8007bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bfc:	08007c55 	.word	0x08007c55
 8007c00:	08007c69 	.word	0x08007c69
 8007c04:	08007be5 	.word	0x08007be5
 8007c08:	08007be5 	.word	0x08007be5
 8007c0c:	08007be5 	.word	0x08007be5
 8007c10:	08007be5 	.word	0x08007be5
 8007c14:	08007c69 	.word	0x08007c69
 8007c18:	08007be5 	.word	0x08007be5
 8007c1c:	08007be5 	.word	0x08007be5
 8007c20:	08007be5 	.word	0x08007be5
 8007c24:	08007be5 	.word	0x08007be5
 8007c28:	08007d6d 	.word	0x08007d6d
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007d27 	.word	0x08007d27
 8007c34:	08007be5 	.word	0x08007be5
 8007c38:	08007be5 	.word	0x08007be5
 8007c3c:	08007d8f 	.word	0x08007d8f
 8007c40:	08007be5 	.word	0x08007be5
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007be5 	.word	0x08007be5
 8007c4c:	08007be5 	.word	0x08007be5
 8007c50:	08007d2f 	.word	0x08007d2f
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	1d1a      	adds	r2, r3, #4
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	602a      	str	r2, [r5, #0]
 8007c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c64:	2301      	movs	r3, #1
 8007c66:	e09f      	b.n	8007da8 <_printf_i+0x1ec>
 8007c68:	6820      	ldr	r0, [r4, #0]
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	0607      	lsls	r7, r0, #24
 8007c6e:	f103 0104 	add.w	r1, r3, #4
 8007c72:	6029      	str	r1, [r5, #0]
 8007c74:	d501      	bpl.n	8007c7a <_printf_i+0xbe>
 8007c76:	681e      	ldr	r6, [r3, #0]
 8007c78:	e003      	b.n	8007c82 <_printf_i+0xc6>
 8007c7a:	0646      	lsls	r6, r0, #25
 8007c7c:	d5fb      	bpl.n	8007c76 <_printf_i+0xba>
 8007c7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c82:	2e00      	cmp	r6, #0
 8007c84:	da03      	bge.n	8007c8e <_printf_i+0xd2>
 8007c86:	232d      	movs	r3, #45	; 0x2d
 8007c88:	4276      	negs	r6, r6
 8007c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c8e:	485a      	ldr	r0, [pc, #360]	; (8007df8 <_printf_i+0x23c>)
 8007c90:	230a      	movs	r3, #10
 8007c92:	e012      	b.n	8007cba <_printf_i+0xfe>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	6820      	ldr	r0, [r4, #0]
 8007c98:	1d19      	adds	r1, r3, #4
 8007c9a:	6029      	str	r1, [r5, #0]
 8007c9c:	0605      	lsls	r5, r0, #24
 8007c9e:	d501      	bpl.n	8007ca4 <_printf_i+0xe8>
 8007ca0:	681e      	ldr	r6, [r3, #0]
 8007ca2:	e002      	b.n	8007caa <_printf_i+0xee>
 8007ca4:	0641      	lsls	r1, r0, #25
 8007ca6:	d5fb      	bpl.n	8007ca0 <_printf_i+0xe4>
 8007ca8:	881e      	ldrh	r6, [r3, #0]
 8007caa:	4853      	ldr	r0, [pc, #332]	; (8007df8 <_printf_i+0x23c>)
 8007cac:	2f6f      	cmp	r7, #111	; 0x6f
 8007cae:	bf0c      	ite	eq
 8007cb0:	2308      	moveq	r3, #8
 8007cb2:	230a      	movne	r3, #10
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cba:	6865      	ldr	r5, [r4, #4]
 8007cbc:	60a5      	str	r5, [r4, #8]
 8007cbe:	2d00      	cmp	r5, #0
 8007cc0:	bfa2      	ittt	ge
 8007cc2:	6821      	ldrge	r1, [r4, #0]
 8007cc4:	f021 0104 	bicge.w	r1, r1, #4
 8007cc8:	6021      	strge	r1, [r4, #0]
 8007cca:	b90e      	cbnz	r6, 8007cd0 <_printf_i+0x114>
 8007ccc:	2d00      	cmp	r5, #0
 8007cce:	d04b      	beq.n	8007d68 <_printf_i+0x1ac>
 8007cd0:	4615      	mov	r5, r2
 8007cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8007cda:	5dc7      	ldrb	r7, [r0, r7]
 8007cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ce0:	4637      	mov	r7, r6
 8007ce2:	42bb      	cmp	r3, r7
 8007ce4:	460e      	mov	r6, r1
 8007ce6:	d9f4      	bls.n	8007cd2 <_printf_i+0x116>
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d10b      	bne.n	8007d04 <_printf_i+0x148>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	07de      	lsls	r6, r3, #31
 8007cf0:	d508      	bpl.n	8007d04 <_printf_i+0x148>
 8007cf2:	6923      	ldr	r3, [r4, #16]
 8007cf4:	6861      	ldr	r1, [r4, #4]
 8007cf6:	4299      	cmp	r1, r3
 8007cf8:	bfde      	ittt	le
 8007cfa:	2330      	movle	r3, #48	; 0x30
 8007cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d04:	1b52      	subs	r2, r2, r5
 8007d06:	6122      	str	r2, [r4, #16]
 8007d08:	f8cd a000 	str.w	sl, [sp]
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	aa03      	add	r2, sp, #12
 8007d10:	4621      	mov	r1, r4
 8007d12:	4640      	mov	r0, r8
 8007d14:	f7ff fee4 	bl	8007ae0 <_printf_common>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d14a      	bne.n	8007db2 <_printf_i+0x1f6>
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	b004      	add	sp, #16
 8007d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	f043 0320 	orr.w	r3, r3, #32
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	4833      	ldr	r0, [pc, #204]	; (8007dfc <_printf_i+0x240>)
 8007d30:	2778      	movs	r7, #120	; 0x78
 8007d32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	6829      	ldr	r1, [r5, #0]
 8007d3a:	061f      	lsls	r7, r3, #24
 8007d3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d40:	d402      	bmi.n	8007d48 <_printf_i+0x18c>
 8007d42:	065f      	lsls	r7, r3, #25
 8007d44:	bf48      	it	mi
 8007d46:	b2b6      	uxthmi	r6, r6
 8007d48:	07df      	lsls	r7, r3, #31
 8007d4a:	bf48      	it	mi
 8007d4c:	f043 0320 	orrmi.w	r3, r3, #32
 8007d50:	6029      	str	r1, [r5, #0]
 8007d52:	bf48      	it	mi
 8007d54:	6023      	strmi	r3, [r4, #0]
 8007d56:	b91e      	cbnz	r6, 8007d60 <_printf_i+0x1a4>
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	f023 0320 	bic.w	r3, r3, #32
 8007d5e:	6023      	str	r3, [r4, #0]
 8007d60:	2310      	movs	r3, #16
 8007d62:	e7a7      	b.n	8007cb4 <_printf_i+0xf8>
 8007d64:	4824      	ldr	r0, [pc, #144]	; (8007df8 <_printf_i+0x23c>)
 8007d66:	e7e4      	b.n	8007d32 <_printf_i+0x176>
 8007d68:	4615      	mov	r5, r2
 8007d6a:	e7bd      	b.n	8007ce8 <_printf_i+0x12c>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	6826      	ldr	r6, [r4, #0]
 8007d70:	6961      	ldr	r1, [r4, #20]
 8007d72:	1d18      	adds	r0, r3, #4
 8007d74:	6028      	str	r0, [r5, #0]
 8007d76:	0635      	lsls	r5, r6, #24
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	d501      	bpl.n	8007d80 <_printf_i+0x1c4>
 8007d7c:	6019      	str	r1, [r3, #0]
 8007d7e:	e002      	b.n	8007d86 <_printf_i+0x1ca>
 8007d80:	0670      	lsls	r0, r6, #25
 8007d82:	d5fb      	bpl.n	8007d7c <_printf_i+0x1c0>
 8007d84:	8019      	strh	r1, [r3, #0]
 8007d86:	2300      	movs	r3, #0
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	4615      	mov	r5, r2
 8007d8c:	e7bc      	b.n	8007d08 <_printf_i+0x14c>
 8007d8e:	682b      	ldr	r3, [r5, #0]
 8007d90:	1d1a      	adds	r2, r3, #4
 8007d92:	602a      	str	r2, [r5, #0]
 8007d94:	681d      	ldr	r5, [r3, #0]
 8007d96:	6862      	ldr	r2, [r4, #4]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7f8 fa18 	bl	80001d0 <memchr>
 8007da0:	b108      	cbz	r0, 8007da6 <_printf_i+0x1ea>
 8007da2:	1b40      	subs	r0, r0, r5
 8007da4:	6060      	str	r0, [r4, #4]
 8007da6:	6863      	ldr	r3, [r4, #4]
 8007da8:	6123      	str	r3, [r4, #16]
 8007daa:	2300      	movs	r3, #0
 8007dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db0:	e7aa      	b.n	8007d08 <_printf_i+0x14c>
 8007db2:	6923      	ldr	r3, [r4, #16]
 8007db4:	462a      	mov	r2, r5
 8007db6:	4649      	mov	r1, r9
 8007db8:	4640      	mov	r0, r8
 8007dba:	47d0      	blx	sl
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d0ad      	beq.n	8007d1c <_printf_i+0x160>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	079b      	lsls	r3, r3, #30
 8007dc4:	d413      	bmi.n	8007dee <_printf_i+0x232>
 8007dc6:	68e0      	ldr	r0, [r4, #12]
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	4298      	cmp	r0, r3
 8007dcc:	bfb8      	it	lt
 8007dce:	4618      	movlt	r0, r3
 8007dd0:	e7a6      	b.n	8007d20 <_printf_i+0x164>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4632      	mov	r2, r6
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	47d0      	blx	sl
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d09d      	beq.n	8007d1c <_printf_i+0x160>
 8007de0:	3501      	adds	r5, #1
 8007de2:	68e3      	ldr	r3, [r4, #12]
 8007de4:	9903      	ldr	r1, [sp, #12]
 8007de6:	1a5b      	subs	r3, r3, r1
 8007de8:	42ab      	cmp	r3, r5
 8007dea:	dcf2      	bgt.n	8007dd2 <_printf_i+0x216>
 8007dec:	e7eb      	b.n	8007dc6 <_printf_i+0x20a>
 8007dee:	2500      	movs	r5, #0
 8007df0:	f104 0619 	add.w	r6, r4, #25
 8007df4:	e7f5      	b.n	8007de2 <_printf_i+0x226>
 8007df6:	bf00      	nop
 8007df8:	0800a5cc 	.word	0x0800a5cc
 8007dfc:	0800a5dd 	.word	0x0800a5dd

08007e00 <std>:
 8007e00:	2300      	movs	r3, #0
 8007e02:	b510      	push	{r4, lr}
 8007e04:	4604      	mov	r4, r0
 8007e06:	e9c0 3300 	strd	r3, r3, [r0]
 8007e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e0e:	6083      	str	r3, [r0, #8]
 8007e10:	8181      	strh	r1, [r0, #12]
 8007e12:	6643      	str	r3, [r0, #100]	; 0x64
 8007e14:	81c2      	strh	r2, [r0, #14]
 8007e16:	6183      	str	r3, [r0, #24]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	2208      	movs	r2, #8
 8007e1c:	305c      	adds	r0, #92	; 0x5c
 8007e1e:	f000 f926 	bl	800806e <memset>
 8007e22:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <std+0x58>)
 8007e24:	6263      	str	r3, [r4, #36]	; 0x24
 8007e26:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <std+0x5c>)
 8007e28:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <std+0x60>)
 8007e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <std+0x64>)
 8007e30:	6323      	str	r3, [r4, #48]	; 0x30
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <std+0x68>)
 8007e34:	6224      	str	r4, [r4, #32]
 8007e36:	429c      	cmp	r4, r3
 8007e38:	d006      	beq.n	8007e48 <std+0x48>
 8007e3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007e3e:	4294      	cmp	r4, r2
 8007e40:	d002      	beq.n	8007e48 <std+0x48>
 8007e42:	33d0      	adds	r3, #208	; 0xd0
 8007e44:	429c      	cmp	r4, r3
 8007e46:	d105      	bne.n	8007e54 <std+0x54>
 8007e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e50:	f000 b98a 	b.w	8008168 <__retarget_lock_init_recursive>
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	bf00      	nop
 8007e58:	08007fe9 	.word	0x08007fe9
 8007e5c:	0800800b 	.word	0x0800800b
 8007e60:	08008043 	.word	0x08008043
 8007e64:	08008067 	.word	0x08008067
 8007e68:	20000730 	.word	0x20000730

08007e6c <stdio_exit_handler>:
 8007e6c:	4a02      	ldr	r2, [pc, #8]	; (8007e78 <stdio_exit_handler+0xc>)
 8007e6e:	4903      	ldr	r1, [pc, #12]	; (8007e7c <stdio_exit_handler+0x10>)
 8007e70:	4803      	ldr	r0, [pc, #12]	; (8007e80 <stdio_exit_handler+0x14>)
 8007e72:	f000 b869 	b.w	8007f48 <_fwalk_sglue>
 8007e76:	bf00      	nop
 8007e78:	2000000c 	.word	0x2000000c
 8007e7c:	08009da1 	.word	0x08009da1
 8007e80:	20000018 	.word	0x20000018

08007e84 <cleanup_stdio>:
 8007e84:	6841      	ldr	r1, [r0, #4]
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <cleanup_stdio+0x34>)
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	b510      	push	{r4, lr}
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	d001      	beq.n	8007e94 <cleanup_stdio+0x10>
 8007e90:	f001 ff86 	bl	8009da0 <_fflush_r>
 8007e94:	68a1      	ldr	r1, [r4, #8]
 8007e96:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <cleanup_stdio+0x38>)
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	d002      	beq.n	8007ea2 <cleanup_stdio+0x1e>
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f001 ff7f 	bl	8009da0 <_fflush_r>
 8007ea2:	68e1      	ldr	r1, [r4, #12]
 8007ea4:	4b06      	ldr	r3, [pc, #24]	; (8007ec0 <cleanup_stdio+0x3c>)
 8007ea6:	4299      	cmp	r1, r3
 8007ea8:	d004      	beq.n	8007eb4 <cleanup_stdio+0x30>
 8007eaa:	4620      	mov	r0, r4
 8007eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb0:	f001 bf76 	b.w	8009da0 <_fflush_r>
 8007eb4:	bd10      	pop	{r4, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000730 	.word	0x20000730
 8007ebc:	20000798 	.word	0x20000798
 8007ec0:	20000800 	.word	0x20000800

08007ec4 <global_stdio_init.part.0>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <global_stdio_init.part.0+0x30>)
 8007ec8:	4c0b      	ldr	r4, [pc, #44]	; (8007ef8 <global_stdio_init.part.0+0x34>)
 8007eca:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <global_stdio_init.part.0+0x38>)
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2104      	movs	r1, #4
 8007ed4:	f7ff ff94 	bl	8007e00 <std>
 8007ed8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007edc:	2201      	movs	r2, #1
 8007ede:	2109      	movs	r1, #9
 8007ee0:	f7ff ff8e 	bl	8007e00 <std>
 8007ee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ee8:	2202      	movs	r2, #2
 8007eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eee:	2112      	movs	r1, #18
 8007ef0:	f7ff bf86 	b.w	8007e00 <std>
 8007ef4:	20000868 	.word	0x20000868
 8007ef8:	20000730 	.word	0x20000730
 8007efc:	08007e6d 	.word	0x08007e6d

08007f00 <__sfp_lock_acquire>:
 8007f00:	4801      	ldr	r0, [pc, #4]	; (8007f08 <__sfp_lock_acquire+0x8>)
 8007f02:	f000 b932 	b.w	800816a <__retarget_lock_acquire_recursive>
 8007f06:	bf00      	nop
 8007f08:	20000871 	.word	0x20000871

08007f0c <__sfp_lock_release>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	; (8007f14 <__sfp_lock_release+0x8>)
 8007f0e:	f000 b92d 	b.w	800816c <__retarget_lock_release_recursive>
 8007f12:	bf00      	nop
 8007f14:	20000871 	.word	0x20000871

08007f18 <__sinit>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	f7ff fff0 	bl	8007f00 <__sfp_lock_acquire>
 8007f20:	6a23      	ldr	r3, [r4, #32]
 8007f22:	b11b      	cbz	r3, 8007f2c <__sinit+0x14>
 8007f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f28:	f7ff bff0 	b.w	8007f0c <__sfp_lock_release>
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <__sinit+0x28>)
 8007f2e:	6223      	str	r3, [r4, #32]
 8007f30:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <__sinit+0x2c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1f5      	bne.n	8007f24 <__sinit+0xc>
 8007f38:	f7ff ffc4 	bl	8007ec4 <global_stdio_init.part.0>
 8007f3c:	e7f2      	b.n	8007f24 <__sinit+0xc>
 8007f3e:	bf00      	nop
 8007f40:	08007e85 	.word	0x08007e85
 8007f44:	20000868 	.word	0x20000868

08007f48 <_fwalk_sglue>:
 8007f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	4688      	mov	r8, r1
 8007f50:	4614      	mov	r4, r2
 8007f52:	2600      	movs	r6, #0
 8007f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f58:	f1b9 0901 	subs.w	r9, r9, #1
 8007f5c:	d505      	bpl.n	8007f6a <_fwalk_sglue+0x22>
 8007f5e:	6824      	ldr	r4, [r4, #0]
 8007f60:	2c00      	cmp	r4, #0
 8007f62:	d1f7      	bne.n	8007f54 <_fwalk_sglue+0xc>
 8007f64:	4630      	mov	r0, r6
 8007f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d907      	bls.n	8007f80 <_fwalk_sglue+0x38>
 8007f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f74:	3301      	adds	r3, #1
 8007f76:	d003      	beq.n	8007f80 <_fwalk_sglue+0x38>
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	47c0      	blx	r8
 8007f7e:	4306      	orrs	r6, r0
 8007f80:	3568      	adds	r5, #104	; 0x68
 8007f82:	e7e9      	b.n	8007f58 <_fwalk_sglue+0x10>

08007f84 <iprintf>:
 8007f84:	b40f      	push	{r0, r1, r2, r3}
 8007f86:	b507      	push	{r0, r1, r2, lr}
 8007f88:	4906      	ldr	r1, [pc, #24]	; (8007fa4 <iprintf+0x20>)
 8007f8a:	ab04      	add	r3, sp, #16
 8007f8c:	6808      	ldr	r0, [r1, #0]
 8007f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f92:	6881      	ldr	r1, [r0, #8]
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	f001 fd63 	bl	8009a60 <_vfiprintf_r>
 8007f9a:	b003      	add	sp, #12
 8007f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa0:	b004      	add	sp, #16
 8007fa2:	4770      	bx	lr
 8007fa4:	20000064 	.word	0x20000064

08007fa8 <siprintf>:
 8007fa8:	b40e      	push	{r1, r2, r3}
 8007faa:	b500      	push	{lr}
 8007fac:	b09c      	sub	sp, #112	; 0x70
 8007fae:	ab1d      	add	r3, sp, #116	; 0x74
 8007fb0:	9002      	str	r0, [sp, #8]
 8007fb2:	9006      	str	r0, [sp, #24]
 8007fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fb8:	4809      	ldr	r0, [pc, #36]	; (8007fe0 <siprintf+0x38>)
 8007fba:	9107      	str	r1, [sp, #28]
 8007fbc:	9104      	str	r1, [sp, #16]
 8007fbe:	4909      	ldr	r1, [pc, #36]	; (8007fe4 <siprintf+0x3c>)
 8007fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fc4:	9105      	str	r1, [sp, #20]
 8007fc6:	6800      	ldr	r0, [r0, #0]
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	a902      	add	r1, sp, #8
 8007fcc:	f001 fc20 	bl	8009810 <_svfiprintf_r>
 8007fd0:	9b02      	ldr	r3, [sp, #8]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	b01c      	add	sp, #112	; 0x70
 8007fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fdc:	b003      	add	sp, #12
 8007fde:	4770      	bx	lr
 8007fe0:	20000064 	.word	0x20000064
 8007fe4:	ffff0208 	.word	0xffff0208

08007fe8 <__sread>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	460c      	mov	r4, r1
 8007fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff0:	f000 f86c 	bl	80080cc <_read_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	bfab      	itete	ge
 8007ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8007ffc:	181b      	addge	r3, r3, r0
 8007ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008002:	bfac      	ite	ge
 8008004:	6563      	strge	r3, [r4, #84]	; 0x54
 8008006:	81a3      	strhlt	r3, [r4, #12]
 8008008:	bd10      	pop	{r4, pc}

0800800a <__swrite>:
 800800a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	461f      	mov	r7, r3
 8008010:	898b      	ldrh	r3, [r1, #12]
 8008012:	05db      	lsls	r3, r3, #23
 8008014:	4605      	mov	r5, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4616      	mov	r6, r2
 800801a:	d505      	bpl.n	8008028 <__swrite+0x1e>
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	2302      	movs	r3, #2
 8008022:	2200      	movs	r2, #0
 8008024:	f000 f840 	bl	80080a8 <_lseek_r>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800802e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	4628      	mov	r0, r5
 800803a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	f000 b857 	b.w	80080f0 <_write_r>

08008042 <__sseek>:
 8008042:	b510      	push	{r4, lr}
 8008044:	460c      	mov	r4, r1
 8008046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804a:	f000 f82d 	bl	80080a8 <_lseek_r>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	bf15      	itete	ne
 8008054:	6560      	strne	r0, [r4, #84]	; 0x54
 8008056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800805a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800805e:	81a3      	strheq	r3, [r4, #12]
 8008060:	bf18      	it	ne
 8008062:	81a3      	strhne	r3, [r4, #12]
 8008064:	bd10      	pop	{r4, pc}

08008066 <__sclose>:
 8008066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806a:	f000 b80d 	b.w	8008088 <_close_r>

0800806e <memset>:
 800806e:	4402      	add	r2, r0
 8008070:	4603      	mov	r3, r0
 8008072:	4293      	cmp	r3, r2
 8008074:	d100      	bne.n	8008078 <memset+0xa>
 8008076:	4770      	bx	lr
 8008078:	f803 1b01 	strb.w	r1, [r3], #1
 800807c:	e7f9      	b.n	8008072 <memset+0x4>
	...

08008080 <_localeconv_r>:
 8008080:	4800      	ldr	r0, [pc, #0]	; (8008084 <_localeconv_r+0x4>)
 8008082:	4770      	bx	lr
 8008084:	20000158 	.word	0x20000158

08008088 <_close_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d06      	ldr	r5, [pc, #24]	; (80080a4 <_close_r+0x1c>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f7fa f85c 	bl	8002150 <_close>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_close_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_close_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	2000086c 	.word	0x2000086c

080080a8 <_lseek_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d07      	ldr	r5, [pc, #28]	; (80080c8 <_lseek_r+0x20>)
 80080ac:	4604      	mov	r4, r0
 80080ae:	4608      	mov	r0, r1
 80080b0:	4611      	mov	r1, r2
 80080b2:	2200      	movs	r2, #0
 80080b4:	602a      	str	r2, [r5, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f7fa f856 	bl	8002168 <_lseek>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_lseek_r+0x1e>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_lseek_r+0x1e>
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	2000086c 	.word	0x2000086c

080080cc <_read_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_read_r+0x20>)
 80080d0:	4604      	mov	r4, r0
 80080d2:	4608      	mov	r0, r1
 80080d4:	4611      	mov	r1, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	602a      	str	r2, [r5, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	f7fa f81c 	bl	8002118 <_read>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_read_r+0x1e>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_read_r+0x1e>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	2000086c 	.word	0x2000086c

080080f0 <_write_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	; (8008110 <_write_r+0x20>)
 80080f4:	4604      	mov	r4, r0
 80080f6:	4608      	mov	r0, r1
 80080f8:	4611      	mov	r1, r2
 80080fa:	2200      	movs	r2, #0
 80080fc:	602a      	str	r2, [r5, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	f7fa f818 	bl	8002134 <_write>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_write_r+0x1e>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_write_r+0x1e>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	2000086c 	.word	0x2000086c

08008114 <__errno>:
 8008114:	4b01      	ldr	r3, [pc, #4]	; (800811c <__errno+0x8>)
 8008116:	6818      	ldr	r0, [r3, #0]
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000064 	.word	0x20000064

08008120 <__libc_init_array>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	4d0d      	ldr	r5, [pc, #52]	; (8008158 <__libc_init_array+0x38>)
 8008124:	4c0d      	ldr	r4, [pc, #52]	; (800815c <__libc_init_array+0x3c>)
 8008126:	1b64      	subs	r4, r4, r5
 8008128:	10a4      	asrs	r4, r4, #2
 800812a:	2600      	movs	r6, #0
 800812c:	42a6      	cmp	r6, r4
 800812e:	d109      	bne.n	8008144 <__libc_init_array+0x24>
 8008130:	4d0b      	ldr	r5, [pc, #44]	; (8008160 <__libc_init_array+0x40>)
 8008132:	4c0c      	ldr	r4, [pc, #48]	; (8008164 <__libc_init_array+0x44>)
 8008134:	f002 f896 	bl	800a264 <_init>
 8008138:	1b64      	subs	r4, r4, r5
 800813a:	10a4      	asrs	r4, r4, #2
 800813c:	2600      	movs	r6, #0
 800813e:	42a6      	cmp	r6, r4
 8008140:	d105      	bne.n	800814e <__libc_init_array+0x2e>
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	f855 3b04 	ldr.w	r3, [r5], #4
 8008148:	4798      	blx	r3
 800814a:	3601      	adds	r6, #1
 800814c:	e7ee      	b.n	800812c <__libc_init_array+0xc>
 800814e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008152:	4798      	blx	r3
 8008154:	3601      	adds	r6, #1
 8008156:	e7f2      	b.n	800813e <__libc_init_array+0x1e>
 8008158:	0800a834 	.word	0x0800a834
 800815c:	0800a834 	.word	0x0800a834
 8008160:	0800a834 	.word	0x0800a834
 8008164:	0800a838 	.word	0x0800a838

08008168 <__retarget_lock_init_recursive>:
 8008168:	4770      	bx	lr

0800816a <__retarget_lock_acquire_recursive>:
 800816a:	4770      	bx	lr

0800816c <__retarget_lock_release_recursive>:
 800816c:	4770      	bx	lr

0800816e <quorem>:
 800816e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008172:	6903      	ldr	r3, [r0, #16]
 8008174:	690c      	ldr	r4, [r1, #16]
 8008176:	42a3      	cmp	r3, r4
 8008178:	4607      	mov	r7, r0
 800817a:	db7e      	blt.n	800827a <quorem+0x10c>
 800817c:	3c01      	subs	r4, #1
 800817e:	f101 0814 	add.w	r8, r1, #20
 8008182:	f100 0514 	add.w	r5, r0, #20
 8008186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008194:	3301      	adds	r3, #1
 8008196:	429a      	cmp	r2, r3
 8008198:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800819c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80081a4:	d331      	bcc.n	800820a <quorem+0x9c>
 80081a6:	f04f 0e00 	mov.w	lr, #0
 80081aa:	4640      	mov	r0, r8
 80081ac:	46ac      	mov	ip, r5
 80081ae:	46f2      	mov	sl, lr
 80081b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80081b4:	b293      	uxth	r3, r2
 80081b6:	fb06 e303 	mla	r3, r6, r3, lr
 80081ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081be:	0c1a      	lsrs	r2, r3, #16
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	ebaa 0303 	sub.w	r3, sl, r3
 80081c6:	f8dc a000 	ldr.w	sl, [ip]
 80081ca:	fa13 f38a 	uxtah	r3, r3, sl
 80081ce:	fb06 220e 	mla	r2, r6, lr, r2
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	9b00      	ldr	r3, [sp, #0]
 80081d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081da:	b292      	uxth	r2, r2
 80081dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80081e8:	4581      	cmp	r9, r0
 80081ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ee:	f84c 3b04 	str.w	r3, [ip], #4
 80081f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081f6:	d2db      	bcs.n	80081b0 <quorem+0x42>
 80081f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80081fc:	b92b      	cbnz	r3, 800820a <quorem+0x9c>
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	3b04      	subs	r3, #4
 8008202:	429d      	cmp	r5, r3
 8008204:	461a      	mov	r2, r3
 8008206:	d32c      	bcc.n	8008262 <quorem+0xf4>
 8008208:	613c      	str	r4, [r7, #16]
 800820a:	4638      	mov	r0, r7
 800820c:	f001 f9a6 	bl	800955c <__mcmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	db22      	blt.n	800825a <quorem+0xec>
 8008214:	3601      	adds	r6, #1
 8008216:	4629      	mov	r1, r5
 8008218:	2000      	movs	r0, #0
 800821a:	f858 2b04 	ldr.w	r2, [r8], #4
 800821e:	f8d1 c000 	ldr.w	ip, [r1]
 8008222:	b293      	uxth	r3, r2
 8008224:	1ac3      	subs	r3, r0, r3
 8008226:	0c12      	lsrs	r2, r2, #16
 8008228:	fa13 f38c 	uxtah	r3, r3, ip
 800822c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008234:	b29b      	uxth	r3, r3
 8008236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800823a:	45c1      	cmp	r9, r8
 800823c:	f841 3b04 	str.w	r3, [r1], #4
 8008240:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008244:	d2e9      	bcs.n	800821a <quorem+0xac>
 8008246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800824a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800824e:	b922      	cbnz	r2, 800825a <quorem+0xec>
 8008250:	3b04      	subs	r3, #4
 8008252:	429d      	cmp	r5, r3
 8008254:	461a      	mov	r2, r3
 8008256:	d30a      	bcc.n	800826e <quorem+0x100>
 8008258:	613c      	str	r4, [r7, #16]
 800825a:	4630      	mov	r0, r6
 800825c:	b003      	add	sp, #12
 800825e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008262:	6812      	ldr	r2, [r2, #0]
 8008264:	3b04      	subs	r3, #4
 8008266:	2a00      	cmp	r2, #0
 8008268:	d1ce      	bne.n	8008208 <quorem+0x9a>
 800826a:	3c01      	subs	r4, #1
 800826c:	e7c9      	b.n	8008202 <quorem+0x94>
 800826e:	6812      	ldr	r2, [r2, #0]
 8008270:	3b04      	subs	r3, #4
 8008272:	2a00      	cmp	r2, #0
 8008274:	d1f0      	bne.n	8008258 <quorem+0xea>
 8008276:	3c01      	subs	r4, #1
 8008278:	e7eb      	b.n	8008252 <quorem+0xe4>
 800827a:	2000      	movs	r0, #0
 800827c:	e7ee      	b.n	800825c <quorem+0xee>
	...

08008280 <_dtoa_r>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	ed2d 8b04 	vpush	{d8-d9}
 8008288:	69c5      	ldr	r5, [r0, #28]
 800828a:	b093      	sub	sp, #76	; 0x4c
 800828c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008290:	ec57 6b10 	vmov	r6, r7, d0
 8008294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008298:	9107      	str	r1, [sp, #28]
 800829a:	4604      	mov	r4, r0
 800829c:	920a      	str	r2, [sp, #40]	; 0x28
 800829e:	930d      	str	r3, [sp, #52]	; 0x34
 80082a0:	b975      	cbnz	r5, 80082c0 <_dtoa_r+0x40>
 80082a2:	2010      	movs	r0, #16
 80082a4:	f000 fe2a 	bl	8008efc <malloc>
 80082a8:	4602      	mov	r2, r0
 80082aa:	61e0      	str	r0, [r4, #28]
 80082ac:	b920      	cbnz	r0, 80082b8 <_dtoa_r+0x38>
 80082ae:	4bae      	ldr	r3, [pc, #696]	; (8008568 <_dtoa_r+0x2e8>)
 80082b0:	21ef      	movs	r1, #239	; 0xef
 80082b2:	48ae      	ldr	r0, [pc, #696]	; (800856c <_dtoa_r+0x2ec>)
 80082b4:	f001 fe6a 	bl	8009f8c <__assert_func>
 80082b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082bc:	6005      	str	r5, [r0, #0]
 80082be:	60c5      	str	r5, [r0, #12]
 80082c0:	69e3      	ldr	r3, [r4, #28]
 80082c2:	6819      	ldr	r1, [r3, #0]
 80082c4:	b151      	cbz	r1, 80082dc <_dtoa_r+0x5c>
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	604a      	str	r2, [r1, #4]
 80082ca:	2301      	movs	r3, #1
 80082cc:	4093      	lsls	r3, r2
 80082ce:	608b      	str	r3, [r1, #8]
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 ff07 	bl	80090e4 <_Bfree>
 80082d6:	69e3      	ldr	r3, [r4, #28]
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	1e3b      	subs	r3, r7, #0
 80082de:	bfbb      	ittet	lt
 80082e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082e4:	9303      	strlt	r3, [sp, #12]
 80082e6:	2300      	movge	r3, #0
 80082e8:	2201      	movlt	r2, #1
 80082ea:	bfac      	ite	ge
 80082ec:	f8c8 3000 	strge.w	r3, [r8]
 80082f0:	f8c8 2000 	strlt.w	r2, [r8]
 80082f4:	4b9e      	ldr	r3, [pc, #632]	; (8008570 <_dtoa_r+0x2f0>)
 80082f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80082fa:	ea33 0308 	bics.w	r3, r3, r8
 80082fe:	d11b      	bne.n	8008338 <_dtoa_r+0xb8>
 8008300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008302:	f242 730f 	movw	r3, #9999	; 0x270f
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800830c:	4333      	orrs	r3, r6
 800830e:	f000 8593 	beq.w	8008e38 <_dtoa_r+0xbb8>
 8008312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008314:	b963      	cbnz	r3, 8008330 <_dtoa_r+0xb0>
 8008316:	4b97      	ldr	r3, [pc, #604]	; (8008574 <_dtoa_r+0x2f4>)
 8008318:	e027      	b.n	800836a <_dtoa_r+0xea>
 800831a:	4b97      	ldr	r3, [pc, #604]	; (8008578 <_dtoa_r+0x2f8>)
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	3308      	adds	r3, #8
 8008320:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	9800      	ldr	r0, [sp, #0]
 8008326:	b013      	add	sp, #76	; 0x4c
 8008328:	ecbd 8b04 	vpop	{d8-d9}
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	4b90      	ldr	r3, [pc, #576]	; (8008574 <_dtoa_r+0x2f4>)
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	3303      	adds	r3, #3
 8008336:	e7f3      	b.n	8008320 <_dtoa_r+0xa0>
 8008338:	ed9d 7b02 	vldr	d7, [sp, #8]
 800833c:	2200      	movs	r2, #0
 800833e:	ec51 0b17 	vmov	r0, r1, d7
 8008342:	eeb0 8a47 	vmov.f32	s16, s14
 8008346:	eef0 8a67 	vmov.f32	s17, s15
 800834a:	2300      	movs	r3, #0
 800834c:	f7f8 fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008350:	4681      	mov	r9, r0
 8008352:	b160      	cbz	r0, 800836e <_dtoa_r+0xee>
 8008354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008356:	2301      	movs	r3, #1
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8568 	beq.w	8008e32 <_dtoa_r+0xbb2>
 8008362:	4b86      	ldr	r3, [pc, #536]	; (800857c <_dtoa_r+0x2fc>)
 8008364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	3b01      	subs	r3, #1
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	e7da      	b.n	8008324 <_dtoa_r+0xa4>
 800836e:	aa10      	add	r2, sp, #64	; 0x40
 8008370:	a911      	add	r1, sp, #68	; 0x44
 8008372:	4620      	mov	r0, r4
 8008374:	eeb0 0a48 	vmov.f32	s0, s16
 8008378:	eef0 0a68 	vmov.f32	s1, s17
 800837c:	f001 f994 	bl	80096a8 <__d2b>
 8008380:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008384:	4682      	mov	sl, r0
 8008386:	2d00      	cmp	r5, #0
 8008388:	d07f      	beq.n	800848a <_dtoa_r+0x20a>
 800838a:	ee18 3a90 	vmov	r3, s17
 800838e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008392:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008396:	ec51 0b18 	vmov	r0, r1, d8
 800839a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800839e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80083a6:	4619      	mov	r1, r3
 80083a8:	2200      	movs	r2, #0
 80083aa:	4b75      	ldr	r3, [pc, #468]	; (8008580 <_dtoa_r+0x300>)
 80083ac:	f7f7 ff6c 	bl	8000288 <__aeabi_dsub>
 80083b0:	a367      	add	r3, pc, #412	; (adr r3, 8008550 <_dtoa_r+0x2d0>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f8 f91f 	bl	80005f8 <__aeabi_dmul>
 80083ba:	a367      	add	r3, pc, #412	; (adr r3, 8008558 <_dtoa_r+0x2d8>)
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f7f7 ff64 	bl	800028c <__adddf3>
 80083c4:	4606      	mov	r6, r0
 80083c6:	4628      	mov	r0, r5
 80083c8:	460f      	mov	r7, r1
 80083ca:	f7f8 f8ab 	bl	8000524 <__aeabi_i2d>
 80083ce:	a364      	add	r3, pc, #400	; (adr r3, 8008560 <_dtoa_r+0x2e0>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f7f8 f910 	bl	80005f8 <__aeabi_dmul>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f7 ff54 	bl	800028c <__adddf3>
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	f7f8 fbb6 	bl	8000b58 <__aeabi_d2iz>
 80083ec:	2200      	movs	r2, #0
 80083ee:	4683      	mov	fp, r0
 80083f0:	2300      	movs	r3, #0
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f8 fb71 	bl	8000adc <__aeabi_dcmplt>
 80083fa:	b148      	cbz	r0, 8008410 <_dtoa_r+0x190>
 80083fc:	4658      	mov	r0, fp
 80083fe:	f7f8 f891 	bl	8000524 <__aeabi_i2d>
 8008402:	4632      	mov	r2, r6
 8008404:	463b      	mov	r3, r7
 8008406:	f7f8 fb5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800840a:	b908      	cbnz	r0, 8008410 <_dtoa_r+0x190>
 800840c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008410:	f1bb 0f16 	cmp.w	fp, #22
 8008414:	d857      	bhi.n	80084c6 <_dtoa_r+0x246>
 8008416:	4b5b      	ldr	r3, [pc, #364]	; (8008584 <_dtoa_r+0x304>)
 8008418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	ec51 0b18 	vmov	r0, r1, d8
 8008424:	f7f8 fb5a 	bl	8000adc <__aeabi_dcmplt>
 8008428:	2800      	cmp	r0, #0
 800842a:	d04e      	beq.n	80084ca <_dtoa_r+0x24a>
 800842c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008430:	2300      	movs	r3, #0
 8008432:	930c      	str	r3, [sp, #48]	; 0x30
 8008434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008436:	1b5b      	subs	r3, r3, r5
 8008438:	1e5a      	subs	r2, r3, #1
 800843a:	bf45      	ittet	mi
 800843c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008440:	9305      	strmi	r3, [sp, #20]
 8008442:	2300      	movpl	r3, #0
 8008444:	2300      	movmi	r3, #0
 8008446:	9206      	str	r2, [sp, #24]
 8008448:	bf54      	ite	pl
 800844a:	9305      	strpl	r3, [sp, #20]
 800844c:	9306      	strmi	r3, [sp, #24]
 800844e:	f1bb 0f00 	cmp.w	fp, #0
 8008452:	db3c      	blt.n	80084ce <_dtoa_r+0x24e>
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800845a:	445b      	add	r3, fp
 800845c:	9306      	str	r3, [sp, #24]
 800845e:	2300      	movs	r3, #0
 8008460:	9308      	str	r3, [sp, #32]
 8008462:	9b07      	ldr	r3, [sp, #28]
 8008464:	2b09      	cmp	r3, #9
 8008466:	d868      	bhi.n	800853a <_dtoa_r+0x2ba>
 8008468:	2b05      	cmp	r3, #5
 800846a:	bfc4      	itt	gt
 800846c:	3b04      	subgt	r3, #4
 800846e:	9307      	strgt	r3, [sp, #28]
 8008470:	9b07      	ldr	r3, [sp, #28]
 8008472:	f1a3 0302 	sub.w	r3, r3, #2
 8008476:	bfcc      	ite	gt
 8008478:	2500      	movgt	r5, #0
 800847a:	2501      	movle	r5, #1
 800847c:	2b03      	cmp	r3, #3
 800847e:	f200 8085 	bhi.w	800858c <_dtoa_r+0x30c>
 8008482:	e8df f003 	tbb	[pc, r3]
 8008486:	3b2e      	.short	0x3b2e
 8008488:	5839      	.short	0x5839
 800848a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800848e:	441d      	add	r5, r3
 8008490:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008494:	2b20      	cmp	r3, #32
 8008496:	bfc1      	itttt	gt
 8008498:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800849c:	fa08 f803 	lslgt.w	r8, r8, r3
 80084a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80084a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80084a8:	bfd6      	itet	le
 80084aa:	f1c3 0320 	rsble	r3, r3, #32
 80084ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80084b2:	fa06 f003 	lslle.w	r0, r6, r3
 80084b6:	f7f8 f825 	bl	8000504 <__aeabi_ui2d>
 80084ba:	2201      	movs	r2, #1
 80084bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80084c0:	3d01      	subs	r5, #1
 80084c2:	920e      	str	r2, [sp, #56]	; 0x38
 80084c4:	e76f      	b.n	80083a6 <_dtoa_r+0x126>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e7b3      	b.n	8008432 <_dtoa_r+0x1b2>
 80084ca:	900c      	str	r0, [sp, #48]	; 0x30
 80084cc:	e7b2      	b.n	8008434 <_dtoa_r+0x1b4>
 80084ce:	9b05      	ldr	r3, [sp, #20]
 80084d0:	eba3 030b 	sub.w	r3, r3, fp
 80084d4:	9305      	str	r3, [sp, #20]
 80084d6:	f1cb 0300 	rsb	r3, fp, #0
 80084da:	9308      	str	r3, [sp, #32]
 80084dc:	2300      	movs	r3, #0
 80084de:	930b      	str	r3, [sp, #44]	; 0x2c
 80084e0:	e7bf      	b.n	8008462 <_dtoa_r+0x1e2>
 80084e2:	2300      	movs	r3, #0
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	dc52      	bgt.n	8008592 <_dtoa_r+0x312>
 80084ec:	2301      	movs	r3, #1
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	461a      	mov	r2, r3
 80084f4:	920a      	str	r2, [sp, #40]	; 0x28
 80084f6:	e00b      	b.n	8008510 <_dtoa_r+0x290>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e7f3      	b.n	80084e4 <_dtoa_r+0x264>
 80084fc:	2300      	movs	r3, #0
 80084fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008502:	445b      	add	r3, fp
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	3301      	adds	r3, #1
 8008508:	2b01      	cmp	r3, #1
 800850a:	9304      	str	r3, [sp, #16]
 800850c:	bfb8      	it	lt
 800850e:	2301      	movlt	r3, #1
 8008510:	69e0      	ldr	r0, [r4, #28]
 8008512:	2100      	movs	r1, #0
 8008514:	2204      	movs	r2, #4
 8008516:	f102 0614 	add.w	r6, r2, #20
 800851a:	429e      	cmp	r6, r3
 800851c:	d93d      	bls.n	800859a <_dtoa_r+0x31a>
 800851e:	6041      	str	r1, [r0, #4]
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fd9f 	bl	8009064 <_Balloc>
 8008526:	9000      	str	r0, [sp, #0]
 8008528:	2800      	cmp	r0, #0
 800852a:	d139      	bne.n	80085a0 <_dtoa_r+0x320>
 800852c:	4b16      	ldr	r3, [pc, #88]	; (8008588 <_dtoa_r+0x308>)
 800852e:	4602      	mov	r2, r0
 8008530:	f240 11af 	movw	r1, #431	; 0x1af
 8008534:	e6bd      	b.n	80082b2 <_dtoa_r+0x32>
 8008536:	2301      	movs	r3, #1
 8008538:	e7e1      	b.n	80084fe <_dtoa_r+0x27e>
 800853a:	2501      	movs	r5, #1
 800853c:	2300      	movs	r3, #0
 800853e:	9307      	str	r3, [sp, #28]
 8008540:	9509      	str	r5, [sp, #36]	; 0x24
 8008542:	f04f 33ff 	mov.w	r3, #4294967295
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	9304      	str	r3, [sp, #16]
 800854a:	2200      	movs	r2, #0
 800854c:	2312      	movs	r3, #18
 800854e:	e7d1      	b.n	80084f4 <_dtoa_r+0x274>
 8008550:	636f4361 	.word	0x636f4361
 8008554:	3fd287a7 	.word	0x3fd287a7
 8008558:	8b60c8b3 	.word	0x8b60c8b3
 800855c:	3fc68a28 	.word	0x3fc68a28
 8008560:	509f79fb 	.word	0x509f79fb
 8008564:	3fd34413 	.word	0x3fd34413
 8008568:	0800a5fb 	.word	0x0800a5fb
 800856c:	0800a612 	.word	0x0800a612
 8008570:	7ff00000 	.word	0x7ff00000
 8008574:	0800a5f7 	.word	0x0800a5f7
 8008578:	0800a5ee 	.word	0x0800a5ee
 800857c:	0800a5cb 	.word	0x0800a5cb
 8008580:	3ff80000 	.word	0x3ff80000
 8008584:	0800a700 	.word	0x0800a700
 8008588:	0800a66a 	.word	0x0800a66a
 800858c:	2301      	movs	r3, #1
 800858e:	9309      	str	r3, [sp, #36]	; 0x24
 8008590:	e7d7      	b.n	8008542 <_dtoa_r+0x2c2>
 8008592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	e7ba      	b.n	8008510 <_dtoa_r+0x290>
 800859a:	3101      	adds	r1, #1
 800859c:	0052      	lsls	r2, r2, #1
 800859e:	e7ba      	b.n	8008516 <_dtoa_r+0x296>
 80085a0:	69e3      	ldr	r3, [r4, #28]
 80085a2:	9a00      	ldr	r2, [sp, #0]
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	2b0e      	cmp	r3, #14
 80085aa:	f200 80a8 	bhi.w	80086fe <_dtoa_r+0x47e>
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	f000 80a5 	beq.w	80086fe <_dtoa_r+0x47e>
 80085b4:	f1bb 0f00 	cmp.w	fp, #0
 80085b8:	dd38      	ble.n	800862c <_dtoa_r+0x3ac>
 80085ba:	4bc0      	ldr	r3, [pc, #768]	; (80088bc <_dtoa_r+0x63c>)
 80085bc:	f00b 020f 	and.w	r2, fp, #15
 80085c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80085c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80085cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80085d0:	d019      	beq.n	8008606 <_dtoa_r+0x386>
 80085d2:	4bbb      	ldr	r3, [pc, #748]	; (80088c0 <_dtoa_r+0x640>)
 80085d4:	ec51 0b18 	vmov	r0, r1, d8
 80085d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085dc:	f7f8 f936 	bl	800084c <__aeabi_ddiv>
 80085e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085e4:	f008 080f 	and.w	r8, r8, #15
 80085e8:	2503      	movs	r5, #3
 80085ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80088c0 <_dtoa_r+0x640>
 80085ee:	f1b8 0f00 	cmp.w	r8, #0
 80085f2:	d10a      	bne.n	800860a <_dtoa_r+0x38a>
 80085f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f8:	4632      	mov	r2, r6
 80085fa:	463b      	mov	r3, r7
 80085fc:	f7f8 f926 	bl	800084c <__aeabi_ddiv>
 8008600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008604:	e02b      	b.n	800865e <_dtoa_r+0x3de>
 8008606:	2502      	movs	r5, #2
 8008608:	e7ef      	b.n	80085ea <_dtoa_r+0x36a>
 800860a:	f018 0f01 	tst.w	r8, #1
 800860e:	d008      	beq.n	8008622 <_dtoa_r+0x3a2>
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008618:	f7f7 ffee 	bl	80005f8 <__aeabi_dmul>
 800861c:	3501      	adds	r5, #1
 800861e:	4606      	mov	r6, r0
 8008620:	460f      	mov	r7, r1
 8008622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008626:	f109 0908 	add.w	r9, r9, #8
 800862a:	e7e0      	b.n	80085ee <_dtoa_r+0x36e>
 800862c:	f000 809f 	beq.w	800876e <_dtoa_r+0x4ee>
 8008630:	f1cb 0600 	rsb	r6, fp, #0
 8008634:	4ba1      	ldr	r3, [pc, #644]	; (80088bc <_dtoa_r+0x63c>)
 8008636:	4fa2      	ldr	r7, [pc, #648]	; (80088c0 <_dtoa_r+0x640>)
 8008638:	f006 020f 	and.w	r2, r6, #15
 800863c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	ec51 0b18 	vmov	r0, r1, d8
 8008648:	f7f7 ffd6 	bl	80005f8 <__aeabi_dmul>
 800864c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008650:	1136      	asrs	r6, r6, #4
 8008652:	2300      	movs	r3, #0
 8008654:	2502      	movs	r5, #2
 8008656:	2e00      	cmp	r6, #0
 8008658:	d17e      	bne.n	8008758 <_dtoa_r+0x4d8>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1d0      	bne.n	8008600 <_dtoa_r+0x380>
 800865e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008660:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8084 	beq.w	8008772 <_dtoa_r+0x4f2>
 800866a:	4b96      	ldr	r3, [pc, #600]	; (80088c4 <_dtoa_r+0x644>)
 800866c:	2200      	movs	r2, #0
 800866e:	4640      	mov	r0, r8
 8008670:	4649      	mov	r1, r9
 8008672:	f7f8 fa33 	bl	8000adc <__aeabi_dcmplt>
 8008676:	2800      	cmp	r0, #0
 8008678:	d07b      	beq.n	8008772 <_dtoa_r+0x4f2>
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d078      	beq.n	8008772 <_dtoa_r+0x4f2>
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	dd39      	ble.n	80086fa <_dtoa_r+0x47a>
 8008686:	4b90      	ldr	r3, [pc, #576]	; (80088c8 <_dtoa_r+0x648>)
 8008688:	2200      	movs	r2, #0
 800868a:	4640      	mov	r0, r8
 800868c:	4649      	mov	r1, r9
 800868e:	f7f7 ffb3 	bl	80005f8 <__aeabi_dmul>
 8008692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008696:	9e01      	ldr	r6, [sp, #4]
 8008698:	f10b 37ff 	add.w	r7, fp, #4294967295
 800869c:	3501      	adds	r5, #1
 800869e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086a2:	4628      	mov	r0, r5
 80086a4:	f7f7 ff3e 	bl	8000524 <__aeabi_i2d>
 80086a8:	4642      	mov	r2, r8
 80086aa:	464b      	mov	r3, r9
 80086ac:	f7f7 ffa4 	bl	80005f8 <__aeabi_dmul>
 80086b0:	4b86      	ldr	r3, [pc, #536]	; (80088cc <_dtoa_r+0x64c>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	f7f7 fdea 	bl	800028c <__adddf3>
 80086b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80086bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c0:	9303      	str	r3, [sp, #12]
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	d158      	bne.n	8008778 <_dtoa_r+0x4f8>
 80086c6:	4b82      	ldr	r3, [pc, #520]	; (80088d0 <_dtoa_r+0x650>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	4640      	mov	r0, r8
 80086cc:	4649      	mov	r1, r9
 80086ce:	f7f7 fddb 	bl	8000288 <__aeabi_dsub>
 80086d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d6:	4680      	mov	r8, r0
 80086d8:	4689      	mov	r9, r1
 80086da:	f7f8 fa1d 	bl	8000b18 <__aeabi_dcmpgt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	f040 8296 	bne.w	8008c10 <_dtoa_r+0x990>
 80086e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80086e8:	4640      	mov	r0, r8
 80086ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f8 f9f4 	bl	8000adc <__aeabi_dcmplt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f040 8289 	bne.w	8008c0c <_dtoa_r+0x98c>
 80086fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80086fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008700:	2b00      	cmp	r3, #0
 8008702:	f2c0 814e 	blt.w	80089a2 <_dtoa_r+0x722>
 8008706:	f1bb 0f0e 	cmp.w	fp, #14
 800870a:	f300 814a 	bgt.w	80089a2 <_dtoa_r+0x722>
 800870e:	4b6b      	ldr	r3, [pc, #428]	; (80088bc <_dtoa_r+0x63c>)
 8008710:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800871a:	2b00      	cmp	r3, #0
 800871c:	f280 80dc 	bge.w	80088d8 <_dtoa_r+0x658>
 8008720:	9b04      	ldr	r3, [sp, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f300 80d8 	bgt.w	80088d8 <_dtoa_r+0x658>
 8008728:	f040 826f 	bne.w	8008c0a <_dtoa_r+0x98a>
 800872c:	4b68      	ldr	r3, [pc, #416]	; (80088d0 <_dtoa_r+0x650>)
 800872e:	2200      	movs	r2, #0
 8008730:	4640      	mov	r0, r8
 8008732:	4649      	mov	r1, r9
 8008734:	f7f7 ff60 	bl	80005f8 <__aeabi_dmul>
 8008738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800873c:	f7f8 f9e2 	bl	8000b04 <__aeabi_dcmpge>
 8008740:	9e04      	ldr	r6, [sp, #16]
 8008742:	4637      	mov	r7, r6
 8008744:	2800      	cmp	r0, #0
 8008746:	f040 8245 	bne.w	8008bd4 <_dtoa_r+0x954>
 800874a:	9d00      	ldr	r5, [sp, #0]
 800874c:	2331      	movs	r3, #49	; 0x31
 800874e:	f805 3b01 	strb.w	r3, [r5], #1
 8008752:	f10b 0b01 	add.w	fp, fp, #1
 8008756:	e241      	b.n	8008bdc <_dtoa_r+0x95c>
 8008758:	07f2      	lsls	r2, r6, #31
 800875a:	d505      	bpl.n	8008768 <_dtoa_r+0x4e8>
 800875c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008760:	f7f7 ff4a 	bl	80005f8 <__aeabi_dmul>
 8008764:	3501      	adds	r5, #1
 8008766:	2301      	movs	r3, #1
 8008768:	1076      	asrs	r6, r6, #1
 800876a:	3708      	adds	r7, #8
 800876c:	e773      	b.n	8008656 <_dtoa_r+0x3d6>
 800876e:	2502      	movs	r5, #2
 8008770:	e775      	b.n	800865e <_dtoa_r+0x3de>
 8008772:	9e04      	ldr	r6, [sp, #16]
 8008774:	465f      	mov	r7, fp
 8008776:	e792      	b.n	800869e <_dtoa_r+0x41e>
 8008778:	9900      	ldr	r1, [sp, #0]
 800877a:	4b50      	ldr	r3, [pc, #320]	; (80088bc <_dtoa_r+0x63c>)
 800877c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008780:	4431      	add	r1, r6
 8008782:	9102      	str	r1, [sp, #8]
 8008784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008786:	eeb0 9a47 	vmov.f32	s18, s14
 800878a:	eef0 9a67 	vmov.f32	s19, s15
 800878e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008792:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008796:	2900      	cmp	r1, #0
 8008798:	d044      	beq.n	8008824 <_dtoa_r+0x5a4>
 800879a:	494e      	ldr	r1, [pc, #312]	; (80088d4 <_dtoa_r+0x654>)
 800879c:	2000      	movs	r0, #0
 800879e:	f7f8 f855 	bl	800084c <__aeabi_ddiv>
 80087a2:	ec53 2b19 	vmov	r2, r3, d9
 80087a6:	f7f7 fd6f 	bl	8000288 <__aeabi_dsub>
 80087aa:	9d00      	ldr	r5, [sp, #0]
 80087ac:	ec41 0b19 	vmov	d9, r0, r1
 80087b0:	4649      	mov	r1, r9
 80087b2:	4640      	mov	r0, r8
 80087b4:	f7f8 f9d0 	bl	8000b58 <__aeabi_d2iz>
 80087b8:	4606      	mov	r6, r0
 80087ba:	f7f7 feb3 	bl	8000524 <__aeabi_i2d>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4640      	mov	r0, r8
 80087c4:	4649      	mov	r1, r9
 80087c6:	f7f7 fd5f 	bl	8000288 <__aeabi_dsub>
 80087ca:	3630      	adds	r6, #48	; 0x30
 80087cc:	f805 6b01 	strb.w	r6, [r5], #1
 80087d0:	ec53 2b19 	vmov	r2, r3, d9
 80087d4:	4680      	mov	r8, r0
 80087d6:	4689      	mov	r9, r1
 80087d8:	f7f8 f980 	bl	8000adc <__aeabi_dcmplt>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d164      	bne.n	80088aa <_dtoa_r+0x62a>
 80087e0:	4642      	mov	r2, r8
 80087e2:	464b      	mov	r3, r9
 80087e4:	4937      	ldr	r1, [pc, #220]	; (80088c4 <_dtoa_r+0x644>)
 80087e6:	2000      	movs	r0, #0
 80087e8:	f7f7 fd4e 	bl	8000288 <__aeabi_dsub>
 80087ec:	ec53 2b19 	vmov	r2, r3, d9
 80087f0:	f7f8 f974 	bl	8000adc <__aeabi_dcmplt>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f040 80b6 	bne.w	8008966 <_dtoa_r+0x6e6>
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	429d      	cmp	r5, r3
 80087fe:	f43f af7c 	beq.w	80086fa <_dtoa_r+0x47a>
 8008802:	4b31      	ldr	r3, [pc, #196]	; (80088c8 <_dtoa_r+0x648>)
 8008804:	ec51 0b19 	vmov	r0, r1, d9
 8008808:	2200      	movs	r2, #0
 800880a:	f7f7 fef5 	bl	80005f8 <__aeabi_dmul>
 800880e:	4b2e      	ldr	r3, [pc, #184]	; (80088c8 <_dtoa_r+0x648>)
 8008810:	ec41 0b19 	vmov	d9, r0, r1
 8008814:	2200      	movs	r2, #0
 8008816:	4640      	mov	r0, r8
 8008818:	4649      	mov	r1, r9
 800881a:	f7f7 feed 	bl	80005f8 <__aeabi_dmul>
 800881e:	4680      	mov	r8, r0
 8008820:	4689      	mov	r9, r1
 8008822:	e7c5      	b.n	80087b0 <_dtoa_r+0x530>
 8008824:	ec51 0b17 	vmov	r0, r1, d7
 8008828:	f7f7 fee6 	bl	80005f8 <__aeabi_dmul>
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	9d00      	ldr	r5, [sp, #0]
 8008830:	930f      	str	r3, [sp, #60]	; 0x3c
 8008832:	ec41 0b19 	vmov	d9, r0, r1
 8008836:	4649      	mov	r1, r9
 8008838:	4640      	mov	r0, r8
 800883a:	f7f8 f98d 	bl	8000b58 <__aeabi_d2iz>
 800883e:	4606      	mov	r6, r0
 8008840:	f7f7 fe70 	bl	8000524 <__aeabi_i2d>
 8008844:	3630      	adds	r6, #48	; 0x30
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f7 fd1b 	bl	8000288 <__aeabi_dsub>
 8008852:	f805 6b01 	strb.w	r6, [r5], #1
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	429d      	cmp	r5, r3
 800885a:	4680      	mov	r8, r0
 800885c:	4689      	mov	r9, r1
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	d124      	bne.n	80088ae <_dtoa_r+0x62e>
 8008864:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <_dtoa_r+0x654>)
 8008866:	ec51 0b19 	vmov	r0, r1, d9
 800886a:	f7f7 fd0f 	bl	800028c <__adddf3>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f8 f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800887a:	2800      	cmp	r0, #0
 800887c:	d173      	bne.n	8008966 <_dtoa_r+0x6e6>
 800887e:	ec53 2b19 	vmov	r2, r3, d9
 8008882:	4914      	ldr	r1, [pc, #80]	; (80088d4 <_dtoa_r+0x654>)
 8008884:	2000      	movs	r0, #0
 8008886:	f7f7 fcff 	bl	8000288 <__aeabi_dsub>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4640      	mov	r0, r8
 8008890:	4649      	mov	r1, r9
 8008892:	f7f8 f923 	bl	8000adc <__aeabi_dcmplt>
 8008896:	2800      	cmp	r0, #0
 8008898:	f43f af2f 	beq.w	80086fa <_dtoa_r+0x47a>
 800889c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800889e:	1e6b      	subs	r3, r5, #1
 80088a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088a6:	2b30      	cmp	r3, #48	; 0x30
 80088a8:	d0f8      	beq.n	800889c <_dtoa_r+0x61c>
 80088aa:	46bb      	mov	fp, r7
 80088ac:	e04a      	b.n	8008944 <_dtoa_r+0x6c4>
 80088ae:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <_dtoa_r+0x648>)
 80088b0:	f7f7 fea2 	bl	80005f8 <__aeabi_dmul>
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	e7bd      	b.n	8008836 <_dtoa_r+0x5b6>
 80088ba:	bf00      	nop
 80088bc:	0800a700 	.word	0x0800a700
 80088c0:	0800a6d8 	.word	0x0800a6d8
 80088c4:	3ff00000 	.word	0x3ff00000
 80088c8:	40240000 	.word	0x40240000
 80088cc:	401c0000 	.word	0x401c0000
 80088d0:	40140000 	.word	0x40140000
 80088d4:	3fe00000 	.word	0x3fe00000
 80088d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088dc:	9d00      	ldr	r5, [sp, #0]
 80088de:	4642      	mov	r2, r8
 80088e0:	464b      	mov	r3, r9
 80088e2:	4630      	mov	r0, r6
 80088e4:	4639      	mov	r1, r7
 80088e6:	f7f7 ffb1 	bl	800084c <__aeabi_ddiv>
 80088ea:	f7f8 f935 	bl	8000b58 <__aeabi_d2iz>
 80088ee:	9001      	str	r0, [sp, #4]
 80088f0:	f7f7 fe18 	bl	8000524 <__aeabi_i2d>
 80088f4:	4642      	mov	r2, r8
 80088f6:	464b      	mov	r3, r9
 80088f8:	f7f7 fe7e 	bl	80005f8 <__aeabi_dmul>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4630      	mov	r0, r6
 8008902:	4639      	mov	r1, r7
 8008904:	f7f7 fcc0 	bl	8000288 <__aeabi_dsub>
 8008908:	9e01      	ldr	r6, [sp, #4]
 800890a:	9f04      	ldr	r7, [sp, #16]
 800890c:	3630      	adds	r6, #48	; 0x30
 800890e:	f805 6b01 	strb.w	r6, [r5], #1
 8008912:	9e00      	ldr	r6, [sp, #0]
 8008914:	1bae      	subs	r6, r5, r6
 8008916:	42b7      	cmp	r7, r6
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	d134      	bne.n	8008988 <_dtoa_r+0x708>
 800891e:	f7f7 fcb5 	bl	800028c <__adddf3>
 8008922:	4642      	mov	r2, r8
 8008924:	464b      	mov	r3, r9
 8008926:	4606      	mov	r6, r0
 8008928:	460f      	mov	r7, r1
 800892a:	f7f8 f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 800892e:	b9c8      	cbnz	r0, 8008964 <_dtoa_r+0x6e4>
 8008930:	4642      	mov	r2, r8
 8008932:	464b      	mov	r3, r9
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f7f8 f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800893c:	b110      	cbz	r0, 8008944 <_dtoa_r+0x6c4>
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	07db      	lsls	r3, r3, #31
 8008942:	d40f      	bmi.n	8008964 <_dtoa_r+0x6e4>
 8008944:	4651      	mov	r1, sl
 8008946:	4620      	mov	r0, r4
 8008948:	f000 fbcc 	bl	80090e4 <_Bfree>
 800894c:	2300      	movs	r3, #0
 800894e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008950:	702b      	strb	r3, [r5, #0]
 8008952:	f10b 0301 	add.w	r3, fp, #1
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800895a:	2b00      	cmp	r3, #0
 800895c:	f43f ace2 	beq.w	8008324 <_dtoa_r+0xa4>
 8008960:	601d      	str	r5, [r3, #0]
 8008962:	e4df      	b.n	8008324 <_dtoa_r+0xa4>
 8008964:	465f      	mov	r7, fp
 8008966:	462b      	mov	r3, r5
 8008968:	461d      	mov	r5, r3
 800896a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800896e:	2a39      	cmp	r2, #57	; 0x39
 8008970:	d106      	bne.n	8008980 <_dtoa_r+0x700>
 8008972:	9a00      	ldr	r2, [sp, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d1f7      	bne.n	8008968 <_dtoa_r+0x6e8>
 8008978:	9900      	ldr	r1, [sp, #0]
 800897a:	2230      	movs	r2, #48	; 0x30
 800897c:	3701      	adds	r7, #1
 800897e:	700a      	strb	r2, [r1, #0]
 8008980:	781a      	ldrb	r2, [r3, #0]
 8008982:	3201      	adds	r2, #1
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	e790      	b.n	80088aa <_dtoa_r+0x62a>
 8008988:	4ba3      	ldr	r3, [pc, #652]	; (8008c18 <_dtoa_r+0x998>)
 800898a:	2200      	movs	r2, #0
 800898c:	f7f7 fe34 	bl	80005f8 <__aeabi_dmul>
 8008990:	2200      	movs	r2, #0
 8008992:	2300      	movs	r3, #0
 8008994:	4606      	mov	r6, r0
 8008996:	460f      	mov	r7, r1
 8008998:	f7f8 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800899c:	2800      	cmp	r0, #0
 800899e:	d09e      	beq.n	80088de <_dtoa_r+0x65e>
 80089a0:	e7d0      	b.n	8008944 <_dtoa_r+0x6c4>
 80089a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a4:	2a00      	cmp	r2, #0
 80089a6:	f000 80ca 	beq.w	8008b3e <_dtoa_r+0x8be>
 80089aa:	9a07      	ldr	r2, [sp, #28]
 80089ac:	2a01      	cmp	r2, #1
 80089ae:	f300 80ad 	bgt.w	8008b0c <_dtoa_r+0x88c>
 80089b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089b4:	2a00      	cmp	r2, #0
 80089b6:	f000 80a5 	beq.w	8008b04 <_dtoa_r+0x884>
 80089ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089be:	9e08      	ldr	r6, [sp, #32]
 80089c0:	9d05      	ldr	r5, [sp, #20]
 80089c2:	9a05      	ldr	r2, [sp, #20]
 80089c4:	441a      	add	r2, r3
 80089c6:	9205      	str	r2, [sp, #20]
 80089c8:	9a06      	ldr	r2, [sp, #24]
 80089ca:	2101      	movs	r1, #1
 80089cc:	441a      	add	r2, r3
 80089ce:	4620      	mov	r0, r4
 80089d0:	9206      	str	r2, [sp, #24]
 80089d2:	f000 fc3d 	bl	8009250 <__i2b>
 80089d6:	4607      	mov	r7, r0
 80089d8:	b165      	cbz	r5, 80089f4 <_dtoa_r+0x774>
 80089da:	9b06      	ldr	r3, [sp, #24]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dd09      	ble.n	80089f4 <_dtoa_r+0x774>
 80089e0:	42ab      	cmp	r3, r5
 80089e2:	9a05      	ldr	r2, [sp, #20]
 80089e4:	bfa8      	it	ge
 80089e6:	462b      	movge	r3, r5
 80089e8:	1ad2      	subs	r2, r2, r3
 80089ea:	9205      	str	r2, [sp, #20]
 80089ec:	9a06      	ldr	r2, [sp, #24]
 80089ee:	1aed      	subs	r5, r5, r3
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	9306      	str	r3, [sp, #24]
 80089f4:	9b08      	ldr	r3, [sp, #32]
 80089f6:	b1f3      	cbz	r3, 8008a36 <_dtoa_r+0x7b6>
 80089f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 80a3 	beq.w	8008b46 <_dtoa_r+0x8c6>
 8008a00:	2e00      	cmp	r6, #0
 8008a02:	dd10      	ble.n	8008a26 <_dtoa_r+0x7a6>
 8008a04:	4639      	mov	r1, r7
 8008a06:	4632      	mov	r2, r6
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fce1 	bl	80093d0 <__pow5mult>
 8008a0e:	4652      	mov	r2, sl
 8008a10:	4601      	mov	r1, r0
 8008a12:	4607      	mov	r7, r0
 8008a14:	4620      	mov	r0, r4
 8008a16:	f000 fc31 	bl	800927c <__multiply>
 8008a1a:	4651      	mov	r1, sl
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 fb60 	bl	80090e4 <_Bfree>
 8008a24:	46c2      	mov	sl, r8
 8008a26:	9b08      	ldr	r3, [sp, #32]
 8008a28:	1b9a      	subs	r2, r3, r6
 8008a2a:	d004      	beq.n	8008a36 <_dtoa_r+0x7b6>
 8008a2c:	4651      	mov	r1, sl
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fcce 	bl	80093d0 <__pow5mult>
 8008a34:	4682      	mov	sl, r0
 8008a36:	2101      	movs	r1, #1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fc09 	bl	8009250 <__i2b>
 8008a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	4606      	mov	r6, r0
 8008a44:	f340 8081 	ble.w	8008b4a <_dtoa_r+0x8ca>
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fcbf 	bl	80093d0 <__pow5mult>
 8008a52:	9b07      	ldr	r3, [sp, #28]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	4606      	mov	r6, r0
 8008a58:	dd7a      	ble.n	8008b50 <_dtoa_r+0x8d0>
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	6933      	ldr	r3, [r6, #16]
 8008a60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a64:	6918      	ldr	r0, [r3, #16]
 8008a66:	f000 fba5 	bl	80091b4 <__hi0bits>
 8008a6a:	f1c0 0020 	rsb	r0, r0, #32
 8008a6e:	9b06      	ldr	r3, [sp, #24]
 8008a70:	4418      	add	r0, r3
 8008a72:	f010 001f 	ands.w	r0, r0, #31
 8008a76:	f000 8094 	beq.w	8008ba2 <_dtoa_r+0x922>
 8008a7a:	f1c0 0320 	rsb	r3, r0, #32
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	f340 8085 	ble.w	8008b8e <_dtoa_r+0x90e>
 8008a84:	9b05      	ldr	r3, [sp, #20]
 8008a86:	f1c0 001c 	rsb	r0, r0, #28
 8008a8a:	4403      	add	r3, r0
 8008a8c:	9305      	str	r3, [sp, #20]
 8008a8e:	9b06      	ldr	r3, [sp, #24]
 8008a90:	4403      	add	r3, r0
 8008a92:	4405      	add	r5, r0
 8008a94:	9306      	str	r3, [sp, #24]
 8008a96:	9b05      	ldr	r3, [sp, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dd05      	ble.n	8008aa8 <_dtoa_r+0x828>
 8008a9c:	4651      	mov	r1, sl
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fcef 	bl	8009484 <__lshift>
 8008aa6:	4682      	mov	sl, r0
 8008aa8:	9b06      	ldr	r3, [sp, #24]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dd05      	ble.n	8008aba <_dtoa_r+0x83a>
 8008aae:	4631      	mov	r1, r6
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 fce6 	bl	8009484 <__lshift>
 8008ab8:	4606      	mov	r6, r0
 8008aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d072      	beq.n	8008ba6 <_dtoa_r+0x926>
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	f000 fd4a 	bl	800955c <__mcmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	da6c      	bge.n	8008ba6 <_dtoa_r+0x926>
 8008acc:	2300      	movs	r3, #0
 8008ace:	4651      	mov	r1, sl
 8008ad0:	220a      	movs	r2, #10
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fb28 	bl	8009128 <__multadd>
 8008ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ada:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ade:	4682      	mov	sl, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 81b0 	beq.w	8008e46 <_dtoa_r+0xbc6>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4639      	mov	r1, r7
 8008aea:	220a      	movs	r2, #10
 8008aec:	4620      	mov	r0, r4
 8008aee:	f000 fb1b 	bl	8009128 <__multadd>
 8008af2:	9b01      	ldr	r3, [sp, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	4607      	mov	r7, r0
 8008af8:	f300 8096 	bgt.w	8008c28 <_dtoa_r+0x9a8>
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	dc59      	bgt.n	8008bb6 <_dtoa_r+0x936>
 8008b02:	e091      	b.n	8008c28 <_dtoa_r+0x9a8>
 8008b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b0a:	e758      	b.n	80089be <_dtoa_r+0x73e>
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	1e5e      	subs	r6, r3, #1
 8008b10:	9b08      	ldr	r3, [sp, #32]
 8008b12:	42b3      	cmp	r3, r6
 8008b14:	bfbf      	itttt	lt
 8008b16:	9b08      	ldrlt	r3, [sp, #32]
 8008b18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008b1a:	9608      	strlt	r6, [sp, #32]
 8008b1c:	1af3      	sublt	r3, r6, r3
 8008b1e:	bfb4      	ite	lt
 8008b20:	18d2      	addlt	r2, r2, r3
 8008b22:	1b9e      	subge	r6, r3, r6
 8008b24:	9b04      	ldr	r3, [sp, #16]
 8008b26:	bfbc      	itt	lt
 8008b28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008b2a:	2600      	movlt	r6, #0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	bfb7      	itett	lt
 8008b30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008b38:	1a9d      	sublt	r5, r3, r2
 8008b3a:	2300      	movlt	r3, #0
 8008b3c:	e741      	b.n	80089c2 <_dtoa_r+0x742>
 8008b3e:	9e08      	ldr	r6, [sp, #32]
 8008b40:	9d05      	ldr	r5, [sp, #20]
 8008b42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b44:	e748      	b.n	80089d8 <_dtoa_r+0x758>
 8008b46:	9a08      	ldr	r2, [sp, #32]
 8008b48:	e770      	b.n	8008a2c <_dtoa_r+0x7ac>
 8008b4a:	9b07      	ldr	r3, [sp, #28]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	dc19      	bgt.n	8008b84 <_dtoa_r+0x904>
 8008b50:	9b02      	ldr	r3, [sp, #8]
 8008b52:	b9bb      	cbnz	r3, 8008b84 <_dtoa_r+0x904>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b5a:	b99b      	cbnz	r3, 8008b84 <_dtoa_r+0x904>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b62:	0d1b      	lsrs	r3, r3, #20
 8008b64:	051b      	lsls	r3, r3, #20
 8008b66:	b183      	cbz	r3, 8008b8a <_dtoa_r+0x90a>
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	9305      	str	r3, [sp, #20]
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	3301      	adds	r3, #1
 8008b72:	9306      	str	r3, [sp, #24]
 8008b74:	f04f 0801 	mov.w	r8, #1
 8008b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f47f af6f 	bne.w	8008a5e <_dtoa_r+0x7de>
 8008b80:	2001      	movs	r0, #1
 8008b82:	e774      	b.n	8008a6e <_dtoa_r+0x7ee>
 8008b84:	f04f 0800 	mov.w	r8, #0
 8008b88:	e7f6      	b.n	8008b78 <_dtoa_r+0x8f8>
 8008b8a:	4698      	mov	r8, r3
 8008b8c:	e7f4      	b.n	8008b78 <_dtoa_r+0x8f8>
 8008b8e:	d082      	beq.n	8008a96 <_dtoa_r+0x816>
 8008b90:	9a05      	ldr	r2, [sp, #20]
 8008b92:	331c      	adds	r3, #28
 8008b94:	441a      	add	r2, r3
 8008b96:	9205      	str	r2, [sp, #20]
 8008b98:	9a06      	ldr	r2, [sp, #24]
 8008b9a:	441a      	add	r2, r3
 8008b9c:	441d      	add	r5, r3
 8008b9e:	9206      	str	r2, [sp, #24]
 8008ba0:	e779      	b.n	8008a96 <_dtoa_r+0x816>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	e7f4      	b.n	8008b90 <_dtoa_r+0x910>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc37      	bgt.n	8008c1c <_dtoa_r+0x99c>
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	dd34      	ble.n	8008c1c <_dtoa_r+0x99c>
 8008bb2:	9b04      	ldr	r3, [sp, #16]
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	b963      	cbnz	r3, 8008bd4 <_dtoa_r+0x954>
 8008bba:	4631      	mov	r1, r6
 8008bbc:	2205      	movs	r2, #5
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 fab2 	bl	8009128 <__multadd>
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	4650      	mov	r0, sl
 8008bca:	f000 fcc7 	bl	800955c <__mcmp>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f73f adbb 	bgt.w	800874a <_dtoa_r+0x4ca>
 8008bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd6:	9d00      	ldr	r5, [sp, #0]
 8008bd8:	ea6f 0b03 	mvn.w	fp, r3
 8008bdc:	f04f 0800 	mov.w	r8, #0
 8008be0:	4631      	mov	r1, r6
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 fa7e 	bl	80090e4 <_Bfree>
 8008be8:	2f00      	cmp	r7, #0
 8008bea:	f43f aeab 	beq.w	8008944 <_dtoa_r+0x6c4>
 8008bee:	f1b8 0f00 	cmp.w	r8, #0
 8008bf2:	d005      	beq.n	8008c00 <_dtoa_r+0x980>
 8008bf4:	45b8      	cmp	r8, r7
 8008bf6:	d003      	beq.n	8008c00 <_dtoa_r+0x980>
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 fa72 	bl	80090e4 <_Bfree>
 8008c00:	4639      	mov	r1, r7
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 fa6e 	bl	80090e4 <_Bfree>
 8008c08:	e69c      	b.n	8008944 <_dtoa_r+0x6c4>
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	4637      	mov	r7, r6
 8008c0e:	e7e1      	b.n	8008bd4 <_dtoa_r+0x954>
 8008c10:	46bb      	mov	fp, r7
 8008c12:	4637      	mov	r7, r6
 8008c14:	e599      	b.n	800874a <_dtoa_r+0x4ca>
 8008c16:	bf00      	nop
 8008c18:	40240000 	.word	0x40240000
 8008c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 80c8 	beq.w	8008db4 <_dtoa_r+0xb34>
 8008c24:	9b04      	ldr	r3, [sp, #16]
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	dd05      	ble.n	8008c38 <_dtoa_r+0x9b8>
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4620      	mov	r0, r4
 8008c32:	f000 fc27 	bl	8009484 <__lshift>
 8008c36:	4607      	mov	r7, r0
 8008c38:	f1b8 0f00 	cmp.w	r8, #0
 8008c3c:	d05b      	beq.n	8008cf6 <_dtoa_r+0xa76>
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 fa0f 	bl	8009064 <_Balloc>
 8008c46:	4605      	mov	r5, r0
 8008c48:	b928      	cbnz	r0, 8008c56 <_dtoa_r+0x9d6>
 8008c4a:	4b83      	ldr	r3, [pc, #524]	; (8008e58 <_dtoa_r+0xbd8>)
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008c52:	f7ff bb2e 	b.w	80082b2 <_dtoa_r+0x32>
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	3202      	adds	r2, #2
 8008c5a:	0092      	lsls	r2, r2, #2
 8008c5c:	f107 010c 	add.w	r1, r7, #12
 8008c60:	300c      	adds	r0, #12
 8008c62:	f001 f985 	bl	8009f70 <memcpy>
 8008c66:	2201      	movs	r2, #1
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fc0a 	bl	8009484 <__lshift>
 8008c70:	9b00      	ldr	r3, [sp, #0]
 8008c72:	3301      	adds	r3, #1
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	9308      	str	r3, [sp, #32]
 8008c7e:	9b02      	ldr	r3, [sp, #8]
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	46b8      	mov	r8, r7
 8008c86:	9306      	str	r3, [sp, #24]
 8008c88:	4607      	mov	r7, r0
 8008c8a:	9b04      	ldr	r3, [sp, #16]
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	4650      	mov	r0, sl
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	f7ff fa6b 	bl	800816e <quorem>
 8008c98:	4641      	mov	r1, r8
 8008c9a:	9002      	str	r0, [sp, #8]
 8008c9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ca0:	4650      	mov	r0, sl
 8008ca2:	f000 fc5b 	bl	800955c <__mcmp>
 8008ca6:	463a      	mov	r2, r7
 8008ca8:	9005      	str	r0, [sp, #20]
 8008caa:	4631      	mov	r1, r6
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 fc71 	bl	8009594 <__mdiff>
 8008cb2:	68c2      	ldr	r2, [r0, #12]
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	bb02      	cbnz	r2, 8008cfa <_dtoa_r+0xa7a>
 8008cb8:	4601      	mov	r1, r0
 8008cba:	4650      	mov	r0, sl
 8008cbc:	f000 fc4e 	bl	800955c <__mcmp>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc8:	f000 fa0c 	bl	80090e4 <_Bfree>
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd0:	9d04      	ldr	r5, [sp, #16]
 8008cd2:	ea43 0102 	orr.w	r1, r3, r2
 8008cd6:	9b06      	ldr	r3, [sp, #24]
 8008cd8:	4319      	orrs	r1, r3
 8008cda:	d110      	bne.n	8008cfe <_dtoa_r+0xa7e>
 8008cdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ce0:	d029      	beq.n	8008d36 <_dtoa_r+0xab6>
 8008ce2:	9b05      	ldr	r3, [sp, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	dd02      	ble.n	8008cee <_dtoa_r+0xa6e>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	f883 9000 	strb.w	r9, [r3]
 8008cf4:	e774      	b.n	8008be0 <_dtoa_r+0x960>
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	e7ba      	b.n	8008c70 <_dtoa_r+0x9f0>
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	e7e1      	b.n	8008cc2 <_dtoa_r+0xa42>
 8008cfe:	9b05      	ldr	r3, [sp, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	db04      	blt.n	8008d0e <_dtoa_r+0xa8e>
 8008d04:	9907      	ldr	r1, [sp, #28]
 8008d06:	430b      	orrs	r3, r1
 8008d08:	9906      	ldr	r1, [sp, #24]
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	d120      	bne.n	8008d50 <_dtoa_r+0xad0>
 8008d0e:	2a00      	cmp	r2, #0
 8008d10:	dded      	ble.n	8008cee <_dtoa_r+0xa6e>
 8008d12:	4651      	mov	r1, sl
 8008d14:	2201      	movs	r2, #1
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 fbb4 	bl	8009484 <__lshift>
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4682      	mov	sl, r0
 8008d20:	f000 fc1c 	bl	800955c <__mcmp>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	dc03      	bgt.n	8008d30 <_dtoa_r+0xab0>
 8008d28:	d1e1      	bne.n	8008cee <_dtoa_r+0xa6e>
 8008d2a:	f019 0f01 	tst.w	r9, #1
 8008d2e:	d0de      	beq.n	8008cee <_dtoa_r+0xa6e>
 8008d30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d34:	d1d8      	bne.n	8008ce8 <_dtoa_r+0xa68>
 8008d36:	9a01      	ldr	r2, [sp, #4]
 8008d38:	2339      	movs	r3, #57	; 0x39
 8008d3a:	7013      	strb	r3, [r2, #0]
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	461d      	mov	r5, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d46:	2a39      	cmp	r2, #57	; 0x39
 8008d48:	d06c      	beq.n	8008e24 <_dtoa_r+0xba4>
 8008d4a:	3201      	adds	r2, #1
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	e747      	b.n	8008be0 <_dtoa_r+0x960>
 8008d50:	2a00      	cmp	r2, #0
 8008d52:	dd07      	ble.n	8008d64 <_dtoa_r+0xae4>
 8008d54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d58:	d0ed      	beq.n	8008d36 <_dtoa_r+0xab6>
 8008d5a:	9a01      	ldr	r2, [sp, #4]
 8008d5c:	f109 0301 	add.w	r3, r9, #1
 8008d60:	7013      	strb	r3, [r2, #0]
 8008d62:	e73d      	b.n	8008be0 <_dtoa_r+0x960>
 8008d64:	9b04      	ldr	r3, [sp, #16]
 8008d66:	9a08      	ldr	r2, [sp, #32]
 8008d68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d043      	beq.n	8008df8 <_dtoa_r+0xb78>
 8008d70:	4651      	mov	r1, sl
 8008d72:	2300      	movs	r3, #0
 8008d74:	220a      	movs	r2, #10
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 f9d6 	bl	8009128 <__multadd>
 8008d7c:	45b8      	cmp	r8, r7
 8008d7e:	4682      	mov	sl, r0
 8008d80:	f04f 0300 	mov.w	r3, #0
 8008d84:	f04f 020a 	mov.w	r2, #10
 8008d88:	4641      	mov	r1, r8
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	d107      	bne.n	8008d9e <_dtoa_r+0xb1e>
 8008d8e:	f000 f9cb 	bl	8009128 <__multadd>
 8008d92:	4680      	mov	r8, r0
 8008d94:	4607      	mov	r7, r0
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	e775      	b.n	8008c8a <_dtoa_r+0xa0a>
 8008d9e:	f000 f9c3 	bl	8009128 <__multadd>
 8008da2:	4639      	mov	r1, r7
 8008da4:	4680      	mov	r8, r0
 8008da6:	2300      	movs	r3, #0
 8008da8:	220a      	movs	r2, #10
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f9bc 	bl	8009128 <__multadd>
 8008db0:	4607      	mov	r7, r0
 8008db2:	e7f0      	b.n	8008d96 <_dtoa_r+0xb16>
 8008db4:	9b04      	ldr	r3, [sp, #16]
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	9d00      	ldr	r5, [sp, #0]
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	f7ff f9d6 	bl	800816e <quorem>
 8008dc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008dc6:	9b00      	ldr	r3, [sp, #0]
 8008dc8:	f805 9b01 	strb.w	r9, [r5], #1
 8008dcc:	1aea      	subs	r2, r5, r3
 8008dce:	9b01      	ldr	r3, [sp, #4]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	dd07      	ble.n	8008de4 <_dtoa_r+0xb64>
 8008dd4:	4651      	mov	r1, sl
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	220a      	movs	r2, #10
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 f9a4 	bl	8009128 <__multadd>
 8008de0:	4682      	mov	sl, r0
 8008de2:	e7ea      	b.n	8008dba <_dtoa_r+0xb3a>
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bfc8      	it	gt
 8008dea:	461d      	movgt	r5, r3
 8008dec:	9b00      	ldr	r3, [sp, #0]
 8008dee:	bfd8      	it	le
 8008df0:	2501      	movle	r5, #1
 8008df2:	441d      	add	r5, r3
 8008df4:	f04f 0800 	mov.w	r8, #0
 8008df8:	4651      	mov	r1, sl
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fb41 	bl	8009484 <__lshift>
 8008e02:	4631      	mov	r1, r6
 8008e04:	4682      	mov	sl, r0
 8008e06:	f000 fba9 	bl	800955c <__mcmp>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	dc96      	bgt.n	8008d3c <_dtoa_r+0xabc>
 8008e0e:	d102      	bne.n	8008e16 <_dtoa_r+0xb96>
 8008e10:	f019 0f01 	tst.w	r9, #1
 8008e14:	d192      	bne.n	8008d3c <_dtoa_r+0xabc>
 8008e16:	462b      	mov	r3, r5
 8008e18:	461d      	mov	r5, r3
 8008e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e1e:	2a30      	cmp	r2, #48	; 0x30
 8008e20:	d0fa      	beq.n	8008e18 <_dtoa_r+0xb98>
 8008e22:	e6dd      	b.n	8008be0 <_dtoa_r+0x960>
 8008e24:	9a00      	ldr	r2, [sp, #0]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d189      	bne.n	8008d3e <_dtoa_r+0xabe>
 8008e2a:	f10b 0b01 	add.w	fp, fp, #1
 8008e2e:	2331      	movs	r3, #49	; 0x31
 8008e30:	e796      	b.n	8008d60 <_dtoa_r+0xae0>
 8008e32:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <_dtoa_r+0xbdc>)
 8008e34:	f7ff ba99 	b.w	800836a <_dtoa_r+0xea>
 8008e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f47f aa6d 	bne.w	800831a <_dtoa_r+0x9a>
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <_dtoa_r+0xbe0>)
 8008e42:	f7ff ba92 	b.w	800836a <_dtoa_r+0xea>
 8008e46:	9b01      	ldr	r3, [sp, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dcb5      	bgt.n	8008db8 <_dtoa_r+0xb38>
 8008e4c:	9b07      	ldr	r3, [sp, #28]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	f73f aeb1 	bgt.w	8008bb6 <_dtoa_r+0x936>
 8008e54:	e7b0      	b.n	8008db8 <_dtoa_r+0xb38>
 8008e56:	bf00      	nop
 8008e58:	0800a66a 	.word	0x0800a66a
 8008e5c:	0800a5ca 	.word	0x0800a5ca
 8008e60:	0800a5ee 	.word	0x0800a5ee

08008e64 <_free_r>:
 8008e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d044      	beq.n	8008ef4 <_free_r+0x90>
 8008e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e6e:	9001      	str	r0, [sp, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f1a1 0404 	sub.w	r4, r1, #4
 8008e76:	bfb8      	it	lt
 8008e78:	18e4      	addlt	r4, r4, r3
 8008e7a:	f000 f8e7 	bl	800904c <__malloc_lock>
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <_free_r+0x94>)
 8008e80:	9801      	ldr	r0, [sp, #4]
 8008e82:	6813      	ldr	r3, [r2, #0]
 8008e84:	b933      	cbnz	r3, 8008e94 <_free_r+0x30>
 8008e86:	6063      	str	r3, [r4, #4]
 8008e88:	6014      	str	r4, [r2, #0]
 8008e8a:	b003      	add	sp, #12
 8008e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e90:	f000 b8e2 	b.w	8009058 <__malloc_unlock>
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	d908      	bls.n	8008eaa <_free_r+0x46>
 8008e98:	6825      	ldr	r5, [r4, #0]
 8008e9a:	1961      	adds	r1, r4, r5
 8008e9c:	428b      	cmp	r3, r1
 8008e9e:	bf01      	itttt	eq
 8008ea0:	6819      	ldreq	r1, [r3, #0]
 8008ea2:	685b      	ldreq	r3, [r3, #4]
 8008ea4:	1949      	addeq	r1, r1, r5
 8008ea6:	6021      	streq	r1, [r4, #0]
 8008ea8:	e7ed      	b.n	8008e86 <_free_r+0x22>
 8008eaa:	461a      	mov	r2, r3
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	b10b      	cbz	r3, 8008eb4 <_free_r+0x50>
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d9fa      	bls.n	8008eaa <_free_r+0x46>
 8008eb4:	6811      	ldr	r1, [r2, #0]
 8008eb6:	1855      	adds	r5, r2, r1
 8008eb8:	42a5      	cmp	r5, r4
 8008eba:	d10b      	bne.n	8008ed4 <_free_r+0x70>
 8008ebc:	6824      	ldr	r4, [r4, #0]
 8008ebe:	4421      	add	r1, r4
 8008ec0:	1854      	adds	r4, r2, r1
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	6011      	str	r1, [r2, #0]
 8008ec6:	d1e0      	bne.n	8008e8a <_free_r+0x26>
 8008ec8:	681c      	ldr	r4, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	6053      	str	r3, [r2, #4]
 8008ece:	440c      	add	r4, r1
 8008ed0:	6014      	str	r4, [r2, #0]
 8008ed2:	e7da      	b.n	8008e8a <_free_r+0x26>
 8008ed4:	d902      	bls.n	8008edc <_free_r+0x78>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	6003      	str	r3, [r0, #0]
 8008eda:	e7d6      	b.n	8008e8a <_free_r+0x26>
 8008edc:	6825      	ldr	r5, [r4, #0]
 8008ede:	1961      	adds	r1, r4, r5
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	bf04      	itt	eq
 8008ee4:	6819      	ldreq	r1, [r3, #0]
 8008ee6:	685b      	ldreq	r3, [r3, #4]
 8008ee8:	6063      	str	r3, [r4, #4]
 8008eea:	bf04      	itt	eq
 8008eec:	1949      	addeq	r1, r1, r5
 8008eee:	6021      	streq	r1, [r4, #0]
 8008ef0:	6054      	str	r4, [r2, #4]
 8008ef2:	e7ca      	b.n	8008e8a <_free_r+0x26>
 8008ef4:	b003      	add	sp, #12
 8008ef6:	bd30      	pop	{r4, r5, pc}
 8008ef8:	20000874 	.word	0x20000874

08008efc <malloc>:
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <malloc+0xc>)
 8008efe:	4601      	mov	r1, r0
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f000 b823 	b.w	8008f4c <_malloc_r>
 8008f06:	bf00      	nop
 8008f08:	20000064 	.word	0x20000064

08008f0c <sbrk_aligned>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	4e0e      	ldr	r6, [pc, #56]	; (8008f48 <sbrk_aligned+0x3c>)
 8008f10:	460c      	mov	r4, r1
 8008f12:	6831      	ldr	r1, [r6, #0]
 8008f14:	4605      	mov	r5, r0
 8008f16:	b911      	cbnz	r1, 8008f1e <sbrk_aligned+0x12>
 8008f18:	f001 f81a 	bl	8009f50 <_sbrk_r>
 8008f1c:	6030      	str	r0, [r6, #0]
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f001 f815 	bl	8009f50 <_sbrk_r>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d00a      	beq.n	8008f40 <sbrk_aligned+0x34>
 8008f2a:	1cc4      	adds	r4, r0, #3
 8008f2c:	f024 0403 	bic.w	r4, r4, #3
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d007      	beq.n	8008f44 <sbrk_aligned+0x38>
 8008f34:	1a21      	subs	r1, r4, r0
 8008f36:	4628      	mov	r0, r5
 8008f38:	f001 f80a 	bl	8009f50 <_sbrk_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d101      	bne.n	8008f44 <sbrk_aligned+0x38>
 8008f40:	f04f 34ff 	mov.w	r4, #4294967295
 8008f44:	4620      	mov	r0, r4
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	20000878 	.word	0x20000878

08008f4c <_malloc_r>:
 8008f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	1ccd      	adds	r5, r1, #3
 8008f52:	f025 0503 	bic.w	r5, r5, #3
 8008f56:	3508      	adds	r5, #8
 8008f58:	2d0c      	cmp	r5, #12
 8008f5a:	bf38      	it	cc
 8008f5c:	250c      	movcc	r5, #12
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	4607      	mov	r7, r0
 8008f62:	db01      	blt.n	8008f68 <_malloc_r+0x1c>
 8008f64:	42a9      	cmp	r1, r5
 8008f66:	d905      	bls.n	8008f74 <_malloc_r+0x28>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	4630      	mov	r0, r6
 8008f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009048 <_malloc_r+0xfc>
 8008f78:	f000 f868 	bl	800904c <__malloc_lock>
 8008f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f80:	461c      	mov	r4, r3
 8008f82:	bb5c      	cbnz	r4, 8008fdc <_malloc_r+0x90>
 8008f84:	4629      	mov	r1, r5
 8008f86:	4638      	mov	r0, r7
 8008f88:	f7ff ffc0 	bl	8008f0c <sbrk_aligned>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	4604      	mov	r4, r0
 8008f90:	d155      	bne.n	800903e <_malloc_r+0xf2>
 8008f92:	f8d8 4000 	ldr.w	r4, [r8]
 8008f96:	4626      	mov	r6, r4
 8008f98:	2e00      	cmp	r6, #0
 8008f9a:	d145      	bne.n	8009028 <_malloc_r+0xdc>
 8008f9c:	2c00      	cmp	r4, #0
 8008f9e:	d048      	beq.n	8009032 <_malloc_r+0xe6>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	eb04 0903 	add.w	r9, r4, r3
 8008faa:	f000 ffd1 	bl	8009f50 <_sbrk_r>
 8008fae:	4581      	cmp	r9, r0
 8008fb0:	d13f      	bne.n	8009032 <_malloc_r+0xe6>
 8008fb2:	6821      	ldr	r1, [r4, #0]
 8008fb4:	1a6d      	subs	r5, r5, r1
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff ffa7 	bl	8008f0c <sbrk_aligned>
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d037      	beq.n	8009032 <_malloc_r+0xe6>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	442b      	add	r3, r5
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d038      	beq.n	8009042 <_malloc_r+0xf6>
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	42a2      	cmp	r2, r4
 8008fd4:	d12b      	bne.n	800902e <_malloc_r+0xe2>
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	e00f      	b.n	8008ffc <_malloc_r+0xb0>
 8008fdc:	6822      	ldr	r2, [r4, #0]
 8008fde:	1b52      	subs	r2, r2, r5
 8008fe0:	d41f      	bmi.n	8009022 <_malloc_r+0xd6>
 8008fe2:	2a0b      	cmp	r2, #11
 8008fe4:	d917      	bls.n	8009016 <_malloc_r+0xca>
 8008fe6:	1961      	adds	r1, r4, r5
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	6025      	str	r5, [r4, #0]
 8008fec:	bf18      	it	ne
 8008fee:	6059      	strne	r1, [r3, #4]
 8008ff0:	6863      	ldr	r3, [r4, #4]
 8008ff2:	bf08      	it	eq
 8008ff4:	f8c8 1000 	streq.w	r1, [r8]
 8008ff8:	5162      	str	r2, [r4, r5]
 8008ffa:	604b      	str	r3, [r1, #4]
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f104 060b 	add.w	r6, r4, #11
 8009002:	f000 f829 	bl	8009058 <__malloc_unlock>
 8009006:	f026 0607 	bic.w	r6, r6, #7
 800900a:	1d23      	adds	r3, r4, #4
 800900c:	1af2      	subs	r2, r6, r3
 800900e:	d0ae      	beq.n	8008f6e <_malloc_r+0x22>
 8009010:	1b9b      	subs	r3, r3, r6
 8009012:	50a3      	str	r3, [r4, r2]
 8009014:	e7ab      	b.n	8008f6e <_malloc_r+0x22>
 8009016:	42a3      	cmp	r3, r4
 8009018:	6862      	ldr	r2, [r4, #4]
 800901a:	d1dd      	bne.n	8008fd8 <_malloc_r+0x8c>
 800901c:	f8c8 2000 	str.w	r2, [r8]
 8009020:	e7ec      	b.n	8008ffc <_malloc_r+0xb0>
 8009022:	4623      	mov	r3, r4
 8009024:	6864      	ldr	r4, [r4, #4]
 8009026:	e7ac      	b.n	8008f82 <_malloc_r+0x36>
 8009028:	4634      	mov	r4, r6
 800902a:	6876      	ldr	r6, [r6, #4]
 800902c:	e7b4      	b.n	8008f98 <_malloc_r+0x4c>
 800902e:	4613      	mov	r3, r2
 8009030:	e7cc      	b.n	8008fcc <_malloc_r+0x80>
 8009032:	230c      	movs	r3, #12
 8009034:	603b      	str	r3, [r7, #0]
 8009036:	4638      	mov	r0, r7
 8009038:	f000 f80e 	bl	8009058 <__malloc_unlock>
 800903c:	e797      	b.n	8008f6e <_malloc_r+0x22>
 800903e:	6025      	str	r5, [r4, #0]
 8009040:	e7dc      	b.n	8008ffc <_malloc_r+0xb0>
 8009042:	605b      	str	r3, [r3, #4]
 8009044:	deff      	udf	#255	; 0xff
 8009046:	bf00      	nop
 8009048:	20000874 	.word	0x20000874

0800904c <__malloc_lock>:
 800904c:	4801      	ldr	r0, [pc, #4]	; (8009054 <__malloc_lock+0x8>)
 800904e:	f7ff b88c 	b.w	800816a <__retarget_lock_acquire_recursive>
 8009052:	bf00      	nop
 8009054:	20000870 	.word	0x20000870

08009058 <__malloc_unlock>:
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <__malloc_unlock+0x8>)
 800905a:	f7ff b887 	b.w	800816c <__retarget_lock_release_recursive>
 800905e:	bf00      	nop
 8009060:	20000870 	.word	0x20000870

08009064 <_Balloc>:
 8009064:	b570      	push	{r4, r5, r6, lr}
 8009066:	69c6      	ldr	r6, [r0, #28]
 8009068:	4604      	mov	r4, r0
 800906a:	460d      	mov	r5, r1
 800906c:	b976      	cbnz	r6, 800908c <_Balloc+0x28>
 800906e:	2010      	movs	r0, #16
 8009070:	f7ff ff44 	bl	8008efc <malloc>
 8009074:	4602      	mov	r2, r0
 8009076:	61e0      	str	r0, [r4, #28]
 8009078:	b920      	cbnz	r0, 8009084 <_Balloc+0x20>
 800907a:	4b18      	ldr	r3, [pc, #96]	; (80090dc <_Balloc+0x78>)
 800907c:	4818      	ldr	r0, [pc, #96]	; (80090e0 <_Balloc+0x7c>)
 800907e:	216b      	movs	r1, #107	; 0x6b
 8009080:	f000 ff84 	bl	8009f8c <__assert_func>
 8009084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009088:	6006      	str	r6, [r0, #0]
 800908a:	60c6      	str	r6, [r0, #12]
 800908c:	69e6      	ldr	r6, [r4, #28]
 800908e:	68f3      	ldr	r3, [r6, #12]
 8009090:	b183      	cbz	r3, 80090b4 <_Balloc+0x50>
 8009092:	69e3      	ldr	r3, [r4, #28]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800909a:	b9b8      	cbnz	r0, 80090cc <_Balloc+0x68>
 800909c:	2101      	movs	r1, #1
 800909e:	fa01 f605 	lsl.w	r6, r1, r5
 80090a2:	1d72      	adds	r2, r6, #5
 80090a4:	0092      	lsls	r2, r2, #2
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 ff8e 	bl	8009fc8 <_calloc_r>
 80090ac:	b160      	cbz	r0, 80090c8 <_Balloc+0x64>
 80090ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090b2:	e00e      	b.n	80090d2 <_Balloc+0x6e>
 80090b4:	2221      	movs	r2, #33	; 0x21
 80090b6:	2104      	movs	r1, #4
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 ff85 	bl	8009fc8 <_calloc_r>
 80090be:	69e3      	ldr	r3, [r4, #28]
 80090c0:	60f0      	str	r0, [r6, #12]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e4      	bne.n	8009092 <_Balloc+0x2e>
 80090c8:	2000      	movs	r0, #0
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	6802      	ldr	r2, [r0, #0]
 80090ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090d2:	2300      	movs	r3, #0
 80090d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090d8:	e7f7      	b.n	80090ca <_Balloc+0x66>
 80090da:	bf00      	nop
 80090dc:	0800a5fb 	.word	0x0800a5fb
 80090e0:	0800a67b 	.word	0x0800a67b

080090e4 <_Bfree>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	69c6      	ldr	r6, [r0, #28]
 80090e8:	4605      	mov	r5, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	b976      	cbnz	r6, 800910c <_Bfree+0x28>
 80090ee:	2010      	movs	r0, #16
 80090f0:	f7ff ff04 	bl	8008efc <malloc>
 80090f4:	4602      	mov	r2, r0
 80090f6:	61e8      	str	r0, [r5, #28]
 80090f8:	b920      	cbnz	r0, 8009104 <_Bfree+0x20>
 80090fa:	4b09      	ldr	r3, [pc, #36]	; (8009120 <_Bfree+0x3c>)
 80090fc:	4809      	ldr	r0, [pc, #36]	; (8009124 <_Bfree+0x40>)
 80090fe:	218f      	movs	r1, #143	; 0x8f
 8009100:	f000 ff44 	bl	8009f8c <__assert_func>
 8009104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009108:	6006      	str	r6, [r0, #0]
 800910a:	60c6      	str	r6, [r0, #12]
 800910c:	b13c      	cbz	r4, 800911e <_Bfree+0x3a>
 800910e:	69eb      	ldr	r3, [r5, #28]
 8009110:	6862      	ldr	r2, [r4, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009118:	6021      	str	r1, [r4, #0]
 800911a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	0800a5fb 	.word	0x0800a5fb
 8009124:	0800a67b 	.word	0x0800a67b

08009128 <__multadd>:
 8009128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912c:	690d      	ldr	r5, [r1, #16]
 800912e:	4607      	mov	r7, r0
 8009130:	460c      	mov	r4, r1
 8009132:	461e      	mov	r6, r3
 8009134:	f101 0c14 	add.w	ip, r1, #20
 8009138:	2000      	movs	r0, #0
 800913a:	f8dc 3000 	ldr.w	r3, [ip]
 800913e:	b299      	uxth	r1, r3
 8009140:	fb02 6101 	mla	r1, r2, r1, r6
 8009144:	0c1e      	lsrs	r6, r3, #16
 8009146:	0c0b      	lsrs	r3, r1, #16
 8009148:	fb02 3306 	mla	r3, r2, r6, r3
 800914c:	b289      	uxth	r1, r1
 800914e:	3001      	adds	r0, #1
 8009150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009154:	4285      	cmp	r5, r0
 8009156:	f84c 1b04 	str.w	r1, [ip], #4
 800915a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800915e:	dcec      	bgt.n	800913a <__multadd+0x12>
 8009160:	b30e      	cbz	r6, 80091a6 <__multadd+0x7e>
 8009162:	68a3      	ldr	r3, [r4, #8]
 8009164:	42ab      	cmp	r3, r5
 8009166:	dc19      	bgt.n	800919c <__multadd+0x74>
 8009168:	6861      	ldr	r1, [r4, #4]
 800916a:	4638      	mov	r0, r7
 800916c:	3101      	adds	r1, #1
 800916e:	f7ff ff79 	bl	8009064 <_Balloc>
 8009172:	4680      	mov	r8, r0
 8009174:	b928      	cbnz	r0, 8009182 <__multadd+0x5a>
 8009176:	4602      	mov	r2, r0
 8009178:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <__multadd+0x84>)
 800917a:	480d      	ldr	r0, [pc, #52]	; (80091b0 <__multadd+0x88>)
 800917c:	21ba      	movs	r1, #186	; 0xba
 800917e:	f000 ff05 	bl	8009f8c <__assert_func>
 8009182:	6922      	ldr	r2, [r4, #16]
 8009184:	3202      	adds	r2, #2
 8009186:	f104 010c 	add.w	r1, r4, #12
 800918a:	0092      	lsls	r2, r2, #2
 800918c:	300c      	adds	r0, #12
 800918e:	f000 feef 	bl	8009f70 <memcpy>
 8009192:	4621      	mov	r1, r4
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff ffa5 	bl	80090e4 <_Bfree>
 800919a:	4644      	mov	r4, r8
 800919c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091a0:	3501      	adds	r5, #1
 80091a2:	615e      	str	r6, [r3, #20]
 80091a4:	6125      	str	r5, [r4, #16]
 80091a6:	4620      	mov	r0, r4
 80091a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ac:	0800a66a 	.word	0x0800a66a
 80091b0:	0800a67b 	.word	0x0800a67b

080091b4 <__hi0bits>:
 80091b4:	0c03      	lsrs	r3, r0, #16
 80091b6:	041b      	lsls	r3, r3, #16
 80091b8:	b9d3      	cbnz	r3, 80091f0 <__hi0bits+0x3c>
 80091ba:	0400      	lsls	r0, r0, #16
 80091bc:	2310      	movs	r3, #16
 80091be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091c2:	bf04      	itt	eq
 80091c4:	0200      	lsleq	r0, r0, #8
 80091c6:	3308      	addeq	r3, #8
 80091c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091cc:	bf04      	itt	eq
 80091ce:	0100      	lsleq	r0, r0, #4
 80091d0:	3304      	addeq	r3, #4
 80091d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091d6:	bf04      	itt	eq
 80091d8:	0080      	lsleq	r0, r0, #2
 80091da:	3302      	addeq	r3, #2
 80091dc:	2800      	cmp	r0, #0
 80091de:	db05      	blt.n	80091ec <__hi0bits+0x38>
 80091e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091e4:	f103 0301 	add.w	r3, r3, #1
 80091e8:	bf08      	it	eq
 80091ea:	2320      	moveq	r3, #32
 80091ec:	4618      	mov	r0, r3
 80091ee:	4770      	bx	lr
 80091f0:	2300      	movs	r3, #0
 80091f2:	e7e4      	b.n	80091be <__hi0bits+0xa>

080091f4 <__lo0bits>:
 80091f4:	6803      	ldr	r3, [r0, #0]
 80091f6:	f013 0207 	ands.w	r2, r3, #7
 80091fa:	d00c      	beq.n	8009216 <__lo0bits+0x22>
 80091fc:	07d9      	lsls	r1, r3, #31
 80091fe:	d422      	bmi.n	8009246 <__lo0bits+0x52>
 8009200:	079a      	lsls	r2, r3, #30
 8009202:	bf49      	itett	mi
 8009204:	085b      	lsrmi	r3, r3, #1
 8009206:	089b      	lsrpl	r3, r3, #2
 8009208:	6003      	strmi	r3, [r0, #0]
 800920a:	2201      	movmi	r2, #1
 800920c:	bf5c      	itt	pl
 800920e:	6003      	strpl	r3, [r0, #0]
 8009210:	2202      	movpl	r2, #2
 8009212:	4610      	mov	r0, r2
 8009214:	4770      	bx	lr
 8009216:	b299      	uxth	r1, r3
 8009218:	b909      	cbnz	r1, 800921e <__lo0bits+0x2a>
 800921a:	0c1b      	lsrs	r3, r3, #16
 800921c:	2210      	movs	r2, #16
 800921e:	b2d9      	uxtb	r1, r3
 8009220:	b909      	cbnz	r1, 8009226 <__lo0bits+0x32>
 8009222:	3208      	adds	r2, #8
 8009224:	0a1b      	lsrs	r3, r3, #8
 8009226:	0719      	lsls	r1, r3, #28
 8009228:	bf04      	itt	eq
 800922a:	091b      	lsreq	r3, r3, #4
 800922c:	3204      	addeq	r2, #4
 800922e:	0799      	lsls	r1, r3, #30
 8009230:	bf04      	itt	eq
 8009232:	089b      	lsreq	r3, r3, #2
 8009234:	3202      	addeq	r2, #2
 8009236:	07d9      	lsls	r1, r3, #31
 8009238:	d403      	bmi.n	8009242 <__lo0bits+0x4e>
 800923a:	085b      	lsrs	r3, r3, #1
 800923c:	f102 0201 	add.w	r2, r2, #1
 8009240:	d003      	beq.n	800924a <__lo0bits+0x56>
 8009242:	6003      	str	r3, [r0, #0]
 8009244:	e7e5      	b.n	8009212 <__lo0bits+0x1e>
 8009246:	2200      	movs	r2, #0
 8009248:	e7e3      	b.n	8009212 <__lo0bits+0x1e>
 800924a:	2220      	movs	r2, #32
 800924c:	e7e1      	b.n	8009212 <__lo0bits+0x1e>
	...

08009250 <__i2b>:
 8009250:	b510      	push	{r4, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	2101      	movs	r1, #1
 8009256:	f7ff ff05 	bl	8009064 <_Balloc>
 800925a:	4602      	mov	r2, r0
 800925c:	b928      	cbnz	r0, 800926a <__i2b+0x1a>
 800925e:	4b05      	ldr	r3, [pc, #20]	; (8009274 <__i2b+0x24>)
 8009260:	4805      	ldr	r0, [pc, #20]	; (8009278 <__i2b+0x28>)
 8009262:	f240 1145 	movw	r1, #325	; 0x145
 8009266:	f000 fe91 	bl	8009f8c <__assert_func>
 800926a:	2301      	movs	r3, #1
 800926c:	6144      	str	r4, [r0, #20]
 800926e:	6103      	str	r3, [r0, #16]
 8009270:	bd10      	pop	{r4, pc}
 8009272:	bf00      	nop
 8009274:	0800a66a 	.word	0x0800a66a
 8009278:	0800a67b 	.word	0x0800a67b

0800927c <__multiply>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	4691      	mov	r9, r2
 8009282:	690a      	ldr	r2, [r1, #16]
 8009284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009288:	429a      	cmp	r2, r3
 800928a:	bfb8      	it	lt
 800928c:	460b      	movlt	r3, r1
 800928e:	460c      	mov	r4, r1
 8009290:	bfbc      	itt	lt
 8009292:	464c      	movlt	r4, r9
 8009294:	4699      	movlt	r9, r3
 8009296:	6927      	ldr	r7, [r4, #16]
 8009298:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800929c:	68a3      	ldr	r3, [r4, #8]
 800929e:	6861      	ldr	r1, [r4, #4]
 80092a0:	eb07 060a 	add.w	r6, r7, sl
 80092a4:	42b3      	cmp	r3, r6
 80092a6:	b085      	sub	sp, #20
 80092a8:	bfb8      	it	lt
 80092aa:	3101      	addlt	r1, #1
 80092ac:	f7ff feda 	bl	8009064 <_Balloc>
 80092b0:	b930      	cbnz	r0, 80092c0 <__multiply+0x44>
 80092b2:	4602      	mov	r2, r0
 80092b4:	4b44      	ldr	r3, [pc, #272]	; (80093c8 <__multiply+0x14c>)
 80092b6:	4845      	ldr	r0, [pc, #276]	; (80093cc <__multiply+0x150>)
 80092b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80092bc:	f000 fe66 	bl	8009f8c <__assert_func>
 80092c0:	f100 0514 	add.w	r5, r0, #20
 80092c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092c8:	462b      	mov	r3, r5
 80092ca:	2200      	movs	r2, #0
 80092cc:	4543      	cmp	r3, r8
 80092ce:	d321      	bcc.n	8009314 <__multiply+0x98>
 80092d0:	f104 0314 	add.w	r3, r4, #20
 80092d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092d8:	f109 0314 	add.w	r3, r9, #20
 80092dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092e0:	9202      	str	r2, [sp, #8]
 80092e2:	1b3a      	subs	r2, r7, r4
 80092e4:	3a15      	subs	r2, #21
 80092e6:	f022 0203 	bic.w	r2, r2, #3
 80092ea:	3204      	adds	r2, #4
 80092ec:	f104 0115 	add.w	r1, r4, #21
 80092f0:	428f      	cmp	r7, r1
 80092f2:	bf38      	it	cc
 80092f4:	2204      	movcc	r2, #4
 80092f6:	9201      	str	r2, [sp, #4]
 80092f8:	9a02      	ldr	r2, [sp, #8]
 80092fa:	9303      	str	r3, [sp, #12]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d80c      	bhi.n	800931a <__multiply+0x9e>
 8009300:	2e00      	cmp	r6, #0
 8009302:	dd03      	ble.n	800930c <__multiply+0x90>
 8009304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009308:	2b00      	cmp	r3, #0
 800930a:	d05b      	beq.n	80093c4 <__multiply+0x148>
 800930c:	6106      	str	r6, [r0, #16]
 800930e:	b005      	add	sp, #20
 8009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009314:	f843 2b04 	str.w	r2, [r3], #4
 8009318:	e7d8      	b.n	80092cc <__multiply+0x50>
 800931a:	f8b3 a000 	ldrh.w	sl, [r3]
 800931e:	f1ba 0f00 	cmp.w	sl, #0
 8009322:	d024      	beq.n	800936e <__multiply+0xf2>
 8009324:	f104 0e14 	add.w	lr, r4, #20
 8009328:	46a9      	mov	r9, r5
 800932a:	f04f 0c00 	mov.w	ip, #0
 800932e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009332:	f8d9 1000 	ldr.w	r1, [r9]
 8009336:	fa1f fb82 	uxth.w	fp, r2
 800933a:	b289      	uxth	r1, r1
 800933c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009340:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009344:	f8d9 2000 	ldr.w	r2, [r9]
 8009348:	4461      	add	r1, ip
 800934a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800934e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009356:	b289      	uxth	r1, r1
 8009358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800935c:	4577      	cmp	r7, lr
 800935e:	f849 1b04 	str.w	r1, [r9], #4
 8009362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009366:	d8e2      	bhi.n	800932e <__multiply+0xb2>
 8009368:	9a01      	ldr	r2, [sp, #4]
 800936a:	f845 c002 	str.w	ip, [r5, r2]
 800936e:	9a03      	ldr	r2, [sp, #12]
 8009370:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009374:	3304      	adds	r3, #4
 8009376:	f1b9 0f00 	cmp.w	r9, #0
 800937a:	d021      	beq.n	80093c0 <__multiply+0x144>
 800937c:	6829      	ldr	r1, [r5, #0]
 800937e:	f104 0c14 	add.w	ip, r4, #20
 8009382:	46ae      	mov	lr, r5
 8009384:	f04f 0a00 	mov.w	sl, #0
 8009388:	f8bc b000 	ldrh.w	fp, [ip]
 800938c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009390:	fb09 220b 	mla	r2, r9, fp, r2
 8009394:	4452      	add	r2, sl
 8009396:	b289      	uxth	r1, r1
 8009398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800939c:	f84e 1b04 	str.w	r1, [lr], #4
 80093a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093a8:	f8be 1000 	ldrh.w	r1, [lr]
 80093ac:	fb09 110a 	mla	r1, r9, sl, r1
 80093b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80093b4:	4567      	cmp	r7, ip
 80093b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093ba:	d8e5      	bhi.n	8009388 <__multiply+0x10c>
 80093bc:	9a01      	ldr	r2, [sp, #4]
 80093be:	50a9      	str	r1, [r5, r2]
 80093c0:	3504      	adds	r5, #4
 80093c2:	e799      	b.n	80092f8 <__multiply+0x7c>
 80093c4:	3e01      	subs	r6, #1
 80093c6:	e79b      	b.n	8009300 <__multiply+0x84>
 80093c8:	0800a66a 	.word	0x0800a66a
 80093cc:	0800a67b 	.word	0x0800a67b

080093d0 <__pow5mult>:
 80093d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d4:	4615      	mov	r5, r2
 80093d6:	f012 0203 	ands.w	r2, r2, #3
 80093da:	4606      	mov	r6, r0
 80093dc:	460f      	mov	r7, r1
 80093de:	d007      	beq.n	80093f0 <__pow5mult+0x20>
 80093e0:	4c25      	ldr	r4, [pc, #148]	; (8009478 <__pow5mult+0xa8>)
 80093e2:	3a01      	subs	r2, #1
 80093e4:	2300      	movs	r3, #0
 80093e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093ea:	f7ff fe9d 	bl	8009128 <__multadd>
 80093ee:	4607      	mov	r7, r0
 80093f0:	10ad      	asrs	r5, r5, #2
 80093f2:	d03d      	beq.n	8009470 <__pow5mult+0xa0>
 80093f4:	69f4      	ldr	r4, [r6, #28]
 80093f6:	b97c      	cbnz	r4, 8009418 <__pow5mult+0x48>
 80093f8:	2010      	movs	r0, #16
 80093fa:	f7ff fd7f 	bl	8008efc <malloc>
 80093fe:	4602      	mov	r2, r0
 8009400:	61f0      	str	r0, [r6, #28]
 8009402:	b928      	cbnz	r0, 8009410 <__pow5mult+0x40>
 8009404:	4b1d      	ldr	r3, [pc, #116]	; (800947c <__pow5mult+0xac>)
 8009406:	481e      	ldr	r0, [pc, #120]	; (8009480 <__pow5mult+0xb0>)
 8009408:	f240 11b3 	movw	r1, #435	; 0x1b3
 800940c:	f000 fdbe 	bl	8009f8c <__assert_func>
 8009410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009414:	6004      	str	r4, [r0, #0]
 8009416:	60c4      	str	r4, [r0, #12]
 8009418:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800941c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009420:	b94c      	cbnz	r4, 8009436 <__pow5mult+0x66>
 8009422:	f240 2171 	movw	r1, #625	; 0x271
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff ff12 	bl	8009250 <__i2b>
 800942c:	2300      	movs	r3, #0
 800942e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009432:	4604      	mov	r4, r0
 8009434:	6003      	str	r3, [r0, #0]
 8009436:	f04f 0900 	mov.w	r9, #0
 800943a:	07eb      	lsls	r3, r5, #31
 800943c:	d50a      	bpl.n	8009454 <__pow5mult+0x84>
 800943e:	4639      	mov	r1, r7
 8009440:	4622      	mov	r2, r4
 8009442:	4630      	mov	r0, r6
 8009444:	f7ff ff1a 	bl	800927c <__multiply>
 8009448:	4639      	mov	r1, r7
 800944a:	4680      	mov	r8, r0
 800944c:	4630      	mov	r0, r6
 800944e:	f7ff fe49 	bl	80090e4 <_Bfree>
 8009452:	4647      	mov	r7, r8
 8009454:	106d      	asrs	r5, r5, #1
 8009456:	d00b      	beq.n	8009470 <__pow5mult+0xa0>
 8009458:	6820      	ldr	r0, [r4, #0]
 800945a:	b938      	cbnz	r0, 800946c <__pow5mult+0x9c>
 800945c:	4622      	mov	r2, r4
 800945e:	4621      	mov	r1, r4
 8009460:	4630      	mov	r0, r6
 8009462:	f7ff ff0b 	bl	800927c <__multiply>
 8009466:	6020      	str	r0, [r4, #0]
 8009468:	f8c0 9000 	str.w	r9, [r0]
 800946c:	4604      	mov	r4, r0
 800946e:	e7e4      	b.n	800943a <__pow5mult+0x6a>
 8009470:	4638      	mov	r0, r7
 8009472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009476:	bf00      	nop
 8009478:	0800a7c8 	.word	0x0800a7c8
 800947c:	0800a5fb 	.word	0x0800a5fb
 8009480:	0800a67b 	.word	0x0800a67b

08009484 <__lshift>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	460c      	mov	r4, r1
 800948a:	6849      	ldr	r1, [r1, #4]
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009492:	68a3      	ldr	r3, [r4, #8]
 8009494:	4607      	mov	r7, r0
 8009496:	4691      	mov	r9, r2
 8009498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800949c:	f108 0601 	add.w	r6, r8, #1
 80094a0:	42b3      	cmp	r3, r6
 80094a2:	db0b      	blt.n	80094bc <__lshift+0x38>
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff fddd 	bl	8009064 <_Balloc>
 80094aa:	4605      	mov	r5, r0
 80094ac:	b948      	cbnz	r0, 80094c2 <__lshift+0x3e>
 80094ae:	4602      	mov	r2, r0
 80094b0:	4b28      	ldr	r3, [pc, #160]	; (8009554 <__lshift+0xd0>)
 80094b2:	4829      	ldr	r0, [pc, #164]	; (8009558 <__lshift+0xd4>)
 80094b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80094b8:	f000 fd68 	bl	8009f8c <__assert_func>
 80094bc:	3101      	adds	r1, #1
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	e7ee      	b.n	80094a0 <__lshift+0x1c>
 80094c2:	2300      	movs	r3, #0
 80094c4:	f100 0114 	add.w	r1, r0, #20
 80094c8:	f100 0210 	add.w	r2, r0, #16
 80094cc:	4618      	mov	r0, r3
 80094ce:	4553      	cmp	r3, sl
 80094d0:	db33      	blt.n	800953a <__lshift+0xb6>
 80094d2:	6920      	ldr	r0, [r4, #16]
 80094d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094d8:	f104 0314 	add.w	r3, r4, #20
 80094dc:	f019 091f 	ands.w	r9, r9, #31
 80094e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094e8:	d02b      	beq.n	8009542 <__lshift+0xbe>
 80094ea:	f1c9 0e20 	rsb	lr, r9, #32
 80094ee:	468a      	mov	sl, r1
 80094f0:	2200      	movs	r2, #0
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	fa00 f009 	lsl.w	r0, r0, r9
 80094f8:	4310      	orrs	r0, r2
 80094fa:	f84a 0b04 	str.w	r0, [sl], #4
 80094fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009502:	459c      	cmp	ip, r3
 8009504:	fa22 f20e 	lsr.w	r2, r2, lr
 8009508:	d8f3      	bhi.n	80094f2 <__lshift+0x6e>
 800950a:	ebac 0304 	sub.w	r3, ip, r4
 800950e:	3b15      	subs	r3, #21
 8009510:	f023 0303 	bic.w	r3, r3, #3
 8009514:	3304      	adds	r3, #4
 8009516:	f104 0015 	add.w	r0, r4, #21
 800951a:	4584      	cmp	ip, r0
 800951c:	bf38      	it	cc
 800951e:	2304      	movcc	r3, #4
 8009520:	50ca      	str	r2, [r1, r3]
 8009522:	b10a      	cbz	r2, 8009528 <__lshift+0xa4>
 8009524:	f108 0602 	add.w	r6, r8, #2
 8009528:	3e01      	subs	r6, #1
 800952a:	4638      	mov	r0, r7
 800952c:	612e      	str	r6, [r5, #16]
 800952e:	4621      	mov	r1, r4
 8009530:	f7ff fdd8 	bl	80090e4 <_Bfree>
 8009534:	4628      	mov	r0, r5
 8009536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953a:	f842 0f04 	str.w	r0, [r2, #4]!
 800953e:	3301      	adds	r3, #1
 8009540:	e7c5      	b.n	80094ce <__lshift+0x4a>
 8009542:	3904      	subs	r1, #4
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	f841 2f04 	str.w	r2, [r1, #4]!
 800954c:	459c      	cmp	ip, r3
 800954e:	d8f9      	bhi.n	8009544 <__lshift+0xc0>
 8009550:	e7ea      	b.n	8009528 <__lshift+0xa4>
 8009552:	bf00      	nop
 8009554:	0800a66a 	.word	0x0800a66a
 8009558:	0800a67b 	.word	0x0800a67b

0800955c <__mcmp>:
 800955c:	b530      	push	{r4, r5, lr}
 800955e:	6902      	ldr	r2, [r0, #16]
 8009560:	690c      	ldr	r4, [r1, #16]
 8009562:	1b12      	subs	r2, r2, r4
 8009564:	d10e      	bne.n	8009584 <__mcmp+0x28>
 8009566:	f100 0314 	add.w	r3, r0, #20
 800956a:	3114      	adds	r1, #20
 800956c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009570:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009574:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009578:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800957c:	42a5      	cmp	r5, r4
 800957e:	d003      	beq.n	8009588 <__mcmp+0x2c>
 8009580:	d305      	bcc.n	800958e <__mcmp+0x32>
 8009582:	2201      	movs	r2, #1
 8009584:	4610      	mov	r0, r2
 8009586:	bd30      	pop	{r4, r5, pc}
 8009588:	4283      	cmp	r3, r0
 800958a:	d3f3      	bcc.n	8009574 <__mcmp+0x18>
 800958c:	e7fa      	b.n	8009584 <__mcmp+0x28>
 800958e:	f04f 32ff 	mov.w	r2, #4294967295
 8009592:	e7f7      	b.n	8009584 <__mcmp+0x28>

08009594 <__mdiff>:
 8009594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	460c      	mov	r4, r1
 800959a:	4606      	mov	r6, r0
 800959c:	4611      	mov	r1, r2
 800959e:	4620      	mov	r0, r4
 80095a0:	4690      	mov	r8, r2
 80095a2:	f7ff ffdb 	bl	800955c <__mcmp>
 80095a6:	1e05      	subs	r5, r0, #0
 80095a8:	d110      	bne.n	80095cc <__mdiff+0x38>
 80095aa:	4629      	mov	r1, r5
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff fd59 	bl	8009064 <_Balloc>
 80095b2:	b930      	cbnz	r0, 80095c2 <__mdiff+0x2e>
 80095b4:	4b3a      	ldr	r3, [pc, #232]	; (80096a0 <__mdiff+0x10c>)
 80095b6:	4602      	mov	r2, r0
 80095b8:	f240 2137 	movw	r1, #567	; 0x237
 80095bc:	4839      	ldr	r0, [pc, #228]	; (80096a4 <__mdiff+0x110>)
 80095be:	f000 fce5 	bl	8009f8c <__assert_func>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095cc:	bfa4      	itt	ge
 80095ce:	4643      	movge	r3, r8
 80095d0:	46a0      	movge	r8, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095d8:	bfa6      	itte	ge
 80095da:	461c      	movge	r4, r3
 80095dc:	2500      	movge	r5, #0
 80095de:	2501      	movlt	r5, #1
 80095e0:	f7ff fd40 	bl	8009064 <_Balloc>
 80095e4:	b920      	cbnz	r0, 80095f0 <__mdiff+0x5c>
 80095e6:	4b2e      	ldr	r3, [pc, #184]	; (80096a0 <__mdiff+0x10c>)
 80095e8:	4602      	mov	r2, r0
 80095ea:	f240 2145 	movw	r1, #581	; 0x245
 80095ee:	e7e5      	b.n	80095bc <__mdiff+0x28>
 80095f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095f4:	6926      	ldr	r6, [r4, #16]
 80095f6:	60c5      	str	r5, [r0, #12]
 80095f8:	f104 0914 	add.w	r9, r4, #20
 80095fc:	f108 0514 	add.w	r5, r8, #20
 8009600:	f100 0e14 	add.w	lr, r0, #20
 8009604:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009608:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800960c:	f108 0210 	add.w	r2, r8, #16
 8009610:	46f2      	mov	sl, lr
 8009612:	2100      	movs	r1, #0
 8009614:	f859 3b04 	ldr.w	r3, [r9], #4
 8009618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800961c:	fa11 f88b 	uxtah	r8, r1, fp
 8009620:	b299      	uxth	r1, r3
 8009622:	0c1b      	lsrs	r3, r3, #16
 8009624:	eba8 0801 	sub.w	r8, r8, r1
 8009628:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800962c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009630:	fa1f f888 	uxth.w	r8, r8
 8009634:	1419      	asrs	r1, r3, #16
 8009636:	454e      	cmp	r6, r9
 8009638:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800963c:	f84a 3b04 	str.w	r3, [sl], #4
 8009640:	d8e8      	bhi.n	8009614 <__mdiff+0x80>
 8009642:	1b33      	subs	r3, r6, r4
 8009644:	3b15      	subs	r3, #21
 8009646:	f023 0303 	bic.w	r3, r3, #3
 800964a:	3304      	adds	r3, #4
 800964c:	3415      	adds	r4, #21
 800964e:	42a6      	cmp	r6, r4
 8009650:	bf38      	it	cc
 8009652:	2304      	movcc	r3, #4
 8009654:	441d      	add	r5, r3
 8009656:	4473      	add	r3, lr
 8009658:	469e      	mov	lr, r3
 800965a:	462e      	mov	r6, r5
 800965c:	4566      	cmp	r6, ip
 800965e:	d30e      	bcc.n	800967e <__mdiff+0xea>
 8009660:	f10c 0203 	add.w	r2, ip, #3
 8009664:	1b52      	subs	r2, r2, r5
 8009666:	f022 0203 	bic.w	r2, r2, #3
 800966a:	3d03      	subs	r5, #3
 800966c:	45ac      	cmp	ip, r5
 800966e:	bf38      	it	cc
 8009670:	2200      	movcc	r2, #0
 8009672:	4413      	add	r3, r2
 8009674:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009678:	b17a      	cbz	r2, 800969a <__mdiff+0x106>
 800967a:	6107      	str	r7, [r0, #16]
 800967c:	e7a4      	b.n	80095c8 <__mdiff+0x34>
 800967e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009682:	fa11 f288 	uxtah	r2, r1, r8
 8009686:	1414      	asrs	r4, r2, #16
 8009688:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800968c:	b292      	uxth	r2, r2
 800968e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009692:	f84e 2b04 	str.w	r2, [lr], #4
 8009696:	1421      	asrs	r1, r4, #16
 8009698:	e7e0      	b.n	800965c <__mdiff+0xc8>
 800969a:	3f01      	subs	r7, #1
 800969c:	e7ea      	b.n	8009674 <__mdiff+0xe0>
 800969e:	bf00      	nop
 80096a0:	0800a66a 	.word	0x0800a66a
 80096a4:	0800a67b 	.word	0x0800a67b

080096a8 <__d2b>:
 80096a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096ac:	460f      	mov	r7, r1
 80096ae:	2101      	movs	r1, #1
 80096b0:	ec59 8b10 	vmov	r8, r9, d0
 80096b4:	4616      	mov	r6, r2
 80096b6:	f7ff fcd5 	bl	8009064 <_Balloc>
 80096ba:	4604      	mov	r4, r0
 80096bc:	b930      	cbnz	r0, 80096cc <__d2b+0x24>
 80096be:	4602      	mov	r2, r0
 80096c0:	4b24      	ldr	r3, [pc, #144]	; (8009754 <__d2b+0xac>)
 80096c2:	4825      	ldr	r0, [pc, #148]	; (8009758 <__d2b+0xb0>)
 80096c4:	f240 310f 	movw	r1, #783	; 0x30f
 80096c8:	f000 fc60 	bl	8009f8c <__assert_func>
 80096cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096d4:	bb2d      	cbnz	r5, 8009722 <__d2b+0x7a>
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f1b8 0300 	subs.w	r3, r8, #0
 80096dc:	d026      	beq.n	800972c <__d2b+0x84>
 80096de:	4668      	mov	r0, sp
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	f7ff fd87 	bl	80091f4 <__lo0bits>
 80096e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096ea:	b1e8      	cbz	r0, 8009728 <__d2b+0x80>
 80096ec:	f1c0 0320 	rsb	r3, r0, #32
 80096f0:	fa02 f303 	lsl.w	r3, r2, r3
 80096f4:	430b      	orrs	r3, r1
 80096f6:	40c2      	lsrs	r2, r0
 80096f8:	6163      	str	r3, [r4, #20]
 80096fa:	9201      	str	r2, [sp, #4]
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	61a3      	str	r3, [r4, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	bf14      	ite	ne
 8009704:	2202      	movne	r2, #2
 8009706:	2201      	moveq	r2, #1
 8009708:	6122      	str	r2, [r4, #16]
 800970a:	b1bd      	cbz	r5, 800973c <__d2b+0x94>
 800970c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009710:	4405      	add	r5, r0
 8009712:	603d      	str	r5, [r7, #0]
 8009714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009718:	6030      	str	r0, [r6, #0]
 800971a:	4620      	mov	r0, r4
 800971c:	b003      	add	sp, #12
 800971e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009726:	e7d6      	b.n	80096d6 <__d2b+0x2e>
 8009728:	6161      	str	r1, [r4, #20]
 800972a:	e7e7      	b.n	80096fc <__d2b+0x54>
 800972c:	a801      	add	r0, sp, #4
 800972e:	f7ff fd61 	bl	80091f4 <__lo0bits>
 8009732:	9b01      	ldr	r3, [sp, #4]
 8009734:	6163      	str	r3, [r4, #20]
 8009736:	3020      	adds	r0, #32
 8009738:	2201      	movs	r2, #1
 800973a:	e7e5      	b.n	8009708 <__d2b+0x60>
 800973c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009740:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009744:	6038      	str	r0, [r7, #0]
 8009746:	6918      	ldr	r0, [r3, #16]
 8009748:	f7ff fd34 	bl	80091b4 <__hi0bits>
 800974c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009750:	e7e2      	b.n	8009718 <__d2b+0x70>
 8009752:	bf00      	nop
 8009754:	0800a66a 	.word	0x0800a66a
 8009758:	0800a67b 	.word	0x0800a67b

0800975c <__ssputs_r>:
 800975c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009760:	688e      	ldr	r6, [r1, #8]
 8009762:	461f      	mov	r7, r3
 8009764:	42be      	cmp	r6, r7
 8009766:	680b      	ldr	r3, [r1, #0]
 8009768:	4682      	mov	sl, r0
 800976a:	460c      	mov	r4, r1
 800976c:	4690      	mov	r8, r2
 800976e:	d82c      	bhi.n	80097ca <__ssputs_r+0x6e>
 8009770:	898a      	ldrh	r2, [r1, #12]
 8009772:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009776:	d026      	beq.n	80097c6 <__ssputs_r+0x6a>
 8009778:	6965      	ldr	r5, [r4, #20]
 800977a:	6909      	ldr	r1, [r1, #16]
 800977c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009780:	eba3 0901 	sub.w	r9, r3, r1
 8009784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009788:	1c7b      	adds	r3, r7, #1
 800978a:	444b      	add	r3, r9
 800978c:	106d      	asrs	r5, r5, #1
 800978e:	429d      	cmp	r5, r3
 8009790:	bf38      	it	cc
 8009792:	461d      	movcc	r5, r3
 8009794:	0553      	lsls	r3, r2, #21
 8009796:	d527      	bpl.n	80097e8 <__ssputs_r+0x8c>
 8009798:	4629      	mov	r1, r5
 800979a:	f7ff fbd7 	bl	8008f4c <_malloc_r>
 800979e:	4606      	mov	r6, r0
 80097a0:	b360      	cbz	r0, 80097fc <__ssputs_r+0xa0>
 80097a2:	6921      	ldr	r1, [r4, #16]
 80097a4:	464a      	mov	r2, r9
 80097a6:	f000 fbe3 	bl	8009f70 <memcpy>
 80097aa:	89a3      	ldrh	r3, [r4, #12]
 80097ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	6126      	str	r6, [r4, #16]
 80097b8:	6165      	str	r5, [r4, #20]
 80097ba:	444e      	add	r6, r9
 80097bc:	eba5 0509 	sub.w	r5, r5, r9
 80097c0:	6026      	str	r6, [r4, #0]
 80097c2:	60a5      	str	r5, [r4, #8]
 80097c4:	463e      	mov	r6, r7
 80097c6:	42be      	cmp	r6, r7
 80097c8:	d900      	bls.n	80097cc <__ssputs_r+0x70>
 80097ca:	463e      	mov	r6, r7
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	4632      	mov	r2, r6
 80097d0:	4641      	mov	r1, r8
 80097d2:	f000 fba3 	bl	8009f1c <memmove>
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	1b9b      	subs	r3, r3, r6
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	4433      	add	r3, r6
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	2000      	movs	r0, #0
 80097e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e8:	462a      	mov	r2, r5
 80097ea:	f000 fc15 	bl	800a018 <_realloc_r>
 80097ee:	4606      	mov	r6, r0
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d1e0      	bne.n	80097b6 <__ssputs_r+0x5a>
 80097f4:	6921      	ldr	r1, [r4, #16]
 80097f6:	4650      	mov	r0, sl
 80097f8:	f7ff fb34 	bl	8008e64 <_free_r>
 80097fc:	230c      	movs	r3, #12
 80097fe:	f8ca 3000 	str.w	r3, [sl]
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	f04f 30ff 	mov.w	r0, #4294967295
 800980e:	e7e9      	b.n	80097e4 <__ssputs_r+0x88>

08009810 <_svfiprintf_r>:
 8009810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009814:	4698      	mov	r8, r3
 8009816:	898b      	ldrh	r3, [r1, #12]
 8009818:	061b      	lsls	r3, r3, #24
 800981a:	b09d      	sub	sp, #116	; 0x74
 800981c:	4607      	mov	r7, r0
 800981e:	460d      	mov	r5, r1
 8009820:	4614      	mov	r4, r2
 8009822:	d50e      	bpl.n	8009842 <_svfiprintf_r+0x32>
 8009824:	690b      	ldr	r3, [r1, #16]
 8009826:	b963      	cbnz	r3, 8009842 <_svfiprintf_r+0x32>
 8009828:	2140      	movs	r1, #64	; 0x40
 800982a:	f7ff fb8f 	bl	8008f4c <_malloc_r>
 800982e:	6028      	str	r0, [r5, #0]
 8009830:	6128      	str	r0, [r5, #16]
 8009832:	b920      	cbnz	r0, 800983e <_svfiprintf_r+0x2e>
 8009834:	230c      	movs	r3, #12
 8009836:	603b      	str	r3, [r7, #0]
 8009838:	f04f 30ff 	mov.w	r0, #4294967295
 800983c:	e0d0      	b.n	80099e0 <_svfiprintf_r+0x1d0>
 800983e:	2340      	movs	r3, #64	; 0x40
 8009840:	616b      	str	r3, [r5, #20]
 8009842:	2300      	movs	r3, #0
 8009844:	9309      	str	r3, [sp, #36]	; 0x24
 8009846:	2320      	movs	r3, #32
 8009848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800984c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009850:	2330      	movs	r3, #48	; 0x30
 8009852:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099f8 <_svfiprintf_r+0x1e8>
 8009856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800985a:	f04f 0901 	mov.w	r9, #1
 800985e:	4623      	mov	r3, r4
 8009860:	469a      	mov	sl, r3
 8009862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009866:	b10a      	cbz	r2, 800986c <_svfiprintf_r+0x5c>
 8009868:	2a25      	cmp	r2, #37	; 0x25
 800986a:	d1f9      	bne.n	8009860 <_svfiprintf_r+0x50>
 800986c:	ebba 0b04 	subs.w	fp, sl, r4
 8009870:	d00b      	beq.n	800988a <_svfiprintf_r+0x7a>
 8009872:	465b      	mov	r3, fp
 8009874:	4622      	mov	r2, r4
 8009876:	4629      	mov	r1, r5
 8009878:	4638      	mov	r0, r7
 800987a:	f7ff ff6f 	bl	800975c <__ssputs_r>
 800987e:	3001      	adds	r0, #1
 8009880:	f000 80a9 	beq.w	80099d6 <_svfiprintf_r+0x1c6>
 8009884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009886:	445a      	add	r2, fp
 8009888:	9209      	str	r2, [sp, #36]	; 0x24
 800988a:	f89a 3000 	ldrb.w	r3, [sl]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 80a1 	beq.w	80099d6 <_svfiprintf_r+0x1c6>
 8009894:	2300      	movs	r3, #0
 8009896:	f04f 32ff 	mov.w	r2, #4294967295
 800989a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800989e:	f10a 0a01 	add.w	sl, sl, #1
 80098a2:	9304      	str	r3, [sp, #16]
 80098a4:	9307      	str	r3, [sp, #28]
 80098a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098aa:	931a      	str	r3, [sp, #104]	; 0x68
 80098ac:	4654      	mov	r4, sl
 80098ae:	2205      	movs	r2, #5
 80098b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b4:	4850      	ldr	r0, [pc, #320]	; (80099f8 <_svfiprintf_r+0x1e8>)
 80098b6:	f7f6 fc8b 	bl	80001d0 <memchr>
 80098ba:	9a04      	ldr	r2, [sp, #16]
 80098bc:	b9d8      	cbnz	r0, 80098f6 <_svfiprintf_r+0xe6>
 80098be:	06d0      	lsls	r0, r2, #27
 80098c0:	bf44      	itt	mi
 80098c2:	2320      	movmi	r3, #32
 80098c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c8:	0711      	lsls	r1, r2, #28
 80098ca:	bf44      	itt	mi
 80098cc:	232b      	movmi	r3, #43	; 0x2b
 80098ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d2:	f89a 3000 	ldrb.w	r3, [sl]
 80098d6:	2b2a      	cmp	r3, #42	; 0x2a
 80098d8:	d015      	beq.n	8009906 <_svfiprintf_r+0xf6>
 80098da:	9a07      	ldr	r2, [sp, #28]
 80098dc:	4654      	mov	r4, sl
 80098de:	2000      	movs	r0, #0
 80098e0:	f04f 0c0a 	mov.w	ip, #10
 80098e4:	4621      	mov	r1, r4
 80098e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ea:	3b30      	subs	r3, #48	; 0x30
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	d94d      	bls.n	800998c <_svfiprintf_r+0x17c>
 80098f0:	b1b0      	cbz	r0, 8009920 <_svfiprintf_r+0x110>
 80098f2:	9207      	str	r2, [sp, #28]
 80098f4:	e014      	b.n	8009920 <_svfiprintf_r+0x110>
 80098f6:	eba0 0308 	sub.w	r3, r0, r8
 80098fa:	fa09 f303 	lsl.w	r3, r9, r3
 80098fe:	4313      	orrs	r3, r2
 8009900:	9304      	str	r3, [sp, #16]
 8009902:	46a2      	mov	sl, r4
 8009904:	e7d2      	b.n	80098ac <_svfiprintf_r+0x9c>
 8009906:	9b03      	ldr	r3, [sp, #12]
 8009908:	1d19      	adds	r1, r3, #4
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	9103      	str	r1, [sp, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	bfbb      	ittet	lt
 8009912:	425b      	neglt	r3, r3
 8009914:	f042 0202 	orrlt.w	r2, r2, #2
 8009918:	9307      	strge	r3, [sp, #28]
 800991a:	9307      	strlt	r3, [sp, #28]
 800991c:	bfb8      	it	lt
 800991e:	9204      	strlt	r2, [sp, #16]
 8009920:	7823      	ldrb	r3, [r4, #0]
 8009922:	2b2e      	cmp	r3, #46	; 0x2e
 8009924:	d10c      	bne.n	8009940 <_svfiprintf_r+0x130>
 8009926:	7863      	ldrb	r3, [r4, #1]
 8009928:	2b2a      	cmp	r3, #42	; 0x2a
 800992a:	d134      	bne.n	8009996 <_svfiprintf_r+0x186>
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	1d1a      	adds	r2, r3, #4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	9203      	str	r2, [sp, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	bfb8      	it	lt
 8009938:	f04f 33ff 	movlt.w	r3, #4294967295
 800993c:	3402      	adds	r4, #2
 800993e:	9305      	str	r3, [sp, #20]
 8009940:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a08 <_svfiprintf_r+0x1f8>
 8009944:	7821      	ldrb	r1, [r4, #0]
 8009946:	2203      	movs	r2, #3
 8009948:	4650      	mov	r0, sl
 800994a:	f7f6 fc41 	bl	80001d0 <memchr>
 800994e:	b138      	cbz	r0, 8009960 <_svfiprintf_r+0x150>
 8009950:	9b04      	ldr	r3, [sp, #16]
 8009952:	eba0 000a 	sub.w	r0, r0, sl
 8009956:	2240      	movs	r2, #64	; 0x40
 8009958:	4082      	lsls	r2, r0
 800995a:	4313      	orrs	r3, r2
 800995c:	3401      	adds	r4, #1
 800995e:	9304      	str	r3, [sp, #16]
 8009960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009964:	4825      	ldr	r0, [pc, #148]	; (80099fc <_svfiprintf_r+0x1ec>)
 8009966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800996a:	2206      	movs	r2, #6
 800996c:	f7f6 fc30 	bl	80001d0 <memchr>
 8009970:	2800      	cmp	r0, #0
 8009972:	d038      	beq.n	80099e6 <_svfiprintf_r+0x1d6>
 8009974:	4b22      	ldr	r3, [pc, #136]	; (8009a00 <_svfiprintf_r+0x1f0>)
 8009976:	bb1b      	cbnz	r3, 80099c0 <_svfiprintf_r+0x1b0>
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	3307      	adds	r3, #7
 800997c:	f023 0307 	bic.w	r3, r3, #7
 8009980:	3308      	adds	r3, #8
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009986:	4433      	add	r3, r6
 8009988:	9309      	str	r3, [sp, #36]	; 0x24
 800998a:	e768      	b.n	800985e <_svfiprintf_r+0x4e>
 800998c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009990:	460c      	mov	r4, r1
 8009992:	2001      	movs	r0, #1
 8009994:	e7a6      	b.n	80098e4 <_svfiprintf_r+0xd4>
 8009996:	2300      	movs	r3, #0
 8009998:	3401      	adds	r4, #1
 800999a:	9305      	str	r3, [sp, #20]
 800999c:	4619      	mov	r1, r3
 800999e:	f04f 0c0a 	mov.w	ip, #10
 80099a2:	4620      	mov	r0, r4
 80099a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a8:	3a30      	subs	r2, #48	; 0x30
 80099aa:	2a09      	cmp	r2, #9
 80099ac:	d903      	bls.n	80099b6 <_svfiprintf_r+0x1a6>
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0c6      	beq.n	8009940 <_svfiprintf_r+0x130>
 80099b2:	9105      	str	r1, [sp, #20]
 80099b4:	e7c4      	b.n	8009940 <_svfiprintf_r+0x130>
 80099b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ba:	4604      	mov	r4, r0
 80099bc:	2301      	movs	r3, #1
 80099be:	e7f0      	b.n	80099a2 <_svfiprintf_r+0x192>
 80099c0:	ab03      	add	r3, sp, #12
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	462a      	mov	r2, r5
 80099c6:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <_svfiprintf_r+0x1f4>)
 80099c8:	a904      	add	r1, sp, #16
 80099ca:	4638      	mov	r0, r7
 80099cc:	f7fd fe52 	bl	8007674 <_printf_float>
 80099d0:	1c42      	adds	r2, r0, #1
 80099d2:	4606      	mov	r6, r0
 80099d4:	d1d6      	bne.n	8009984 <_svfiprintf_r+0x174>
 80099d6:	89ab      	ldrh	r3, [r5, #12]
 80099d8:	065b      	lsls	r3, r3, #25
 80099da:	f53f af2d 	bmi.w	8009838 <_svfiprintf_r+0x28>
 80099de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099e0:	b01d      	add	sp, #116	; 0x74
 80099e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e6:	ab03      	add	r3, sp, #12
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	462a      	mov	r2, r5
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <_svfiprintf_r+0x1f4>)
 80099ee:	a904      	add	r1, sp, #16
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7fe f8e3 	bl	8007bbc <_printf_i>
 80099f6:	e7eb      	b.n	80099d0 <_svfiprintf_r+0x1c0>
 80099f8:	0800a7d4 	.word	0x0800a7d4
 80099fc:	0800a7de 	.word	0x0800a7de
 8009a00:	08007675 	.word	0x08007675
 8009a04:	0800975d 	.word	0x0800975d
 8009a08:	0800a7da 	.word	0x0800a7da

08009a0c <__sfputc_r>:
 8009a0c:	6893      	ldr	r3, [r2, #8]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	b410      	push	{r4}
 8009a14:	6093      	str	r3, [r2, #8]
 8009a16:	da08      	bge.n	8009a2a <__sfputc_r+0x1e>
 8009a18:	6994      	ldr	r4, [r2, #24]
 8009a1a:	42a3      	cmp	r3, r4
 8009a1c:	db01      	blt.n	8009a22 <__sfputc_r+0x16>
 8009a1e:	290a      	cmp	r1, #10
 8009a20:	d103      	bne.n	8009a2a <__sfputc_r+0x1e>
 8009a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a26:	f000 b9e3 	b.w	8009df0 <__swbuf_r>
 8009a2a:	6813      	ldr	r3, [r2, #0]
 8009a2c:	1c58      	adds	r0, r3, #1
 8009a2e:	6010      	str	r0, [r2, #0]
 8009a30:	7019      	strb	r1, [r3, #0]
 8009a32:	4608      	mov	r0, r1
 8009a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <__sfputs_r>:
 8009a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	4614      	mov	r4, r2
 8009a42:	18d5      	adds	r5, r2, r3
 8009a44:	42ac      	cmp	r4, r5
 8009a46:	d101      	bne.n	8009a4c <__sfputs_r+0x12>
 8009a48:	2000      	movs	r0, #0
 8009a4a:	e007      	b.n	8009a5c <__sfputs_r+0x22>
 8009a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a50:	463a      	mov	r2, r7
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7ff ffda 	bl	8009a0c <__sfputc_r>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d1f3      	bne.n	8009a44 <__sfputs_r+0xa>
 8009a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a60 <_vfiprintf_r>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	460d      	mov	r5, r1
 8009a66:	b09d      	sub	sp, #116	; 0x74
 8009a68:	4614      	mov	r4, r2
 8009a6a:	4698      	mov	r8, r3
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	b118      	cbz	r0, 8009a78 <_vfiprintf_r+0x18>
 8009a70:	6a03      	ldr	r3, [r0, #32]
 8009a72:	b90b      	cbnz	r3, 8009a78 <_vfiprintf_r+0x18>
 8009a74:	f7fe fa50 	bl	8007f18 <__sinit>
 8009a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7a:	07d9      	lsls	r1, r3, #31
 8009a7c:	d405      	bmi.n	8009a8a <_vfiprintf_r+0x2a>
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	059a      	lsls	r2, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_vfiprintf_r+0x2a>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f7fe fb70 	bl	800816a <__retarget_lock_acquire_recursive>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	071b      	lsls	r3, r3, #28
 8009a8e:	d501      	bpl.n	8009a94 <_vfiprintf_r+0x34>
 8009a90:	692b      	ldr	r3, [r5, #16]
 8009a92:	b99b      	cbnz	r3, 8009abc <_vfiprintf_r+0x5c>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4630      	mov	r0, r6
 8009a98:	f000 f9e8 	bl	8009e6c <__swsetup_r>
 8009a9c:	b170      	cbz	r0, 8009abc <_vfiprintf_r+0x5c>
 8009a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa0:	07dc      	lsls	r4, r3, #31
 8009aa2:	d504      	bpl.n	8009aae <_vfiprintf_r+0x4e>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	b01d      	add	sp, #116	; 0x74
 8009aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	0598      	lsls	r0, r3, #22
 8009ab2:	d4f7      	bmi.n	8009aa4 <_vfiprintf_r+0x44>
 8009ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ab6:	f7fe fb59 	bl	800816c <__retarget_lock_release_recursive>
 8009aba:	e7f3      	b.n	8009aa4 <_vfiprintf_r+0x44>
 8009abc:	2300      	movs	r3, #0
 8009abe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ac6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aca:	2330      	movs	r3, #48	; 0x30
 8009acc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c80 <_vfiprintf_r+0x220>
 8009ad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ad4:	f04f 0901 	mov.w	r9, #1
 8009ad8:	4623      	mov	r3, r4
 8009ada:	469a      	mov	sl, r3
 8009adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae0:	b10a      	cbz	r2, 8009ae6 <_vfiprintf_r+0x86>
 8009ae2:	2a25      	cmp	r2, #37	; 0x25
 8009ae4:	d1f9      	bne.n	8009ada <_vfiprintf_r+0x7a>
 8009ae6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aea:	d00b      	beq.n	8009b04 <_vfiprintf_r+0xa4>
 8009aec:	465b      	mov	r3, fp
 8009aee:	4622      	mov	r2, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ffa1 	bl	8009a3a <__sfputs_r>
 8009af8:	3001      	adds	r0, #1
 8009afa:	f000 80a9 	beq.w	8009c50 <_vfiprintf_r+0x1f0>
 8009afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b00:	445a      	add	r2, fp
 8009b02:	9209      	str	r2, [sp, #36]	; 0x24
 8009b04:	f89a 3000 	ldrb.w	r3, [sl]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 80a1 	beq.w	8009c50 <_vfiprintf_r+0x1f0>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f04f 32ff 	mov.w	r2, #4294967295
 8009b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b18:	f10a 0a01 	add.w	sl, sl, #1
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	9307      	str	r3, [sp, #28]
 8009b20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b24:	931a      	str	r3, [sp, #104]	; 0x68
 8009b26:	4654      	mov	r4, sl
 8009b28:	2205      	movs	r2, #5
 8009b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2e:	4854      	ldr	r0, [pc, #336]	; (8009c80 <_vfiprintf_r+0x220>)
 8009b30:	f7f6 fb4e 	bl	80001d0 <memchr>
 8009b34:	9a04      	ldr	r2, [sp, #16]
 8009b36:	b9d8      	cbnz	r0, 8009b70 <_vfiprintf_r+0x110>
 8009b38:	06d1      	lsls	r1, r2, #27
 8009b3a:	bf44      	itt	mi
 8009b3c:	2320      	movmi	r3, #32
 8009b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b42:	0713      	lsls	r3, r2, #28
 8009b44:	bf44      	itt	mi
 8009b46:	232b      	movmi	r3, #43	; 0x2b
 8009b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b50:	2b2a      	cmp	r3, #42	; 0x2a
 8009b52:	d015      	beq.n	8009b80 <_vfiprintf_r+0x120>
 8009b54:	9a07      	ldr	r2, [sp, #28]
 8009b56:	4654      	mov	r4, sl
 8009b58:	2000      	movs	r0, #0
 8009b5a:	f04f 0c0a 	mov.w	ip, #10
 8009b5e:	4621      	mov	r1, r4
 8009b60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b64:	3b30      	subs	r3, #48	; 0x30
 8009b66:	2b09      	cmp	r3, #9
 8009b68:	d94d      	bls.n	8009c06 <_vfiprintf_r+0x1a6>
 8009b6a:	b1b0      	cbz	r0, 8009b9a <_vfiprintf_r+0x13a>
 8009b6c:	9207      	str	r2, [sp, #28]
 8009b6e:	e014      	b.n	8009b9a <_vfiprintf_r+0x13a>
 8009b70:	eba0 0308 	sub.w	r3, r0, r8
 8009b74:	fa09 f303 	lsl.w	r3, r9, r3
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	9304      	str	r3, [sp, #16]
 8009b7c:	46a2      	mov	sl, r4
 8009b7e:	e7d2      	b.n	8009b26 <_vfiprintf_r+0xc6>
 8009b80:	9b03      	ldr	r3, [sp, #12]
 8009b82:	1d19      	adds	r1, r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	9103      	str	r1, [sp, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bfbb      	ittet	lt
 8009b8c:	425b      	neglt	r3, r3
 8009b8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b92:	9307      	strge	r3, [sp, #28]
 8009b94:	9307      	strlt	r3, [sp, #28]
 8009b96:	bfb8      	it	lt
 8009b98:	9204      	strlt	r2, [sp, #16]
 8009b9a:	7823      	ldrb	r3, [r4, #0]
 8009b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b9e:	d10c      	bne.n	8009bba <_vfiprintf_r+0x15a>
 8009ba0:	7863      	ldrb	r3, [r4, #1]
 8009ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba4:	d134      	bne.n	8009c10 <_vfiprintf_r+0x1b0>
 8009ba6:	9b03      	ldr	r3, [sp, #12]
 8009ba8:	1d1a      	adds	r2, r3, #4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	9203      	str	r2, [sp, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	bfb8      	it	lt
 8009bb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bb6:	3402      	adds	r4, #2
 8009bb8:	9305      	str	r3, [sp, #20]
 8009bba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c90 <_vfiprintf_r+0x230>
 8009bbe:	7821      	ldrb	r1, [r4, #0]
 8009bc0:	2203      	movs	r2, #3
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	f7f6 fb04 	bl	80001d0 <memchr>
 8009bc8:	b138      	cbz	r0, 8009bda <_vfiprintf_r+0x17a>
 8009bca:	9b04      	ldr	r3, [sp, #16]
 8009bcc:	eba0 000a 	sub.w	r0, r0, sl
 8009bd0:	2240      	movs	r2, #64	; 0x40
 8009bd2:	4082      	lsls	r2, r0
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	3401      	adds	r4, #1
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bde:	4829      	ldr	r0, [pc, #164]	; (8009c84 <_vfiprintf_r+0x224>)
 8009be0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009be4:	2206      	movs	r2, #6
 8009be6:	f7f6 faf3 	bl	80001d0 <memchr>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d03f      	beq.n	8009c6e <_vfiprintf_r+0x20e>
 8009bee:	4b26      	ldr	r3, [pc, #152]	; (8009c88 <_vfiprintf_r+0x228>)
 8009bf0:	bb1b      	cbnz	r3, 8009c3a <_vfiprintf_r+0x1da>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	3307      	adds	r3, #7
 8009bf6:	f023 0307 	bic.w	r3, r3, #7
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c00:	443b      	add	r3, r7
 8009c02:	9309      	str	r3, [sp, #36]	; 0x24
 8009c04:	e768      	b.n	8009ad8 <_vfiprintf_r+0x78>
 8009c06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	e7a6      	b.n	8009b5e <_vfiprintf_r+0xfe>
 8009c10:	2300      	movs	r3, #0
 8009c12:	3401      	adds	r4, #1
 8009c14:	9305      	str	r3, [sp, #20]
 8009c16:	4619      	mov	r1, r3
 8009c18:	f04f 0c0a 	mov.w	ip, #10
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c22:	3a30      	subs	r2, #48	; 0x30
 8009c24:	2a09      	cmp	r2, #9
 8009c26:	d903      	bls.n	8009c30 <_vfiprintf_r+0x1d0>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0c6      	beq.n	8009bba <_vfiprintf_r+0x15a>
 8009c2c:	9105      	str	r1, [sp, #20]
 8009c2e:	e7c4      	b.n	8009bba <_vfiprintf_r+0x15a>
 8009c30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c34:	4604      	mov	r4, r0
 8009c36:	2301      	movs	r3, #1
 8009c38:	e7f0      	b.n	8009c1c <_vfiprintf_r+0x1bc>
 8009c3a:	ab03      	add	r3, sp, #12
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4b12      	ldr	r3, [pc, #72]	; (8009c8c <_vfiprintf_r+0x22c>)
 8009c42:	a904      	add	r1, sp, #16
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7fd fd15 	bl	8007674 <_printf_float>
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	1c78      	adds	r0, r7, #1
 8009c4e:	d1d6      	bne.n	8009bfe <_vfiprintf_r+0x19e>
 8009c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c52:	07d9      	lsls	r1, r3, #31
 8009c54:	d405      	bmi.n	8009c62 <_vfiprintf_r+0x202>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	059a      	lsls	r2, r3, #22
 8009c5a:	d402      	bmi.n	8009c62 <_vfiprintf_r+0x202>
 8009c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c5e:	f7fe fa85 	bl	800816c <__retarget_lock_release_recursive>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	065b      	lsls	r3, r3, #25
 8009c66:	f53f af1d 	bmi.w	8009aa4 <_vfiprintf_r+0x44>
 8009c6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c6c:	e71c      	b.n	8009aa8 <_vfiprintf_r+0x48>
 8009c6e:	ab03      	add	r3, sp, #12
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	462a      	mov	r2, r5
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <_vfiprintf_r+0x22c>)
 8009c76:	a904      	add	r1, sp, #16
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7fd ff9f 	bl	8007bbc <_printf_i>
 8009c7e:	e7e4      	b.n	8009c4a <_vfiprintf_r+0x1ea>
 8009c80:	0800a7d4 	.word	0x0800a7d4
 8009c84:	0800a7de 	.word	0x0800a7de
 8009c88:	08007675 	.word	0x08007675
 8009c8c:	08009a3b 	.word	0x08009a3b
 8009c90:	0800a7da 	.word	0x0800a7da

08009c94 <__sflush_r>:
 8009c94:	898a      	ldrh	r2, [r1, #12]
 8009c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	0710      	lsls	r0, r2, #28
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	d458      	bmi.n	8009d54 <__sflush_r+0xc0>
 8009ca2:	684b      	ldr	r3, [r1, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dc05      	bgt.n	8009cb4 <__sflush_r+0x20>
 8009ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dc02      	bgt.n	8009cb4 <__sflush_r+0x20>
 8009cae:	2000      	movs	r0, #0
 8009cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	d0f9      	beq.n	8009cae <__sflush_r+0x1a>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cc0:	682f      	ldr	r7, [r5, #0]
 8009cc2:	6a21      	ldr	r1, [r4, #32]
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	d032      	beq.n	8009d2e <__sflush_r+0x9a>
 8009cc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	075a      	lsls	r2, r3, #29
 8009cce:	d505      	bpl.n	8009cdc <__sflush_r+0x48>
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	1ac0      	subs	r0, r0, r3
 8009cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cd6:	b10b      	cbz	r3, 8009cdc <__sflush_r+0x48>
 8009cd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cda:	1ac0      	subs	r0, r0, r3
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4602      	mov	r2, r0
 8009ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ce2:	6a21      	ldr	r1, [r4, #32]
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	47b0      	blx	r6
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	d106      	bne.n	8009cfc <__sflush_r+0x68>
 8009cee:	6829      	ldr	r1, [r5, #0]
 8009cf0:	291d      	cmp	r1, #29
 8009cf2:	d82b      	bhi.n	8009d4c <__sflush_r+0xb8>
 8009cf4:	4a29      	ldr	r2, [pc, #164]	; (8009d9c <__sflush_r+0x108>)
 8009cf6:	410a      	asrs	r2, r1
 8009cf8:	07d6      	lsls	r6, r2, #31
 8009cfa:	d427      	bmi.n	8009d4c <__sflush_r+0xb8>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	6062      	str	r2, [r4, #4]
 8009d00:	04d9      	lsls	r1, r3, #19
 8009d02:	6922      	ldr	r2, [r4, #16]
 8009d04:	6022      	str	r2, [r4, #0]
 8009d06:	d504      	bpl.n	8009d12 <__sflush_r+0x7e>
 8009d08:	1c42      	adds	r2, r0, #1
 8009d0a:	d101      	bne.n	8009d10 <__sflush_r+0x7c>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b903      	cbnz	r3, 8009d12 <__sflush_r+0x7e>
 8009d10:	6560      	str	r0, [r4, #84]	; 0x54
 8009d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d14:	602f      	str	r7, [r5, #0]
 8009d16:	2900      	cmp	r1, #0
 8009d18:	d0c9      	beq.n	8009cae <__sflush_r+0x1a>
 8009d1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d1e:	4299      	cmp	r1, r3
 8009d20:	d002      	beq.n	8009d28 <__sflush_r+0x94>
 8009d22:	4628      	mov	r0, r5
 8009d24:	f7ff f89e 	bl	8008e64 <_free_r>
 8009d28:	2000      	movs	r0, #0
 8009d2a:	6360      	str	r0, [r4, #52]	; 0x34
 8009d2c:	e7c0      	b.n	8009cb0 <__sflush_r+0x1c>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b0      	blx	r6
 8009d34:	1c41      	adds	r1, r0, #1
 8009d36:	d1c8      	bne.n	8009cca <__sflush_r+0x36>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0c5      	beq.n	8009cca <__sflush_r+0x36>
 8009d3e:	2b1d      	cmp	r3, #29
 8009d40:	d001      	beq.n	8009d46 <__sflush_r+0xb2>
 8009d42:	2b16      	cmp	r3, #22
 8009d44:	d101      	bne.n	8009d4a <__sflush_r+0xb6>
 8009d46:	602f      	str	r7, [r5, #0]
 8009d48:	e7b1      	b.n	8009cae <__sflush_r+0x1a>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d50:	81a3      	strh	r3, [r4, #12]
 8009d52:	e7ad      	b.n	8009cb0 <__sflush_r+0x1c>
 8009d54:	690f      	ldr	r7, [r1, #16]
 8009d56:	2f00      	cmp	r7, #0
 8009d58:	d0a9      	beq.n	8009cae <__sflush_r+0x1a>
 8009d5a:	0793      	lsls	r3, r2, #30
 8009d5c:	680e      	ldr	r6, [r1, #0]
 8009d5e:	bf08      	it	eq
 8009d60:	694b      	ldreq	r3, [r1, #20]
 8009d62:	600f      	str	r7, [r1, #0]
 8009d64:	bf18      	it	ne
 8009d66:	2300      	movne	r3, #0
 8009d68:	eba6 0807 	sub.w	r8, r6, r7
 8009d6c:	608b      	str	r3, [r1, #8]
 8009d6e:	f1b8 0f00 	cmp.w	r8, #0
 8009d72:	dd9c      	ble.n	8009cae <__sflush_r+0x1a>
 8009d74:	6a21      	ldr	r1, [r4, #32]
 8009d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d78:	4643      	mov	r3, r8
 8009d7a:	463a      	mov	r2, r7
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b0      	blx	r6
 8009d80:	2800      	cmp	r0, #0
 8009d82:	dc06      	bgt.n	8009d92 <__sflush_r+0xfe>
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	e78e      	b.n	8009cb0 <__sflush_r+0x1c>
 8009d92:	4407      	add	r7, r0
 8009d94:	eba8 0800 	sub.w	r8, r8, r0
 8009d98:	e7e9      	b.n	8009d6e <__sflush_r+0xda>
 8009d9a:	bf00      	nop
 8009d9c:	dfbffffe 	.word	0xdfbffffe

08009da0 <_fflush_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	690b      	ldr	r3, [r1, #16]
 8009da4:	4605      	mov	r5, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	b913      	cbnz	r3, 8009db0 <_fflush_r+0x10>
 8009daa:	2500      	movs	r5, #0
 8009dac:	4628      	mov	r0, r5
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	b118      	cbz	r0, 8009dba <_fflush_r+0x1a>
 8009db2:	6a03      	ldr	r3, [r0, #32]
 8009db4:	b90b      	cbnz	r3, 8009dba <_fflush_r+0x1a>
 8009db6:	f7fe f8af 	bl	8007f18 <__sinit>
 8009dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d0f3      	beq.n	8009daa <_fflush_r+0xa>
 8009dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dc4:	07d0      	lsls	r0, r2, #31
 8009dc6:	d404      	bmi.n	8009dd2 <_fflush_r+0x32>
 8009dc8:	0599      	lsls	r1, r3, #22
 8009dca:	d402      	bmi.n	8009dd2 <_fflush_r+0x32>
 8009dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dce:	f7fe f9cc 	bl	800816a <__retarget_lock_acquire_recursive>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	f7ff ff5d 	bl	8009c94 <__sflush_r>
 8009dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ddc:	07da      	lsls	r2, r3, #31
 8009dde:	4605      	mov	r5, r0
 8009de0:	d4e4      	bmi.n	8009dac <_fflush_r+0xc>
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	059b      	lsls	r3, r3, #22
 8009de6:	d4e1      	bmi.n	8009dac <_fflush_r+0xc>
 8009de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dea:	f7fe f9bf 	bl	800816c <__retarget_lock_release_recursive>
 8009dee:	e7dd      	b.n	8009dac <_fflush_r+0xc>

08009df0 <__swbuf_r>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	460e      	mov	r6, r1
 8009df4:	4614      	mov	r4, r2
 8009df6:	4605      	mov	r5, r0
 8009df8:	b118      	cbz	r0, 8009e02 <__swbuf_r+0x12>
 8009dfa:	6a03      	ldr	r3, [r0, #32]
 8009dfc:	b90b      	cbnz	r3, 8009e02 <__swbuf_r+0x12>
 8009dfe:	f7fe f88b 	bl	8007f18 <__sinit>
 8009e02:	69a3      	ldr	r3, [r4, #24]
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	071a      	lsls	r2, r3, #28
 8009e0a:	d525      	bpl.n	8009e58 <__swbuf_r+0x68>
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	b31b      	cbz	r3, 8009e58 <__swbuf_r+0x68>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	6922      	ldr	r2, [r4, #16]
 8009e14:	1a98      	subs	r0, r3, r2
 8009e16:	6963      	ldr	r3, [r4, #20]
 8009e18:	b2f6      	uxtb	r6, r6
 8009e1a:	4283      	cmp	r3, r0
 8009e1c:	4637      	mov	r7, r6
 8009e1e:	dc04      	bgt.n	8009e2a <__swbuf_r+0x3a>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	f7ff ffbc 	bl	8009da0 <_fflush_r>
 8009e28:	b9e0      	cbnz	r0, 8009e64 <__swbuf_r+0x74>
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	60a3      	str	r3, [r4, #8]
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	1c5a      	adds	r2, r3, #1
 8009e34:	6022      	str	r2, [r4, #0]
 8009e36:	701e      	strb	r6, [r3, #0]
 8009e38:	6962      	ldr	r2, [r4, #20]
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d004      	beq.n	8009e4a <__swbuf_r+0x5a>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	07db      	lsls	r3, r3, #31
 8009e44:	d506      	bpl.n	8009e54 <__swbuf_r+0x64>
 8009e46:	2e0a      	cmp	r6, #10
 8009e48:	d104      	bne.n	8009e54 <__swbuf_r+0x64>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f7ff ffa7 	bl	8009da0 <_fflush_r>
 8009e52:	b938      	cbnz	r0, 8009e64 <__swbuf_r+0x74>
 8009e54:	4638      	mov	r0, r7
 8009e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 f806 	bl	8009e6c <__swsetup_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d0d5      	beq.n	8009e10 <__swbuf_r+0x20>
 8009e64:	f04f 37ff 	mov.w	r7, #4294967295
 8009e68:	e7f4      	b.n	8009e54 <__swbuf_r+0x64>
	...

08009e6c <__swsetup_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <__swsetup_r+0xac>)
 8009e70:	4605      	mov	r5, r0
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	460c      	mov	r4, r1
 8009e76:	b118      	cbz	r0, 8009e80 <__swsetup_r+0x14>
 8009e78:	6a03      	ldr	r3, [r0, #32]
 8009e7a:	b90b      	cbnz	r3, 8009e80 <__swsetup_r+0x14>
 8009e7c:	f7fe f84c 	bl	8007f18 <__sinit>
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e86:	0718      	lsls	r0, r3, #28
 8009e88:	d422      	bmi.n	8009ed0 <__swsetup_r+0x64>
 8009e8a:	06d9      	lsls	r1, r3, #27
 8009e8c:	d407      	bmi.n	8009e9e <__swsetup_r+0x32>
 8009e8e:	2309      	movs	r3, #9
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e96:	81a3      	strh	r3, [r4, #12]
 8009e98:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9c:	e034      	b.n	8009f08 <__swsetup_r+0x9c>
 8009e9e:	0758      	lsls	r0, r3, #29
 8009ea0:	d512      	bpl.n	8009ec8 <__swsetup_r+0x5c>
 8009ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ea4:	b141      	cbz	r1, 8009eb8 <__swsetup_r+0x4c>
 8009ea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009eaa:	4299      	cmp	r1, r3
 8009eac:	d002      	beq.n	8009eb4 <__swsetup_r+0x48>
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f7fe ffd8 	bl	8008e64 <_free_r>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	6363      	str	r3, [r4, #52]	; 0x34
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	6063      	str	r3, [r4, #4]
 8009ec4:	6923      	ldr	r3, [r4, #16]
 8009ec6:	6023      	str	r3, [r4, #0]
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	f043 0308 	orr.w	r3, r3, #8
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	b94b      	cbnz	r3, 8009ee8 <__swsetup_r+0x7c>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ede:	d003      	beq.n	8009ee8 <__swsetup_r+0x7c>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f000 f90c 	bl	800a100 <__smakebuf_r>
 8009ee8:	89a0      	ldrh	r0, [r4, #12]
 8009eea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eee:	f010 0301 	ands.w	r3, r0, #1
 8009ef2:	d00a      	beq.n	8009f0a <__swsetup_r+0x9e>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60a3      	str	r3, [r4, #8]
 8009ef8:	6963      	ldr	r3, [r4, #20]
 8009efa:	425b      	negs	r3, r3
 8009efc:	61a3      	str	r3, [r4, #24]
 8009efe:	6923      	ldr	r3, [r4, #16]
 8009f00:	b943      	cbnz	r3, 8009f14 <__swsetup_r+0xa8>
 8009f02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f06:	d1c4      	bne.n	8009e92 <__swsetup_r+0x26>
 8009f08:	bd38      	pop	{r3, r4, r5, pc}
 8009f0a:	0781      	lsls	r1, r0, #30
 8009f0c:	bf58      	it	pl
 8009f0e:	6963      	ldrpl	r3, [r4, #20]
 8009f10:	60a3      	str	r3, [r4, #8]
 8009f12:	e7f4      	b.n	8009efe <__swsetup_r+0x92>
 8009f14:	2000      	movs	r0, #0
 8009f16:	e7f7      	b.n	8009f08 <__swsetup_r+0x9c>
 8009f18:	20000064 	.word	0x20000064

08009f1c <memmove>:
 8009f1c:	4288      	cmp	r0, r1
 8009f1e:	b510      	push	{r4, lr}
 8009f20:	eb01 0402 	add.w	r4, r1, r2
 8009f24:	d902      	bls.n	8009f2c <memmove+0x10>
 8009f26:	4284      	cmp	r4, r0
 8009f28:	4623      	mov	r3, r4
 8009f2a:	d807      	bhi.n	8009f3c <memmove+0x20>
 8009f2c:	1e43      	subs	r3, r0, #1
 8009f2e:	42a1      	cmp	r1, r4
 8009f30:	d008      	beq.n	8009f44 <memmove+0x28>
 8009f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f3a:	e7f8      	b.n	8009f2e <memmove+0x12>
 8009f3c:	4402      	add	r2, r0
 8009f3e:	4601      	mov	r1, r0
 8009f40:	428a      	cmp	r2, r1
 8009f42:	d100      	bne.n	8009f46 <memmove+0x2a>
 8009f44:	bd10      	pop	{r4, pc}
 8009f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f4e:	e7f7      	b.n	8009f40 <memmove+0x24>

08009f50 <_sbrk_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d06      	ldr	r5, [pc, #24]	; (8009f6c <_sbrk_r+0x1c>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	f7f8 f906 	bl	800216c <_sbrk>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_sbrk_r+0x1a>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_sbrk_r+0x1a>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	2000086c 	.word	0x2000086c

08009f70 <memcpy>:
 8009f70:	440a      	add	r2, r1
 8009f72:	4291      	cmp	r1, r2
 8009f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f78:	d100      	bne.n	8009f7c <memcpy+0xc>
 8009f7a:	4770      	bx	lr
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f86:	4291      	cmp	r1, r2
 8009f88:	d1f9      	bne.n	8009f7e <memcpy+0xe>
 8009f8a:	bd10      	pop	{r4, pc}

08009f8c <__assert_func>:
 8009f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f8e:	4614      	mov	r4, r2
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b09      	ldr	r3, [pc, #36]	; (8009fb8 <__assert_func+0x2c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4605      	mov	r5, r0
 8009f98:	68d8      	ldr	r0, [r3, #12]
 8009f9a:	b14c      	cbz	r4, 8009fb0 <__assert_func+0x24>
 8009f9c:	4b07      	ldr	r3, [pc, #28]	; (8009fbc <__assert_func+0x30>)
 8009f9e:	9100      	str	r1, [sp, #0]
 8009fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fa4:	4906      	ldr	r1, [pc, #24]	; (8009fc0 <__assert_func+0x34>)
 8009fa6:	462b      	mov	r3, r5
 8009fa8:	f000 f872 	bl	800a090 <fiprintf>
 8009fac:	f000 f906 	bl	800a1bc <abort>
 8009fb0:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <__assert_func+0x38>)
 8009fb2:	461c      	mov	r4, r3
 8009fb4:	e7f3      	b.n	8009f9e <__assert_func+0x12>
 8009fb6:	bf00      	nop
 8009fb8:	20000064 	.word	0x20000064
 8009fbc:	0800a7ef 	.word	0x0800a7ef
 8009fc0:	0800a7fc 	.word	0x0800a7fc
 8009fc4:	0800a82a 	.word	0x0800a82a

08009fc8 <_calloc_r>:
 8009fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fca:	fba1 2402 	umull	r2, r4, r1, r2
 8009fce:	b94c      	cbnz	r4, 8009fe4 <_calloc_r+0x1c>
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	9201      	str	r2, [sp, #4]
 8009fd4:	f7fe ffba 	bl	8008f4c <_malloc_r>
 8009fd8:	9a01      	ldr	r2, [sp, #4]
 8009fda:	4605      	mov	r5, r0
 8009fdc:	b930      	cbnz	r0, 8009fec <_calloc_r+0x24>
 8009fde:	4628      	mov	r0, r5
 8009fe0:	b003      	add	sp, #12
 8009fe2:	bd30      	pop	{r4, r5, pc}
 8009fe4:	220c      	movs	r2, #12
 8009fe6:	6002      	str	r2, [r0, #0]
 8009fe8:	2500      	movs	r5, #0
 8009fea:	e7f8      	b.n	8009fde <_calloc_r+0x16>
 8009fec:	4621      	mov	r1, r4
 8009fee:	f7fe f83e 	bl	800806e <memset>
 8009ff2:	e7f4      	b.n	8009fde <_calloc_r+0x16>

08009ff4 <__ascii_mbtowc>:
 8009ff4:	b082      	sub	sp, #8
 8009ff6:	b901      	cbnz	r1, 8009ffa <__ascii_mbtowc+0x6>
 8009ff8:	a901      	add	r1, sp, #4
 8009ffa:	b142      	cbz	r2, 800a00e <__ascii_mbtowc+0x1a>
 8009ffc:	b14b      	cbz	r3, 800a012 <__ascii_mbtowc+0x1e>
 8009ffe:	7813      	ldrb	r3, [r2, #0]
 800a000:	600b      	str	r3, [r1, #0]
 800a002:	7812      	ldrb	r2, [r2, #0]
 800a004:	1e10      	subs	r0, r2, #0
 800a006:	bf18      	it	ne
 800a008:	2001      	movne	r0, #1
 800a00a:	b002      	add	sp, #8
 800a00c:	4770      	bx	lr
 800a00e:	4610      	mov	r0, r2
 800a010:	e7fb      	b.n	800a00a <__ascii_mbtowc+0x16>
 800a012:	f06f 0001 	mvn.w	r0, #1
 800a016:	e7f8      	b.n	800a00a <__ascii_mbtowc+0x16>

0800a018 <_realloc_r>:
 800a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a01c:	4680      	mov	r8, r0
 800a01e:	4614      	mov	r4, r2
 800a020:	460e      	mov	r6, r1
 800a022:	b921      	cbnz	r1, 800a02e <_realloc_r+0x16>
 800a024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a028:	4611      	mov	r1, r2
 800a02a:	f7fe bf8f 	b.w	8008f4c <_malloc_r>
 800a02e:	b92a      	cbnz	r2, 800a03c <_realloc_r+0x24>
 800a030:	f7fe ff18 	bl	8008e64 <_free_r>
 800a034:	4625      	mov	r5, r4
 800a036:	4628      	mov	r0, r5
 800a038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a03c:	f000 f8c5 	bl	800a1ca <_malloc_usable_size_r>
 800a040:	4284      	cmp	r4, r0
 800a042:	4607      	mov	r7, r0
 800a044:	d802      	bhi.n	800a04c <_realloc_r+0x34>
 800a046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a04a:	d812      	bhi.n	800a072 <_realloc_r+0x5a>
 800a04c:	4621      	mov	r1, r4
 800a04e:	4640      	mov	r0, r8
 800a050:	f7fe ff7c 	bl	8008f4c <_malloc_r>
 800a054:	4605      	mov	r5, r0
 800a056:	2800      	cmp	r0, #0
 800a058:	d0ed      	beq.n	800a036 <_realloc_r+0x1e>
 800a05a:	42bc      	cmp	r4, r7
 800a05c:	4622      	mov	r2, r4
 800a05e:	4631      	mov	r1, r6
 800a060:	bf28      	it	cs
 800a062:	463a      	movcs	r2, r7
 800a064:	f7ff ff84 	bl	8009f70 <memcpy>
 800a068:	4631      	mov	r1, r6
 800a06a:	4640      	mov	r0, r8
 800a06c:	f7fe fefa 	bl	8008e64 <_free_r>
 800a070:	e7e1      	b.n	800a036 <_realloc_r+0x1e>
 800a072:	4635      	mov	r5, r6
 800a074:	e7df      	b.n	800a036 <_realloc_r+0x1e>

0800a076 <__ascii_wctomb>:
 800a076:	b149      	cbz	r1, 800a08c <__ascii_wctomb+0x16>
 800a078:	2aff      	cmp	r2, #255	; 0xff
 800a07a:	bf85      	ittet	hi
 800a07c:	238a      	movhi	r3, #138	; 0x8a
 800a07e:	6003      	strhi	r3, [r0, #0]
 800a080:	700a      	strbls	r2, [r1, #0]
 800a082:	f04f 30ff 	movhi.w	r0, #4294967295
 800a086:	bf98      	it	ls
 800a088:	2001      	movls	r0, #1
 800a08a:	4770      	bx	lr
 800a08c:	4608      	mov	r0, r1
 800a08e:	4770      	bx	lr

0800a090 <fiprintf>:
 800a090:	b40e      	push	{r1, r2, r3}
 800a092:	b503      	push	{r0, r1, lr}
 800a094:	4601      	mov	r1, r0
 800a096:	ab03      	add	r3, sp, #12
 800a098:	4805      	ldr	r0, [pc, #20]	; (800a0b0 <fiprintf+0x20>)
 800a09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a09e:	6800      	ldr	r0, [r0, #0]
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	f7ff fcdd 	bl	8009a60 <_vfiprintf_r>
 800a0a6:	b002      	add	sp, #8
 800a0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0ac:	b003      	add	sp, #12
 800a0ae:	4770      	bx	lr
 800a0b0:	20000064 	.word	0x20000064

0800a0b4 <__swhatbuf_r>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0bc:	2900      	cmp	r1, #0
 800a0be:	b096      	sub	sp, #88	; 0x58
 800a0c0:	4615      	mov	r5, r2
 800a0c2:	461e      	mov	r6, r3
 800a0c4:	da0d      	bge.n	800a0e2 <__swhatbuf_r+0x2e>
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0cc:	f04f 0100 	mov.w	r1, #0
 800a0d0:	bf0c      	ite	eq
 800a0d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a0d6:	2340      	movne	r3, #64	; 0x40
 800a0d8:	2000      	movs	r0, #0
 800a0da:	6031      	str	r1, [r6, #0]
 800a0dc:	602b      	str	r3, [r5, #0]
 800a0de:	b016      	add	sp, #88	; 0x58
 800a0e0:	bd70      	pop	{r4, r5, r6, pc}
 800a0e2:	466a      	mov	r2, sp
 800a0e4:	f000 f848 	bl	800a178 <_fstat_r>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	dbec      	blt.n	800a0c6 <__swhatbuf_r+0x12>
 800a0ec:	9901      	ldr	r1, [sp, #4]
 800a0ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a0f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a0f6:	4259      	negs	r1, r3
 800a0f8:	4159      	adcs	r1, r3
 800a0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0fe:	e7eb      	b.n	800a0d8 <__swhatbuf_r+0x24>

0800a100 <__smakebuf_r>:
 800a100:	898b      	ldrh	r3, [r1, #12]
 800a102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a104:	079d      	lsls	r5, r3, #30
 800a106:	4606      	mov	r6, r0
 800a108:	460c      	mov	r4, r1
 800a10a:	d507      	bpl.n	800a11c <__smakebuf_r+0x1c>
 800a10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	6123      	str	r3, [r4, #16]
 800a114:	2301      	movs	r3, #1
 800a116:	6163      	str	r3, [r4, #20]
 800a118:	b002      	add	sp, #8
 800a11a:	bd70      	pop	{r4, r5, r6, pc}
 800a11c:	ab01      	add	r3, sp, #4
 800a11e:	466a      	mov	r2, sp
 800a120:	f7ff ffc8 	bl	800a0b4 <__swhatbuf_r>
 800a124:	9900      	ldr	r1, [sp, #0]
 800a126:	4605      	mov	r5, r0
 800a128:	4630      	mov	r0, r6
 800a12a:	f7fe ff0f 	bl	8008f4c <_malloc_r>
 800a12e:	b948      	cbnz	r0, 800a144 <__smakebuf_r+0x44>
 800a130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a134:	059a      	lsls	r2, r3, #22
 800a136:	d4ef      	bmi.n	800a118 <__smakebuf_r+0x18>
 800a138:	f023 0303 	bic.w	r3, r3, #3
 800a13c:	f043 0302 	orr.w	r3, r3, #2
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	e7e3      	b.n	800a10c <__smakebuf_r+0xc>
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	6020      	str	r0, [r4, #0]
 800a148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a14c:	81a3      	strh	r3, [r4, #12]
 800a14e:	9b00      	ldr	r3, [sp, #0]
 800a150:	6163      	str	r3, [r4, #20]
 800a152:	9b01      	ldr	r3, [sp, #4]
 800a154:	6120      	str	r0, [r4, #16]
 800a156:	b15b      	cbz	r3, 800a170 <__smakebuf_r+0x70>
 800a158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a15c:	4630      	mov	r0, r6
 800a15e:	f000 f81d 	bl	800a19c <_isatty_r>
 800a162:	b128      	cbz	r0, 800a170 <__smakebuf_r+0x70>
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	f043 0301 	orr.w	r3, r3, #1
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	431d      	orrs	r5, r3
 800a174:	81a5      	strh	r5, [r4, #12]
 800a176:	e7cf      	b.n	800a118 <__smakebuf_r+0x18>

0800a178 <_fstat_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4d07      	ldr	r5, [pc, #28]	; (800a198 <_fstat_r+0x20>)
 800a17c:	2300      	movs	r3, #0
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	4611      	mov	r1, r2
 800a184:	602b      	str	r3, [r5, #0]
 800a186:	f7f7 ffe7 	bl	8002158 <_fstat>
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	d102      	bne.n	800a194 <_fstat_r+0x1c>
 800a18e:	682b      	ldr	r3, [r5, #0]
 800a190:	b103      	cbz	r3, 800a194 <_fstat_r+0x1c>
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	bd38      	pop	{r3, r4, r5, pc}
 800a196:	bf00      	nop
 800a198:	2000086c 	.word	0x2000086c

0800a19c <_isatty_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4d06      	ldr	r5, [pc, #24]	; (800a1b8 <_isatty_r+0x1c>)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	602b      	str	r3, [r5, #0]
 800a1a8:	f7f7 ffdc 	bl	8002164 <_isatty>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_isatty_r+0x1a>
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_isatty_r+0x1a>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	2000086c 	.word	0x2000086c

0800a1bc <abort>:
 800a1bc:	b508      	push	{r3, lr}
 800a1be:	2006      	movs	r0, #6
 800a1c0:	f000 f834 	bl	800a22c <raise>
 800a1c4:	2001      	movs	r0, #1
 800a1c6:	f7f7 ffa1 	bl	800210c <_exit>

0800a1ca <_malloc_usable_size_r>:
 800a1ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ce:	1f18      	subs	r0, r3, #4
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bfbc      	itt	lt
 800a1d4:	580b      	ldrlt	r3, [r1, r0]
 800a1d6:	18c0      	addlt	r0, r0, r3
 800a1d8:	4770      	bx	lr

0800a1da <_raise_r>:
 800a1da:	291f      	cmp	r1, #31
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	4604      	mov	r4, r0
 800a1e0:	460d      	mov	r5, r1
 800a1e2:	d904      	bls.n	800a1ee <_raise_r+0x14>
 800a1e4:	2316      	movs	r3, #22
 800a1e6:	6003      	str	r3, [r0, #0]
 800a1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ec:	bd38      	pop	{r3, r4, r5, pc}
 800a1ee:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a1f0:	b112      	cbz	r2, 800a1f8 <_raise_r+0x1e>
 800a1f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1f6:	b94b      	cbnz	r3, 800a20c <_raise_r+0x32>
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 f831 	bl	800a260 <_getpid_r>
 800a1fe:	462a      	mov	r2, r5
 800a200:	4601      	mov	r1, r0
 800a202:	4620      	mov	r0, r4
 800a204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a208:	f000 b818 	b.w	800a23c <_kill_r>
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d00a      	beq.n	800a226 <_raise_r+0x4c>
 800a210:	1c59      	adds	r1, r3, #1
 800a212:	d103      	bne.n	800a21c <_raise_r+0x42>
 800a214:	2316      	movs	r3, #22
 800a216:	6003      	str	r3, [r0, #0]
 800a218:	2001      	movs	r0, #1
 800a21a:	e7e7      	b.n	800a1ec <_raise_r+0x12>
 800a21c:	2400      	movs	r4, #0
 800a21e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a222:	4628      	mov	r0, r5
 800a224:	4798      	blx	r3
 800a226:	2000      	movs	r0, #0
 800a228:	e7e0      	b.n	800a1ec <_raise_r+0x12>
	...

0800a22c <raise>:
 800a22c:	4b02      	ldr	r3, [pc, #8]	; (800a238 <raise+0xc>)
 800a22e:	4601      	mov	r1, r0
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	f7ff bfd2 	b.w	800a1da <_raise_r>
 800a236:	bf00      	nop
 800a238:	20000064 	.word	0x20000064

0800a23c <_kill_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d07      	ldr	r5, [pc, #28]	; (800a25c <_kill_r+0x20>)
 800a240:	2300      	movs	r3, #0
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	4611      	mov	r1, r2
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	f7f7 ff57 	bl	80020fc <_kill>
 800a24e:	1c43      	adds	r3, r0, #1
 800a250:	d102      	bne.n	800a258 <_kill_r+0x1c>
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	b103      	cbz	r3, 800a258 <_kill_r+0x1c>
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	bf00      	nop
 800a25c:	2000086c 	.word	0x2000086c

0800a260 <_getpid_r>:
 800a260:	f7f7 bf4a 	b.w	80020f8 <_getpid>

0800a264 <_init>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr

0800a270 <_fini>:
 800a270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a272:	bf00      	nop
 800a274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a276:	bc08      	pop	{r3}
 800a278:	469e      	mov	lr, r3
 800a27a:	4770      	bx	lr
